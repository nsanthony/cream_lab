//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:40:36 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Thread.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TConditionImp_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TConditionImp(void *p);
   static void deleteArray_TConditionImp(void *p);
   static void destruct_TConditionImp(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TConditionImp*)
   {
      ::TConditionImp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TConditionImp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TConditionImp", ::TConditionImp::Class_Version(), "include/TConditionImp.h", 33,
                  typeid(::TConditionImp), DefineBehavior(ptr, ptr),
                  &::TConditionImp::Dictionary, isa_proxy, 0,
                  sizeof(::TConditionImp) );
      instance.SetDelete(&delete_TConditionImp);
      instance.SetDeleteArray(&deleteArray_TConditionImp);
      instance.SetDestructor(&destruct_TConditionImp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TConditionImp*)
   {
      return GenerateInitInstanceLocal((::TConditionImp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TConditionImp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMutex_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMutex(void *p = 0);
   static void *newArray_TMutex(Long_t size, void *p);
   static void delete_TMutex(void *p);
   static void deleteArray_TMutex(void *p);
   static void destruct_TMutex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMutex*)
   {
      ::TMutex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMutex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMutex", ::TMutex::Class_Version(), "include/TMutex.h", 37,
                  typeid(::TMutex), DefineBehavior(ptr, ptr),
                  &::TMutex::Dictionary, isa_proxy, 0,
                  sizeof(::TMutex) );
      instance.SetNew(&new_TMutex);
      instance.SetNewArray(&newArray_TMutex);
      instance.SetDelete(&delete_TMutex);
      instance.SetDeleteArray(&deleteArray_TMutex);
      instance.SetDestructor(&destruct_TMutex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMutex*)
   {
      return GenerateInitInstanceLocal((::TMutex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMutex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCondition_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TCondition(void *p = 0);
   static void *newArray_TCondition(Long_t size, void *p);
   static void delete_TCondition(void *p);
   static void deleteArray_TCondition(void *p);
   static void destruct_TCondition(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCondition*)
   {
      ::TCondition *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCondition >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCondition", ::TCondition::Class_Version(), "include/TCondition.h", 36,
                  typeid(::TCondition), DefineBehavior(ptr, ptr),
                  &::TCondition::Dictionary, isa_proxy, 0,
                  sizeof(::TCondition) );
      instance.SetNew(&new_TCondition);
      instance.SetNewArray(&newArray_TCondition);
      instance.SetDelete(&delete_TCondition);
      instance.SetDeleteArray(&deleteArray_TCondition);
      instance.SetDestructor(&destruct_TCondition);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCondition*)
   {
      return GenerateInitInstanceLocal((::TCondition*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCondition*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TThread_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TThread(void *p = 0);
   static void *newArray_TThread(Long_t size, void *p);
   static void delete_TThread(void *p);
   static void deleteArray_TThread(void *p);
   static void destruct_TThread(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TThread*)
   {
      ::TThread *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TThread >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TThread", ::TThread::Class_Version(), "include/TThread.h", 49,
                  typeid(::TThread), DefineBehavior(ptr, ptr),
                  &::TThread::Dictionary, isa_proxy, 0,
                  sizeof(::TThread) );
      instance.SetNew(&new_TThread);
      instance.SetNewArray(&newArray_TThread);
      instance.SetDelete(&delete_TThread);
      instance.SetDeleteArray(&deleteArray_TThread);
      instance.SetDestructor(&destruct_TThread);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TThread*)
   {
      return GenerateInitInstanceLocal((::TThread*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TThread*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TThreadImp_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TThreadImp(void *p);
   static void deleteArray_TThreadImp(void *p);
   static void destruct_TThreadImp(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TThreadImp*)
   {
      ::TThreadImp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TThreadImp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TThreadImp", ::TThreadImp::Class_Version(), "include/TThreadImp.h", 34,
                  typeid(::TThreadImp), DefineBehavior(ptr, ptr),
                  &::TThreadImp::Dictionary, isa_proxy, 0,
                  sizeof(::TThreadImp) );
      instance.SetDelete(&delete_TThreadImp);
      instance.SetDeleteArray(&deleteArray_TThreadImp);
      instance.SetDestructor(&destruct_TThreadImp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TThreadImp*)
   {
      return GenerateInitInstanceLocal((::TThreadImp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TThreadImp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPosixThread_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPosixThread(void *p = 0);
   static void *newArray_TPosixThread(Long_t size, void *p);
   static void delete_TPosixThread(void *p);
   static void deleteArray_TPosixThread(void *p);
   static void destruct_TPosixThread(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPosixThread*)
   {
      ::TPosixThread *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPosixThread >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPosixThread", ::TPosixThread::Class_Version(), "include/TPosixThread.h", 37,
                  typeid(::TPosixThread), DefineBehavior(ptr, ptr),
                  &::TPosixThread::Dictionary, isa_proxy, 0,
                  sizeof(::TPosixThread) );
      instance.SetNew(&new_TPosixThread);
      instance.SetNewArray(&newArray_TPosixThread);
      instance.SetDelete(&delete_TPosixThread);
      instance.SetDeleteArray(&deleteArray_TPosixThread);
      instance.SetDestructor(&destruct_TPosixThread);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPosixThread*)
   {
      return GenerateInitInstanceLocal((::TPosixThread*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPosixThread*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMutexImp_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMutexImp(void *p);
   static void deleteArray_TMutexImp(void *p);
   static void destruct_TMutexImp(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMutexImp*)
   {
      ::TMutexImp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMutexImp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMutexImp", ::TMutexImp::Class_Version(), "include/TMutexImp.h", 33,
                  typeid(::TMutexImp), DefineBehavior(ptr, ptr),
                  &::TMutexImp::Dictionary, isa_proxy, 0,
                  sizeof(::TMutexImp) );
      instance.SetDelete(&delete_TMutexImp);
      instance.SetDeleteArray(&deleteArray_TMutexImp);
      instance.SetDestructor(&destruct_TMutexImp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMutexImp*)
   {
      return GenerateInitInstanceLocal((::TMutexImp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMutexImp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRWLock_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TRWLock(void *p = 0);
   static void *newArray_TRWLock(Long_t size, void *p);
   static void delete_TRWLock(void *p);
   static void deleteArray_TRWLock(void *p);
   static void destruct_TRWLock(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRWLock*)
   {
      ::TRWLock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRWLock >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRWLock", ::TRWLock::Class_Version(), "include/TRWLock.h", 37,
                  typeid(::TRWLock), DefineBehavior(ptr, ptr),
                  &::TRWLock::Dictionary, isa_proxy, 0,
                  sizeof(::TRWLock) );
      instance.SetNew(&new_TRWLock);
      instance.SetNewArray(&newArray_TRWLock);
      instance.SetDelete(&delete_TRWLock);
      instance.SetDeleteArray(&deleteArray_TRWLock);
      instance.SetDestructor(&destruct_TRWLock);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRWLock*)
   {
      return GenerateInitInstanceLocal((::TRWLock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRWLock*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSemaphore_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSemaphore(void *p = 0);
   static void *newArray_TSemaphore(Long_t size, void *p);
   static void delete_TSemaphore(void *p);
   static void deleteArray_TSemaphore(void *p);
   static void destruct_TSemaphore(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSemaphore*)
   {
      ::TSemaphore *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSemaphore >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSemaphore", ::TSemaphore::Class_Version(), "include/TSemaphore.h", 36,
                  typeid(::TSemaphore), DefineBehavior(ptr, ptr),
                  &::TSemaphore::Dictionary, isa_proxy, 0,
                  sizeof(::TSemaphore) );
      instance.SetNew(&new_TSemaphore);
      instance.SetNewArray(&newArray_TSemaphore);
      instance.SetDelete(&delete_TSemaphore);
      instance.SetDeleteArray(&deleteArray_TSemaphore);
      instance.SetDestructor(&destruct_TSemaphore);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSemaphore*)
   {
      return GenerateInitInstanceLocal((::TSemaphore*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSemaphore*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TThreadFactory_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TThreadFactory(void *p);
   static void deleteArray_TThreadFactory(void *p);
   static void destruct_TThreadFactory(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TThreadFactory*)
   {
      ::TThreadFactory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TThreadFactory >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TThreadFactory", ::TThreadFactory::Class_Version(), "include/TThreadFactory.h", 34,
                  typeid(::TThreadFactory), DefineBehavior(ptr, ptr),
                  &::TThreadFactory::Dictionary, isa_proxy, 0,
                  sizeof(::TThreadFactory) );
      instance.SetDelete(&delete_TThreadFactory);
      instance.SetDeleteArray(&deleteArray_TThreadFactory);
      instance.SetDestructor(&destruct_TThreadFactory);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TThreadFactory*)
   {
      return GenerateInitInstanceLocal((::TThreadFactory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TThreadFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TAtomicCount_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TAtomicCount_Dictionary();
   static void delete_TAtomicCount(void *p);
   static void deleteArray_TAtomicCount(void *p);
   static void destruct_TAtomicCount(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAtomicCount*)
   {
      ::TAtomicCount *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TAtomicCount),0);
      static ::ROOT::TGenericClassInfo 
         instance("TAtomicCount", "include/TAtomicCount.h", 71,
                  typeid(::TAtomicCount), DefineBehavior(ptr, ptr),
                  0, &TAtomicCount_Dictionary, isa_proxy, 0,
                  sizeof(::TAtomicCount) );
      instance.SetDelete(&delete_TAtomicCount);
      instance.SetDeleteArray(&deleteArray_TAtomicCount);
      instance.SetDestructor(&destruct_TAtomicCount);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAtomicCount*)
   {
      return GenerateInitInstanceLocal((::TAtomicCount*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAtomicCount*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TAtomicCount_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TAtomicCount*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TLockFile_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TLockFile(void *p);
   static void deleteArray_TLockFile(void *p);
   static void destruct_TLockFile(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TLockFile*)
   {
      ::TLockFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TLockFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TLockFile", ::TLockFile::Class_Version(), "include/TLockFile.h", 39,
                  typeid(::TLockFile), DefineBehavior(ptr, ptr),
                  &::TLockFile::Dictionary, isa_proxy, 0,
                  sizeof(::TLockFile) );
      instance.SetDelete(&delete_TLockFile);
      instance.SetDeleteArray(&deleteArray_TLockFile);
      instance.SetDestructor(&destruct_TLockFile);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TLockFile*)
   {
      return GenerateInitInstanceLocal((::TLockFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TLockFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPosixMutex_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPosixMutex(void *p = 0);
   static void *newArray_TPosixMutex(Long_t size, void *p);
   static void delete_TPosixMutex(void *p);
   static void deleteArray_TPosixMutex(void *p);
   static void destruct_TPosixMutex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPosixMutex*)
   {
      ::TPosixMutex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPosixMutex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPosixMutex", ::TPosixMutex::Class_Version(), "include/TPosixMutex.h", 34,
                  typeid(::TPosixMutex), DefineBehavior(ptr, ptr),
                  &::TPosixMutex::Dictionary, isa_proxy, 0,
                  sizeof(::TPosixMutex) );
      instance.SetNew(&new_TPosixMutex);
      instance.SetNewArray(&newArray_TPosixMutex);
      instance.SetDelete(&delete_TPosixMutex);
      instance.SetDeleteArray(&deleteArray_TPosixMutex);
      instance.SetDestructor(&destruct_TPosixMutex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPosixMutex*)
   {
      return GenerateInitInstanceLocal((::TPosixMutex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPosixMutex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPosixCondition_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TPosixCondition(void *p);
   static void deleteArray_TPosixCondition(void *p);
   static void destruct_TPosixCondition(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPosixCondition*)
   {
      ::TPosixCondition *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPosixCondition >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPosixCondition", ::TPosixCondition::Class_Version(), "include/TPosixCondition.h", 39,
                  typeid(::TPosixCondition), DefineBehavior(ptr, ptr),
                  &::TPosixCondition::Dictionary, isa_proxy, 0,
                  sizeof(::TPosixCondition) );
      instance.SetDelete(&delete_TPosixCondition);
      instance.SetDeleteArray(&deleteArray_TPosixCondition);
      instance.SetDestructor(&destruct_TPosixCondition);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPosixCondition*)
   {
      return GenerateInitInstanceLocal((::TPosixCondition*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPosixCondition*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPosixThreadFactory_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPosixThreadFactory(void *p = 0);
   static void *newArray_TPosixThreadFactory(Long_t size, void *p);
   static void delete_TPosixThreadFactory(void *p);
   static void deleteArray_TPosixThreadFactory(void *p);
   static void destruct_TPosixThreadFactory(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPosixThreadFactory*)
   {
      ::TPosixThreadFactory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPosixThreadFactory >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPosixThreadFactory", ::TPosixThreadFactory::Class_Version(), "include/TPosixThreadFactory.h", 33,
                  typeid(::TPosixThreadFactory), DefineBehavior(ptr, ptr),
                  &::TPosixThreadFactory::Dictionary, isa_proxy, 0,
                  sizeof(::TPosixThreadFactory) );
      instance.SetNew(&new_TPosixThreadFactory);
      instance.SetNewArray(&newArray_TPosixThreadFactory);
      instance.SetDelete(&delete_TPosixThreadFactory);
      instance.SetDeleteArray(&deleteArray_TPosixThreadFactory);
      instance.SetDestructor(&destruct_TPosixThreadFactory);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPosixThreadFactory*)
   {
      return GenerateInitInstanceLocal((::TPosixThreadFactory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPosixThreadFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TConditionImp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TConditionImp::Class_Name()
{
   return "TConditionImp";
}

//______________________________________________________________________________
const char *TConditionImp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TConditionImp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TConditionImp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TConditionImp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TConditionImp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TConditionImp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TConditionImp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TConditionImp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMutex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMutex::Class_Name()
{
   return "TMutex";
}

//______________________________________________________________________________
const char *TMutex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMutex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMutex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMutex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMutex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMutex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMutex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMutex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCondition::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCondition::Class_Name()
{
   return "TCondition";
}

//______________________________________________________________________________
const char *TCondition::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCondition*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCondition::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCondition*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCondition::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCondition*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCondition::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCondition*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TThread::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TThread::Class_Name()
{
   return "TThread";
}

//______________________________________________________________________________
const char *TThread::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TThread*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TThread::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TThread*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TThread::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TThread*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TThread::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TThread*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TThreadImp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TThreadImp::Class_Name()
{
   return "TThreadImp";
}

//______________________________________________________________________________
const char *TThreadImp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TThreadImp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TThreadImp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TThreadImp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TThreadImp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TThreadImp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TThreadImp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TThreadImp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPosixThread::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPosixThread::Class_Name()
{
   return "TPosixThread";
}

//______________________________________________________________________________
const char *TPosixThread::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPosixThread*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPosixThread::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPosixThread*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPosixThread::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPosixThread*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPosixThread::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPosixThread*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMutexImp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMutexImp::Class_Name()
{
   return "TMutexImp";
}

//______________________________________________________________________________
const char *TMutexImp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMutexImp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMutexImp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMutexImp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMutexImp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMutexImp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMutexImp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMutexImp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRWLock::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRWLock::Class_Name()
{
   return "TRWLock";
}

//______________________________________________________________________________
const char *TRWLock::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRWLock*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRWLock::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRWLock*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRWLock::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRWLock*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRWLock::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRWLock*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSemaphore::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSemaphore::Class_Name()
{
   return "TSemaphore";
}

//______________________________________________________________________________
const char *TSemaphore::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSemaphore*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSemaphore::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSemaphore*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSemaphore::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSemaphore*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSemaphore::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSemaphore*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TThreadFactory::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TThreadFactory::Class_Name()
{
   return "TThreadFactory";
}

//______________________________________________________________________________
const char *TThreadFactory::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TThreadFactory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TThreadFactory::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TThreadFactory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TThreadFactory::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TThreadFactory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TThreadFactory::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TThreadFactory*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TLockFile::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TLockFile::Class_Name()
{
   return "TLockFile";
}

//______________________________________________________________________________
const char *TLockFile::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TLockFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLockFile::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TLockFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLockFile::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TLockFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLockFile::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TLockFile*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPosixMutex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPosixMutex::Class_Name()
{
   return "TPosixMutex";
}

//______________________________________________________________________________
const char *TPosixMutex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPosixMutex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPosixMutex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPosixMutex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPosixMutex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPosixMutex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPosixMutex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPosixMutex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPosixCondition::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPosixCondition::Class_Name()
{
   return "TPosixCondition";
}

//______________________________________________________________________________
const char *TPosixCondition::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPosixCondition*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPosixCondition::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPosixCondition*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPosixCondition::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPosixCondition*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPosixCondition::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPosixCondition*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPosixThreadFactory::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPosixThreadFactory::Class_Name()
{
   return "TPosixThreadFactory";
}

//______________________________________________________________________________
const char *TPosixThreadFactory::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPosixThreadFactory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPosixThreadFactory::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPosixThreadFactory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPosixThreadFactory::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPosixThreadFactory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPosixThreadFactory::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPosixThreadFactory*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TThread::Streamer(TBuffer &R__b)
{
   // Stream an object of class TThread.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void TThread::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TThread.
      TClass *R__cl = ::TThread::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fNext", &fNext);
      R__insp.Inspect(R__cl, R__parent, "*fPrev", &fPrev);
      R__insp.Inspect(R__cl, R__parent, "*fHolder", &fHolder);
      R__insp.Inspect(R__cl, R__parent, "fPriority", &fPriority);
      R__insp.Inspect(R__cl, R__parent, "fState", &fState);
      R__insp.Inspect(R__cl, R__parent, "fStateComing", &fStateComing);
      R__insp.Inspect(R__cl, R__parent, "fId", &fId);
      R__insp.Inspect(R__cl, R__parent, "fHandle", &fHandle);
      R__insp.Inspect(R__cl, R__parent, "fDetached", &fDetached);
      R__insp.Inspect(R__cl, R__parent, "fNamed", &fNamed);
      R__insp.Inspect(R__cl, R__parent, "*fFcnRetn", &fFcnRetn);
      R__insp.Inspect(R__cl, R__parent, "*fFcnVoid", &fFcnVoid);
      R__insp.Inspect(R__cl, R__parent, "*fThreadArg", &fThreadArg);
      R__insp.Inspect(R__cl, R__parent, "*fClean", &fClean);
      R__insp.Inspect(R__cl, R__parent, "*fTsd[20]", &fTsd);
      R__insp.Inspect(R__cl, R__parent, "fComment[100]", fComment);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TThread(void *p) {
      return  p ? new(p) ::TThread : new ::TThread;
   }
   static void *newArray_TThread(Long_t nElements, void *p) {
      return p ? new(p) ::TThread[nElements] : new ::TThread[nElements];
   }
   // Wrapper around operator delete
   static void delete_TThread(void *p) {
      delete ((::TThread*)p);
   }
   static void deleteArray_TThread(void *p) {
      delete [] ((::TThread*)p);
   }
   static void destruct_TThread(void *p) {
      typedef ::TThread current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TThread

//______________________________________________________________________________
void TConditionImp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TConditionImp.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TConditionImp::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TConditionImp.
      TClass *R__cl = ::TConditionImp::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TConditionImp(void *p) {
      delete ((::TConditionImp*)p);
   }
   static void deleteArray_TConditionImp(void *p) {
      delete [] ((::TConditionImp*)p);
   }
   static void destruct_TConditionImp(void *p) {
      typedef ::TConditionImp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TConditionImp

//______________________________________________________________________________
void TCondition::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCondition.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TCondition::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TCondition.
      TClass *R__cl = ::TCondition::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fConditionImp", &fConditionImp);
      R__insp.Inspect(R__cl, R__parent, "*fMutex", &fMutex);
      R__insp.Inspect(R__cl, R__parent, "fPrivateMutex", &fPrivateMutex);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCondition(void *p) {
      return  p ? new(p) ::TCondition : new ::TCondition;
   }
   static void *newArray_TCondition(Long_t nElements, void *p) {
      return p ? new(p) ::TCondition[nElements] : new ::TCondition[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCondition(void *p) {
      delete ((::TCondition*)p);
   }
   static void deleteArray_TCondition(void *p) {
      delete [] ((::TCondition*)p);
   }
   static void destruct_TCondition(void *p) {
      typedef ::TCondition current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCondition

//______________________________________________________________________________
void TMutex::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMutex.

   TVirtualMutex::Streamer(R__b);
}

//______________________________________________________________________________
void TMutex::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMutex.
      TClass *R__cl = ::TMutex::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fMutexImp", &fMutexImp);
      TVirtualMutex::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMutex(void *p) {
      return  p ? new(p) ::TMutex : new ::TMutex;
   }
   static void *newArray_TMutex(Long_t nElements, void *p) {
      return p ? new(p) ::TMutex[nElements] : new ::TMutex[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMutex(void *p) {
      delete ((::TMutex*)p);
   }
   static void deleteArray_TMutex(void *p) {
      delete [] ((::TMutex*)p);
   }
   static void destruct_TMutex(void *p) {
      typedef ::TMutex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMutex

//______________________________________________________________________________
void TMutexImp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMutexImp.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TMutexImp::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMutexImp.
      TClass *R__cl = ::TMutexImp::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMutexImp(void *p) {
      delete ((::TMutexImp*)p);
   }
   static void deleteArray_TMutexImp(void *p) {
      delete [] ((::TMutexImp*)p);
   }
   static void destruct_TMutexImp(void *p) {
      typedef ::TMutexImp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMutexImp

//______________________________________________________________________________
void TPosixCondition::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPosixCondition.

   TConditionImp::Streamer(R__b);
}

//______________________________________________________________________________
void TPosixCondition::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPosixCondition.
      TClass *R__cl = ::TPosixCondition::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fCond", (void*)&fCond);
      ::ROOT::GenericShowMembers("pthread_cond_t", (void*)&fCond, R__insp, strcat(R__parent,"fCond."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fMutex", &fMutex);
      TConditionImp::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TPosixCondition(void *p) {
      delete ((::TPosixCondition*)p);
   }
   static void deleteArray_TPosixCondition(void *p) {
      delete [] ((::TPosixCondition*)p);
   }
   static void destruct_TPosixCondition(void *p) {
      typedef ::TPosixCondition current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPosixCondition

//______________________________________________________________________________
void TPosixMutex::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPosixMutex.

   TMutexImp::Streamer(R__b);
}

//______________________________________________________________________________
void TPosixMutex::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPosixMutex.
      TClass *R__cl = ::TPosixMutex::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMutex", (void*)&fMutex);
      ::ROOT::GenericShowMembers("pthread_mutex_t", (void*)&fMutex, R__insp, strcat(R__parent,"fMutex."),false);
      R__parent[R__ncp] = 0;
      TMutexImp::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPosixMutex(void *p) {
      return  p ? new(p) ::TPosixMutex : new ::TPosixMutex;
   }
   static void *newArray_TPosixMutex(Long_t nElements, void *p) {
      return p ? new(p) ::TPosixMutex[nElements] : new ::TPosixMutex[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPosixMutex(void *p) {
      delete ((::TPosixMutex*)p);
   }
   static void deleteArray_TPosixMutex(void *p) {
      delete [] ((::TPosixMutex*)p);
   }
   static void destruct_TPosixMutex(void *p) {
      typedef ::TPosixMutex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPosixMutex

//______________________________________________________________________________
void TPosixThread::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPosixThread.

   TThreadImp::Streamer(R__b);
}

//______________________________________________________________________________
void TPosixThread::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPosixThread.
      TClass *R__cl = ::TPosixThread::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fCleanUp", &fCleanUp);
      TThreadImp::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPosixThread(void *p) {
      return  p ? new(p) ::TPosixThread : new ::TPosixThread;
   }
   static void *newArray_TPosixThread(Long_t nElements, void *p) {
      return p ? new(p) ::TPosixThread[nElements] : new ::TPosixThread[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPosixThread(void *p) {
      delete ((::TPosixThread*)p);
   }
   static void deleteArray_TPosixThread(void *p) {
      delete [] ((::TPosixThread*)p);
   }
   static void destruct_TPosixThread(void *p) {
      typedef ::TPosixThread current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPosixThread

//______________________________________________________________________________
void TPosixThreadFactory::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPosixThreadFactory.

   TThreadFactory::Streamer(R__b);
}

//______________________________________________________________________________
void TPosixThreadFactory::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPosixThreadFactory.
      TClass *R__cl = ::TPosixThreadFactory::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TThreadFactory::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPosixThreadFactory(void *p) {
      return  p ? new(p) ::TPosixThreadFactory : new ::TPosixThreadFactory;
   }
   static void *newArray_TPosixThreadFactory(Long_t nElements, void *p) {
      return p ? new(p) ::TPosixThreadFactory[nElements] : new ::TPosixThreadFactory[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPosixThreadFactory(void *p) {
      delete ((::TPosixThreadFactory*)p);
   }
   static void deleteArray_TPosixThreadFactory(void *p) {
      delete [] ((::TPosixThreadFactory*)p);
   }
   static void destruct_TPosixThreadFactory(void *p) {
      typedef ::TPosixThreadFactory current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPosixThreadFactory

//______________________________________________________________________________
void TSemaphore::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSemaphore.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TSemaphore::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSemaphore.
      TClass *R__cl = ::TSemaphore::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMutex", &fMutex);
      fMutex.ShowMembers(R__insp, strcat(R__parent,"fMutex.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCond", &fCond);
      fCond.ShowMembers(R__insp, strcat(R__parent,"fCond.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fValue", &fValue);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSemaphore(void *p) {
      return  p ? new(p) ::TSemaphore : new ::TSemaphore;
   }
   static void *newArray_TSemaphore(Long_t nElements, void *p) {
      return p ? new(p) ::TSemaphore[nElements] : new ::TSemaphore[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSemaphore(void *p) {
      delete ((::TSemaphore*)p);
   }
   static void deleteArray_TSemaphore(void *p) {
      delete [] ((::TSemaphore*)p);
   }
   static void destruct_TSemaphore(void *p) {
      typedef ::TSemaphore current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSemaphore

//______________________________________________________________________________
void TThreadFactory::Streamer(TBuffer &R__b)
{
   // Stream an object of class TThreadFactory.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void TThreadFactory::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TThreadFactory.
      TClass *R__cl = ::TThreadFactory::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TThreadFactory(void *p) {
      delete ((::TThreadFactory*)p);
   }
   static void deleteArray_TThreadFactory(void *p) {
      delete [] ((::TThreadFactory*)p);
   }
   static void destruct_TThreadFactory(void *p) {
      typedef ::TThreadFactory current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TThreadFactory

//______________________________________________________________________________
void TThreadImp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TThreadImp.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TThreadImp::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TThreadImp.
      TClass *R__cl = ::TThreadImp::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TThreadImp(void *p) {
      delete ((::TThreadImp*)p);
   }
   static void deleteArray_TThreadImp(void *p) {
      delete [] ((::TThreadImp*)p);
   }
   static void destruct_TThreadImp(void *p) {
      typedef ::TThreadImp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TThreadImp

//______________________________________________________________________________
void TRWLock::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRWLock.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TRWLock::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRWLock.
      TClass *R__cl = ::TRWLock::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fReaders", &fReaders);
      R__insp.Inspect(R__cl, R__parent, "fWriters", &fWriters);
      R__insp.Inspect(R__cl, R__parent, "fMutex", &fMutex);
      fMutex.ShowMembers(R__insp, strcat(R__parent,"fMutex.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLockFree", &fLockFree);
      fLockFree.ShowMembers(R__insp, strcat(R__parent,"fLockFree.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TRWLock(void *p) {
      return  p ? new(p) ::TRWLock : new ::TRWLock;
   }
   static void *newArray_TRWLock(Long_t nElements, void *p) {
      return p ? new(p) ::TRWLock[nElements] : new ::TRWLock[nElements];
   }
   // Wrapper around operator delete
   static void delete_TRWLock(void *p) {
      delete ((::TRWLock*)p);
   }
   static void deleteArray_TRWLock(void *p) {
      delete [] ((::TRWLock*)p);
   }
   static void destruct_TRWLock(void *p) {
      typedef ::TRWLock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRWLock

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TAtomicCount(void *p) {
      delete ((::TAtomicCount*)p);
   }
   static void deleteArray_TAtomicCount(void *p) {
      delete [] ((::TAtomicCount*)p);
   }
   static void destruct_TAtomicCount(void *p) {
      typedef ::TAtomicCount current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAtomicCount

//______________________________________________________________________________
void TLockFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLockFile.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TLockFile::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TLockFile.
      TClass *R__cl = ::TLockFile::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fPath", &fPath);
      fPath.ShowMembers(R__insp, strcat(R__parent,"fPath.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TLockFile(void *p) {
      delete ((::TLockFile*)p);
   }
   static void deleteArray_TLockFile(void *p) {
      delete [] ((::TLockFile*)p);
   }
   static void destruct_TLockFile(void *p) {
      typedef ::TLockFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TLockFile

/********************************************************
* core/thread/src/G__Thread.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Thread();

extern "C" void G__set_cpp_environmentG__Thread() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TCondition.h");
  G__add_compiledheader("TConditionImp.h");
  G__add_compiledheader("TMutex.h");
  G__add_compiledheader("TMutexImp.h");
  G__add_compiledheader("TRWLock.h");
  G__add_compiledheader("TSemaphore.h");
  G__add_compiledheader("TThread.h");
  G__add_compiledheader("TThreadFactory.h");
  G__add_compiledheader("TThreadImp.h");
  G__add_compiledheader("TAtomicCount.h");
  G__add_compiledheader("TLockFile.h");
  G__add_compiledheader("TPosixCondition.h");
  G__add_compiledheader("TPosixMutex.h");
  G__add_compiledheader("TPosixThread.h");
  G__add_compiledheader("TPosixThreadFactory.h");
  G__add_compiledheader("PosixThreadInc.h");
  G__cpp_reset_tagtableG__Thread();
}
#include <new>
extern "C" int G__cpp_dllrevG__Thread() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TConditionImp */
static int G__G__Thread_95_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TConditionImp*) G__getstructoffset())->Wait());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((TConditionImp*) G__getstructoffset())->TimedWait((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((TConditionImp*) G__getstructoffset())->TimedWait((ULong_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TConditionImp*) G__getstructoffset())->Signal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TConditionImp*) G__getstructoffset())->Broadcast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TConditionImp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TConditionImp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TConditionImp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TConditionImp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TConditionImp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TConditionImp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TConditionImp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TConditionImp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_95_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TConditionImp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TConditionImp G__TTConditionImp;
static int G__G__Thread_95_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TConditionImp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TConditionImp*) (soff+(sizeof(TConditionImp)*i)))->~G__TTConditionImp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TConditionImp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TConditionImp*) (soff))->~G__TTConditionImp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_95_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TConditionImp* dest = (TConditionImp*) G__getstructoffset();
   *dest = *(TConditionImp*) libp->para[0].ref;
   const TConditionImp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMutex */
static int G__G__Thread_96_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMutex* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMutex((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TMutex((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TMutex[n];
       } else {
         p = new((void*) gvp) TMutex[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TMutex;
       } else {
         p = new((void*) gvp) TMutex;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TMutex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMutex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMutex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMutex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMutex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMutex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMutex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMutex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMutex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_96_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMutex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMutex G__TTMutex;
static int G__G__Thread_96_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMutex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMutex*) (soff+(sizeof(TMutex)*i)))->~G__TTMutex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMutex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMutex*) (soff))->~G__TTMutex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCondition */
static int G__G__Thread_97_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCondition* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCondition((TMutex*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TCondition((TMutex*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TCondition[n];
       } else {
         p = new((void*) gvp) TCondition[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TCondition;
       } else {
         p = new((void*) gvp) TCondition;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TCondition));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TCondition*) G__getstructoffset())->GetMutex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TCondition*) G__getstructoffset())->Wait());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TCondition*) G__getstructoffset())->TimedWait((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TCondition*) G__getstructoffset())->TimedWaitRelative((ULong_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TCondition*) G__getstructoffset())->Signal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TCondition*) G__getstructoffset())->Broadcast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCondition::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCondition::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCondition::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCondition::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCondition*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCondition::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCondition::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCondition::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_97_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCondition::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCondition G__TTCondition;
static int G__G__Thread_97_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCondition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCondition*) (soff+(sizeof(TCondition)*i)))->~G__TTCondition();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCondition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCondition*) (soff))->~G__TTCondition();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TThread */
static int G__G__Thread_98_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TThread* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TThread(
(TThread::VoidRtnFunc_t) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (TThread::EPriority) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TThread(
(TThread::VoidRtnFunc_t) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (TThread::EPriority) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TThread((TThread::VoidRtnFunc_t) G__int(libp->para[0]), (void*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TThread((TThread::VoidRtnFunc_t) G__int(libp->para[0]), (void*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TThread((TThread::VoidRtnFunc_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TThread((TThread::VoidRtnFunc_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TThread* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TThread(
(const char*) G__int(libp->para[0]), (TThread::VoidRtnFunc_t) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (TThread::EPriority) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TThread(
(const char*) G__int(libp->para[0]), (TThread::VoidRtnFunc_t) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (TThread::EPriority) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TThread(
(const char*) G__int(libp->para[0]), (TThread::VoidRtnFunc_t) G__int(libp->para[1])
, (void*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TThread(
(const char*) G__int(libp->para[0]), (TThread::VoidRtnFunc_t) G__int(libp->para[1])
, (void*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TThread((const char*) G__int(libp->para[0]), (TThread::VoidRtnFunc_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TThread((const char*) G__int(libp->para[0]), (TThread::VoidRtnFunc_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TThread* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TThread((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TThread((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TThread[n];
       } else {
         p = new((void*) gvp) TThread[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TThread;
       } else {
         p = new((void*) gvp) TThread;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThread*) G__getstructoffset())->Kill());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((TThread*) G__getstructoffset())->Run((void*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((TThread*) G__getstructoffset())->Run());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TThread*) G__getstructoffset())->SetPriority((TThread::EPriority) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TThread*) G__getstructoffset())->GetPriority());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TThread*) G__getstructoffset())->GetState());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const TThread*) G__getstructoffset())->GetId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TThread::Ps();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TThread::ps();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((TThread*) G__getstructoffset())->Join((void**) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((TThread*) G__getstructoffset())->Join());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 108, (long) TThread::Join((Long_t) G__int(libp->para[0]), (void**) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) TThread::Join((Long_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) TThread::Exit((void*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) TThread::Exit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::Exists());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TThread::GetThread((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TThread::GetThread((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::Lock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::TryLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::UnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TThread::Self());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) TThread::SelfId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) TThread::Sleep((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) TThread::Sleep((ULong_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::GetTime((ULong_t*) G__int(libp->para[0]), (ULong_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::Delete(libp->para[0].ref ? *(TThread**) libp->para[0].ref : *(TThread**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) TThread::Tsd((void*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::SetCancelOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::SetCancelOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::SetCancelAsynchronous());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::SetCancelDeferred());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::CancelPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::Kill((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::Kill((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) TThread::CleanUpPush((void*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) TThread::CleanUpPush((void*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) TThread::CleanUpPop((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) TThread::CleanUpPop());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::CleanUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   G__va_arg_buf G__va_arg_bufobj;
   G__va_arg_put(&G__va_arg_bufobj, libp, 1);
      TThread::Printf((const char*) G__int(libp->para[0]), G__va_arg_bufobj);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TThread::XAction();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TThread::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThread::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TThread::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TThread::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TThread*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThread::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThread::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_98_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThread::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TThread G__TTThread;
static int G__G__Thread_98_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TThread*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TThread*) (soff+(sizeof(TThread)*i)))->~G__TTThread();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TThread*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TThread*) (soff))->~G__TTThread();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TThreadImp */
static int G__G__Thread_157_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->Join((TThread*) G__int(libp->para[0]), (void**) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((TThreadImp*) G__getstructoffset())->SelfId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->Run((TThread*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->Kill((TThread*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->SetCancelOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->SetCancelOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->SetCancelAsynchronous());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->SetCancelDeferred());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->CancelPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->CleanUpPush((void**) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (void*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->CleanUpPop((void**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->CleanUp((void**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TThreadImp*) G__getstructoffset())->Exit((void*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TThreadImp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThreadImp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TThreadImp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TThreadImp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TThreadImp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThreadImp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThreadImp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThreadImp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_157_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThreadImp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TThreadImp G__TTThreadImp;
static int G__G__Thread_157_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TThreadImp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TThreadImp*) (soff+(sizeof(TThreadImp)*i)))->~G__TTThreadImp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TThreadImp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TThreadImp*) (soff))->~G__TTThreadImp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_157_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TThreadImp* dest = (TThreadImp*) G__getstructoffset();
   *dest = *(TThreadImp*) libp->para[0].ref;
   const TThreadImp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPosixThread */
static int G__G__Thread_158_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPosixThread* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPosixThread[n];
     } else {
       p = new((void*) gvp) TPosixThread[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPosixThread;
     } else {
       p = new((void*) gvp) TPosixThread;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPosixThread::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixThread::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPosixThread::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPosixThread::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPosixThread*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixThread::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPosixThread::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixThread::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_158_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPosixThread::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_158_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TPosixThread* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TPosixThread(*(TPosixThread*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPosixThread G__TTPosixThread;
static int G__G__Thread_158_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPosixThread*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPosixThread*) (soff+(sizeof(TPosixThread)*i)))->~G__TTPosixThread();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPosixThread*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPosixThread*) (soff))->~G__TTPosixThread();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_158_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPosixThread* dest = (TPosixThread*) G__getstructoffset();
   *dest = *(TPosixThread*) libp->para[0].ref;
   const TPosixThread& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMutexImp */
static int G__G__Thread_164_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TMutexImp*) G__getstructoffset())->Lock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TMutexImp*) G__getstructoffset())->TryLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TMutexImp*) G__getstructoffset())->UnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMutexImp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMutexImp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMutexImp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMutexImp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMutexImp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMutexImp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMutexImp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMutexImp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_164_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMutexImp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMutexImp G__TTMutexImp;
static int G__G__Thread_164_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMutexImp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMutexImp*) (soff+(sizeof(TMutexImp)*i)))->~G__TTMutexImp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMutexImp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMutexImp*) (soff))->~G__TTMutexImp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_164_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMutexImp* dest = (TMutexImp*) G__getstructoffset();
   *dest = *(TMutexImp*) libp->para[0].ref;
   const TMutexImp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRWLock */
static int G__G__Thread_165_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRWLock* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRWLock[n];
     } else {
       p = new((void*) gvp) TRWLock[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRWLock;
     } else {
       p = new((void*) gvp) TRWLock;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TRWLock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TRWLock*) G__getstructoffset())->ReadLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TRWLock*) G__getstructoffset())->ReadUnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TRWLock*) G__getstructoffset())->WriteLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TRWLock*) G__getstructoffset())->WriteUnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRWLock::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRWLock::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRWLock::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRWLock::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRWLock*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRWLock::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRWLock::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRWLock::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_165_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRWLock::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRWLock G__TTRWLock;
static int G__G__Thread_165_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRWLock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRWLock*) (soff+(sizeof(TRWLock)*i)))->~G__TTRWLock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRWLock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRWLock*) (soff))->~G__TTRWLock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSemaphore */
static int G__G__Thread_166_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSemaphore* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSemaphore((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSemaphore((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSemaphore[n];
       } else {
         p = new((void*) gvp) TSemaphore[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TSemaphore;
       } else {
         p = new((void*) gvp) TSemaphore;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((TSemaphore*) G__getstructoffset())->Wait((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((TSemaphore*) G__getstructoffset())->Wait());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSemaphore*) G__getstructoffset())->TryWait());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSemaphore*) G__getstructoffset())->Post());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSemaphore::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSemaphore::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSemaphore::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSemaphore::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSemaphore*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSemaphore::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSemaphore::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSemaphore::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_166_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSemaphore::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSemaphore G__TTSemaphore;
static int G__G__Thread_166_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSemaphore*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSemaphore*) (soff+(sizeof(TSemaphore)*i)))->~G__TTSemaphore();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSemaphore*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSemaphore*) (soff))->~G__TTSemaphore();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TThreadFactory */
static int G__G__Thread_167_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TThreadFactory*) G__getstructoffset())->CreateMutexImp((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TThreadFactory*) G__getstructoffset())->CreateConditionImp((TMutexImp*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TThreadFactory*) G__getstructoffset())->CreateThreadImp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TThreadFactory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThreadFactory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TThreadFactory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TThreadFactory::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TThreadFactory*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThreadFactory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThreadFactory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TThreadFactory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_167_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TThreadFactory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TThreadFactory G__TTThreadFactory;
static int G__G__Thread_167_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TThreadFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TThreadFactory*) (soff+(sizeof(TThreadFactory)*i)))->~G__TTThreadFactory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TThreadFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TThreadFactory*) (soff))->~G__TTThreadFactory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_167_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TThreadFactory* dest = (TThreadFactory*) G__getstructoffset();
   *dest = *(TThreadFactory*) libp->para[0].ref;
   const TThreadFactory& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TAtomicCount */
static int G__G__Thread_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAtomicCount* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAtomicCount((Long_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TAtomicCount((Long_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TAtomicCount));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAtomicCount*) G__getstructoffset())->operator++();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((TAtomicCount*) G__getstructoffset())->operator--());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const TAtomicCount*) G__getstructoffset())->operator long());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAtomicCount*) G__getstructoffset())->Set((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const TAtomicCount*) G__getstructoffset())->Get());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAtomicCount G__TTAtomicCount;
static int G__G__Thread_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAtomicCount*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAtomicCount*) (soff+(sizeof(TAtomicCount)*i)))->~G__TTAtomicCount();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAtomicCount*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAtomicCount*) (soff))->~G__TTAtomicCount();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLockFile */
static int G__G__Thread_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLockFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLockFile((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TLockFile((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLockFile((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TLockFile((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TLockFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TLockFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLockFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TLockFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TLockFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLockFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLockFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLockFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLockFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLockFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLockFile G__TTLockFile;
static int G__G__Thread_169_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TLockFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TLockFile*) (soff+(sizeof(TLockFile)*i)))->~G__TTLockFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TLockFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TLockFile*) (soff))->~G__TTLockFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPosixMutex */
static int G__G__Thread_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPosixMutex* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPosixMutex((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TPosixMutex((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TPosixMutex[n];
       } else {
         p = new((void*) gvp) TPosixMutex[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TPosixMutex;
       } else {
         p = new((void*) gvp) TPosixMutex;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPosixMutex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixMutex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPosixMutex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPosixMutex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPosixMutex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixMutex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPosixMutex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixMutex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_171_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPosixMutex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_171_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TPosixMutex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TPosixMutex(*(TPosixMutex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPosixMutex G__TTPosixMutex;
static int G__G__Thread_171_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPosixMutex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPosixMutex*) (soff+(sizeof(TPosixMutex)*i)))->~G__TTPosixMutex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPosixMutex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPosixMutex*) (soff))->~G__TTPosixMutex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_171_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPosixMutex* dest = (TPosixMutex*) G__getstructoffset();
   *dest = *(TPosixMutex*) libp->para[0].ref;
   const TPosixMutex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPosixCondition */
static int G__G__Thread_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPosixCondition* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPosixCondition((TMutexImp*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TPosixCondition((TMutexImp*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPosixCondition::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixCondition::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPosixCondition::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPosixCondition::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPosixCondition*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixCondition::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPosixCondition::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixCondition::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_172_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPosixCondition::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_172_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TPosixCondition* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TPosixCondition(*(TPosixCondition*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPosixCondition G__TTPosixCondition;
static int G__G__Thread_172_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPosixCondition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPosixCondition*) (soff+(sizeof(TPosixCondition)*i)))->~G__TTPosixCondition();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPosixCondition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPosixCondition*) (soff))->~G__TTPosixCondition();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_172_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPosixCondition* dest = (TPosixCondition*) G__getstructoffset();
   *dest = *(TPosixCondition*) libp->para[0].ref;
   const TPosixCondition& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPosixThreadFactory */
static int G__G__Thread_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPosixThreadFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPosixThreadFactory((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPosixThreadFactory((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPosixThreadFactory((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TPosixThreadFactory((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TPosixThreadFactory[n];
       } else {
         p = new((void*) gvp) TPosixThreadFactory[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TPosixThreadFactory;
       } else {
         p = new((void*) gvp) TPosixThreadFactory;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPosixThreadFactory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixThreadFactory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPosixThreadFactory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPosixThreadFactory::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPosixThreadFactory*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixThreadFactory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPosixThreadFactory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPosixThreadFactory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPosixThreadFactory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_175_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TPosixThreadFactory* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TPosixThreadFactory(*(TPosixThreadFactory*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPosixThreadFactory G__TTPosixThreadFactory;
static int G__G__Thread_175_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPosixThreadFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPosixThreadFactory*) (soff+(sizeof(TPosixThreadFactory)*i)))->~G__TTPosixThreadFactory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPosixThreadFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPosixThreadFactory*) (soff))->~G__TTPosixThreadFactory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPosixThreadFactory* dest = (TPosixThreadFactory*) G__getstructoffset();
   *dest = *(TPosixThreadFactory*) libp->para[0].ref;
   const TPosixThreadFactory& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TConditionImp */

/* TMutex */

/* TCondition */

/* TThread */

/* TThreadImp */

/* TPosixThread */

/* TMutexImp */

/* TRWLock */

/* TSemaphore */

/* TThreadFactory */

/* TAtomicCount */

/* TLockFile */

/* TPosixMutex */

/* TPosixCondition */

/* TPosixThreadFactory */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Thread {
 public:
  G__Sizep2memfuncG__Thread(): p(&G__Sizep2memfuncG__Thread::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Thread::*p)();
};

size_t G__get_sizep2memfuncG__Thread()
{
  G__Sizep2memfuncG__Thread a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Thread() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp))) {
     TConditionImp *G__Lderived;
     G__Lderived=(TConditionImp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TMutex))) {
     TMutex *G__Lderived;
     G__Lderived=(TMutex*)0x1000;
     {
       TVirtualMutex *G__Lpbase=(TVirtualMutex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex),G__get_linked_tagnum(&G__G__ThreadLN_TVirtualMutex),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TCondition))) {
     TCondition *G__Lderived;
     G__Lderived=(TCondition*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TCondition),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TThread))) {
     TThread *G__Lderived;
     G__Lderived=(TThread*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread),G__get_linked_tagnum(&G__G__ThreadLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TVirtualMutex))) {
     TVirtualMutex *G__Lderived;
     G__Lderived=(TVirtualMutex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TVirtualMutex),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp))) {
     TThreadImp *G__Lderived;
     G__Lderived=(TThreadImp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread))) {
     TPosixThread *G__Lderived;
     G__Lderived=(TPosixThread*)0x1000;
     {
       TThreadImp *G__Lpbase=(TThreadImp*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp))) {
     TMutexImp *G__Lderived;
     G__Lderived=(TMutexImp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock))) {
     TRWLock *G__Lderived;
     G__Lderived=(TRWLock*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore))) {
     TSemaphore *G__Lderived;
     G__Lderived=(TSemaphore*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory))) {
     TThreadFactory *G__Lderived;
     G__Lderived=(TThreadFactory*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TLockFile))) {
     TLockFile *G__Lderived;
     G__Lderived=(TLockFile*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TLockFile),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex))) {
     TPosixMutex *G__Lderived;
     G__Lderived=(TPosixMutex*)0x1000;
     {
       TMutexImp *G__Lpbase=(TMutexImp*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition))) {
     TPosixCondition *G__Lderived;
     G__Lderived=(TPosixCondition*)0x1000;
     {
       TConditionImp *G__Lpbase=(TConditionImp*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory))) {
     TPosixThreadFactory *G__Lderived;
     G__Lderived=(TPosixThreadFactory*)0x1000;
     {
       TThreadFactory *G__Lpbase=(TThreadFactory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Thread() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 4 bytes (unsigned long)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VoidRtnFunc_t",89,-1,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   G__setnewtype(-1,"void *(*VoidRtnFunc_t)(void *);",0);
   G__search_typename2("VoidFunc_t",89,-1,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   G__setnewtype(-1,"void  (*VoidFunc_t)(void *);",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TConditionImp */
static void G__setup_memvarTConditionImp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp));
   { TConditionImp *p; p=(TConditionImp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMutex */
static void G__setup_memvarTMutex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex));
   { TMutex *p; p=(TMutex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),-1,-1,4,"fMutexImp=",0,"pointer to mutex implementation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCondition */
static void G__setup_memvarTCondition(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TCondition));
   { TCondition *p; p=(TCondition*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),-1,-1,4,"fConditionImp=",0,"pointer to condition variable implementation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-1,4,"fMutex=",0,"mutex used around Wait() and TimedWait()");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPrivateMutex=",0,"is fMutex our private mutex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TThread */
static void G__setup_memvarTThread(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   { TThread *p; p=(TThread*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,-2,1,"kLowPriority=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,-2,1,"kNormalPriority=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,-2,1,"kHighPriority=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kInvalidState=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kNewState=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kRunningState=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kTerminatedState=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kFinishedState=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kCancelingState=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kCanceledState=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kDeletingState=7",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,-1,4,"fNext=",0,"pointer to next thread");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,-1,4,"fPrev=",0,"pointer to prev thread");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,-1,4,"fHolder=",0,"pointer to holder of this (delete only)");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,-1,4,"fPriority=",0,"thread priority");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-1,4,"fState=",0,"thread state");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-1,4,"fStateComing=",0,"coming thread state");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fId=",0,"thread id");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fHandle=",0,"Win32 thread handle");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDetached=",0,"kTRUE if thread is Detached");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNamed=",0,"kTRUE if thread is Named");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("VoidRtnFunc_t"),-1,4,"fFcnRetn=",0,"void* start function of thread");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("VoidFunc_t"),-1,4,"fFcnVoid=",0,"void  start function of thread");
   G__memvar_setup((void*)0,89,0,0,-1,-1,-1,4,"fThreadArg=",0,"thread start function arguments");
   G__memvar_setup((void*)0,89,0,0,-1,-1,-1,4,"fClean=",0,"support of cleanup structure");
   G__memvar_setup((void*)0,89,0,0,-1,-1,-1,4,"fTsd[20]=",0,"thread specific data container");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,4,"fComment[100]=",0,"thread specific state comment");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),-1,-2,4,"fgThreadImp=",0,"static pointer to thread implementation");
   G__memvar_setup((void*)0,67,0,0,-1,-1,-2,4,"fgXAct=",0,"Action name to do by main thread");
   G__memvar_setup((void*)0,89,2,0,-1,-1,-2,4,"volatilefgXArr=",0,"pointer to control array of void pointers for action");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgXAnb=",0,"size of array above");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgXArt=",0,"return XA flag");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-2,4,"fgMainId=",0,"thread id of main thread");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,-2,4,"fgMain=",0,"pointer to chain of TThread's");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-2,4,"fgMainMutex=",0,"mutex to protect chain of threads");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-2,4,"fgXActMutex=",0,"mutex to protect XAction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,-2,4,"fgXActCondi=",0,"condition for XAction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TThreadImp */
static void G__setup_memvarTThreadImp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp));
   { TThreadImp *p; p=(TThreadImp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPosixThread */
static void G__setup_memvarTPosixThread(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread));
   { TPosixThread *p; p=(TPosixThread*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadCleanUp),-1,-1,4,"fCleanUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMutexImp */
static void G__setup_memvarTMutexImp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp));
   { TMutexImp *p; p=(TMutexImp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRWLock */
static void G__setup_memvarTRWLock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock));
   { TRWLock *p; p=(TRWLock*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fReaders=",0,"number of readers");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fWriters=",0,"number of writers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-1,4,"fMutex=",0,"rwlock mutex");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,-1,4,"fLockFree=",0,"rwlock condition variable");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSemaphore */
static void G__setup_memvarTSemaphore(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore));
   { TSemaphore *p; p=(TSemaphore*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-1,4,"fMutex=",0,"semaphare mutex");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,-1,4,"fCond=",0,"semaphore condition variable");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fValue=",0,"counter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TThreadFactory */
static void G__setup_memvarTThreadFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory));
   { TThreadFactory *p; p=(TThreadFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TAtomicCount */
static void G__setup_memvarTAtomicCount(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TAtomicCount));
   { TAtomicCount *p; p=(TAtomicCount*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fCnt=",0,"counter");
   }
   G__tag_memvar_reset();
}


   /* TLockFile */
static void G__setup_memvarTLockFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TLockFile));
   { TLockFile *p; p=(TLockFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TString),-1,-1,2,"fPath=",0,"path to file holding the lock");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPosixMutex */
static void G__setup_memvarTPosixMutex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex));
   { TPosixMutex *p; p=(TPosixMutex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_pthread_mutex_t),-1,-1,4,"fMutex=",0,"the pthread mutex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPosixCondition */
static void G__setup_memvarTPosixCondition(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition));
   { TPosixCondition *p; p=(TPosixCondition*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_pthread_cond_t),-1,-1,4,"fCond=",0,"the pthread condition variable");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),-1,-1,4,"fMutex=",0,"mutex used around Wait() and TimedWait()");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPosixThreadFactory */
static void G__setup_memvarTPosixThreadFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory));
   { TPosixThreadFactory *p; p=(TPosixThreadFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Thread() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTConditionImp(void) {
   /* TConditionImp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp));
   G__memfunc_setup("Wait",405,G__G__Thread_95_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("TimedWait",904,G__G__Thread_95_0_3, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - secs k - 'ULong_t' 0 '0' nanoSecs", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Signal",606,G__G__Thread_95_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Broadcast",915,G__G__Thread_95_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__Thread_95_0_6, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TConditionImp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_95_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TConditionImp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_95_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TConditionImp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_95_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TConditionImp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_95_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_95_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TConditionImp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_95_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TConditionImp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_95_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TConditionImp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_95_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TConditionImp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TConditionImp", 1439, G__G__Thread_95_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Thread_95_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp), -1, 1, 1, 1, 1, 0, "u 'TConditionImp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMutex(void) {
   /* TMutex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex));
   G__memfunc_setup("TMutex",615,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ThreadLN_TMutex), -1, 0, 1, 1, 4, 0, "u 'TMutex' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ThreadLN_TMutex), -1, 1, 1, 1, 4, 0, "u 'TMutex' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("TMutex",615,G__G__Thread_96_0_3, 105, G__get_linked_tagnum(&G__G__ThreadLN_TMutex), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' recursive", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TryLock",712,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Factory",728,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TVirtualMutex), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' recursive", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Thread_96_0_9, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMutex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_96_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMutex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_96_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMutex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_96_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMutex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_96_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_96_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMutex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_96_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMutex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_96_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMutex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_96_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMutex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TMutex", 741, G__G__Thread_96_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCondition(void) {
   /* TCondition */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TCondition));
   G__memfunc_setup("TCondition",1019,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ThreadLN_TCondition), -1, 0, 1, 1, 4, 0, "u 'TCondition' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ThreadLN_TCondition), -1, 1, 1, 1, 4, 0, "u 'TCondition' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("TCondition",1019,G__G__Thread_97_0_3, 105, G__get_linked_tagnum(&G__G__ThreadLN_TCondition), -1, 0, 1, 1, 1, 0, "U 'TMutex' - 0 '0' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMutex",819,G__G__Thread_97_0_4, 85, G__get_linked_tagnum(&G__G__ThreadLN_TMutex), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Wait",405,G__G__Thread_97_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimedWait",904,G__G__Thread_97_0_6, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - secs k - 'ULong_t' 0 - nanoSecs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimedWaitRelative",1732,G__G__Thread_97_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - ms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Signal",606,G__G__Thread_97_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Broadcast",915,G__G__Thread_97_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Thread_97_0_10, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCondition::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_97_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCondition::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_97_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCondition::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_97_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCondition::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_97_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_97_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCondition::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_97_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCondition::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_97_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCondition::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_97_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCondition::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCondition", 1145, G__G__Thread_97_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTThread(void) {
   /* TThread */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   G__memfunc_setup("Constructor",1190,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetComment",1023,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 10 '0' txt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoError",701,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 8, 
"i - 'Int_t' 0 - level C - - 10 - location "
"C - - 10 - fmt u 'va_list' - 0 - va", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ErrorHandler",1224,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 8, 
"i - - 0 - level C - - 10 - location "
"C - - 10 - fmt u 'va_list' - 0 - ap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Function",838,(G__InterfaceMethod) NULL, 89, -1, -1, 0, 1, 3, 4, 0, "Y - - 0 - ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XARequest",898,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 4, 0, 
"C - - 10 - xact i - 'Int_t' 0 - nb "
"Y - - 2 - ar I - 'Int_t' 0 - iret", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AfterCancel",1080,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 3, 4, 0, "U 'TThread' - 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TThread",684,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ThreadLN_TThread), -1, 0, 1, 1, 4, 0, "u 'TThread' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ThreadLN_TThread), -1, 1, 1, 1, 4, 0, "u 'TThread' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("TThread",684,G__G__Thread_98_0_11, 105, G__get_linked_tagnum(&G__G__ThreadLN_TThread), -1, 0, 3, 1, 1, 0, 
"Y - 'TThread::VoidRtnFunc_t' 0 - fn Y - - 0 '0' arg "
"i 'TThread::EPriority' - 0 'kNormalPriority' pri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TThread",684,G__G__Thread_98_0_12, 105, G__get_linked_tagnum(&G__G__ThreadLN_TThread), -1, 0, 4, 1, 1, 0, 
"C - - 10 - thname Y - 'TThread::VoidRtnFunc_t' 0 - fn "
"Y - - 0 '0' arg i 'TThread::EPriority' - 0 'kNormalPriority' pri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TThread",684,G__G__Thread_98_0_13, 105, G__get_linked_tagnum(&G__G__ThreadLN_TThread), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Kill",396,G__G__Thread_98_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Run",309,G__G__Thread_98_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "Y - - 0 '0' arg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPriority",1166,G__G__Thread_98_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TThread::EPriority' - 0 - pri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Delete",595,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPriority",1154,G__G__Thread_98_0_18, 105, G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,G__G__Thread_98_0_19, 105, G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetId",461,G__G__Thread_98_0_20, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ps",195,G__G__Thread_98_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TThread::Ps) ), 0);
   G__memfunc_setup("ps",227,G__G__Thread_98_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TThread::ps) ), 0);
   G__memfunc_setup("Join",400,G__G__Thread_98_0_23, 108, -1, G__defined_typename("Long_t"), 0, 1, 1, 1, 0, "Y - - 2 '0' ret", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Join",400,G__G__Thread_98_0_24, 108, -1, G__defined_typename("Long_t"), 0, 2, 3, 1, 0, 
"l - 'Long_t' 0 - id Y - - 2 '0' ret", (char*)NULL, (void*) G__func2void( (Long_t (*)(Long_t, void**))(&TThread::Join) ), 0);
   G__memfunc_setup("Exit",410,G__G__Thread_98_0_25, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "Y - - 0 '0' ret", (char*)NULL, (void*) G__func2void( (Int_t (*)(void*))(&TThread::Exit) ), 0);
   G__memfunc_setup("Exists",640,G__G__Thread_98_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&TThread::Exists) ), 0);
   G__memfunc_setup("GetThread",888,G__G__Thread_98_0_27, 85, G__get_linked_tagnum(&G__G__ThreadLN_TThread), -1, 0, 1, 3, 1, 0, "l - 'Long_t' 0 - id", (char*)NULL, (void*) G__func2void( (TThread* (*)(Long_t))(&TThread::GetThread) ), 0);
   G__memfunc_setup("GetThread",888,G__G__Thread_98_0_28, 85, G__get_linked_tagnum(&G__G__ThreadLN_TThread), -1, 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (TThread* (*)(const char*))(&TThread::GetThread) ), 0);
   G__memfunc_setup("Lock",393,G__G__Thread_98_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", "User's lock of main mutex", (void*) G__func2void( (Int_t (*)())(&TThread::Lock) ), 0);
   G__memfunc_setup("TryLock",712,G__G__Thread_98_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", "User's try lock of main mutex", (void*) G__func2void( (Int_t (*)())(&TThread::TryLock) ), 0);
   G__memfunc_setup("UnLock",588,G__G__Thread_98_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", "User's unlock of main mutex", (void*) G__func2void( (Int_t (*)())(&TThread::UnLock) ), 0);
   G__memfunc_setup("Self",394,G__G__Thread_98_0_32, 85, G__get_linked_tagnum(&G__G__ThreadLN_TThread), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TThread* (*)())(&TThread::Self) ), 0);
   G__memfunc_setup("SelfId",567,G__G__Thread_98_0_33, 108, -1, G__defined_typename("Long_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Long_t (*)())(&TThread::SelfId) ), 0);
   G__memfunc_setup("Sleep",505,G__G__Thread_98_0_34, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"k - 'ULong_t' 0 - secs k - 'ULong_t' 0 '0' nanos", (char*)NULL, (void*) G__func2void( (Int_t (*)(ULong_t, ULong_t))(&TThread::Sleep) ), 0);
   G__memfunc_setup("GetTime",687,G__G__Thread_98_0_35, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"K - 'ULong_t' 0 - absSec K - 'ULong_t' 0 - absNanoSec", (char*)NULL, (void*) G__func2void( (Int_t (*)(ULong_t*, ULong_t*))(&TThread::GetTime) ), 0);
   G__memfunc_setup("Delete",595,G__G__Thread_98_0_36, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "U 'TThread' - 1 - th", (char*)NULL, (void*) G__func2void( (Int_t (*)(TThread*&))(&TThread::Delete) ), 0);
   G__memfunc_setup("Tsd",299,G__G__Thread_98_0_37, 89, -1, -1, 2, 2, 3, 1, 0, 
"Y - - 0 - dflt i - 'Int_t' 0 - k", (char*)NULL, (void*) G__func2void( (void** (*)(void*, Int_t))(&TThread::Tsd) ), 0);
   G__memfunc_setup("SetCancelOn",1071,G__G__Thread_98_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&TThread::SetCancelOn) ), 0);
   G__memfunc_setup("SetCancelOff",1165,G__G__Thread_98_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&TThread::SetCancelOff) ), 0);
   G__memfunc_setup("SetCancelAsynchronous",2174,G__G__Thread_98_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&TThread::SetCancelAsynchronous) ), 0);
   G__memfunc_setup("SetCancelDeferred",1683,G__G__Thread_98_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&TThread::SetCancelDeferred) ), 0);
   G__memfunc_setup("CancelPoint",1104,G__G__Thread_98_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&TThread::CancelPoint) ), 0);
   G__memfunc_setup("Kill",396,G__G__Thread_98_0_43, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "l - 'Long_t' 0 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(Long_t))(&TThread::Kill) ), 0);
   G__memfunc_setup("Kill",396,G__G__Thread_98_0_44, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (Int_t (*)(const char*))(&TThread::Kill) ), 0);
   G__memfunc_setup("CleanUpPush",1096,G__G__Thread_98_0_45, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"Y - - 0 - free Y - - 0 '0' arg", (char*)NULL, (void*) G__func2void( (Int_t (*)(void*, void*))(&TThread::CleanUpPush) ), 0);
   G__memfunc_setup("CleanUpPop",983,G__G__Thread_98_0_46, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 '0' exe", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&TThread::CleanUpPop) ), 0);
   G__memfunc_setup("CleanUp",680,G__G__Thread_98_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&TThread::CleanUp) ), 0);
   G__memfunc_setup("Printf",627,G__G__Thread_98_0_48, 121, -1, -1, 0, 1, 10, 1, 0, "C - - 10 - fmt", "format and print", (void*) G__func2void( (void (*)(const char*))(&TThread::Printf) ), 0);
   G__memfunc_setup("XAction",694,G__G__Thread_98_0_49, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TThread::XAction) ), 0);
   G__memfunc_setup("Class",502,G__G__Thread_98_0_50, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TThread::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_98_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThread::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_98_0_52, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TThread::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_98_0_53, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TThread::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_98_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_98_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThread::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_98_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TThread::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_98_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThread::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_98_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TThread::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TThread", 810, G__G__Thread_98_0_62, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTThreadImp(void) {
   /* TThreadImp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp));
   G__memfunc_setup("Join",400,G__G__Thread_157_0_2, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'TThread' - 0 - th Y - - 2 - ret", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SelfId",567,G__G__Thread_157_0_3, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Run",309,G__G__Thread_157_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TThread' - 0 - th", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Kill",396,G__G__Thread_157_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TThread' - 0 - th", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetCancelOff",1165,G__G__Thread_157_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetCancelOn",1071,G__G__Thread_157_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetCancelAsynchronous",2174,G__G__Thread_157_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetCancelDeferred",1683,G__G__Thread_157_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CancelPoint",1104,G__G__Thread_157_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CleanUpPush",1096,G__G__Thread_157_0_11, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"Y - - 2 - main Y - - 0 - free "
"Y - - 0 - arg", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CleanUpPop",983,G__G__Thread_157_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"Y - - 2 - main i - 'Int_t' 0 - exe", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CleanUp",680,G__G__Thread_157_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "Y - - 2 - main", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Exit",410,G__G__Thread_157_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "Y - - 0 - ret", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__Thread_157_0_15, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TThreadImp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_157_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThreadImp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_157_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TThreadImp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_157_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TThreadImp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_157_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_157_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThreadImp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_157_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TThreadImp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_157_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThreadImp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_157_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TThreadImp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TThreadImp", 1104, G__G__Thread_157_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Thread_157_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp), -1, 1, 1, 1, 1, 0, "u 'TThreadImp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPosixThread(void) {
   /* TPosixThread */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread));
   G__memfunc_setup("TPosixThread",1215,G__G__Thread_158_0_1, 105, G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Join",400,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'TThread' - 0 - th Y - - 2 - ret", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SelfId",567,(G__InterfaceMethod) NULL,108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TThread' - 0 - th", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Kill",396,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TThread' - 0 - th", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCancelOff",1165,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCancelOn",1071,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCancelAsynchronous",2174,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCancelDeferred",1683,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CancelPoint",1104,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CleanUpPush",1096,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"Y - - 2 - main Y - - 0 - free "
"Y - - 0 - arg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CleanUpPop",983,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"Y - - 2 - main i - 'Int_t' 0 - exe", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "Y - - 2 - main", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exit",410,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "Y - - 0 - ret", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Thread_158_0_15, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPosixThread::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_158_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixThread::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_158_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPosixThread::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_158_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPosixThread::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_158_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_158_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixThread::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_158_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPosixThread::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_158_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixThread::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_158_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPosixThread::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPosixThread", 1215, G__G__Thread_158_0_27, (int) ('i'), G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread), -1, 0, 1, 1, 1, 0, "u 'TPosixThread' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPosixThread", 1341, G__G__Thread_158_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Thread_158_0_29, (int) ('u'), G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread), -1, 1, 1, 1, 1, 0, "u 'TPosixThread' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMutexImp(void) {
   /* TMutexImp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp));
   G__memfunc_setup("Lock",393,G__G__Thread_164_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("TryLock",712,G__G__Thread_164_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("UnLock",588,G__G__Thread_164_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__Thread_164_0_5, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMutexImp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_164_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMutexImp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_164_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMutexImp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_164_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMutexImp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_164_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_164_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMutexImp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_164_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMutexImp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_164_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMutexImp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_164_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMutexImp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TMutexImp", 1035, G__G__Thread_164_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Thread_164_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp), -1, 1, 1, 1, 1, 0, "u 'TMutexImp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRWLock(void) {
   /* TRWLock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock));
   G__memfunc_setup("TRWLock",646,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ThreadLN_TRWLock), -1, 0, 1, 1, 4, 0, "u 'TRWLock' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ThreadLN_TRWLock), -1, 1, 1, 1, 4, 0, "u 'TRWLock' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("TRWLock",646,G__G__Thread_165_0_3, 105, G__get_linked_tagnum(&G__G__ThreadLN_TRWLock), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadLock",773,G__G__Thread_165_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadUnLock",968,G__G__Thread_165_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteLock",916,G__G__Thread_165_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteUnLock",1111,G__G__Thread_165_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Thread_165_0_8, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRWLock::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_165_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRWLock::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_165_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRWLock::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_165_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRWLock::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_165_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_165_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRWLock::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_165_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRWLock::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_165_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRWLock::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_165_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRWLock::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TRWLock", 772, G__G__Thread_165_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSemaphore(void) {
   /* TSemaphore */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore));
   G__memfunc_setup("TSemaphore",1016,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore), -1, 0, 1, 1, 4, 0, "u 'TSemaphore' - 11 - s", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore), -1, 1, 1, 1, 4, 0, "u 'TSemaphore' - 11 - s", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("TSemaphore",1016,G__G__Thread_166_0_3, 105, G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '1' initial", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Wait",405,G__G__Thread_166_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' millisec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TryWait",724,G__G__Thread_166_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Post",422,G__G__Thread_166_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Thread_166_0_7, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSemaphore::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_166_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSemaphore::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_166_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSemaphore::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_166_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSemaphore::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_166_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_166_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSemaphore::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_166_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSemaphore::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_166_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSemaphore::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_166_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSemaphore::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSemaphore", 1142, G__G__Thread_166_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTThreadFactory(void) {
   /* TThreadFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory));
   G__memfunc_setup("CreateMutexImp",1421,G__G__Thread_167_0_2, 85, G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - recursive", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CreateConditionImp",1825,G__G__Thread_167_0_3, 85, G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp), -1, 0, 1, 1, 1, 0, "U 'TMutexImp' - 0 - m", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CreateThreadImp",1490,G__G__Thread_167_0_4, 85, G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__Thread_167_0_5, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TThreadFactory::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_167_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThreadFactory::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_167_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TThreadFactory::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_167_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TThreadFactory::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_167_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_167_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThreadFactory::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_167_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TThreadFactory::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_167_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TThreadFactory::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_167_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TThreadFactory::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TThreadFactory", 1538, G__G__Thread_167_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Thread_167_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory), -1, 1, 1, 1, 1, 0, "u 'TThreadFactory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTAtomicCount(void) {
   /* TAtomicCount */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TAtomicCount));
   G__memfunc_setup("TAtomicCount",1210,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ThreadLN_TAtomicCount), -1, 0, 1, 1, 4, 0, "u 'TAtomicCount' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ThreadLN_TAtomicCount), -1, 1, 1, 1, 4, 0, "u 'TAtomicCount' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("TAtomicCount",1210,G__G__Thread_168_0_3, 105, G__get_linked_tagnum(&G__G__ThreadLN_TAtomicCount), -1, 0, 1, 5, 1, 0, "l - 'Long_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__G__Thread_168_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__G__Thread_168_0_5, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator long",1340,G__G__Thread_168_0_6, 108, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__Thread_168_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__Thread_168_0_8, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAtomicCount", 1336, G__G__Thread_168_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLockFile(void) {
   /* TLockFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TLockFile));
   G__memfunc_setup("TLockFile",861,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ThreadLN_TLockFile), -1, 0, 1, 1, 4, 0, "u 'TLockFile' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ThreadLN_TLockFile), -1, 1, 1, 1, 4, 0, "u 'TLockFile' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"C - - 10 - path i - 'Int_t' 0 - timeLimit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TLockFile",861,G__G__Thread_169_0_4, 105, G__get_linked_tagnum(&G__G__ThreadLN_TLockFile), -1, 0, 2, 1, 1, 0, 
"C - - 10 - path i - 'Int_t' 0 '0' timeLimit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Thread_169_0_5, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TLockFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_169_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLockFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_169_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TLockFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_169_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TLockFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_169_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_169_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLockFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_169_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLockFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_169_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLockFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_169_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLockFile::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TLockFile", 987, G__G__Thread_169_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPosixMutex(void) {
   /* TPosixMutex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex));
   G__memfunc_setup("TPosixMutex",1146,G__G__Thread_171_0_1, 105, G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' recursive", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TryLock",712,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Thread_171_0_5, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPosixMutex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_171_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixMutex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_171_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPosixMutex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_171_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPosixMutex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_171_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_171_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixMutex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_171_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPosixMutex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_171_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixMutex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_171_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPosixMutex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPosixMutex", 1146, G__G__Thread_171_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex), -1, 0, 1, 1, 1, 0, "u 'TPosixMutex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPosixMutex", 1272, G__G__Thread_171_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Thread_171_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex), -1, 1, 1, 1, 1, 0, "u 'TPosixMutex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPosixCondition(void) {
   /* TPosixCondition */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition));
   G__memfunc_setup("TPosixCondition",1550,G__G__Thread_172_0_1, 105, G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition), -1, 0, 1, 1, 1, 0, "U 'TMutexImp' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Wait",405,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TimedWait",904,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - secs k - 'ULong_t' 0 '0' nanoSecs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Signal",606,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Broadcast",915,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Thread_172_0_6, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPosixCondition::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_172_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixCondition::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_172_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPosixCondition::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_172_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPosixCondition::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_172_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_172_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixCondition::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_172_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPosixCondition::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_172_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixCondition::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_172_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPosixCondition::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPosixCondition", 1550, G__G__Thread_172_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition), -1, 0, 1, 1, 1, 0, "u 'TPosixCondition' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPosixCondition", 1676, G__G__Thread_172_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Thread_172_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition), -1, 1, 1, 1, 1, 0, "u 'TPosixCondition' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPosixThreadFactory(void) {
   /* TPosixThreadFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory));
   G__memfunc_setup("TPosixThreadFactory",1943,G__G__Thread_175_0_1, 105, G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"Posix\"' name C - - 10 '\"Posix Thread Factory\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateMutexImp",1421,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - recursive", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateConditionImp",1825,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp), -1, 0, 1, 1, 1, 0, "U 'TMutexImp' - 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateThreadImp",1490,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Thread_175_0_5, 85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPosixThreadFactory::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_175_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixThreadFactory::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_175_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPosixThreadFactory::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_175_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPosixThreadFactory::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ThreadLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_175_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_175_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixThreadFactory::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_175_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPosixThreadFactory::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_175_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPosixThreadFactory::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_175_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPosixThreadFactory::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPosixThreadFactory", 1943, G__G__Thread_175_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory), -1, 0, 1, 1, 1, 0, "u 'TPosixThreadFactory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPosixThreadFactory", 2069, G__G__Thread_175_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Thread_175_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory), -1, 1, 1, 1, 1, 0, "u 'TPosixThreadFactory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Thread() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Thread() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Thread() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__ThreadLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_va_list = { "va_list" , 115 , -1 };
G__linked_taginfo G__G__ThreadLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TConditionImp = { "TConditionImp" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TMutex = { "TMutex" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TCondition = { "TCondition" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TThread = { "TThread" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TVirtualMutex = { "TVirtualMutex" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TThreadImp = { "TThreadImp" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixThread = { "TPosixThread" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TThreadcLcLEPriority = { "TThread::EPriority" , 101 , -1 };
G__linked_taginfo G__G__ThreadLN_TThreadcLcLEState = { "TThread::EState" , 101 , -1 };
G__linked_taginfo G__G__ThreadLN_TMutexImp = { "TMutexImp" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TRWLock = { "TRWLock" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TSemaphore = { "TSemaphore" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TThreadFactory = { "TThreadFactory" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TAtomicCount = { "TAtomicCount" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TLockFile = { "TLockFile" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_pthread_cond_t = { "pthread_cond_t" , 115 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixMutex = { "TPosixMutex" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixCondition = { "TPosixCondition" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_pthread_mutex_t = { "pthread_mutex_t" , 115 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixThreadCleanUp = { "TPosixThreadCleanUp" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixThreadFactory = { "TPosixThreadFactory" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Thread() {
  G__G__ThreadLN_TClass.tagnum = -1 ;
  G__G__ThreadLN_TBuffer.tagnum = -1 ;
  G__G__ThreadLN_TMemberInspector.tagnum = -1 ;
  G__G__ThreadLN_TObject.tagnum = -1 ;
  G__G__ThreadLN_TNamed.tagnum = -1 ;
  G__G__ThreadLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__ThreadLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ThreadLN_va_list.tagnum = -1 ;
  G__G__ThreadLN_TString.tagnum = -1 ;
  G__G__ThreadLN_TConditionImp.tagnum = -1 ;
  G__G__ThreadLN_TMutex.tagnum = -1 ;
  G__G__ThreadLN_TCondition.tagnum = -1 ;
  G__G__ThreadLN_TThread.tagnum = -1 ;
  G__G__ThreadLN_TVirtualMutex.tagnum = -1 ;
  G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ThreadLN_TThreadImp.tagnum = -1 ;
  G__G__ThreadLN_TPosixThread.tagnum = -1 ;
  G__G__ThreadLN_TThreadcLcLEPriority.tagnum = -1 ;
  G__G__ThreadLN_TThreadcLcLEState.tagnum = -1 ;
  G__G__ThreadLN_TMutexImp.tagnum = -1 ;
  G__G__ThreadLN_TRWLock.tagnum = -1 ;
  G__G__ThreadLN_TSemaphore.tagnum = -1 ;
  G__G__ThreadLN_TThreadFactory.tagnum = -1 ;
  G__G__ThreadLN_TAtomicCount.tagnum = -1 ;
  G__G__ThreadLN_TLockFile.tagnum = -1 ;
  G__G__ThreadLN_pthread_cond_t.tagnum = -1 ;
  G__G__ThreadLN_TPosixMutex.tagnum = -1 ;
  G__G__ThreadLN_TPosixCondition.tagnum = -1 ;
  G__G__ThreadLN_pthread_mutex_t.tagnum = -1 ;
  G__G__ThreadLN_TPosixThreadCleanUp.tagnum = -1 ;
  G__G__ThreadLN_TPosixThreadFactory.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Thread() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_va_list);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TString);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),sizeof(TConditionImp),-1,29956,"Condition variable implementation ABC",G__setup_memvarTConditionImp,G__setup_memfuncTConditionImp);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex),sizeof(TMutex),-1,32512,"Mutex lock class",G__setup_memvarTMutex,G__setup_memfuncTMutex);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TCondition),sizeof(TCondition),-1,32512,"Condition variable class",G__setup_memvarTCondition,G__setup_memfuncTCondition);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread),sizeof(TThread),-1,65280,"Thread class",G__setup_memvarTThread,G__setup_memfuncTThread);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TVirtualMutex);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),sizeof(TThreadImp),-1,29965,"ThreadImp class",G__setup_memvarTThreadImp,G__setup_memfuncTThreadImp);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),sizeof(TPosixThread),-1,29952,"TPosixThread class",G__setup_memvarTPosixThread,G__setup_memfuncTPosixThread);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TThreadcLcLEPriority);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TThreadcLcLEState);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),sizeof(TMutexImp),-1,29955,"Mutex lock implementation ABC",G__setup_memvarTMutexImp,G__setup_memfuncTMutexImp);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock),sizeof(TRWLock),-1,32512,"Reader/writer lock",G__setup_memvarTRWLock,G__setup_memfuncTRWLock);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore),sizeof(TSemaphore),-1,32512,"Counting semaphore class",G__setup_memvarTSemaphore,G__setup_memfuncTSemaphore);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),sizeof(TThreadFactory),-1,62723,"Thread factory ABC",G__setup_memvarTThreadFactory,G__setup_memfuncTThreadFactory);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TAtomicCount),sizeof(TAtomicCount),-1,35328,(char*)NULL,G__setup_memvarTAtomicCount,G__setup_memfuncTAtomicCount);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TLockFile),sizeof(TLockFile),-1,65024,"Lock an object using a file",G__setup_memvarTLockFile,G__setup_memfuncTLockFile);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_pthread_cond_t);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),sizeof(TPosixMutex),-1,29952,"Posix mutex lock",G__setup_memvarTPosixMutex,G__setup_memfuncTPosixMutex);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),sizeof(TPosixCondition),-1,62464,"Posix condition variable",G__setup_memvarTPosixCondition,G__setup_memfuncTPosixCondition);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_pthread_mutex_t);
   G__get_linked_tagnum_fwd(&G__G__ThreadLN_TPosixThreadCleanUp);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),sizeof(TPosixThreadFactory),-1,62720,"Posix thread factory",G__setup_memvarTPosixThreadFactory,G__setup_memfuncTPosixThreadFactory);
}
extern "C" void G__cpp_setupG__Thread(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Thread()");
  G__set_cpp_environmentG__Thread();
  G__cpp_setup_tagtableG__Thread();

  G__cpp_setup_inheritanceG__Thread();

  G__cpp_setup_typetableG__Thread();

  G__cpp_setup_memvarG__Thread();

  G__cpp_setup_memfuncG__Thread();
  G__cpp_setup_globalG__Thread();
  G__cpp_setup_funcG__Thread();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Thread();
  return;
}
class G__cpp_setup_initG__Thread {
  public:
    G__cpp_setup_initG__Thread() { G__add_setup_func("G__Thread",(G__incsetup)(&G__cpp_setupG__Thread)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Thread() { G__remove_setup_func("G__Thread"); }
};
G__cpp_setup_initG__Thread G__cpp_setup_initializerG__Thread;

