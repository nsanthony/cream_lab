//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:49:50 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__ASImage.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TASImage_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TASImage(void *p = 0);
   static void *newArray_TASImage(Long_t size, void *p);
   static void delete_TASImage(void *p);
   static void deleteArray_TASImage(void *p);
   static void destruct_TASImage(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TASImage*)
   {
      ::TASImage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TASImage >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TASImage", ::TASImage::Class_Version(), "include/TASImage.h", 33,
                  typeid(::TASImage), DefineBehavior(ptr, ptr),
                  &::TASImage::Dictionary, isa_proxy, 1,
                  sizeof(::TASImage) );
      instance.SetNew(&new_TASImage);
      instance.SetNewArray(&newArray_TASImage);
      instance.SetDelete(&delete_TASImage);
      instance.SetDeleteArray(&deleteArray_TASImage);
      instance.SetDestructor(&destruct_TASImage);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TASImage*)
   {
      return GenerateInitInstanceLocal((::TASImage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TASImage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TASImagePlugin_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TASImagePlugin(void *p);
   static void deleteArray_TASImagePlugin(void *p);
   static void destruct_TASImagePlugin(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TASImagePlugin*)
   {
      ::TASImagePlugin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TASImagePlugin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TASImagePlugin", ::TASImagePlugin::Class_Version(), "include/TASImagePlugin.h", 28,
                  typeid(::TASImagePlugin), DefineBehavior(ptr, ptr),
                  &::TASImagePlugin::Dictionary, isa_proxy, 0,
                  sizeof(::TASImagePlugin) );
      instance.SetDelete(&delete_TASImagePlugin);
      instance.SetDeleteArray(&deleteArray_TASImagePlugin);
      instance.SetDestructor(&destruct_TASImagePlugin);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TASImagePlugin*)
   {
      return GenerateInitInstanceLocal((::TASImagePlugin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TASImagePlugin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TASPluginGS_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TASPluginGS(void *p);
   static void deleteArray_TASPluginGS(void *p);
   static void destruct_TASPluginGS(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TASPluginGS*)
   {
      ::TASPluginGS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TASPluginGS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TASPluginGS", ::TASPluginGS::Class_Version(), "include/TASPluginGS.h", 27,
                  typeid(::TASPluginGS), DefineBehavior(ptr, ptr),
                  &::TASPluginGS::Dictionary, isa_proxy, 0,
                  sizeof(::TASPluginGS) );
      instance.SetDelete(&delete_TASPluginGS);
      instance.SetDeleteArray(&deleteArray_TASPluginGS);
      instance.SetDestructor(&destruct_TASPluginGS);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TASPluginGS*)
   {
      return GenerateInitInstanceLocal((::TASPluginGS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TASPluginGS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TASImage::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TASImage::Class_Name()
{
   return "TASImage";
}

//______________________________________________________________________________
const char *TASImage::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TASImage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TASImage::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TASImage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TASImage::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TASImage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TASImage::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TASImage*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TASImagePlugin::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TASImagePlugin::Class_Name()
{
   return "TASImagePlugin";
}

//______________________________________________________________________________
const char *TASImagePlugin::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TASImagePlugin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TASImagePlugin::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TASImagePlugin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TASImagePlugin::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TASImagePlugin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TASImagePlugin::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TASImagePlugin*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TASPluginGS::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TASPluginGS::Class_Name()
{
   return "TASPluginGS";
}

//______________________________________________________________________________
const char *TASPluginGS::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TASPluginGS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TASPluginGS::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TASPluginGS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TASPluginGS::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TASPluginGS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TASPluginGS::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TASPluginGS*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TASImage::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TASImage.
      TClass *R__cl = ::TASImage::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fImage", &fImage);
      R__insp.Inspect(R__cl, R__parent, "*fScaledImage", &fScaledImage);
      R__insp.Inspect(R__cl, R__parent, "fMaxValue", &fMaxValue);
      R__insp.Inspect(R__cl, R__parent, "fMinValue", &fMinValue);
      R__insp.Inspect(R__cl, R__parent, "fZoomOffX", &fZoomOffX);
      R__insp.Inspect(R__cl, R__parent, "fZoomOffY", &fZoomOffY);
      R__insp.Inspect(R__cl, R__parent, "fZoomWidth", &fZoomWidth);
      R__insp.Inspect(R__cl, R__parent, "fZoomHeight", &fZoomHeight);
      R__insp.Inspect(R__cl, R__parent, "fZoomUpdate", &fZoomUpdate);
      R__insp.Inspect(R__cl, R__parent, "fEditable", &fEditable);
      R__insp.Inspect(R__cl, R__parent, "fPaintMode", &fPaintMode);
      R__insp.Inspect(R__cl, R__parent, "*fGrayImage", &fGrayImage);
      R__insp.Inspect(R__cl, R__parent, "fIsGray", &fIsGray);
      TImage::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TASImage(void *p) {
      return  p ? new(p) ::TASImage : new ::TASImage;
   }
   static void *newArray_TASImage(Long_t nElements, void *p) {
      return p ? new(p) ::TASImage[nElements] : new ::TASImage[nElements];
   }
   // Wrapper around operator delete
   static void delete_TASImage(void *p) {
      delete ((::TASImage*)p);
   }
   static void deleteArray_TASImage(void *p) {
      delete [] ((::TASImage*)p);
   }
   static void destruct_TASImage(void *p) {
      typedef ::TASImage current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TASImage

//______________________________________________________________________________
void TASImagePlugin::Streamer(TBuffer &R__b)
{
   // Stream an object of class TASImagePlugin.

   TImagePlugin::Streamer(R__b);
}

//______________________________________________________________________________
void TASImagePlugin::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TASImagePlugin.
      TClass *R__cl = ::TASImagePlugin::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TImagePlugin::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TASImagePlugin(void *p) {
      delete ((::TASImagePlugin*)p);
   }
   static void deleteArray_TASImagePlugin(void *p) {
      delete [] ((::TASImagePlugin*)p);
   }
   static void destruct_TASImagePlugin(void *p) {
      typedef ::TASImagePlugin current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TASImagePlugin

//______________________________________________________________________________
void TASPluginGS::Streamer(TBuffer &R__b)
{
   // Stream an object of class TASPluginGS.

   TASImagePlugin::Streamer(R__b);
}

//______________________________________________________________________________
void TASPluginGS::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TASPluginGS.
      TClass *R__cl = ::TASPluginGS::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fInterpreter", &fInterpreter);
      TASImagePlugin::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TASPluginGS(void *p) {
      delete ((::TASPluginGS*)p);
   }
   static void deleteArray_TASPluginGS(void *p) {
      delete [] ((::TASPluginGS*)p);
   }
   static void destruct_TASPluginGS(void *p) {
      typedef ::TASPluginGS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TASPluginGS

/********************************************************
* graf2d/asimage/src/G__ASImage.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__ASImage();

extern "C" void G__set_cpp_environmentG__ASImage() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TASImage.h");
  G__add_compiledheader("TASImagePlugin.h");
  G__add_compiledheader("TASPluginGS.h");
  G__cpp_reset_tagtableG__ASImage();
}
#include <new>
extern "C" int G__cpp_dllrevG__ASImage() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TASImage */
static int G__G__ASImage_143_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage[n];
     } else {
       p = new((void*) gvp) TASImage[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage;
     } else {
       p = new((void*) gvp) TASImage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TASImage((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TASImage((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage((const char*) G__int(libp->para[0]), (TImage::EImageFileTypes) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TASImage((const char*) G__int(libp->para[0]), (TImage::EImageFileTypes) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TASImage((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage(
(const char*) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (TImagePalette*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TASImage(
(const char*) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (TImagePalette*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage(
(const char*) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TASImage(
(const char*) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage(
(const char*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (TImagePalette*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TASImage(
(const char*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (TImagePalette*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage(
(const char*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TASImage(
(const char*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage(
(const char*) G__int(libp->para[0]), *(TVectorD*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (TImagePalette*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TASImage(
(const char*) G__int(libp->para[0]), *(TVectorD*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (TImagePalette*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TASImage(
(const char*) G__int(libp->para[0]), *(TVectorD*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TASImage(
(const char*) G__int(libp->para[0]), *(TVectorD*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TASImage(*(TASImage*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TASImage(*(TASImage*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TASImage& obj = ((TASImage*) G__getstructoffset())->operator=(*(TASImage*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TASImage*) G__getstructoffset())->GetScaledWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TASImage*) G__getstructoffset())->GetScaledHeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TASImage*) G__getstructoffset())->GetImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TASImage*) G__getstructoffset())->SetImage((ASImage*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TASImage*) G__getstructoffset())->GetZoomPosition(*(UInt_t*) G__UIntref(&libp->para[0]), *(UInt_t*) G__UIntref(&libp->para[1])
, *(UInt_t*) G__UIntref(&libp->para[2]), *(UInt_t*) G__UIntref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TASImage::GetVisual());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) TASImage::AlphaBlend((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      TASImage::Image2Drawable(
(ASImage*) G__int(libp->para[0]), (Drawable_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (Option_t*) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      TASImage::Image2Drawable(
(ASImage*) G__int(libp->para[0]), (Drawable_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      TASImage::Image2Drawable(
(ASImage*) G__int(libp->para[0]), (Drawable_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      TASImage::Image2Drawable((ASImage*) G__int(libp->para[0]), (Drawable_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      TASImage::Image2Drawable((ASImage*) G__int(libp->para[0]), (Drawable_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      TASImage::Image2Drawable((ASImage*) G__int(libp->para[0]), (Drawable_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((TASImage*) G__getstructoffset())->SetJpegDpi((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TASImage*) G__getstructoffset())->SetJpegDpi((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TASImage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASImage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TASImage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TASImage::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TASImage*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASImage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TASImage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASImage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_143_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TASImage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TASImage G__TTASImage;
static int G__G__ASImage_143_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TASImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TASImage*) (soff+(sizeof(TASImage)*i)))->~G__TTASImage();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TASImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TASImage*) (soff))->~G__TTASImage();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TASImagePlugin */
static int G__G__ASImage_146_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImagePlugin* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TASImagePlugin((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TASImagePlugin((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TASImagePlugin*) G__getstructoffset())->File2ASImage((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TASImagePlugin*) G__getstructoffset())->ASImage2File((ASImage*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TASImagePlugin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASImagePlugin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TASImagePlugin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TASImagePlugin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TASImagePlugin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASImagePlugin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TASImagePlugin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASImagePlugin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_146_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TASImagePlugin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ASImage_146_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TASImagePlugin* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TASImagePlugin(*(TASImagePlugin*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TASImagePlugin G__TTASImagePlugin;
static int G__G__ASImage_146_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TASImagePlugin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TASImagePlugin*) (soff+(sizeof(TASImagePlugin)*i)))->~G__TTASImagePlugin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TASImagePlugin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TASImagePlugin*) (soff))->~G__TTASImagePlugin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ASImage_146_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASImagePlugin* dest = (TASImagePlugin*) G__getstructoffset();
   *dest = *(TASImagePlugin*) libp->para[0].ref;
   const TASImagePlugin& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TASPluginGS */
static int G__G__ASImage_147_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASPluginGS* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TASPluginGS((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TASPluginGS((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TASPluginGS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASPluginGS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TASPluginGS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TASPluginGS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TASPluginGS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASPluginGS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TASPluginGS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TASPluginGS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ASImage_147_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TASPluginGS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ASImage_147_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TASPluginGS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TASPluginGS(*(TASPluginGS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TASPluginGS G__TTASPluginGS;
static int G__G__ASImage_147_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TASPluginGS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TASPluginGS*) (soff+(sizeof(TASPluginGS)*i)))->~G__TTASPluginGS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TASPluginGS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TASPluginGS*) (soff))->~G__TTASPluginGS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ASImage_147_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TASPluginGS* dest = (TASPluginGS*) G__getstructoffset();
   *dest = *(TASPluginGS*) libp->para[0].ref;
   const TASPluginGS& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TASImage */

/* TASImagePlugin */

/* TASPluginGS */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__ASImage {
 public:
  G__Sizep2memfuncG__ASImage(): p(&G__Sizep2memfuncG__ASImage::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__ASImage::*p)();
};

size_t G__get_sizep2memfuncG__ASImage()
{
  G__Sizep2memfuncG__ASImage a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__ASImage() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ASImageLN_TASImage))) {
     TASImage *G__Lderived;
     G__Lderived=(TASImage*)0x1000;
     {
       TImage *G__Lpbase=(TImage*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImage),G__get_linked_tagnum(&G__G__ASImageLN_TImage),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImage),G__get_linked_tagnum(&G__G__ASImageLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImage),G__get_linked_tagnum(&G__G__ASImageLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttImage *G__Lpbase=(TAttImage*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImage),G__get_linked_tagnum(&G__G__ASImageLN_TAttImage),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin))) {
     TASImagePlugin *G__Lderived;
     G__Lderived=(TASImagePlugin*)0x1000;
     {
       TImagePlugin *G__Lpbase=(TImagePlugin*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin),G__get_linked_tagnum(&G__G__ASImageLN_TImagePlugin),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin),G__get_linked_tagnum(&G__G__ASImageLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS))) {
     TASPluginGS *G__Lderived;
     G__Lderived=(TASPluginGS*)0x1000;
     {
       TASImagePlugin *G__Lpbase=(TASImagePlugin*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS),G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TImagePlugin *G__Lpbase=(TImagePlugin*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS),G__get_linked_tagnum(&G__G__ASImageLN_TImagePlugin),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS),G__get_linked_tagnum(&G__G__ASImageLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__ASImage() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__ASImageLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ASImageLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ASImageLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ASImageLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ASImageLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__ASImageLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Drawable_t",107,-1,0,-1);
   G__setnewtype(-1,"Drawable handle",0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__ASImageLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorD",117,G__get_linked_tagnum(&G__G__ASImageLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TASImage */
static void G__setup_memvarTASImage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   { TASImage *p; p=(TASImage*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ASImageLN_TASImagecLcLdA),-1,-2,1,"kNoZoom=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ASImageLN_TASImagecLcLdA),-1,-2,1,"kZoom=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ASImageLN_TASImagecLcLdA),-1,-2,1,"kZoomOps=-1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ASImageLN_TASImagecLcLdA),-1,-2,1,"kReadWritePNG=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ASImageLN_TASImagecLcLdA),-1,-2,1,"kReadWriteVector=1",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ASImageLN_ASImage),-1,-1,2,"fImage=",0,"! pointer to image structure of original image");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ASImageLN_TASImage),-1,-1,2,"fScaledImage=",0,"! temporary scaled and zoomed image produced from original image");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxValue=",0,"! max value in image");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinValue=",0,"! min value in image");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fZoomOffX=",0,"! X - offset for zooming in image pixels");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fZoomOffY=",0,"! Y - offset for zooming im image pixels");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fZoomWidth=",0,"! width of zoomed image in image pixels");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fZoomHeight=",0,"! hight of zoomed image in image pixels");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fZoomUpdate=",0,"! kZoom - new zooming required, kZoomOps - other ops in action, kNoZoom - no zooming or ops");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fEditable=",0,"! kTRUE image can be resized, moved by resizing/moving gPad");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPaintMode=",0,"! 1 - fast mode, 0 - low memory slow mode");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ASImageLN_ASImage),-1,-1,2,"fGrayImage=",0,"! gray image");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsGray=",0,"! kTRUE if image is gray");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ASImageLN_THashTable),-1,-2,2,"fgPlugList=",0,"! hash table containing loaded plugins");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ASImageLN_ASVisual),-1,-2,2,"fgVisual=",0,"pointer to visual structure");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fgInit=",0,"global flag to init afterimage only once");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ASImageLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TASImagePlugin */
static void G__setup_memvarTASImagePlugin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin));
   { TASImagePlugin *p; p=(TASImagePlugin*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ASImageLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TASPluginGS */
static void G__setup_memvarTASPluginGS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS));
   { TASPluginGS *p; p=(TASPluginGS*)0x1000; if (p) { }
   G__memvar_setup((void*)0,67,0,0,-1,-1,-1,4,"fInterpreter=",0,"path to GhostScript interpreter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ASImageLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__ASImage() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTASImage(void) {
   /* TASImage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImage));
   G__memfunc_setup("DrawVLine",876,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"h - 'UInt_t' 0 - x h - 'UInt_t' 0 - y1 "
"h - 'UInt_t' 0 - y2 h - 'UInt_t' 0 - col "
"h - 'UInt_t' 0 - thick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawHLine",862,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"h - 'UInt_t' 0 - y h - 'UInt_t' 0 - x1 "
"h - 'UInt_t' 0 - x2 h - 'UInt_t' 0 - col "
"h - 'UInt_t' 0 - thick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawLineInternal",1619,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"h - 'UInt_t' 0 - x1 h - 'UInt_t' 0 - y1 "
"h - 'UInt_t' 0 - x2 h - 'UInt_t' 0 - y2 "
"h - 'UInt_t' 0 - col h - 'UInt_t' 0 - thick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawWideLine",1183,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"h - 'UInt_t' 0 - x1 h - 'UInt_t' 0 - y1 "
"h - 'UInt_t' 0 - x2 h - 'UInt_t' 0 - y2 "
"h - 'UInt_t' 0 - col h - 'UInt_t' 0 - thick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawDashHLine",1246,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 4, 0, 
"h - 'UInt_t' 0 - y h - 'UInt_t' 0 - x1 "
"h - 'UInt_t' 0 - x2 h - 'UInt_t' 0 - nDash "
"C - - 10 - pDash h - 'UInt_t' 0 - col "
"h - 'UInt_t' 0 - thick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawDashVLine",1260,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 4, 0, 
"h - 'UInt_t' 0 - x h - 'UInt_t' 0 - y1 "
"h - 'UInt_t' 0 - y2 h - 'UInt_t' 0 - nDash "
"C - - 10 - pDash h - 'UInt_t' 0 - col "
"h - 'UInt_t' 0 - thick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawDashZLine",1264,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 4, 0, 
"h - 'UInt_t' 0 - x1 h - 'UInt_t' 0 - y1 "
"h - 'UInt_t' 0 - x2 h - 'UInt_t' 0 - y2 "
"h - 'UInt_t' 0 - nDash C - - 10 - pDash "
"h - 'UInt_t' 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawDashZTLine",1348,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 8, 1, 4, 0, 
"h - 'UInt_t' 0 - x1 h - 'UInt_t' 0 - y1 "
"h - 'UInt_t' 0 - x2 h - 'UInt_t' 0 - y2 "
"h - 'UInt_t' 0 - nDash C - - 10 - pDash "
"h - 'UInt_t' 0 - col h - 'UInt_t' 0 - thick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPolygonSpans",1549,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 4, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"H - 'UInt_t' 0 - nspans U 'TPoint' - 2 - firstPoint "
"H - 'UInt_t' 2 - firstWidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFillAreaSpans",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"H - 'UInt_t' 0 - nspans U 'TPoint' - 2 - firstPoint "
"H - 'UInt_t' 2 - firstWidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillRectangleInternal",2137,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"h - 'UInt_t' 0 - col i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y h - 'UInt_t' 0 - width "
"h - 'UInt_t' 0 - height", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawTextTTF",1057,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 4, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"C - - 10 - text i - 'Int_t' 0 - size "
"h - 'UInt_t' 0 - color C - - 10 - font_name "
"f - 'Float_t' 0 - angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawGlyph",914,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"Y - - 0 - bitmap h - 'UInt_t' 0 - color "
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaults",1124,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateThumbnail",1528,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DestroyImage",1229,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TypeFromMagicNumber",1920,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 1, 1, 4, 1, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileType",1090,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ASImageLN_TImagecLcLEImageFileTypes), -1, 0, 1, 1, 2, 0, "C - - 10 - ext", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapFileTypes",1203,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i 'TImage::EImageFileTypes' - 1 - type h - 'UInt_t' 1 - astype "
"g - 'Bool_t' 0 'kTRUE' toas", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapQuality",1031,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i 'TAttImage::EImageQuality' - 1 - quality h - 'UInt_t' 1 - asquality "
"g - 'Bool_t' 0 'kTRUE' toas", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitVisual",1032,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TASImage",715,G__G__ASImage_143_0_22, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASImage), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TASImage",715,G__G__ASImage_143_0_23, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASImage), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - w h - 'UInt_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TASImage",715,G__G__ASImage_143_0_24, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASImage), -1, 0, 2, 1, 1, 0, 
"C - - 10 - file i 'TImage::EImageFileTypes' - 0 'kUnknown' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TASImage",715,G__G__ASImage_143_0_25, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASImage), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name D - 'Double_t' 10 - imageData "
"h - 'UInt_t' 0 - width h - 'UInt_t' 0 - height "
"U 'TImagePalette' - 0 '0' palette", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TASImage",715,G__G__ASImage_143_0_26, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASImage), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name u 'TArrayD' - 11 - imageData "
"h - 'UInt_t' 0 - width U 'TImagePalette' - 0 '0' palette", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TASImage",715,G__G__ASImage_143_0_27, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASImage), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name u 'TVectorT<double>' 'TVectorD' 11 - imageData "
"h - 'UInt_t' 0 - width U 'TImagePalette' - 0 '0' palette", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TASImage",715,G__G__ASImage_143_0_28, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASImage), -1, 0, 1, 1, 1, 0, "u 'TASImage' - 11 - img", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ASImage_143_0_29, 117, G__get_linked_tagnum(&G__G__ASImageLN_TASImage), -1, 1, 1, 1, 1, 0, "u 'TASImage' - 11 - img", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ASImageLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - newname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEditable",1094,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' on", "*TOGGLE*", (void*) NULL, 1);
   G__memfunc_setup("IsEditable",982,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTitle",814,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' title", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("GetTitle",802,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIconName",1066,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FromPad",681,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TVirtualPad' - 0 - pad i - 'Int_t' 0 '0' x "
"i - 'Int_t' 0 '0' y h - 'UInt_t' 0 '0' w "
"h - 'UInt_t' 0 '0' h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetObjectInfo",1283,(G__InterfaceMethod) NULL,67, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPalette",1019,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TImagePalette' - 10 - palette", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Zoom",421,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 0 - offX h - 'UInt_t' 0 - offY "
"h - 'UInt_t' 0 - width h - 'UInt_t' 0 - height", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("UnZoom",616,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Flip",395,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '180' flip", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Mirror",635,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' vert", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Scale",488,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - width h - 'UInt_t' 0 - height", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Slice",496,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"h - 'UInt_t' 0 - xStart h - 'UInt_t' 0 - xEnd "
"h - 'UInt_t' 0 - yStart h - 'UInt_t' 0 - yEnd "
"h - 'UInt_t' 0 - toWidth h - 'UInt_t' 0 - toHeight", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Tile",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - width h - 'UInt_t' 0 - height", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Crop",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 '0' x i - 'Int_t' 0 '0' y "
"h - 'UInt_t' 0 '0' width h - 'UInt_t' 0 '0' height", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Pad",277,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"C - - 10 '\"#00FFFFFF\"' color h - 'UInt_t' 0 '0' left "
"h - 'UInt_t' 0 '0' right h - 'UInt_t' 0 '0' top "
"h - 'UInt_t' 0 '0' bottom", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Blur",405,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '3' hr d - 'Double_t' 0 '3' vr", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Vectorize",955,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 '256' max_colors h - 'UInt_t' 0 '4' dither "
"i - 'Int_t' 0 '1' opaque_threshold", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Gray",403,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' on", "*TOGGLE* *GETTER=IsGray", (void*) NULL, 1);
   G__memfunc_setup("StartPaletteEditor",1860,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("HSV",241,(G__InterfaceMethod) NULL,121, -1, -1, 0, 9, 1, 1, 0, 
"h - 'UInt_t' 0 '0' hue h - 'UInt_t' 0 '360' radius "
"i - 'Int_t' 0 '0' H i - 'Int_t' 0 '0' S "
"i - 'Int_t' 0 '0' V i - 'Int_t' 0 '0' x "
"i - 'Int_t' 0 '0' y h - 'UInt_t' 0 '0' width "
"h - 'UInt_t' 0 '0' height", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Merge",496,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TImage' - 10 - im C - - 10 '\"alphablend\"' op "
"i - 'Int_t' 0 '0' x i - 'Int_t' 0 '0' y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Append",600,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TImage' - 10 - im C - - 10 '\"+\"' option "
"C - - 10 '\"#00000000\"' color", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Gradient",814,(G__InterfaceMethod) NULL,121, -1, -1, 0, 7, 1, 1, 0, 
"h - 'UInt_t' 0 '0' angle C - - 10 '\"#FFFFFF #000000\"' colors "
"C - - 10 '0' offsets i - 'Int_t' 0 '0' x "
"i - 'Int_t' 0 '0' y h - 'UInt_t' 0 '0' width "
"h - 'UInt_t' 0 '0' height", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Bevel",494,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 '0' x i - 'Int_t' 0 '0' y "
"h - 'UInt_t' 0 '0' width h - 'UInt_t' 0 '0' height "
"C - - 10 '\"#ffdddddd\"' hi C - - 10 '\"#ff555555\"' lo "
"r - 'UShort_t' 0 '1' thick g - 'Bool_t' 0 'kFALSE' pressed", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawText",819,(G__InterfaceMethod) NULL,121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 '0' x i - 'Int_t' 0 '0' y "
"C - - 10 '\"\"' text i - 'Int_t' 0 '12' size "
"C - - 10 '0' color C - - 10 '\"fixed\"' font "
"i 'TImage::EText3DType' - 0 'TImage::kPlain' type C - - 10 '0' fore_file "
"f - 'Float_t' 0 '0' angle", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawText",819,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TText' - 0 - text i - 'Int_t' 0 '0' x "
"i - 'Int_t' 0 '0' y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginPaint",993,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fast", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EndPaint",787,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawLine",790,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"h - 'UInt_t' 0 - x1 h - 'UInt_t' 0 - y1 "
"h - 'UInt_t' 0 - x2 h - 'UInt_t' 0 - y2 "
"C - - 10 '\"#000000\"' col h - 'UInt_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawDashLine",1174,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 0, 
"h - 'UInt_t' 0 - x1 h - 'UInt_t' 0 - y1 "
"h - 'UInt_t' 0 - x2 h - 'UInt_t' 0 - y2 "
"h - 'UInt_t' 0 - nDash C - - 10 - pDash "
"C - - 10 '\"#000000\"' col h - 'UInt_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawBox",695,(G__InterfaceMethod) NULL,121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - x1 i - 'Int_t' 0 - y1 "
"i - 'Int_t' 0 - x2 i - 'Int_t' 0 - y2 "
"C - - 10 '\"#000000\"' col h - 'UInt_t' 0 '1' thick "
"i - 'Int_t' 0 '0' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawRectangle",1315,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"h - 'UInt_t' 0 - x h - 'UInt_t' 0 - y "
"h - 'UInt_t' 0 - w h - 'UInt_t' 0 - h "
"C - - 10 '\"#000000\"' col h - 'UInt_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillRectangle",1308,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"C - - 10 '0' col i - 'Int_t' 0 '0' x "
"i - 'Int_t' 0 '0' y h - 'UInt_t' 0 '0' width "
"h - 'UInt_t' 0 '0' height", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPolyLine",1210,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"h - 'UInt_t' 0 - nn U 'TPoint' - 0 - xy "
"C - - 10 '\"#000000\"' col h - 'UInt_t' 0 '1' thick "
"i 'TImage::ECoordMode' - 0 'kCoordModeOrigin' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PutPixel",827,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"C - - 10 '\"#000000\"' col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PolyPoint",942,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"C - - 10 '\"#000000\"' col i 'TImage::ECoordMode' - 0 'kCoordModeOrigin' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawSegments",1236,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 0 - nseg U 'Segment_t' - 0 - seg "
"C - - 10 '\"#000000\"' col h - 'UInt_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillPolygon",1135,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"C - - 10 '\"#000000\"' col C - - 10 '0' stipple "
"h - 'UInt_t' 0 '16' w h - 'UInt_t' 0 '16' h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillPolygon",1135,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"U 'TImage' - 0 - tile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CropPolygon",1148,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawFillArea",1166,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"C - - 10 '\"#000000\"' col C - - 10 '0' stipple "
"h - 'UInt_t' 0 '16' w h - 'UInt_t' 0 '16' h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawFillArea",1166,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"U 'TImage' - 0 - tile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillSpans",908,(G__InterfaceMethod) NULL,121, -1, -1, 0, 7, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"H - 'UInt_t' 0 - widths C - - 10 '\"#000000\"' col "
"C - - 10 '0' stipple h - 'UInt_t' 0 '16' w "
"h - 'UInt_t' 0 '16' h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillSpans",908,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"H - 'UInt_t' 0 - widths U 'TImage' - 0 - tile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CropSpans",921,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - npt U 'TPoint' - 0 - ppt "
"H - 'UInt_t' 0 - widths", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CopyArea",788,(G__InterfaceMethod) NULL,121, -1, -1, 0, 9, 1, 1, 0, 
"U 'TImage' - 0 - dst i - 'Int_t' 0 - xsrc "
"i - 'Int_t' 0 - ysrc h - 'UInt_t' 0 - w "
"h - 'UInt_t' 0 - h i - 'Int_t' 0 '0' xdst "
"i - 'Int_t' 0 '0' ydst i - 'Int_t' 0 '3' gfunc "
"i 'TImage::EColorChan' - 0 'kAllChan' chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawCellArray",1293,(G__InterfaceMethod) NULL,121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - x1 i - 'Int_t' 0 - y1 "
"i - 'Int_t' 0 - x2 i - 'Int_t' 0 - y2 "
"i - 'Int_t' 0 - nx i - 'Int_t' 0 - ny "
"H - 'UInt_t' 0 - ic", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FloodFill",891,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"C - - 10 - col C - - 10 - min_col "
"C - - 10 '0' max_col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawCubeBezier",1390,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - x1 i - 'Int_t' 0 - y1 "
"i - 'Int_t' 0 - x2 i - 'Int_t' 0 - y2 "
"i - 'Int_t' 0 - x3 i - 'Int_t' 0 - y3 "
"C - - 10 '\"#000000\"' col h - 'UInt_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawStraightEllips",1853,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - rx i - 'Int_t' 0 - ry "
"C - - 10 '\"#000000\"' col i - 'Int_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawCircle",992,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - r C - - 10 '\"#000000\"' col "
"i - 'Int_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawEllips",1015,(G__InterfaceMethod) NULL,121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - rx i - 'Int_t' 0 - ry "
"i - 'Int_t' 0 - angle C - - 10 '\"#000000\"' col "
"i - 'Int_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawEllips2",1065,(G__InterfaceMethod) NULL,121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - rx i - 'Int_t' 0 - ry "
"i - 'Int_t' 0 - angle C - - 10 '\"#000000\"' col "
"i - 'Int_t' 0 '1' thick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadImage",863,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - file i 'TImage::EImageFileTypes' - 0 'TImage::kUnknown' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteImage",1006,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - file i 'TImage::EImageFileTypes' - 0 'TImage::kUnknown' type", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetImage",783,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 10 - imageData h - 'UInt_t' 0 - width "
"h - 'UInt_t' 0 - height U 'TImagePalette' - 0 '0' palette", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetImage",783,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TArrayD' - 11 - imageData h - 'UInt_t' 0 - width "
"U 'TImagePalette' - 0 '0' palette", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetImage",783,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - imageData h - 'UInt_t' 0 - width "
"U 'TImagePalette' - 0 '0' palette", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetImage",783,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'Pixmap_t' 0 - pxm k - 'Pixmap_t' 0 '0' mask", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FromWindow",1036,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"k - 'Drawable_t' 0 - wid i - 'Int_t' 0 '0' x "
"i - 'Int_t' 0 '0' y h - 'UInt_t' 0 '0' w "
"h - 'UInt_t' 0 '0' h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FromGLBuffer",1153,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"B - 'UChar_t' 0 - buf h - 'UInt_t' 0 - w "
"h - 'UInt_t' 0 - h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidth",800,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHeight",889,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetScaledWidth",1388,G__G__ASImage_143_0_101, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScaledHeight",1477,G__G__ASImage_143_0_102, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsGray",591,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImage",771,G__G__ASImage_143_0_105, 85, G__get_linked_tagnum(&G__G__ASImageLN_ASImage), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImage",783,G__G__ASImage_143_0_106, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ASImage' - 0 - image", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScaledImage",1359,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ASImageLN_TImage), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPixmap",911,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("Pixmap_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMask",684,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("Pixmap_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPixels",917,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ASImageLN_TArrayL), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 '0' x i - 'Int_t' 0 '0' y "
"h - 'UInt_t' 0 '0' w h - 'UInt_t' 0 '0' h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetArray",799,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ASImageLN_TArrayD), -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 '0' w h - 'UInt_t' 0 '0' h "
"U 'TImagePalette' - 0 'gWebImagePalette' pal", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetArgbArray",1179,(G__InterfaceMethod) NULL,72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRgbaArray",1179,(G__InterfaceMethod) NULL,72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVecArray",1085,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetScanline",1101,(G__InterfaceMethod) NULL,72, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImageBuffer",1373,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 2 - buffer I - - 0 - size "
"i 'TImage::EImageFileTypes' - 0 'TImage::kPng' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZoomPosition",1562,G__G__ASImage_143_0_117, 121, -1, -1, 0, 4, 1, 1, 8, 
"h - 'UInt_t' 1 - x h - 'UInt_t' 1 - y "
"h - 'UInt_t' 1 - w h - 'UInt_t' 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImageBuffer",1385,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 2 - buffer i 'TImage::EImageFileTypes' - 0 'TImage::kPng' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintImage",991,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 0, 
"k - 'Drawable_t' 0 - wid i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y i - 'Int_t' 0 '0' xsrc "
"i - 'Int_t' 0 '0' ysrc h - 'UInt_t' 0 '0' wsrc "
"h - 'UInt_t' 0 '0' hsrc C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPaletteEnabled",1702,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' on", "*TOGGLE*", (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVisual",916,G__G__ASImage_143_0_122, 85, G__get_linked_tagnum(&G__G__ASImageLN_ASVisual), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const ASVisual* (*)())(&TASImage::GetVisual) ), 0);
   G__memfunc_setup("AlphaBlend",971,G__G__ASImage_143_0_123, 104, -1, G__defined_typename("UInt_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 0 - bot h - 'UInt_t' 0 - top", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, UInt_t))(&TASImage::AlphaBlend) ), 0);
   G__memfunc_setup("Image2Drawable",1335,G__G__ASImage_143_0_124, 121, -1, -1, 0, 9, 3, 1, 0, 
"U 'ASImage' - 0 - im k - 'Drawable_t' 0 - wid "
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 '0' xsrc i - 'Int_t' 0 '0' ysrc "
"h - 'UInt_t' 0 '0' wsrc h - 'UInt_t' 0 '0' hsrc "
"C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) G__func2void( (void (*)(ASImage*, Drawable_t, Int_t, Int_t, Int_t, Int_t, UInt_t, UInt_t, Option_t*))(&TASImage::Image2Drawable) ), 0);
   G__memfunc_setup("SetJpegDpi",975,G__G__ASImage_143_0_125, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - name h - 'UInt_t' 0 '72' dpi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ASImage_143_0_126, 85, G__get_linked_tagnum(&G__G__ASImageLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TASImage::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ASImage_143_0_127, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASImage::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ASImage_143_0_128, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TASImage::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ASImage_143_0_129, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TASImage::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ASImageLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ASImage_143_0_133, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ASImage_143_0_134, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASImage::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ASImage_143_0_135, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TASImage::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ASImage_143_0_136, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASImage::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ASImage_143_0_137, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TASImage::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TASImage", 841, G__G__ASImage_143_0_138, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTASImagePlugin(void) {
   /* TASImagePlugin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin));
   G__memfunc_setup("TASImagePlugin",1338,G__G__ASImage_146_0_1, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin), -1, 0, 1, 1, 1, 0, "C - - 10 - ext", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFile",764,(G__InterfaceMethod) NULL,66, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - - h - 'UInt_t' 1 - - "
"h - 'UInt_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteFile",907,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - - B - - 0 - - "
"h - 'UInt_t' 0 - - h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("File2ASImage",1065,G__G__ASImage_146_0_4, 85, G__get_linked_tagnum(&G__G__ASImageLN_ASImage), -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ASImage2File",1065,G__G__ASImage_146_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'ASImage' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ASImage_146_0_6, 85, G__get_linked_tagnum(&G__G__ASImageLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TASImagePlugin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ASImage_146_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASImagePlugin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ASImage_146_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TASImagePlugin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ASImage_146_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TASImagePlugin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ASImageLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ASImage_146_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ASImage_146_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASImagePlugin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ASImage_146_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TASImagePlugin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ASImage_146_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASImagePlugin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ASImage_146_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TASImagePlugin::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TASImagePlugin", 1338, G__G__ASImage_146_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin), -1, 0, 1, 1, 1, 0, "u 'TASImagePlugin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TASImagePlugin", 1464, G__G__ASImage_146_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ASImage_146_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin), -1, 1, 1, 1, 1, 0, "u 'TASImagePlugin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTASPluginGS(void) {
   /* TASPluginGS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS));
   G__memfunc_setup("TASPluginGS",1009,G__G__ASImage_147_0_1, 105, G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS), -1, 0, 1, 1, 1, 0, "C - - 10 - ext", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("File2ASImage",1065,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ASImageLN_ASImage), -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ASImage_147_0_3, 85, G__get_linked_tagnum(&G__G__ASImageLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TASPluginGS::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ASImage_147_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASPluginGS::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ASImage_147_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TASPluginGS::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ASImage_147_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TASPluginGS::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ASImageLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ASImage_147_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ASImage_147_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASPluginGS::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ASImage_147_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TASPluginGS::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ASImage_147_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TASPluginGS::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ASImage_147_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TASPluginGS::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TASPluginGS", 1009, G__G__ASImage_147_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS), -1, 0, 1, 1, 1, 0, "u 'TASPluginGS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TASPluginGS", 1135, G__G__ASImage_147_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ASImage_147_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS), -1, 1, 1, 1, 1, 0, "u 'TASPluginGS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__ASImage() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__ASImage() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__ASImage() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__ASImageLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TAttImage = { "TAttImage" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TImagePalette = { "TImagePalette" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TAttImagecLcLEImageQuality = { "TAttImage::EImageQuality" , 101 , -1 };
G__linked_taginfo G__G__ASImageLN_Segment_t = { "Segment_t" , 115 , -1 };
G__linked_taginfo G__G__ASImageLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TVirtualPad = { "TVirtualPad" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TArrayL = { "TArrayL" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TPoint = { "TPoint" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TText = { "TText" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TImage = { "TImage" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TImagecLcLEImageFileTypes = { "TImage::EImageFileTypes" , 101 , -1 };
G__linked_taginfo G__G__ASImageLN_TImagecLcLEText3DType = { "TImage::EText3DType" , 101 , -1 };
G__linked_taginfo G__G__ASImageLN_TImagecLcLECoordMode = { "TImage::ECoordMode" , 101 , -1 };
G__linked_taginfo G__G__ASImageLN_TImagecLcLEColorChan = { "TImage::EColorChan" , 101 , -1 };
G__linked_taginfo G__G__ASImageLN_ASImage = { "ASImage" , 115 , -1 };
G__linked_taginfo G__G__ASImageLN_ASVisual = { "ASVisual" , 115 , -1 };
G__linked_taginfo G__G__ASImageLN_THashTable = { "THashTable" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TASImage = { "TASImage" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TASImagecLcLdA = { "TASImage::$" , 101 , -1 };
G__linked_taginfo G__G__ASImageLN_TImagePlugin = { "TImagePlugin" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TASImagePlugin = { "TASImagePlugin" , 99 , -1 };
G__linked_taginfo G__G__ASImageLN_TASPluginGS = { "TASPluginGS" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__ASImage() {
  G__G__ASImageLN_TClass.tagnum = -1 ;
  G__G__ASImageLN_TBuffer.tagnum = -1 ;
  G__G__ASImageLN_TMemberInspector.tagnum = -1 ;
  G__G__ASImageLN_TObject.tagnum = -1 ;
  G__G__ASImageLN_TNamed.tagnum = -1 ;
  G__G__ASImageLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__ASImageLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__ASImageLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ASImageLN_TBrowser.tagnum = -1 ;
  G__G__ASImageLN_TAttImage.tagnum = -1 ;
  G__G__ASImageLN_TImagePalette.tagnum = -1 ;
  G__G__ASImageLN_TAttImagecLcLEImageQuality.tagnum = -1 ;
  G__G__ASImageLN_Segment_t.tagnum = -1 ;
  G__G__ASImageLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__ASImageLN_TVirtualPad.tagnum = -1 ;
  G__G__ASImageLN_TArrayD.tagnum = -1 ;
  G__G__ASImageLN_TArrayL.tagnum = -1 ;
  G__G__ASImageLN_TPoint.tagnum = -1 ;
  G__G__ASImageLN_TText.tagnum = -1 ;
  G__G__ASImageLN_TImage.tagnum = -1 ;
  G__G__ASImageLN_TImagecLcLEImageFileTypes.tagnum = -1 ;
  G__G__ASImageLN_TImagecLcLEText3DType.tagnum = -1 ;
  G__G__ASImageLN_TImagecLcLECoordMode.tagnum = -1 ;
  G__G__ASImageLN_TImagecLcLEColorChan.tagnum = -1 ;
  G__G__ASImageLN_ASImage.tagnum = -1 ;
  G__G__ASImageLN_ASVisual.tagnum = -1 ;
  G__G__ASImageLN_THashTable.tagnum = -1 ;
  G__G__ASImageLN_TASImage.tagnum = -1 ;
  G__G__ASImageLN_TASImagecLcLdA.tagnum = -1 ;
  G__G__ASImageLN_TImagePlugin.tagnum = -1 ;
  G__G__ASImageLN_TASImagePlugin.tagnum = -1 ;
  G__G__ASImageLN_TASPluginGS.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__ASImage() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TAttImage);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TImagePalette);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TAttImagecLcLEImageQuality);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_Segment_t);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TVirtualPad);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TArrayL);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TPoint);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TText);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TImage);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TImagecLcLEImageFileTypes);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TImagecLcLEText3DType);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TImagecLcLECoordMode);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TImagecLcLEColorChan);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_ASImage);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_ASVisual);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_THashTable);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImage),sizeof(TASImage),-1,130816,"image processing class",G__setup_memvarTASImage,G__setup_memfuncTASImage);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TASImagecLcLdA);
   G__get_linked_tagnum_fwd(&G__G__ASImageLN_TImagePlugin);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASImagePlugin),sizeof(TASImagePlugin),-1,62464,"asimage plugin",G__setup_memvarTASImagePlugin,G__setup_memfuncTASImagePlugin);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ASImageLN_TASPluginGS),sizeof(TASPluginGS),-1,62464,"PS/EPS/PDF plugin based on GhostScript interpreter",G__setup_memvarTASPluginGS,G__setup_memfuncTASPluginGS);
}
extern "C" void G__cpp_setupG__ASImage(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__ASImage()");
  G__set_cpp_environmentG__ASImage();
  G__cpp_setup_tagtableG__ASImage();

  G__cpp_setup_inheritanceG__ASImage();

  G__cpp_setup_typetableG__ASImage();

  G__cpp_setup_memvarG__ASImage();

  G__cpp_setup_memfuncG__ASImage();
  G__cpp_setup_globalG__ASImage();
  G__cpp_setup_funcG__ASImage();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__ASImage();
  return;
}
class G__cpp_setup_initG__ASImage {
  public:
    G__cpp_setup_initG__ASImage() { G__add_setup_func("G__ASImage",(G__incsetup)(&G__cpp_setupG__ASImage)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__ASImage() { G__remove_setup_func("G__ASImage"); }
};
G__cpp_setup_initG__ASImage G__cpp_setup_initializerG__ASImage;

