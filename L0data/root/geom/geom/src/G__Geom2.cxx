//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:45:35 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Geom2.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TGeoPatternFinder_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternFinder(void *p = 0);
   static void *newArray_TGeoPatternFinder(Long_t size, void *p);
   static void delete_TGeoPatternFinder(void *p);
   static void deleteArray_TGeoPatternFinder(void *p);
   static void destruct_TGeoPatternFinder(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternFinder*)
   {
      ::TGeoPatternFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternFinder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternFinder", ::TGeoPatternFinder::Class_Version(), "include/TGeoPatternFinder.h", 34,
                  typeid(::TGeoPatternFinder), DefineBehavior(ptr, ptr),
                  &::TGeoPatternFinder::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternFinder) );
      instance.SetNew(&new_TGeoPatternFinder);
      instance.SetNewArray(&newArray_TGeoPatternFinder);
      instance.SetDelete(&delete_TGeoPatternFinder);
      instance.SetDeleteArray(&deleteArray_TGeoPatternFinder);
      instance.SetDestructor(&destruct_TGeoPatternFinder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternFinder*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternX_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternX(void *p = 0);
   static void *newArray_TGeoPatternX(Long_t size, void *p);
   static void delete_TGeoPatternX(void *p);
   static void deleteArray_TGeoPatternX(void *p);
   static void destruct_TGeoPatternX(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternX*)
   {
      ::TGeoPatternX *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternX >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternX", ::TGeoPatternX::Class_Version(), "include/TGeoPatternFinder.h", 95,
                  typeid(::TGeoPatternX), DefineBehavior(ptr, ptr),
                  &::TGeoPatternX::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternX) );
      instance.SetNew(&new_TGeoPatternX);
      instance.SetNewArray(&newArray_TGeoPatternX);
      instance.SetDelete(&delete_TGeoPatternX);
      instance.SetDeleteArray(&deleteArray_TGeoPatternX);
      instance.SetDestructor(&destruct_TGeoPatternX);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternX*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternX*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternX*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternY_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternY(void *p = 0);
   static void *newArray_TGeoPatternY(Long_t size, void *p);
   static void delete_TGeoPatternY(void *p);
   static void deleteArray_TGeoPatternY(void *p);
   static void destruct_TGeoPatternY(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternY*)
   {
      ::TGeoPatternY *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternY >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternY", ::TGeoPatternY::Class_Version(), "include/TGeoPatternFinder.h", 125,
                  typeid(::TGeoPatternY), DefineBehavior(ptr, ptr),
                  &::TGeoPatternY::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternY) );
      instance.SetNew(&new_TGeoPatternY);
      instance.SetNewArray(&newArray_TGeoPatternY);
      instance.SetDelete(&delete_TGeoPatternY);
      instance.SetDeleteArray(&deleteArray_TGeoPatternY);
      instance.SetDestructor(&destruct_TGeoPatternY);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternY*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternY*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternY*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternZ_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternZ(void *p = 0);
   static void *newArray_TGeoPatternZ(Long_t size, void *p);
   static void delete_TGeoPatternZ(void *p);
   static void deleteArray_TGeoPatternZ(void *p);
   static void destruct_TGeoPatternZ(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternZ*)
   {
      ::TGeoPatternZ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternZ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternZ", ::TGeoPatternZ::Class_Version(), "include/TGeoPatternFinder.h", 154,
                  typeid(::TGeoPatternZ), DefineBehavior(ptr, ptr),
                  &::TGeoPatternZ::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternZ) );
      instance.SetNew(&new_TGeoPatternZ);
      instance.SetNewArray(&newArray_TGeoPatternZ);
      instance.SetDelete(&delete_TGeoPatternZ);
      instance.SetDeleteArray(&deleteArray_TGeoPatternZ);
      instance.SetDestructor(&destruct_TGeoPatternZ);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternZ*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternZ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternZ*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternParaX_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternParaX(void *p = 0);
   static void *newArray_TGeoPatternParaX(Long_t size, void *p);
   static void delete_TGeoPatternParaX(void *p);
   static void deleteArray_TGeoPatternParaX(void *p);
   static void destruct_TGeoPatternParaX(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternParaX*)
   {
      ::TGeoPatternParaX *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternParaX >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternParaX", ::TGeoPatternParaX::Class_Version(), "include/TGeoPatternFinder.h", 183,
                  typeid(::TGeoPatternParaX), DefineBehavior(ptr, ptr),
                  &::TGeoPatternParaX::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternParaX) );
      instance.SetNew(&new_TGeoPatternParaX);
      instance.SetNewArray(&newArray_TGeoPatternParaX);
      instance.SetDelete(&delete_TGeoPatternParaX);
      instance.SetDeleteArray(&deleteArray_TGeoPatternParaX);
      instance.SetDestructor(&destruct_TGeoPatternParaX);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternParaX*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternParaX*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternParaX*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternParaY_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternParaY(void *p = 0);
   static void *newArray_TGeoPatternParaY(Long_t size, void *p);
   static void delete_TGeoPatternParaY(void *p);
   static void deleteArray_TGeoPatternParaY(void *p);
   static void destruct_TGeoPatternParaY(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternParaY*)
   {
      ::TGeoPatternParaY *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternParaY >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternParaY", ::TGeoPatternParaY::Class_Version(), "include/TGeoPatternFinder.h", 212,
                  typeid(::TGeoPatternParaY), DefineBehavior(ptr, ptr),
                  &::TGeoPatternParaY::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternParaY) );
      instance.SetNew(&new_TGeoPatternParaY);
      instance.SetNewArray(&newArray_TGeoPatternParaY);
      instance.SetDelete(&delete_TGeoPatternParaY);
      instance.SetDeleteArray(&deleteArray_TGeoPatternParaY);
      instance.SetDestructor(&destruct_TGeoPatternParaY);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternParaY*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternParaY*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternParaY*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternParaZ_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternParaZ(void *p = 0);
   static void *newArray_TGeoPatternParaZ(Long_t size, void *p);
   static void delete_TGeoPatternParaZ(void *p);
   static void deleteArray_TGeoPatternParaZ(void *p);
   static void destruct_TGeoPatternParaZ(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternParaZ*)
   {
      ::TGeoPatternParaZ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternParaZ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternParaZ", ::TGeoPatternParaZ::Class_Version(), "include/TGeoPatternFinder.h", 244,
                  typeid(::TGeoPatternParaZ), DefineBehavior(ptr, ptr),
                  &::TGeoPatternParaZ::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternParaZ) );
      instance.SetNew(&new_TGeoPatternParaZ);
      instance.SetNewArray(&newArray_TGeoPatternParaZ);
      instance.SetDelete(&delete_TGeoPatternParaZ);
      instance.SetDeleteArray(&deleteArray_TGeoPatternParaZ);
      instance.SetDestructor(&destruct_TGeoPatternParaZ);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternParaZ*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternParaZ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternParaZ*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternTrapZ_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternTrapZ(void *p = 0);
   static void *newArray_TGeoPatternTrapZ(Long_t size, void *p);
   static void delete_TGeoPatternTrapZ(void *p);
   static void deleteArray_TGeoPatternTrapZ(void *p);
   static void destruct_TGeoPatternTrapZ(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternTrapZ*)
   {
      ::TGeoPatternTrapZ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternTrapZ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternTrapZ", ::TGeoPatternTrapZ::Class_Version(), "include/TGeoPatternFinder.h", 277,
                  typeid(::TGeoPatternTrapZ), DefineBehavior(ptr, ptr),
                  &::TGeoPatternTrapZ::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternTrapZ) );
      instance.SetNew(&new_TGeoPatternTrapZ);
      instance.SetNewArray(&newArray_TGeoPatternTrapZ);
      instance.SetDelete(&delete_TGeoPatternTrapZ);
      instance.SetDeleteArray(&deleteArray_TGeoPatternTrapZ);
      instance.SetDestructor(&destruct_TGeoPatternTrapZ);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternTrapZ*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternTrapZ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternTrapZ*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternCylR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternCylR(void *p = 0);
   static void *newArray_TGeoPatternCylR(Long_t size, void *p);
   static void delete_TGeoPatternCylR(void *p);
   static void deleteArray_TGeoPatternCylR(void *p);
   static void destruct_TGeoPatternCylR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternCylR*)
   {
      ::TGeoPatternCylR *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternCylR >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternCylR", ::TGeoPatternCylR::Class_Version(), "include/TGeoPatternFinder.h", 313,
                  typeid(::TGeoPatternCylR), DefineBehavior(ptr, ptr),
                  &::TGeoPatternCylR::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternCylR) );
      instance.SetNew(&new_TGeoPatternCylR);
      instance.SetNewArray(&newArray_TGeoPatternCylR);
      instance.SetDelete(&delete_TGeoPatternCylR);
      instance.SetDeleteArray(&deleteArray_TGeoPatternCylR);
      instance.SetDestructor(&destruct_TGeoPatternCylR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternCylR*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternCylR*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternCylR*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternCylPhi_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternCylPhi(void *p = 0);
   static void *newArray_TGeoPatternCylPhi(Long_t size, void *p);
   static void delete_TGeoPatternCylPhi(void *p);
   static void deleteArray_TGeoPatternCylPhi(void *p);
   static void destruct_TGeoPatternCylPhi(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternCylPhi*)
   {
      ::TGeoPatternCylPhi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternCylPhi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternCylPhi", ::TGeoPatternCylPhi::Class_Version(), "include/TGeoPatternFinder.h", 341,
                  typeid(::TGeoPatternCylPhi), DefineBehavior(ptr, ptr),
                  &::TGeoPatternCylPhi::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternCylPhi) );
      instance.SetNew(&new_TGeoPatternCylPhi);
      instance.SetNewArray(&newArray_TGeoPatternCylPhi);
      instance.SetDelete(&delete_TGeoPatternCylPhi);
      instance.SetDeleteArray(&deleteArray_TGeoPatternCylPhi);
      instance.SetDestructor(&destruct_TGeoPatternCylPhi);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternCylPhi*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternCylPhi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternCylPhi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternSphR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternSphR(void *p = 0);
   static void *newArray_TGeoPatternSphR(Long_t size, void *p);
   static void delete_TGeoPatternSphR(void *p);
   static void deleteArray_TGeoPatternSphR(void *p);
   static void destruct_TGeoPatternSphR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternSphR*)
   {
      ::TGeoPatternSphR *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternSphR >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternSphR", ::TGeoPatternSphR::Class_Version(), "include/TGeoPatternFinder.h", 380,
                  typeid(::TGeoPatternSphR), DefineBehavior(ptr, ptr),
                  &::TGeoPatternSphR::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternSphR) );
      instance.SetNew(&new_TGeoPatternSphR);
      instance.SetNewArray(&newArray_TGeoPatternSphR);
      instance.SetDelete(&delete_TGeoPatternSphR);
      instance.SetDeleteArray(&deleteArray_TGeoPatternSphR);
      instance.SetDestructor(&destruct_TGeoPatternSphR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternSphR*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternSphR*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternSphR*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternSphTheta_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternSphTheta(void *p = 0);
   static void *newArray_TGeoPatternSphTheta(Long_t size, void *p);
   static void delete_TGeoPatternSphTheta(void *p);
   static void deleteArray_TGeoPatternSphTheta(void *p);
   static void destruct_TGeoPatternSphTheta(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternSphTheta*)
   {
      ::TGeoPatternSphTheta *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternSphTheta >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternSphTheta", ::TGeoPatternSphTheta::Class_Version(), "include/TGeoPatternFinder.h", 407,
                  typeid(::TGeoPatternSphTheta), DefineBehavior(ptr, ptr),
                  &::TGeoPatternSphTheta::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternSphTheta) );
      instance.SetNew(&new_TGeoPatternSphTheta);
      instance.SetNewArray(&newArray_TGeoPatternSphTheta);
      instance.SetDelete(&delete_TGeoPatternSphTheta);
      instance.SetDeleteArray(&deleteArray_TGeoPatternSphTheta);
      instance.SetDestructor(&destruct_TGeoPatternSphTheta);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternSphTheta*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternSphTheta*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternSphTheta*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternSphPhi_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternSphPhi(void *p = 0);
   static void *newArray_TGeoPatternSphPhi(Long_t size, void *p);
   static void delete_TGeoPatternSphPhi(void *p);
   static void deleteArray_TGeoPatternSphPhi(void *p);
   static void destruct_TGeoPatternSphPhi(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternSphPhi*)
   {
      ::TGeoPatternSphPhi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternSphPhi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternSphPhi", ::TGeoPatternSphPhi::Class_Version(), "include/TGeoPatternFinder.h", 434,
                  typeid(::TGeoPatternSphPhi), DefineBehavior(ptr, ptr),
                  &::TGeoPatternSphPhi::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternSphPhi) );
      instance.SetNew(&new_TGeoPatternSphPhi);
      instance.SetNewArray(&newArray_TGeoPatternSphPhi);
      instance.SetDelete(&delete_TGeoPatternSphPhi);
      instance.SetDeleteArray(&deleteArray_TGeoPatternSphPhi);
      instance.SetDestructor(&destruct_TGeoPatternSphPhi);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternSphPhi*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternSphPhi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternSphPhi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPatternHoneycomb_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoPatternHoneycomb(void *p = 0);
   static void *newArray_TGeoPatternHoneycomb(Long_t size, void *p);
   static void delete_TGeoPatternHoneycomb(void *p);
   static void deleteArray_TGeoPatternHoneycomb(void *p);
   static void destruct_TGeoPatternHoneycomb(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPatternHoneycomb*)
   {
      ::TGeoPatternHoneycomb *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPatternHoneycomb >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPatternHoneycomb", ::TGeoPatternHoneycomb::Class_Version(), "include/TGeoPatternFinder.h", 461,
                  typeid(::TGeoPatternHoneycomb), DefineBehavior(ptr, ptr),
                  &::TGeoPatternHoneycomb::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPatternHoneycomb) );
      instance.SetNew(&new_TGeoPatternHoneycomb);
      instance.SetNewArray(&newArray_TGeoPatternHoneycomb);
      instance.SetDelete(&delete_TGeoPatternHoneycomb);
      instance.SetDeleteArray(&deleteArray_TGeoPatternHoneycomb);
      instance.SetDestructor(&destruct_TGeoPatternHoneycomb);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPatternHoneycomb*)
   {
      return GenerateInitInstanceLocal((::TGeoPatternHoneycomb*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPatternHoneycomb*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoCacheState_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoCacheState(void *p = 0);
   static void *newArray_TGeoCacheState(Long_t size, void *p);
   static void delete_TGeoCacheState(void *p);
   static void deleteArray_TGeoCacheState(void *p);
   static void destruct_TGeoCacheState(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoCacheState*)
   {
      ::TGeoCacheState *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoCacheState >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoCacheState", ::TGeoCacheState::Class_Version(), "include/TGeoCache.h", 31,
                  typeid(::TGeoCacheState), DefineBehavior(ptr, ptr),
                  &::TGeoCacheState::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoCacheState) );
      instance.SetNew(&new_TGeoCacheState);
      instance.SetNewArray(&newArray_TGeoCacheState);
      instance.SetDelete(&delete_TGeoCacheState);
      instance.SetDeleteArray(&deleteArray_TGeoCacheState);
      instance.SetDestructor(&destruct_TGeoCacheState);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoCacheState*)
   {
      return GenerateInitInstanceLocal((::TGeoCacheState*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoCacheState*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoNodeCache_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoNodeCache(void *p = 0);
   static void *newArray_TGeoNodeCache(Long_t size, void *p);
   static void delete_TGeoNodeCache(void *p);
   static void deleteArray_TGeoNodeCache(void *p);
   static void destruct_TGeoNodeCache(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoNodeCache*)
   {
      ::TGeoNodeCache *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoNodeCache >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoNodeCache", ::TGeoNodeCache::Class_Version(), "include/TGeoCache.h", 66,
                  typeid(::TGeoNodeCache), DefineBehavior(ptr, ptr),
                  &::TGeoNodeCache::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoNodeCache) );
      instance.SetNew(&new_TGeoNodeCache);
      instance.SetNewArray(&newArray_TGeoNodeCache);
      instance.SetDelete(&delete_TGeoNodeCache);
      instance.SetDeleteArray(&deleteArray_TGeoNodeCache);
      instance.SetDestructor(&destruct_TGeoNodeCache);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoNodeCache*)
   {
      return GenerateInitInstanceLocal((::TGeoNodeCache*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoNodeCache*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TVirtualMagField_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TVirtualMagField(void *p);
   static void deleteArray_TVirtualMagField(void *p);
   static void destruct_TVirtualMagField(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TVirtualMagField*)
   {
      ::TVirtualMagField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TVirtualMagField >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TVirtualMagField", ::TVirtualMagField::Class_Version(), "include/TVirtualMagField.h", 26,
                  typeid(::TVirtualMagField), DefineBehavior(ptr, ptr),
                  &::TVirtualMagField::Dictionary, isa_proxy, 4,
                  sizeof(::TVirtualMagField) );
      instance.SetDelete(&delete_TVirtualMagField);
      instance.SetDeleteArray(&deleteArray_TVirtualMagField);
      instance.SetDestructor(&destruct_TVirtualMagField);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TVirtualMagField*)
   {
      return GenerateInitInstanceLocal((::TVirtualMagField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TVirtualMagField*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoUniformMagField_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoUniformMagField(void *p = 0);
   static void *newArray_TGeoUniformMagField(Long_t size, void *p);
   static void delete_TGeoUniformMagField(void *p);
   static void deleteArray_TGeoUniformMagField(void *p);
   static void destruct_TGeoUniformMagField(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoUniformMagField*)
   {
      ::TGeoUniformMagField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoUniformMagField >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoUniformMagField", ::TGeoUniformMagField::Class_Version(), "include/TVirtualMagField.h", 45,
                  typeid(::TGeoUniformMagField), DefineBehavior(ptr, ptr),
                  &::TGeoUniformMagField::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoUniformMagField) );
      instance.SetNew(&new_TGeoUniformMagField);
      instance.SetNewArray(&newArray_TGeoUniformMagField);
      instance.SetDelete(&delete_TGeoUniformMagField);
      instance.SetDeleteArray(&deleteArray_TGeoUniformMagField);
      instance.SetDestructor(&destruct_TGeoUniformMagField);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoUniformMagField*)
   {
      return GenerateInitInstanceLocal((::TGeoUniformMagField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoUniformMagField*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoGlobalMagField_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoGlobalMagField(void *p = 0);
   static void *newArray_TGeoGlobalMagField(Long_t size, void *p);
   static void delete_TGeoGlobalMagField(void *p);
   static void deleteArray_TGeoGlobalMagField(void *p);
   static void destruct_TGeoGlobalMagField(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoGlobalMagField*)
   {
      ::TGeoGlobalMagField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoGlobalMagField >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoGlobalMagField", ::TGeoGlobalMagField::Class_Version(), "include/TGeoGlobalMagField.h", 31,
                  typeid(::TGeoGlobalMagField), DefineBehavior(ptr, ptr),
                  &::TGeoGlobalMagField::Dictionary, isa_proxy, 0,
                  sizeof(::TGeoGlobalMagField) );
      instance.SetNew(&new_TGeoGlobalMagField);
      instance.SetNewArray(&newArray_TGeoGlobalMagField);
      instance.SetDelete(&delete_TGeoGlobalMagField);
      instance.SetDeleteArray(&deleteArray_TGeoGlobalMagField);
      instance.SetDestructor(&destruct_TGeoGlobalMagField);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoGlobalMagField*)
   {
      return GenerateInitInstanceLocal((::TGeoGlobalMagField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoGlobalMagField*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TGeoPatternFinder::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternFinder::Class_Name()
{
   return "TGeoPatternFinder";
}

//______________________________________________________________________________
const char *TGeoPatternFinder::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternFinder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternFinder::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternFinder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternFinder::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternFinder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternFinder::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternFinder*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternX::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternX::Class_Name()
{
   return "TGeoPatternX";
}

//______________________________________________________________________________
const char *TGeoPatternX::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternX*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternX::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternX*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternX::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternX*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternX::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternX*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternY::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternY::Class_Name()
{
   return "TGeoPatternY";
}

//______________________________________________________________________________
const char *TGeoPatternY::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternY*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternY::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternY*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternY::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternY*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternY::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternY*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternZ::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternZ::Class_Name()
{
   return "TGeoPatternZ";
}

//______________________________________________________________________________
const char *TGeoPatternZ::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternZ*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternZ::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternZ*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternZ::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternZ*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternZ::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternZ*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternParaX::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternParaX::Class_Name()
{
   return "TGeoPatternParaX";
}

//______________________________________________________________________________
const char *TGeoPatternParaX::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaX*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternParaX::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaX*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternParaX::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaX*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternParaX::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaX*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternParaY::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternParaY::Class_Name()
{
   return "TGeoPatternParaY";
}

//______________________________________________________________________________
const char *TGeoPatternParaY::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaY*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternParaY::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaY*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternParaY::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaY*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternParaY::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaY*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternParaZ::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternParaZ::Class_Name()
{
   return "TGeoPatternParaZ";
}

//______________________________________________________________________________
const char *TGeoPatternParaZ::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaZ*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternParaZ::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaZ*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternParaZ::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaZ*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternParaZ::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternParaZ*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternTrapZ::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternTrapZ::Class_Name()
{
   return "TGeoPatternTrapZ";
}

//______________________________________________________________________________
const char *TGeoPatternTrapZ::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternTrapZ*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternTrapZ::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternTrapZ*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternTrapZ::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternTrapZ*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternTrapZ::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternTrapZ*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternCylR::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternCylR::Class_Name()
{
   return "TGeoPatternCylR";
}

//______________________________________________________________________________
const char *TGeoPatternCylR::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternCylR*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternCylR::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternCylR*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternCylR::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternCylR*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternCylR::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternCylR*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternCylPhi::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternCylPhi::Class_Name()
{
   return "TGeoPatternCylPhi";
}

//______________________________________________________________________________
const char *TGeoPatternCylPhi::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternCylPhi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternCylPhi::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternCylPhi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternCylPhi::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternCylPhi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternCylPhi::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternCylPhi*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternSphR::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternSphR::Class_Name()
{
   return "TGeoPatternSphR";
}

//______________________________________________________________________________
const char *TGeoPatternSphR::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphR*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternSphR::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphR*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternSphR::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphR*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternSphR::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphR*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternSphTheta::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternSphTheta::Class_Name()
{
   return "TGeoPatternSphTheta";
}

//______________________________________________________________________________
const char *TGeoPatternSphTheta::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphTheta*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternSphTheta::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphTheta*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternSphTheta::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphTheta*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternSphTheta::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphTheta*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternSphPhi::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternSphPhi::Class_Name()
{
   return "TGeoPatternSphPhi";
}

//______________________________________________________________________________
const char *TGeoPatternSphPhi::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphPhi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternSphPhi::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphPhi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternSphPhi::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphPhi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternSphPhi::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternSphPhi*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPatternHoneycomb::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPatternHoneycomb::Class_Name()
{
   return "TGeoPatternHoneycomb";
}

//______________________________________________________________________________
const char *TGeoPatternHoneycomb::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternHoneycomb*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPatternHoneycomb::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternHoneycomb*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPatternHoneycomb::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternHoneycomb*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPatternHoneycomb::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPatternHoneycomb*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoCacheState::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoCacheState::Class_Name()
{
   return "TGeoCacheState";
}

//______________________________________________________________________________
const char *TGeoCacheState::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoCacheState*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoCacheState::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoCacheState*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoCacheState::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoCacheState*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoCacheState::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoCacheState*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoNodeCache::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoNodeCache::Class_Name()
{
   return "TGeoNodeCache";
}

//______________________________________________________________________________
const char *TGeoNodeCache::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoNodeCache*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoNodeCache::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoNodeCache*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoNodeCache::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoNodeCache*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoNodeCache::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoNodeCache*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TVirtualMagField::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TVirtualMagField::Class_Name()
{
   return "TVirtualMagField";
}

//______________________________________________________________________________
const char *TVirtualMagField::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVirtualMagField*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TVirtualMagField::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVirtualMagField*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TVirtualMagField::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVirtualMagField*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TVirtualMagField::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVirtualMagField*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoUniformMagField::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoUniformMagField::Class_Name()
{
   return "TGeoUniformMagField";
}

//______________________________________________________________________________
const char *TGeoUniformMagField::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoUniformMagField*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoUniformMagField::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoUniformMagField*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoUniformMagField::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoUniformMagField*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoUniformMagField::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoUniformMagField*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoGlobalMagField::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoGlobalMagField::Class_Name()
{
   return "TGeoGlobalMagField";
}

//______________________________________________________________________________
const char *TGeoGlobalMagField::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoGlobalMagField*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoGlobalMagField::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoGlobalMagField*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoGlobalMagField::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoGlobalMagField*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoGlobalMagField::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoGlobalMagField*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TGeoPatternFinder::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternFinder.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternFinder::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternFinder::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternFinder::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternFinder.
      TClass *R__cl = ::TGeoPatternFinder::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fStep", &fStep);
      R__insp.Inspect(R__cl, R__parent, "fStart", &fStart);
      R__insp.Inspect(R__cl, R__parent, "fEnd", &fEnd);
      R__insp.Inspect(R__cl, R__parent, "fCurrent", &fCurrent);
      R__insp.Inspect(R__cl, R__parent, "fNdivisions", &fNdivisions);
      R__insp.Inspect(R__cl, R__parent, "fDivIndex", &fDivIndex);
      R__insp.Inspect(R__cl, R__parent, "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__parent, "*fVolume", &fVolume);
      R__insp.Inspect(R__cl, R__parent, "fNextIndex", &fNextIndex);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternFinder(void *p) {
      return  p ? new(p) ::TGeoPatternFinder : new ::TGeoPatternFinder;
   }
   static void *newArray_TGeoPatternFinder(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternFinder[nElements] : new ::TGeoPatternFinder[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternFinder(void *p) {
      delete ((::TGeoPatternFinder*)p);
   }
   static void deleteArray_TGeoPatternFinder(void *p) {
      delete [] ((::TGeoPatternFinder*)p);
   }
   static void destruct_TGeoPatternFinder(void *p) {
      typedef ::TGeoPatternFinder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternFinder

//______________________________________________________________________________
void TGeoPatternX::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternX.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternX::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternX::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternX::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternX.
      TClass *R__cl = ::TGeoPatternX::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternX(void *p) {
      return  p ? new(p) ::TGeoPatternX : new ::TGeoPatternX;
   }
   static void *newArray_TGeoPatternX(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternX[nElements] : new ::TGeoPatternX[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternX(void *p) {
      delete ((::TGeoPatternX*)p);
   }
   static void deleteArray_TGeoPatternX(void *p) {
      delete [] ((::TGeoPatternX*)p);
   }
   static void destruct_TGeoPatternX(void *p) {
      typedef ::TGeoPatternX current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternX

//______________________________________________________________________________
void TGeoPatternY::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternY.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternY::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternY::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternY::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternY.
      TClass *R__cl = ::TGeoPatternY::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternY(void *p) {
      return  p ? new(p) ::TGeoPatternY : new ::TGeoPatternY;
   }
   static void *newArray_TGeoPatternY(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternY[nElements] : new ::TGeoPatternY[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternY(void *p) {
      delete ((::TGeoPatternY*)p);
   }
   static void deleteArray_TGeoPatternY(void *p) {
      delete [] ((::TGeoPatternY*)p);
   }
   static void destruct_TGeoPatternY(void *p) {
      typedef ::TGeoPatternY current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternY

//______________________________________________________________________________
void TGeoPatternZ::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternZ.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternZ::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternZ::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternZ::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternZ.
      TClass *R__cl = ::TGeoPatternZ::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternZ(void *p) {
      return  p ? new(p) ::TGeoPatternZ : new ::TGeoPatternZ;
   }
   static void *newArray_TGeoPatternZ(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternZ[nElements] : new ::TGeoPatternZ[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternZ(void *p) {
      delete ((::TGeoPatternZ*)p);
   }
   static void deleteArray_TGeoPatternZ(void *p) {
      delete [] ((::TGeoPatternZ*)p);
   }
   static void destruct_TGeoPatternZ(void *p) {
      typedef ::TGeoPatternZ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternZ

//______________________________________________________________________________
void TGeoPatternParaX::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternParaX.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternParaX::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternParaX::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternParaX::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternParaX.
      TClass *R__cl = ::TGeoPatternParaX::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternParaX(void *p) {
      return  p ? new(p) ::TGeoPatternParaX : new ::TGeoPatternParaX;
   }
   static void *newArray_TGeoPatternParaX(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternParaX[nElements] : new ::TGeoPatternParaX[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternParaX(void *p) {
      delete ((::TGeoPatternParaX*)p);
   }
   static void deleteArray_TGeoPatternParaX(void *p) {
      delete [] ((::TGeoPatternParaX*)p);
   }
   static void destruct_TGeoPatternParaX(void *p) {
      typedef ::TGeoPatternParaX current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternParaX

//______________________________________________________________________________
void TGeoPatternParaY::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternParaY.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternParaY::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternParaY::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternParaY::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternParaY.
      TClass *R__cl = ::TGeoPatternParaY::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fTxy", &fTxy);
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternParaY(void *p) {
      return  p ? new(p) ::TGeoPatternParaY : new ::TGeoPatternParaY;
   }
   static void *newArray_TGeoPatternParaY(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternParaY[nElements] : new ::TGeoPatternParaY[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternParaY(void *p) {
      delete ((::TGeoPatternParaY*)p);
   }
   static void deleteArray_TGeoPatternParaY(void *p) {
      delete [] ((::TGeoPatternParaY*)p);
   }
   static void destruct_TGeoPatternParaY(void *p) {
      typedef ::TGeoPatternParaY current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternParaY

//______________________________________________________________________________
void TGeoPatternParaZ::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternParaZ.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternParaZ::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternParaZ::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternParaZ::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternParaZ.
      TClass *R__cl = ::TGeoPatternParaZ::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fTxz", &fTxz);
      R__insp.Inspect(R__cl, R__parent, "fTyz", &fTyz);
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternParaZ(void *p) {
      return  p ? new(p) ::TGeoPatternParaZ : new ::TGeoPatternParaZ;
   }
   static void *newArray_TGeoPatternParaZ(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternParaZ[nElements] : new ::TGeoPatternParaZ[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternParaZ(void *p) {
      delete ((::TGeoPatternParaZ*)p);
   }
   static void deleteArray_TGeoPatternParaZ(void *p) {
      delete [] ((::TGeoPatternParaZ*)p);
   }
   static void destruct_TGeoPatternParaZ(void *p) {
      typedef ::TGeoPatternParaZ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternParaZ

//______________________________________________________________________________
void TGeoPatternTrapZ::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternTrapZ.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternTrapZ::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternTrapZ::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternTrapZ::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternTrapZ.
      TClass *R__cl = ::TGeoPatternTrapZ::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fTxz", &fTxz);
      R__insp.Inspect(R__cl, R__parent, "fTyz", &fTyz);
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternTrapZ(void *p) {
      return  p ? new(p) ::TGeoPatternTrapZ : new ::TGeoPatternTrapZ;
   }
   static void *newArray_TGeoPatternTrapZ(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternTrapZ[nElements] : new ::TGeoPatternTrapZ[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternTrapZ(void *p) {
      delete ((::TGeoPatternTrapZ*)p);
   }
   static void deleteArray_TGeoPatternTrapZ(void *p) {
      delete [] ((::TGeoPatternTrapZ*)p);
   }
   static void destruct_TGeoPatternTrapZ(void *p) {
      typedef ::TGeoPatternTrapZ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternTrapZ

//______________________________________________________________________________
void TGeoPatternCylR::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternCylR.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternCylR::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternCylR::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternCylR::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternCylR.
      TClass *R__cl = ::TGeoPatternCylR::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternCylR(void *p) {
      return  p ? new(p) ::TGeoPatternCylR : new ::TGeoPatternCylR;
   }
   static void *newArray_TGeoPatternCylR(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternCylR[nElements] : new ::TGeoPatternCylR[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternCylR(void *p) {
      delete ((::TGeoPatternCylR*)p);
   }
   static void deleteArray_TGeoPatternCylR(void *p) {
      delete [] ((::TGeoPatternCylR*)p);
   }
   static void destruct_TGeoPatternCylR(void *p) {
      typedef ::TGeoPatternCylR current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternCylR

//______________________________________________________________________________
void TGeoPatternCylPhi::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternCylPhi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternCylPhi::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternCylPhi::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternCylPhi::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternCylPhi.
      TClass *R__cl = ::TGeoPatternCylPhi::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fSinCos", &fSinCos);
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternCylPhi(void *p) {
      return  p ? new(p) ::TGeoPatternCylPhi : new ::TGeoPatternCylPhi;
   }
   static void *newArray_TGeoPatternCylPhi(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternCylPhi[nElements] : new ::TGeoPatternCylPhi[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternCylPhi(void *p) {
      delete ((::TGeoPatternCylPhi*)p);
   }
   static void deleteArray_TGeoPatternCylPhi(void *p) {
      delete [] ((::TGeoPatternCylPhi*)p);
   }
   static void destruct_TGeoPatternCylPhi(void *p) {
      typedef ::TGeoPatternCylPhi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternCylPhi

//______________________________________________________________________________
void TGeoPatternSphR::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternSphR.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternSphR::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternSphR::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternSphR::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternSphR.
      TClass *R__cl = ::TGeoPatternSphR::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternSphR(void *p) {
      return  p ? new(p) ::TGeoPatternSphR : new ::TGeoPatternSphR;
   }
   static void *newArray_TGeoPatternSphR(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternSphR[nElements] : new ::TGeoPatternSphR[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternSphR(void *p) {
      delete ((::TGeoPatternSphR*)p);
   }
   static void deleteArray_TGeoPatternSphR(void *p) {
      delete [] ((::TGeoPatternSphR*)p);
   }
   static void destruct_TGeoPatternSphR(void *p) {
      typedef ::TGeoPatternSphR current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternSphR

//______________________________________________________________________________
void TGeoPatternSphTheta::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternSphTheta.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternSphTheta::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternSphTheta::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternSphTheta::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternSphTheta.
      TClass *R__cl = ::TGeoPatternSphTheta::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternSphTheta(void *p) {
      return  p ? new(p) ::TGeoPatternSphTheta : new ::TGeoPatternSphTheta;
   }
   static void *newArray_TGeoPatternSphTheta(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternSphTheta[nElements] : new ::TGeoPatternSphTheta[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternSphTheta(void *p) {
      delete ((::TGeoPatternSphTheta*)p);
   }
   static void deleteArray_TGeoPatternSphTheta(void *p) {
      delete [] ((::TGeoPatternSphTheta*)p);
   }
   static void destruct_TGeoPatternSphTheta(void *p) {
      typedef ::TGeoPatternSphTheta current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternSphTheta

//______________________________________________________________________________
void TGeoPatternSphPhi::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternSphPhi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternSphPhi::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternSphPhi::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternSphPhi::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternSphPhi.
      TClass *R__cl = ::TGeoPatternSphPhi::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternSphPhi(void *p) {
      return  p ? new(p) ::TGeoPatternSphPhi : new ::TGeoPatternSphPhi;
   }
   static void *newArray_TGeoPatternSphPhi(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternSphPhi[nElements] : new ::TGeoPatternSphPhi[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternSphPhi(void *p) {
      delete ((::TGeoPatternSphPhi*)p);
   }
   static void deleteArray_TGeoPatternSphPhi(void *p) {
      delete [] ((::TGeoPatternSphPhi*)p);
   }
   static void destruct_TGeoPatternSphPhi(void *p) {
      typedef ::TGeoPatternSphPhi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternSphPhi

//______________________________________________________________________________
void TGeoPatternHoneycomb::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPatternHoneycomb.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPatternHoneycomb::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPatternHoneycomb::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPatternHoneycomb::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPatternHoneycomb.
      TClass *R__cl = ::TGeoPatternHoneycomb::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNrows", &fNrows);
      R__insp.Inspect(R__cl, R__parent, "fAxisOnRows", &fAxisOnRows);
      R__insp.Inspect(R__cl, R__parent, "*fNdivisions", &fNdivisions);
      R__insp.Inspect(R__cl, R__parent, "*fStart", &fStart);
      TGeoPatternFinder::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoPatternHoneycomb(void *p) {
      return  p ? new(p) ::TGeoPatternHoneycomb : new ::TGeoPatternHoneycomb;
   }
   static void *newArray_TGeoPatternHoneycomb(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoPatternHoneycomb[nElements] : new ::TGeoPatternHoneycomb[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoPatternHoneycomb(void *p) {
      delete ((::TGeoPatternHoneycomb*)p);
   }
   static void deleteArray_TGeoPatternHoneycomb(void *p) {
      delete [] ((::TGeoPatternHoneycomb*)p);
   }
   static void destruct_TGeoPatternHoneycomb(void *p) {
      typedef ::TGeoPatternHoneycomb current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPatternHoneycomb

//______________________________________________________________________________
void TGeoNodeCache::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoNodeCache.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoNodeCache::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoNodeCache::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoNodeCache::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoNodeCache.
      TClass *R__cl = ::TGeoNodeCache::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fGeoCacheMaxLevels", &fGeoCacheMaxLevels);
      R__insp.Inspect(R__cl, R__parent, "fGeoCacheStackSize", &fGeoCacheStackSize);
      R__insp.Inspect(R__cl, R__parent, "fLevel", &fLevel);
      R__insp.Inspect(R__cl, R__parent, "fStackLevel", &fStackLevel);
      R__insp.Inspect(R__cl, R__parent, "fCurrentID", &fCurrentID);
      R__insp.Inspect(R__cl, R__parent, "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__parent, "fIdBranch[100]", fIdBranch);
      R__insp.Inspect(R__cl, R__parent, "fPath", &fPath);
      fPath.ShowMembers(R__insp, strcat(R__parent,"fPath.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fTop", &fTop);
      R__insp.Inspect(R__cl, R__parent, "*fNode", &fNode);
      R__insp.Inspect(R__cl, R__parent, "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__parent, "*fStack", &fStack);
      R__insp.Inspect(R__cl, R__parent, "*fMatrixBranch", &fMatrixBranch);
      R__insp.Inspect(R__cl, R__parent, "*fMPB", &fMPB);
      R__insp.Inspect(R__cl, R__parent, "*fNodeBranch", &fNodeBranch);
      R__insp.Inspect(R__cl, R__parent, "*fNodeIdArray", &fNodeIdArray);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoNodeCache(void *p) {
      return  p ? new(p) ::TGeoNodeCache : new ::TGeoNodeCache;
   }
   static void *newArray_TGeoNodeCache(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoNodeCache[nElements] : new ::TGeoNodeCache[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoNodeCache(void *p) {
      delete ((::TGeoNodeCache*)p);
   }
   static void deleteArray_TGeoNodeCache(void *p) {
      delete [] ((::TGeoNodeCache*)p);
   }
   static void destruct_TGeoNodeCache(void *p) {
      typedef ::TGeoNodeCache current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoNodeCache

//______________________________________________________________________________
void TGeoCacheState::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoCacheState.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoCacheState::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoCacheState::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoCacheState::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoCacheState.
      TClass *R__cl = ::TGeoCacheState::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fCapacity", &fCapacity);
      R__insp.Inspect(R__cl, R__parent, "fLevel", &fLevel);
      R__insp.Inspect(R__cl, R__parent, "fNmany", &fNmany);
      R__insp.Inspect(R__cl, R__parent, "fStart", &fStart);
      R__insp.Inspect(R__cl, R__parent, "fIdBranch[30]", fIdBranch);
      R__insp.Inspect(R__cl, R__parent, "fPoint[3]", fPoint);
      R__insp.Inspect(R__cl, R__parent, "fOverlapping", &fOverlapping);
      R__insp.Inspect(R__cl, R__parent, "*fNodeBranch", &fNodeBranch);
      R__insp.Inspect(R__cl, R__parent, "*fMatrixBranch", &fMatrixBranch);
      R__insp.Inspect(R__cl, R__parent, "*fMatPtr", &fMatPtr);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoCacheState(void *p) {
      return  p ? new(p) ::TGeoCacheState : new ::TGeoCacheState;
   }
   static void *newArray_TGeoCacheState(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoCacheState[nElements] : new ::TGeoCacheState[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoCacheState(void *p) {
      delete ((::TGeoCacheState*)p);
   }
   static void deleteArray_TGeoCacheState(void *p) {
      delete [] ((::TGeoCacheState*)p);
   }
   static void destruct_TGeoCacheState(void *p) {
      typedef ::TGeoCacheState current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoCacheState

//______________________________________________________________________________
void TVirtualMagField::Streamer(TBuffer &R__b)
{
   // Stream an object of class TVirtualMagField.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TVirtualMagField::Class(),this);
   } else {
      R__b.WriteClassBuffer(TVirtualMagField::Class(),this);
   }
}

//______________________________________________________________________________
void TVirtualMagField::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TVirtualMagField.
      TClass *R__cl = ::TVirtualMagField::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TVirtualMagField(void *p) {
      delete ((::TVirtualMagField*)p);
   }
   static void deleteArray_TVirtualMagField(void *p) {
      delete [] ((::TVirtualMagField*)p);
   }
   static void destruct_TVirtualMagField(void *p) {
      typedef ::TVirtualMagField current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TVirtualMagField

//______________________________________________________________________________
void TGeoUniformMagField::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoUniformMagField.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoUniformMagField::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoUniformMagField::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoUniformMagField::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoUniformMagField.
      TClass *R__cl = ::TGeoUniformMagField::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fB[3]", fB);
      TVirtualMagField::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoUniformMagField(void *p) {
      return  p ? new(p) ::TGeoUniformMagField : new ::TGeoUniformMagField;
   }
   static void *newArray_TGeoUniformMagField(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoUniformMagField[nElements] : new ::TGeoUniformMagField[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoUniformMagField(void *p) {
      delete ((::TGeoUniformMagField*)p);
   }
   static void deleteArray_TGeoUniformMagField(void *p) {
      delete [] ((::TGeoUniformMagField*)p);
   }
   static void destruct_TGeoUniformMagField(void *p) {
      typedef ::TGeoUniformMagField current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoUniformMagField

//______________________________________________________________________________
void TGeoGlobalMagField::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoGlobalMagField.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TGeoGlobalMagField::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoGlobalMagField.
      TClass *R__cl = ::TGeoGlobalMagField::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fField", &fField);
      R__insp.Inspect(R__cl, R__parent, "fLock", &fLock);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoGlobalMagField(void *p) {
      return  p ? new(p) ::TGeoGlobalMagField : new ::TGeoGlobalMagField;
   }
   static void *newArray_TGeoGlobalMagField(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoGlobalMagField[nElements] : new ::TGeoGlobalMagField[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoGlobalMagField(void *p) {
      delete ((::TGeoGlobalMagField*)p);
   }
   static void deleteArray_TGeoGlobalMagField(void *p) {
      delete [] ((::TGeoGlobalMagField*)p);
   }
   static void destruct_TGeoGlobalMagField(void *p) {
      typedef ::TGeoGlobalMagField current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoGlobalMagField

/********************************************************
* geom/geom/src/G__Geom2.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Geom2();

extern "C" void G__set_cpp_environmentG__Geom2() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TGeoPatternFinder.h");
  G__add_compiledheader("TGeoCache.h");
  G__add_compiledheader("TVirtualMagField.h");
  G__add_compiledheader("TGeoUniformMagField.h");
  G__add_compiledheader("TGeoGlobalMagField.h");
  G__cpp_reset_tagtableG__Geom2();
}
#include <new>
extern "C" int G__cpp_dllrevG__Geom2() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TGeoPatternFinder */
static int G__G__Geom2_161_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternFinder[n];
     } else {
       p = new((void*) gvp) TGeoPatternFinder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternFinder;
     } else {
       p = new((void*) gvp) TGeoPatternFinder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternFinder((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternFinder((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternFinder*) G__getstructoffset())->cd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGeoPatternFinder*) G__getstructoffset())->CdNext());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((TGeoPatternFinder*) G__getstructoffset())->FindNode((Double_t*) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((TGeoPatternFinder*) G__getstructoffset())->FindNode((Double_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeoPatternFinder*) G__getstructoffset())->GetByteCount());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGeoPatternFinder*) G__getstructoffset())->GetCurrent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGeoPatternFinder*) G__getstructoffset())->GetDivIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGeoPatternFinder*) G__getstructoffset())->GetDivAxis());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGeoPatternFinder*) G__getstructoffset())->GetMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeoPatternFinder*) G__getstructoffset())->GetNdiv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeoPatternFinder*) G__getstructoffset())->GetNext());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGeoPatternFinder*) G__getstructoffset())->GetNodeOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TGeoPatternFinder*) G__getstructoffset())->GetStart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TGeoPatternFinder*) G__getstructoffset())->GetStep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TGeoPatternFinder*) G__getstructoffset())->GetEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoPatternFinder*) G__getstructoffset())->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeoPatternFinder*) G__getstructoffset())->IsOnBoundary((const Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeoPatternFinder*) G__getstructoffset())->IsReflected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((TGeoPatternFinder*) G__getstructoffset())->MakeCopy((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((TGeoPatternFinder*) G__getstructoffset())->MakeCopy());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeoPatternFinder*) G__getstructoffset())->Reflect((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoPatternFinder*) G__getstructoffset())->Reflect();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternFinder*) G__getstructoffset())->SetDivIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternFinder*) G__getstructoffset())->SetNext((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternFinder*) G__getstructoffset())->SetVolume((TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternFinder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternFinder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternFinder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternFinder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternFinder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternFinder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternFinder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternFinder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_161_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternFinder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternFinder G__TTGeoPatternFinder;
static int G__G__Geom2_161_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternFinder*) (soff+(sizeof(TGeoPatternFinder)*i)))->~G__TTGeoPatternFinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternFinder*) (soff))->~G__TTGeoPatternFinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternX */
static int G__G__Geom2_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternX* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternX[n];
     } else {
       p = new((void*) gvp) TGeoPatternX[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternX;
     } else {
       p = new((void*) gvp) TGeoPatternX;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternX((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternX((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternX(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternX(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternX(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternX(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TGeoPatternX*) G__getstructoffset())->FindNextBoundary((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternX::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternX::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternX::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternX::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternX*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternX::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternX::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternX::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_169_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternX::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_169_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternX* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternX(*(TGeoPatternX*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternX G__TTGeoPatternX;
static int G__G__Geom2_169_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternX*) (soff+(sizeof(TGeoPatternX)*i)))->~G__TTGeoPatternX();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternX*) (soff))->~G__TTGeoPatternX();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternY */
static int G__G__Geom2_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternY* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternY[n];
     } else {
       p = new((void*) gvp) TGeoPatternY[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternY;
     } else {
       p = new((void*) gvp) TGeoPatternY;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternY((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternY((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternY(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternY(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternY(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternY(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TGeoPatternY*) G__getstructoffset())->FindNextBoundary((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternY::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternY::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternY::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternY::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternY*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternY::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternY::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternY::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternY::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternY* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternY(*(TGeoPatternY*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternY G__TTGeoPatternY;
static int G__G__Geom2_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternY*) (soff+(sizeof(TGeoPatternY)*i)))->~G__TTGeoPatternY();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternY*) (soff))->~G__TTGeoPatternY();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternZ */
static int G__G__Geom2_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternZ[n];
     } else {
       p = new((void*) gvp) TGeoPatternZ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternZ;
     } else {
       p = new((void*) gvp) TGeoPatternZ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternZ((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternZ((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TGeoPatternZ*) G__getstructoffset())->FindNextBoundary((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternZ::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternZ::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternZ::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternZ::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternZ*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternZ::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternZ::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternZ::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_171_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternZ::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_171_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternZ* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternZ(*(TGeoPatternZ*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternZ G__TTGeoPatternZ;
static int G__G__Geom2_171_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternZ*) (soff+(sizeof(TGeoPatternZ)*i)))->~G__TTGeoPatternZ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternZ*) (soff))->~G__TTGeoPatternZ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternParaX */
static int G__G__Geom2_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaX* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternParaX[n];
     } else {
       p = new((void*) gvp) TGeoPatternParaX[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternParaX;
     } else {
       p = new((void*) gvp) TGeoPatternParaX;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaX((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternParaX((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaX(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternParaX(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaX(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternParaX(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternParaX::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaX::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternParaX::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternParaX::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternParaX*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaX::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternParaX::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaX::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_172_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternParaX::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_172_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternParaX* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternParaX(*(TGeoPatternParaX*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternParaX G__TTGeoPatternParaX;
static int G__G__Geom2_172_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternParaX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternParaX*) (soff+(sizeof(TGeoPatternParaX)*i)))->~G__TTGeoPatternParaX();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternParaX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternParaX*) (soff))->~G__TTGeoPatternParaX();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternParaY */
static int G__G__Geom2_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaY* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternParaY[n];
     } else {
       p = new((void*) gvp) TGeoPatternParaY[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternParaY;
     } else {
       p = new((void*) gvp) TGeoPatternParaY;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaY((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternParaY((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaY(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternParaY(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaY(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternParaY(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternParaY::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaY::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternParaY::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternParaY::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternParaY*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaY::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternParaY::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaY::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_173_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternParaY::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_173_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternParaY* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternParaY(*(TGeoPatternParaY*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternParaY G__TTGeoPatternParaY;
static int G__G__Geom2_173_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternParaY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternParaY*) (soff+(sizeof(TGeoPatternParaY)*i)))->~G__TTGeoPatternParaY();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternParaY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternParaY*) (soff))->~G__TTGeoPatternParaY();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternParaZ */
static int G__G__Geom2_174_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternParaZ[n];
     } else {
       p = new((void*) gvp) TGeoPatternParaZ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternParaZ;
     } else {
       p = new((void*) gvp) TGeoPatternParaZ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaZ((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternParaZ((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternParaZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternParaZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternParaZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternParaZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternParaZ::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaZ::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternParaZ::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternParaZ::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternParaZ*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaZ::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternParaZ::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternParaZ::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_174_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternParaZ::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_174_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternParaZ* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternParaZ(*(TGeoPatternParaZ*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternParaZ G__TTGeoPatternParaZ;
static int G__G__Geom2_174_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternParaZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternParaZ*) (soff+(sizeof(TGeoPatternParaZ)*i)))->~G__TTGeoPatternParaZ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternParaZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternParaZ*) (soff))->~G__TTGeoPatternParaZ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternTrapZ */
static int G__G__Geom2_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternTrapZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternTrapZ[n];
     } else {
       p = new((void*) gvp) TGeoPatternTrapZ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternTrapZ;
     } else {
       p = new((void*) gvp) TGeoPatternTrapZ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternTrapZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternTrapZ((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternTrapZ((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternTrapZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternTrapZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternTrapZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternTrapZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternTrapZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternTrapZ(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TGeoPatternTrapZ*) G__getstructoffset())->GetTxz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TGeoPatternTrapZ*) G__getstructoffset())->GetTyz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternTrapZ::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternTrapZ::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternTrapZ::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternTrapZ::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternTrapZ*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternTrapZ::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternTrapZ::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternTrapZ::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_175_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternTrapZ::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_175_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternTrapZ* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternTrapZ(*(TGeoPatternTrapZ*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternTrapZ G__TTGeoPatternTrapZ;
static int G__G__Geom2_175_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternTrapZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternTrapZ*) (soff+(sizeof(TGeoPatternTrapZ)*i)))->~G__TTGeoPatternTrapZ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternTrapZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternTrapZ*) (soff))->~G__TTGeoPatternTrapZ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternCylR */
static int G__G__Geom2_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternCylR* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternCylR[n];
     } else {
       p = new((void*) gvp) TGeoPatternCylR[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternCylR;
     } else {
       p = new((void*) gvp) TGeoPatternCylR;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternCylR* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternCylR((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternCylR((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternCylR* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternCylR(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternCylR(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternCylR* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternCylR(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternCylR(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternCylR::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternCylR::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternCylR::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternCylR::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternCylR*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternCylR::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternCylR::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternCylR::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_176_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternCylR::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_176_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternCylR* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternCylR(*(TGeoPatternCylR*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternCylR G__TTGeoPatternCylR;
static int G__G__Geom2_176_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternCylR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternCylR*) (soff+(sizeof(TGeoPatternCylR)*i)))->~G__TTGeoPatternCylR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternCylR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternCylR*) (soff))->~G__TTGeoPatternCylR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternCylPhi */
static int G__G__Geom2_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternCylPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternCylPhi[n];
     } else {
       p = new((void*) gvp) TGeoPatternCylPhi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternCylPhi;
     } else {
       p = new((void*) gvp) TGeoPatternCylPhi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternCylPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternCylPhi((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternCylPhi((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternCylPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternCylPhi(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternCylPhi(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternCylPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternCylPhi(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternCylPhi(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternCylPhi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternCylPhi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternCylPhi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternCylPhi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternCylPhi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternCylPhi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternCylPhi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternCylPhi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_177_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternCylPhi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternCylPhi G__TTGeoPatternCylPhi;
static int G__G__Geom2_177_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternCylPhi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternCylPhi*) (soff+(sizeof(TGeoPatternCylPhi)*i)))->~G__TTGeoPatternCylPhi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternCylPhi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternCylPhi*) (soff))->~G__TTGeoPatternCylPhi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternSphR */
static int G__G__Geom2_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphR* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternSphR[n];
     } else {
       p = new((void*) gvp) TGeoPatternSphR[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternSphR;
     } else {
       p = new((void*) gvp) TGeoPatternSphR;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphR* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphR((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternSphR((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphR* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphR(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternSphR(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphR* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphR(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternSphR(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternSphR::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphR::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternSphR::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternSphR::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternSphR*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphR::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternSphR::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphR::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_178_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternSphR::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_178_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternSphR* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternSphR(*(TGeoPatternSphR*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternSphR G__TTGeoPatternSphR;
static int G__G__Geom2_178_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternSphR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternSphR*) (soff+(sizeof(TGeoPatternSphR)*i)))->~G__TTGeoPatternSphR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternSphR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternSphR*) (soff))->~G__TTGeoPatternSphR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternSphTheta */
static int G__G__Geom2_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphTheta* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternSphTheta[n];
     } else {
       p = new((void*) gvp) TGeoPatternSphTheta[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternSphTheta;
     } else {
       p = new((void*) gvp) TGeoPatternSphTheta;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphTheta* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphTheta((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternSphTheta((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphTheta* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphTheta(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternSphTheta(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphTheta* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphTheta(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternSphTheta(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternSphTheta::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphTheta::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternSphTheta::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternSphTheta::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternSphTheta*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphTheta::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternSphTheta::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphTheta::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_179_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternSphTheta::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternSphTheta* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternSphTheta(*(TGeoPatternSphTheta*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternSphTheta G__TTGeoPatternSphTheta;
static int G__G__Geom2_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternSphTheta*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternSphTheta*) (soff+(sizeof(TGeoPatternSphTheta)*i)))->~G__TTGeoPatternSphTheta();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternSphTheta*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternSphTheta*) (soff))->~G__TTGeoPatternSphTheta();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternSphPhi */
static int G__G__Geom2_180_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternSphPhi[n];
     } else {
       p = new((void*) gvp) TGeoPatternSphPhi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternSphPhi;
     } else {
       p = new((void*) gvp) TGeoPatternSphPhi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphPhi((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternSphPhi((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphPhi(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoPatternSphPhi(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternSphPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternSphPhi(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TGeoPatternSphPhi(
(TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternSphPhi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphPhi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternSphPhi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternSphPhi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternSphPhi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphPhi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternSphPhi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternSphPhi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_180_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternSphPhi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Geom2_180_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPatternSphPhi* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPatternSphPhi(*(TGeoPatternSphPhi*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternSphPhi G__TTGeoPatternSphPhi;
static int G__G__Geom2_180_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternSphPhi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternSphPhi*) (soff+(sizeof(TGeoPatternSphPhi)*i)))->~G__TTGeoPatternSphPhi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternSphPhi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternSphPhi*) (soff))->~G__TTGeoPatternSphPhi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPatternHoneycomb */
static int G__G__Geom2_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternHoneycomb* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternHoneycomb[n];
     } else {
       p = new((void*) gvp) TGeoPatternHoneycomb[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoPatternHoneycomb;
     } else {
       p = new((void*) gvp) TGeoPatternHoneycomb;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPatternHoneycomb* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPatternHoneycomb((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeoPatternHoneycomb((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPatternHoneycomb::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternHoneycomb::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPatternHoneycomb::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPatternHoneycomb::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPatternHoneycomb*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternHoneycomb::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternHoneycomb::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPatternHoneycomb::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPatternHoneycomb::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPatternHoneycomb G__TTGeoPatternHoneycomb;
static int G__G__Geom2_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPatternHoneycomb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPatternHoneycomb*) (soff+(sizeof(TGeoPatternHoneycomb)*i)))->~G__TTGeoPatternHoneycomb();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPatternHoneycomb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPatternHoneycomb*) (soff))->~G__TTGeoPatternHoneycomb();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoCacheState */
static int G__G__Geom2_187_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoCacheState* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoCacheState[n];
     } else {
       p = new((void*) gvp) TGeoCacheState[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoCacheState;
     } else {
       p = new((void*) gvp) TGeoCacheState;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoCacheState* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoCacheState((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TGeoCacheState((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((TGeoCacheState*) G__getstructoffset())->SetState((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TGeoCacheState*) G__getstructoffset())->SetState((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeoCacheState*) G__getstructoffset())->GetState(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoCacheState::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoCacheState::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoCacheState::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoCacheState::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoCacheState*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoCacheState::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoCacheState::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoCacheState::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_187_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoCacheState::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoCacheState G__TTGeoCacheState;
static int G__G__Geom2_187_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoCacheState*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoCacheState*) (soff+(sizeof(TGeoCacheState)*i)))->~G__TTGeoCacheState();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoCacheState*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoCacheState*) (soff))->~G__TTGeoCacheState();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoNodeCache */
static int G__G__Geom2_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoNodeCache* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoNodeCache[n];
     } else {
       p = new((void*) gvp) TGeoNodeCache[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoNodeCache;
     } else {
       p = new((void*) gvp) TGeoNodeCache;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoNodeCache* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoNodeCache(
(TGeoNode*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TGeoNodeCache(
(TGeoNode*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoNodeCache((TGeoNode*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TGeoNodeCache((TGeoNode*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoNodeCache((TGeoNode*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TGeoNodeCache((TGeoNode*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoNodeCache*) G__getstructoffset())->BuildIdArray();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoNodeCache*) G__getstructoffset())->CdNode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TGeoNodeCache*) G__getstructoffset())->CdDown((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoNodeCache*) G__getstructoffset())->CdTop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoNodeCache*) G__getstructoffset())->CdUp();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TGeoNodeCache*) G__getstructoffset())->FillIdBranch((const Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoNodeCache*) G__getstructoffset())->FillIdBranch((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetIdBranch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetBranch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->GetBranchNames((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->GetBranchNumbers((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->GetBranchOnlys((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetMatrices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetCurrentMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetCurrentNodeId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetMother((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetMother());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetMotherMatrix((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetMotherMatrix());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetTopNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TGeoNodeCache*) G__getstructoffset())->GetPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetStackLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeoNodeCache*) G__getstructoffset())->GetNodeId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeoNodeCache*) G__getstructoffset())->HasIdArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeoNodeCache*) G__getstructoffset())->IsDummy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->LocalToMaster((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->MasterToLocal((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->LocalToMasterVect((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->MasterToLocalVect((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->LocalToMasterBomb((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoNodeCache*) G__getstructoffset())->MasterToLocalBomb((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((TGeoNodeCache*) G__getstructoffset())->PushState((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((TGeoNodeCache*) G__getstructoffset())->PushState((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TGeoNodeCache*) G__getstructoffset())->PushState((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((TGeoNodeCache*) G__getstructoffset())->PushState((Bool_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((TGeoNodeCache*) G__getstructoffset())->PopState(*(Int_t*) G__Intref(&libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TGeoNodeCache*) G__getstructoffset())->PopState(*(Int_t*) G__Intref(&libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TGeoNodeCache*) G__getstructoffset())->PopState(*(Int_t*) G__Intref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TGeoNodeCache*) G__getstructoffset())->PopState(*(Int_t*) G__Intref(&libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeoNodeCache*) G__getstructoffset())->PopDummy((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoNodeCache*) G__getstructoffset())->PopDummy();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoNodeCache*) G__getstructoffset())->Refresh();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TGeoNodeCache*) G__getstructoffset())->RestoreState(*(Int_t*) G__Intref(&libp->para[0]), (TGeoCacheState*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TGeoNodeCache*) G__getstructoffset())->RestoreState(*(Int_t*) G__Intref(&libp->para[0]), (TGeoCacheState*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoNodeCache::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoNodeCache::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoNodeCache::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoNodeCache::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoNodeCache*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoNodeCache::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoNodeCache::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoNodeCache::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_188_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoNodeCache::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoNodeCache G__TTGeoNodeCache;
static int G__G__Geom2_188_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoNodeCache*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoNodeCache*) (soff+(sizeof(TGeoNodeCache)*i)))->~G__TTGeoNodeCache();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoNodeCache*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoNodeCache*) (soff))->~G__TTGeoNodeCache();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TVirtualMagField */
static int G__G__Geom2_189_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TVirtualMagField*) G__getstructoffset())->Field((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TVirtualMagField::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVirtualMagField::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TVirtualMagField::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TVirtualMagField::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TVirtualMagField*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVirtualMagField::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVirtualMagField::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVirtualMagField::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_189_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVirtualMagField::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TVirtualMagField G__TTVirtualMagField;
static int G__G__Geom2_189_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TVirtualMagField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TVirtualMagField*) (soff+(sizeof(TVirtualMagField)*i)))->~G__TTVirtualMagField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TVirtualMagField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TVirtualMagField*) (soff))->~G__TTVirtualMagField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Geom2_189_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TVirtualMagField* dest = (TVirtualMagField*) G__getstructoffset();
   *dest = *(TVirtualMagField*) libp->para[0].ref;
   const TVirtualMagField& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoUniformMagField */
static int G__G__Geom2_190_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoUniformMagField* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoUniformMagField[n];
     } else {
       p = new((void*) gvp) TGeoUniformMagField[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoUniformMagField;
     } else {
       p = new((void*) gvp) TGeoUniformMagField;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoUniformMagField* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoUniformMagField(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TGeoUniformMagField(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TGeoUniformMagField*) G__getstructoffset())->GetFieldValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoUniformMagField*) G__getstructoffset())->SetFieldValue((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoUniformMagField::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoUniformMagField::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoUniformMagField::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoUniformMagField::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoUniformMagField*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoUniformMagField::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoUniformMagField::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoUniformMagField::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoUniformMagField::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoUniformMagField G__TTGeoUniformMagField;
static int G__G__Geom2_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoUniformMagField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoUniformMagField*) (soff+(sizeof(TGeoUniformMagField)*i)))->~G__TTGeoUniformMagField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoUniformMagField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoUniformMagField*) (soff))->~G__TTGeoUniformMagField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoGlobalMagField */
static int G__G__Geom2_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoGlobalMagField* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoGlobalMagField[n];
     } else {
       p = new((void*) gvp) TGeoGlobalMagField[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoGlobalMagField;
     } else {
       p = new((void*) gvp) TGeoGlobalMagField;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoGlobalMagField*) G__getstructoffset())->GetField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoGlobalMagField*) G__getstructoffset())->SetField((TVirtualMagField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TGeoGlobalMagField*) G__getstructoffset())->IsLocked());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoGlobalMagField*) G__getstructoffset())->Lock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoGlobalMagField::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoGlobalMagField*) G__getstructoffset())->Field((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoGlobalMagField::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoGlobalMagField::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoGlobalMagField::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoGlobalMagField::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoGlobalMagField*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoGlobalMagField::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoGlobalMagField::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoGlobalMagField::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Geom2_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoGlobalMagField::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoGlobalMagField G__TTGeoGlobalMagField;
static int G__G__Geom2_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoGlobalMagField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoGlobalMagField*) (soff+(sizeof(TGeoGlobalMagField)*i)))->~G__TTGeoGlobalMagField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoGlobalMagField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoGlobalMagField*) (soff))->~G__TTGeoGlobalMagField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TGeoPatternFinder */

/* TGeoPatternX */

/* TGeoPatternY */

/* TGeoPatternZ */

/* TGeoPatternParaX */

/* TGeoPatternParaY */

/* TGeoPatternParaZ */

/* TGeoPatternTrapZ */

/* TGeoPatternCylR */

/* TGeoPatternCylPhi */

/* TGeoPatternSphR */

/* TGeoPatternSphTheta */

/* TGeoPatternSphPhi */

/* TGeoPatternHoneycomb */

/* TGeoCacheState */

/* TGeoNodeCache */

/* TVirtualMagField */

/* TGeoUniformMagField */

/* TGeoGlobalMagField */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Geom2 {
 public:
  G__Sizep2memfuncG__Geom2(): p(&G__Sizep2memfuncG__Geom2::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Geom2::*p)();
};

size_t G__get_sizep2memfuncG__Geom2()
{
  G__Sizep2memfuncG__Geom2 a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Geom2() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder))) {
     TGeoPatternFinder *G__Lderived;
     G__Lderived=(TGeoPatternFinder*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX))) {
     TGeoPatternX *G__Lderived;
     G__Lderived=(TGeoPatternX*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY))) {
     TGeoPatternY *G__Lderived;
     G__Lderived=(TGeoPatternY*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ))) {
     TGeoPatternZ *G__Lderived;
     G__Lderived=(TGeoPatternZ*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX))) {
     TGeoPatternParaX *G__Lderived;
     G__Lderived=(TGeoPatternParaX*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY))) {
     TGeoPatternParaY *G__Lderived;
     G__Lderived=(TGeoPatternParaY*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ))) {
     TGeoPatternParaZ *G__Lderived;
     G__Lderived=(TGeoPatternParaZ*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ))) {
     TGeoPatternTrapZ *G__Lderived;
     G__Lderived=(TGeoPatternTrapZ*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR))) {
     TGeoPatternCylR *G__Lderived;
     G__Lderived=(TGeoPatternCylR*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi))) {
     TGeoPatternCylPhi *G__Lderived;
     G__Lderived=(TGeoPatternCylPhi*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR))) {
     TGeoPatternSphR *G__Lderived;
     G__Lderived=(TGeoPatternSphR*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta))) {
     TGeoPatternSphTheta *G__Lderived;
     G__Lderived=(TGeoPatternSphTheta*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi))) {
     TGeoPatternSphPhi *G__Lderived;
     G__Lderived=(TGeoPatternSphPhi*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb))) {
     TGeoPatternHoneycomb *G__Lderived;
     G__Lderived=(TGeoPatternHoneycomb*)0x1000;
     {
       TGeoPatternFinder *G__Lpbase=(TGeoPatternFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb),G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState))) {
     TGeoCacheState *G__Lderived;
     G__Lderived=(TGeoCacheState*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache))) {
     TGeoNodeCache *G__Lderived;
     G__Lderived=(TGeoNodeCache*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField))) {
     TVirtualMagField *G__Lderived;
     G__Lderived=(TVirtualMagField*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField),G__get_linked_tagnum(&G__G__Geom2LN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField))) {
     TGeoUniformMagField *G__Lderived;
     G__Lderived=(TGeoUniformMagField*)0x1000;
     {
       TVirtualMagField *G__Lpbase=(TVirtualMagField*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField),G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField),G__get_linked_tagnum(&G__G__Geom2LN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField))) {
     TGeoGlobalMagField *G__Lderived;
     G__Lderived=(TGeoGlobalMagField*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField),G__get_linked_tagnum(&G__G__Geom2LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Geom2() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__Geom2LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__Geom2LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__Geom2LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__Geom2LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__Geom2LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__Geom2LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__Geom2LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__Geom2LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__Geom2LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__Geom2LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TGeoElementRN*>",117,G__get_linked_tagnum(&G__G__Geom2LN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*>",117,G__get_linked_tagnum(&G__G__Geom2LN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*,less<int> >",117,G__get_linked_tagnum(&G__G__Geom2LN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TGeoPatternFinder */
static void G__setup_memvarTGeoPatternFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder));
   { TGeoPatternFinder *p; p=(TGeoPatternFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFindercLcLEGeoPatternFlags),-1,-2,1,"kPatternReflected=16384",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStep=",0,"division step length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStart=",0,"starting point on divided axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEnd=",0,"ending point");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrent=",0,"current division element");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNdivisions=",0,"number of divisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDivIndex=",0,"index of first div. node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoMatrix),-1,-1,2,"fMatrix=",0,"generic matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoVolume),-1,-1,2,"fVolume=",0,"volume to which applies");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNextIndex=",0,"! index of next node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternX */
static void G__setup_memvarTGeoPatternX(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX));
   { TGeoPatternX *p; p=(TGeoPatternX*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternY */
static void G__setup_memvarTGeoPatternY(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY));
   { TGeoPatternY *p; p=(TGeoPatternY*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternZ */
static void G__setup_memvarTGeoPatternZ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ));
   { TGeoPatternZ *p; p=(TGeoPatternZ*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternParaX */
static void G__setup_memvarTGeoPatternParaX(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX));
   { TGeoPatternParaX *p; p=(TGeoPatternParaX*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternParaY */
static void G__setup_memvarTGeoPatternParaY(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY));
   { TGeoPatternParaY *p; p=(TGeoPatternParaY*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTxy=",0,"tangent of alpha");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternParaZ */
static void G__setup_memvarTGeoPatternParaZ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ));
   { TGeoPatternParaZ *p; p=(TGeoPatternParaZ*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTxz=",0,"tangent of alpha xz");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTyz=",0,"tangent of alpha yz");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternTrapZ */
static void G__setup_memvarTGeoPatternTrapZ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ));
   { TGeoPatternTrapZ *p; p=(TGeoPatternTrapZ*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTxz=",0,"tangent of alpha xz");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTyz=",0,"tangent of alpha yz");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternCylR */
static void G__setup_memvarTGeoPatternCylR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR));
   { TGeoPatternCylR *p; p=(TGeoPatternCylR*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternCylPhi */
static void G__setup_memvarTGeoPatternCylPhi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi));
   { TGeoPatternCylPhi *p; p=(TGeoPatternCylPhi*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSinCos=",0,"![2*fNdivisions] table of sines/cosines");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternSphR */
static void G__setup_memvarTGeoPatternSphR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR));
   { TGeoPatternSphR *p; p=(TGeoPatternSphR*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternSphTheta */
static void G__setup_memvarTGeoPatternSphTheta(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta));
   { TGeoPatternSphTheta *p; p=(TGeoPatternSphTheta*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternSphPhi */
static void G__setup_memvarTGeoPatternSphPhi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi));
   { TGeoPatternSphPhi *p; p=(TGeoPatternSphPhi*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPatternHoneycomb */
static void G__setup_memvarTGeoPatternHoneycomb(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb));
   { TGeoPatternHoneycomb *p; p=(TGeoPatternHoneycomb*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNrows=",0,"number of rows");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAxisOnRows=",0,"axis along each row");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNdivisions=",0,"[fNrows] number of divisions for each row");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fStart=",0,"[fNrows] starting points for each row");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoCacheState */
static void G__setup_memvarTGeoCacheState(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState));
   { TGeoCacheState *p; p=(TGeoCacheState*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCapacity=",0,"maximum level stored");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLevel=",0,"level in the current branch");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNmany=",0,"number of overlapping nodes on current branch");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStart=",0,"start level");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fIdBranch[30]=",0,"ID branch");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPoint[3]=",0,"last point in master frame");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOverlapping=",0,"overlap flag");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode),-1,-1,2,"fNodeBranch=",0,"last node branch stored");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoHMatrix),-1,-1,2,"fMatrixBranch=",0,"global matrices for last branch");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoHMatrix),-1,-1,2,"fMatPtr=",0,"array of matrix pointers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoNodeCache */
static void G__setup_memvarTGeoNodeCache(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache));
   { TGeoNodeCache *p; p=(TGeoNodeCache*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeoCacheMaxLevels=",0,"maximum supported number of levels");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeoCacheStackSize=",0,"maximum size of the stack");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLevel=",0,"level in the current branch");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStackLevel=",0,"current level in the stack");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrentID=",0,"unique ID of current node");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIndex=",0,"index in array of ID's");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdBranch[100]=",0,"current branch of indices");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TString),-1,-1,4,"fPath=",0,"path for current branch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode),-1,-1,4,"fTop=",0,"top node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode),-1,-1,4,"fNode=",0,"! current node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoHMatrix),-1,-1,4,"fMatrix=",0,"! current matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TObjArray),-1,-1,4,"fStack=",0,"stack of cache states");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoHMatrix),-1,-1,4,"fMatrixBranch=",0,"current branch of global matrices");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoHMatrix),-1,-1,4,"fMPB=",0,"pre-built matrices");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode),-1,-1,4,"fNodeBranch=",0,"current branch of nodes");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNodeIdArray=",0,"! array of node id's");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TVirtualMagField */
static void G__setup_memvarTVirtualMagField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField));
   { TVirtualMagField *p; p=(TVirtualMagField*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoUniformMagField */
static void G__setup_memvarTGeoUniformMagField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField));
   { TGeoUniformMagField *p; p=(TGeoUniformMagField*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fB[3]=",0,"Magnetic field vector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoGlobalMagField */
static void G__setup_memvarTGeoGlobalMagField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField));
   { TGeoGlobalMagField *p; p=(TGeoGlobalMagField*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField),-1,-2,4,"fgInstance=",0,"Static pointer to the field manager;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField),-1,-1,4,"fField=",0,"Magnetic field");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLock=",0,"Lock flag for global field.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Geom2LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Geom2() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTGeoPatternFinder(void) {
   /* TGeoPatternFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder));
   G__memfunc_setup("TGeoPatternFinder",1701,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 2, 0, "u 'TGeoPatternFinder' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 1, 1, 1, 2, 0, "u 'TGeoPatternFinder' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternFinder",1701,G__G__Geom2_161_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternFinder",1701,G__G__Geom2_161_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndiv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,G__G__Geom2_161_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CdNext",582,G__G__Geom2_161_0_6, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,G__G__Geom2_161_0_7, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 10 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetByteCount",1213,G__G__Geom2_161_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrent",1027,G__G__Geom2_161_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDivIndex",1083,G__G__Geom2_161_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDivAxis",984,G__G__Geom2_161_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMatrix",917,G__G__Geom2_161_0_12, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNdiv",689,G__G__Geom2_161_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNext",703,G__G__Geom2_161_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNodeOffset",1293,G__G__Geom2_161_0_15, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStart",814,G__G__Geom2_161_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStep",700,G__G__Geom2_161_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnd",567,G__G__Geom2_161_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolume",920,G__G__Geom2_161_0_19, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoVolume), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOnBoundary",1213,G__G__Geom2_161_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsReflected",1098,G__G__Geom2_161_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeCopy",793,G__G__Geom2_161_0_22, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reflect",709,G__G__Geom2_161_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDivIndex",1095,G__G__Geom2_161_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNext",715,G__G__Geom2_161_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolume",932,G__G__Geom2_161_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - vol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Geom2_161_0_27, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternFinder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_161_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternFinder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_161_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternFinder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_161_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternFinder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_161_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_161_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternFinder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_161_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternFinder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_161_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternFinder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_161_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternFinder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternFinder", 1827, G__G__Geom2_161_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternX(void) {
   /* TGeoPatternX */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX));
   G__memfunc_setup("TGeoPatternX",1189,G__G__Geom2_169_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternX",1189,G__G__Geom2_169_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternX",1189,G__G__Geom2_169_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternX",1189,G__G__Geom2_169_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNextBoundary",1636,G__G__Geom2_169_0_7, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 0 - dir "
"i - 'Int_t' 1 - indnext", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_169_0_12, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternX::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_169_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternX::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_169_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternX::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_169_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternX::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_169_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_169_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternX::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_169_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternX::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_169_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternX::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_169_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternX::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternX", 1189, G__G__Geom2_169_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternX' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternX", 1315, G__G__Geom2_169_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternY(void) {
   /* TGeoPatternY */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY));
   G__memfunc_setup("TGeoPatternY",1190,G__G__Geom2_170_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternY",1190,G__G__Geom2_170_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternY",1190,G__G__Geom2_170_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternY",1190,G__G__Geom2_170_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNextBoundary",1636,G__G__Geom2_170_0_7, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 0 - dir "
"i - 'Int_t' 1 - indnext", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_170_0_12, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternY::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_170_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternY::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_170_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternY::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_170_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternY::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_170_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_170_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternY::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_170_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternY::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_170_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternY::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_170_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternY::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternY", 1190, G__G__Geom2_170_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternY", 1316, G__G__Geom2_170_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternZ(void) {
   /* TGeoPatternZ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ));
   G__memfunc_setup("TGeoPatternZ",1191,G__G__Geom2_171_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternZ",1191,G__G__Geom2_171_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternZ",1191,G__G__Geom2_171_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternZ",1191,G__G__Geom2_171_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNextBoundary",1636,G__G__Geom2_171_0_7, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 0 - dir "
"i - 'Int_t' 1 - indnext", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_171_0_12, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternZ::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_171_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternZ::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_171_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternZ::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_171_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternZ::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_171_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_171_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternZ::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_171_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternZ::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_171_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternZ::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_171_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternZ::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternZ", 1191, G__G__Geom2_171_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternZ' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternZ", 1317, G__G__Geom2_171_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternParaX(void) {
   /* TGeoPatternParaX */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX));
   G__memfunc_setup("TGeoPatternParaX",1577,G__G__Geom2_172_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaX",1577,G__G__Geom2_172_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaX",1577,G__G__Geom2_172_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaX",1577,G__G__Geom2_172_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_172_0_11, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternParaX::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_172_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaX::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_172_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternParaX::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_172_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternParaX::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_172_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_172_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaX::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_172_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternParaX::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_172_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaX::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_172_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternParaX::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternParaX", 1577, G__G__Geom2_172_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternParaX' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternParaX", 1703, G__G__Geom2_172_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternParaY(void) {
   /* TGeoPatternParaY */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY));
   G__memfunc_setup("TGeoPatternParaY",1578,G__G__Geom2_173_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaY",1578,G__G__Geom2_173_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaY",1578,G__G__Geom2_173_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaY",1578,G__G__Geom2_173_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_173_0_11, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternParaY::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_173_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaY::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_173_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternParaY::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_173_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternParaY::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_173_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_173_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaY::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_173_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternParaY::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_173_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaY::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_173_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternParaY::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternParaY", 1578, G__G__Geom2_173_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternParaY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternParaY", 1704, G__G__Geom2_173_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternParaZ(void) {
   /* TGeoPatternParaZ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ));
   G__memfunc_setup("TGeoPatternParaZ",1579,G__G__Geom2_174_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaZ",1579,G__G__Geom2_174_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaZ",1579,G__G__Geom2_174_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternParaZ",1579,G__G__Geom2_174_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_174_0_11, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternParaZ::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_174_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaZ::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_174_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternParaZ::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_174_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternParaZ::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_174_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_174_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaZ::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_174_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternParaZ::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_174_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternParaZ::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_174_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternParaZ::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternParaZ", 1579, G__G__Geom2_174_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternParaZ' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternParaZ", 1705, G__G__Geom2_174_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternTrapZ(void) {
   /* TGeoPatternTrapZ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ));
   G__memfunc_setup("TGeoPatternTrapZ",1598,G__G__Geom2_175_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternTrapZ",1598,G__G__Geom2_175_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternTrapZ",1598,G__G__Geom2_175_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternTrapZ",1598,G__G__Geom2_175_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTxz",614,G__G__Geom2_175_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTyz",615,G__G__Geom2_175_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_175_0_13, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternTrapZ::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_175_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternTrapZ::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_175_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternTrapZ::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_175_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternTrapZ::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_175_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_175_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternTrapZ::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_175_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternTrapZ::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_175_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternTrapZ::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_175_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternTrapZ::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternTrapZ", 1598, G__G__Geom2_175_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternTrapZ' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternTrapZ", 1724, G__G__Geom2_175_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternCylR(void) {
   /* TGeoPatternCylR */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR));
   G__memfunc_setup("TGeoPatternCylR",1479,G__G__Geom2_176_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternCylR",1479,G__G__Geom2_176_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternCylR",1479,G__G__Geom2_176_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternCylR",1479,G__G__Geom2_176_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_176_0_11, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternCylR::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_176_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternCylR::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_176_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternCylR::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_176_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternCylR::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_176_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_176_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternCylR::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_176_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternCylR::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_176_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternCylR::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_176_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternCylR::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternCylR", 1479, G__G__Geom2_176_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternCylR' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternCylR", 1605, G__G__Geom2_176_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternCylPhi(void) {
   /* TGeoPatternCylPhi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi));
   G__memfunc_setup("TGeoPatternCylPhi",1686,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi), -1, 0, 1, 1, 2, 0, "u 'TGeoPatternCylPhi' - 11 - pfc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi), -1, 1, 1, 1, 2, 0, "u 'TGeoPatternCylPhi' - 11 - pfc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternCylPhi",1686,G__G__Geom2_177_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternCylPhi",1686,G__G__Geom2_177_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternCylPhi",1686,G__G__Geom2_177_0_5, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternCylPhi",1686,G__G__Geom2_177_0_6, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOnBoundary",1213,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_177_0_13, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternCylPhi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_177_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternCylPhi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_177_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternCylPhi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_177_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternCylPhi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_177_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_177_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternCylPhi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_177_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternCylPhi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_177_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternCylPhi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_177_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternCylPhi::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternCylPhi", 1812, G__G__Geom2_177_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternSphR(void) {
   /* TGeoPatternSphR */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR));
   G__memfunc_setup("TGeoPatternSphR",1482,G__G__Geom2_178_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphR",1482,G__G__Geom2_178_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphR",1482,G__G__Geom2_178_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphR",1482,G__G__Geom2_178_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_178_0_10, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternSphR::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_178_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphR::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_178_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternSphR::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_178_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternSphR::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_178_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_178_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphR::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_178_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternSphR::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_178_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphR::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_178_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternSphR::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternSphR", 1482, G__G__Geom2_178_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternSphR' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternSphR", 1608, G__G__Geom2_178_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternSphTheta(void) {
   /* TGeoPatternSphTheta */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta));
   G__memfunc_setup("TGeoPatternSphTheta",1902,G__G__Geom2_179_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphTheta",1902,G__G__Geom2_179_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphTheta",1902,G__G__Geom2_179_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphTheta",1902,G__G__Geom2_179_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_179_0_10, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternSphTheta::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_179_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphTheta::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_179_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternSphTheta::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_179_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternSphTheta::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_179_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_179_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphTheta::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_179_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternSphTheta::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_179_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphTheta::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_179_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternSphTheta::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternSphTheta", 1902, G__G__Geom2_179_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternSphTheta' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternSphTheta", 2028, G__G__Geom2_179_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternSphPhi(void) {
   /* TGeoPatternSphPhi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi));
   G__memfunc_setup("TGeoPatternSphPhi",1689,G__G__Geom2_180_0_1, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphPhi",1689,G__G__Geom2_180_0_2, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphPhi",1689,G__G__Geom2_180_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi), -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternSphPhi",1689,G__G__Geom2_180_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi), -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - ndivisions "
"d - 'Double_t' 0 - start d - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDivAxis",984,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCopy",793,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' reflect", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_180_0_10, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternSphPhi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_180_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphPhi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_180_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternSphPhi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_180_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternSphPhi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_180_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_180_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphPhi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_180_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternSphPhi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_180_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternSphPhi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_180_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternSphPhi::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPatternSphPhi", 1689, G__G__Geom2_180_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi), -1, 0, 1, 1, 1, 0, "u 'TGeoPatternSphPhi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternSphPhi", 1815, G__G__Geom2_180_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPatternHoneycomb(void) {
   /* TGeoPatternHoneycomb */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb));
   G__memfunc_setup("TGeoPatternHoneycomb",2033,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb), -1, 0, 1, 1, 2, 0, "u 'TGeoPatternHoneycomb' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb), -1, 1, 1, 1, 2, 0, "u 'TGeoPatternHoneycomb' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternHoneycomb",2033,G__G__Geom2_181_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoPatternHoneycomb",2033,G__G__Geom2_181_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb), -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - nrows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cd",199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNode",775,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 10 '0' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Geom2_181_0_7, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPatternHoneycomb::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_181_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternHoneycomb::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_181_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPatternHoneycomb::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_181_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPatternHoneycomb::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_181_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_181_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternHoneycomb::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_181_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternHoneycomb::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_181_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPatternHoneycomb::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_181_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPatternHoneycomb::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPatternHoneycomb", 2159, G__G__Geom2_181_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoCacheState(void) {
   /* TGeoCacheState */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState));
   G__memfunc_setup("TGeoCacheState",1348,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState), -1, 0, 1, 1, 2, 0, "u 'TGeoCacheState' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState), -1, 1, 1, 1, 2, 0, "u 'TGeoCacheState' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoCacheState",1348,G__G__Geom2_187_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoCacheState",1348,G__G__Geom2_187_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - capacity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetState",813,G__G__Geom2_187_0_5, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - level i - 'Int_t' 0 - startlevel "
"i - 'Int_t' 0 - nmany g - 'Bool_t' 0 - ovlp "
"D - 'Double_t' 0 '0' point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,G__G__Geom2_187_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 1 - level i - 'Int_t' 1 - nmany "
"D - 'Double_t' 0 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Geom2_187_0_7, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoCacheState::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_187_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoCacheState::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_187_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoCacheState::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_187_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoCacheState::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_187_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_187_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoCacheState::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_187_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoCacheState::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_187_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoCacheState::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_187_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoCacheState::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoCacheState", 1474, G__G__Geom2_187_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoNodeCache(void) {
   /* TGeoNodeCache */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache));
   G__memfunc_setup("TGeoNodeCache",1225,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache), -1, 0, 1, 1, 2, 0, "u 'TGeoNodeCache' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache), -1, 1, 1, 1, 2, 0, "u 'TGeoNodeCache' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("TGeoNodeCache",1225,G__G__Geom2_188_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoNodeCache",1225,G__G__Geom2_188_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache), -1, 0, 3, 1, 1, 0, 
"U 'TGeoNode' - 0 - top g - 'Bool_t' 0 'kFALSE' nodeid "
"i - 'Int_t' 0 '30' capacity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildIdArray",1180,G__G__Geom2_188_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CdNode",557,G__G__Geom2_188_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nodeid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CdDown",575,G__G__Geom2_188_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CdTop",474,G__G__Geom2_188_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CdUp",364,G__G__Geom2_188_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillIdBranch",1154,G__G__Geom2_188_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 10 - br i - 'Int_t' 0 '0' startlevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdBranch",1051,G__G__Geom2_188_0_11, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranch",878,G__G__Geom2_188_0_12, 89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchNames",1378,G__G__Geom2_188_0_13, 121, -1, -1, 0, 1, 1, 1, 8, "I - 'Int_t' 0 - names", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchNumbers",1610,G__G__Geom2_188_0_14, 121, -1, -1, 0, 2, 1, 1, 8, 
"I - 'Int_t' 0 - copyNumbers I - 'Int_t' 0 - volumeNumbers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBranchOnlys",1411,G__G__Geom2_188_0_15, 121, -1, -1, 0, 1, 1, 1, 8, "I - 'Int_t' 0 - isonly", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatrices",1112,G__G__Geom2_188_0_16, 89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentMatrix",1656,G__G__Geom2_188_0_17, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoHMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentNodeId",1590,G__G__Geom2_188_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMother",911,G__G__Geom2_188_0_19, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 '1' up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMotherMatrix",1540,G__G__Geom2_188_0_20, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoHMatrix), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 '1' up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNode",678,G__G__Geom2_188_0_21, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTopNode",985,G__G__Geom2_188_0_22, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoNode), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLevel",792,G__G__Geom2_188_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPath",685,G__G__Geom2_188_0_24, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStackLevel",1294,G__G__Geom2_188_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNodeId",851,G__G__Geom2_188_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasIdArray",968,G__G__Geom2_188_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDummy",712,G__G__Geom2_188_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LocalToMaster",1306,G__G__Geom2_188_0_29, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - local D - 'Double_t' 0 - master", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MasterToLocal",1306,G__G__Geom2_188_0_30, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - master D - 'Double_t' 0 - local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LocalToMasterVect",1708,G__G__Geom2_188_0_31, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - local D - 'Double_t' 0 - master", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MasterToLocalVect",1708,G__G__Geom2_188_0_32, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - master D - 'Double_t' 0 - local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LocalToMasterBomb",1690,G__G__Geom2_188_0_33, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - local D - 'Double_t' 0 - master", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MasterToLocalBomb",1690,G__G__Geom2_188_0_34, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - master D - 'Double_t' 0 - local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PushState",929,G__G__Geom2_188_0_35, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"g - 'Bool_t' 0 - ovlp i - 'Int_t' 0 '0' ntmany "
"i - 'Int_t' 0 '0' startlevel D - 'Double_t' 0 '0' point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PopState",816,G__G__Geom2_188_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - nmany D - 'Double_t' 0 '0' point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PopState",816,G__G__Geom2_188_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - nmany i - 'Int_t' 0 - level "
"D - 'Double_t' 0 '0' point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PopDummy",827,G__G__Geom2_188_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '9999' ipop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Refresh",719,G__G__Geom2_188_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RestoreState",1253,G__G__Geom2_188_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - nmany U 'TGeoCacheState' - 0 - state "
"D - 'Double_t' 0 '0' point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Geom2_188_0_41, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoNodeCache::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_188_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoNodeCache::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_188_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoNodeCache::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_188_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoNodeCache::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_188_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_188_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoNodeCache::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_188_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoNodeCache::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_188_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoNodeCache::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_188_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoNodeCache::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoNodeCache", 1351, G__G__Geom2_188_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTVirtualMagField(void) {
   /* TVirtualMagField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField));
   G__memfunc_setup("Field",484,G__G__Geom2_189_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - x D - 'Double_t' 0 - B", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__Geom2_189_0_4, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TVirtualMagField::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_189_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVirtualMagField::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_189_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TVirtualMagField::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_189_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TVirtualMagField::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_189_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_189_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVirtualMagField::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_189_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVirtualMagField::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_189_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVirtualMagField::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_189_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVirtualMagField::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TVirtualMagField", 1714, G__G__Geom2_189_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Geom2_189_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField), -1, 1, 1, 1, 1, 0, "u 'TVirtualMagField' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoUniformMagField(void) {
   /* TGeoUniformMagField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField));
   G__memfunc_setup("TGeoUniformMagField",1864,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField), -1, 0, 1, 1, 2, 0, "u 'TGeoUniformMagField' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField), -1, 1, 1, 1, 2, 0, "u 'TGeoUniformMagField' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoUniformMagField",1864,G__G__Geom2_190_0_3, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoUniformMagField",1864,G__G__Geom2_190_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - Bx d - 'Double_t' 0 - By "
"d - 'Double_t' 0 - Bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Field",484,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - - D - 'Double_t' 0 - B", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFieldValue",1281,G__G__Geom2_190_0_6, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFieldValue",1293,G__G__Geom2_190_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - Bx d - 'Double_t' 0 - By "
"d - 'Double_t' 0 - Bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Geom2_190_0_8, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoUniformMagField::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_190_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoUniformMagField::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_190_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoUniformMagField::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_190_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoUniformMagField::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_190_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_190_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoUniformMagField::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_190_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoUniformMagField::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_190_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoUniformMagField::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_190_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoUniformMagField::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoUniformMagField", 1990, G__G__Geom2_190_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoGlobalMagField(void) {
   /* TGeoGlobalMagField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField));
   G__memfunc_setup("TGeoGlobalMagField",1721,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField), -1, 0, 1, 1, 2, 0, "u 'TGeoGlobalMagField' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField), -1, 1, 1, 1, 2, 0, "u 'TGeoGlobalMagField' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unlock",620,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoGlobalMagField",1721,G__G__Geom2_191_0_4, 105, G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,G__G__Geom2_191_0_5, 85, G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetField",784,G__G__Geom2_191_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualMagField' - 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,G__G__Geom2_191_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Lock",393,G__G__Geom2_191_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__Geom2_191_0_9, 85, G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TGeoGlobalMagField* (*)())(&TGeoGlobalMagField::Instance) ), 0);
   G__memfunc_setup("Field",484,G__G__Geom2_191_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - x D - 'Double_t' 0 - B", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Geom2_191_0_11, 85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoGlobalMagField::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Geom2_191_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoGlobalMagField::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Geom2_191_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoGlobalMagField::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Geom2_191_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoGlobalMagField::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Geom2LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Geom2_191_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Geom2_191_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoGlobalMagField::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Geom2_191_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoGlobalMagField::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Geom2_191_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoGlobalMagField::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Geom2_191_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoGlobalMagField::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoGlobalMagField", 1847, G__G__Geom2_191_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Geom2() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Geom2() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Geom2() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__Geom2LN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__Geom2LN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR = { "map<int,TGeoElementRN*,less<int>,allocator<pair<const int,TGeoElementRN*> > >" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoMatrix = { "TGeoMatrix" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoHMatrix = { "TGeoHMatrix" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoNode = { "TGeoNode" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternFinder = { "TGeoPatternFinder" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternFindercLcLEGeoPatternFlags = { "TGeoPatternFinder::EGeoPatternFlags" , 101 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternX = { "TGeoPatternX" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternY = { "TGeoPatternY" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternZ = { "TGeoPatternZ" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternParaX = { "TGeoPatternParaX" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternParaY = { "TGeoPatternParaY" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternParaZ = { "TGeoPatternParaZ" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternTrapZ = { "TGeoPatternTrapZ" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternCylR = { "TGeoPatternCylR" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternCylPhi = { "TGeoPatternCylPhi" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternSphR = { "TGeoPatternSphR" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternSphTheta = { "TGeoPatternSphTheta" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternSphPhi = { "TGeoPatternSphPhi" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoPatternHoneycomb = { "TGeoPatternHoneycomb" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoCacheState = { "TGeoCacheState" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoNodeCache = { "TGeoNodeCache" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TVirtualMagField = { "TVirtualMagField" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoUniformMagField = { "TGeoUniformMagField" , 99 , -1 };
G__linked_taginfo G__G__Geom2LN_TGeoGlobalMagField = { "TGeoGlobalMagField" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Geom2() {
  G__G__Geom2LN_TClass.tagnum = -1 ;
  G__G__Geom2LN_TBuffer.tagnum = -1 ;
  G__G__Geom2LN_TMemberInspector.tagnum = -1 ;
  G__G__Geom2LN_TObject.tagnum = -1 ;
  G__G__Geom2LN_TNamed.tagnum = -1 ;
  G__G__Geom2LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__Geom2LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__Geom2LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__Geom2LN_TObjArray.tagnum = -1 ;
  G__G__Geom2LN_TString.tagnum = -1 ;
  G__G__Geom2LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__Geom2LN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR.tagnum = -1 ;
  G__G__Geom2LN_TGeoMatrix.tagnum = -1 ;
  G__G__Geom2LN_TGeoHMatrix.tagnum = -1 ;
  G__G__Geom2LN_TGeoVolume.tagnum = -1 ;
  G__G__Geom2LN_TGeoNode.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternFinder.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternFindercLcLEGeoPatternFlags.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternX.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternY.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternZ.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternParaX.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternParaY.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternParaZ.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternTrapZ.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternCylR.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternCylPhi.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternSphR.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternSphTheta.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternSphPhi.tagnum = -1 ;
  G__G__Geom2LN_TGeoPatternHoneycomb.tagnum = -1 ;
  G__G__Geom2LN_TGeoCacheState.tagnum = -1 ;
  G__G__Geom2LN_TGeoNodeCache.tagnum = -1 ;
  G__G__Geom2LN_TVirtualMagField.tagnum = -1 ;
  G__G__Geom2LN_TGeoUniformMagField.tagnum = -1 ;
  G__G__Geom2LN_TGeoGlobalMagField.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Geom2() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TClass);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TObject);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TString);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TGeoMatrix);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TGeoHMatrix);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TGeoNode);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternFinder),sizeof(TGeoPatternFinder),-1,327424,"patterns to divide volumes",G__setup_memvarTGeoPatternFinder,G__setup_memfuncTGeoPatternFinder);
   G__get_linked_tagnum_fwd(&G__G__Geom2LN_TGeoPatternFindercLcLEGeoPatternFlags);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternX),sizeof(TGeoPatternX),-1,324864,"X division pattern",G__setup_memvarTGeoPatternX,G__setup_memfuncTGeoPatternX);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternY),sizeof(TGeoPatternY),-1,324864,"Y division pattern",G__setup_memvarTGeoPatternY,G__setup_memfuncTGeoPatternY);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternZ),sizeof(TGeoPatternZ),-1,324864,"Z division pattern",G__setup_memvarTGeoPatternZ,G__setup_memfuncTGeoPatternZ);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaX),sizeof(TGeoPatternParaX),-1,324864,"Para X division pattern",G__setup_memvarTGeoPatternParaX,G__setup_memfuncTGeoPatternParaX);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaY),sizeof(TGeoPatternParaY),-1,324864,"Para Y division pattern",G__setup_memvarTGeoPatternParaY,G__setup_memfuncTGeoPatternParaY);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternParaZ),sizeof(TGeoPatternParaZ),-1,324864,"Para Z division pattern",G__setup_memvarTGeoPatternParaZ,G__setup_memfuncTGeoPatternParaZ);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternTrapZ),sizeof(TGeoPatternTrapZ),-1,324864,"Trap od Gtra Z division pattern",G__setup_memvarTGeoPatternTrapZ,G__setup_memfuncTGeoPatternTrapZ);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylR),sizeof(TGeoPatternCylR),-1,324864,"Cylindrical R division pattern",G__setup_memvarTGeoPatternCylR,G__setup_memfuncTGeoPatternCylR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternCylPhi),sizeof(TGeoPatternCylPhi),-1,327424,"Cylindrical phi division pattern",G__setup_memvarTGeoPatternCylPhi,G__setup_memfuncTGeoPatternCylPhi);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphR),sizeof(TGeoPatternSphR),-1,324864,"spherical R division pattern",G__setup_memvarTGeoPatternSphR,G__setup_memfuncTGeoPatternSphR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphTheta),sizeof(TGeoPatternSphTheta),-1,324864,"spherical theta division pattern",G__setup_memvarTGeoPatternSphTheta,G__setup_memfuncTGeoPatternSphTheta);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternSphPhi),sizeof(TGeoPatternSphPhi),-1,324864,"Spherical phi division pattern",G__setup_memvarTGeoPatternSphPhi,G__setup_memfuncTGeoPatternSphPhi);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoPatternHoneycomb),sizeof(TGeoPatternHoneycomb),-1,327424,"pattern for honeycomb divisions",G__setup_memvarTGeoPatternHoneycomb,G__setup_memfuncTGeoPatternHoneycomb);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoCacheState),sizeof(TGeoCacheState),-1,327424,"class storing the cache state",G__setup_memvarTGeoCacheState,G__setup_memfuncTGeoCacheState);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoNodeCache),sizeof(TGeoNodeCache),-1,327424,"cache of reusable physical nodes",G__setup_memvarTGeoNodeCache,G__setup_memfuncTGeoNodeCache);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TVirtualMagField),sizeof(TVirtualMagField),-1,324865,"Abstract base field class",G__setup_memvarTVirtualMagField,G__setup_memfuncTVirtualMagField);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoUniformMagField),sizeof(TGeoUniformMagField),-1,327424,"Uniform magnetic field        ",G__setup_memvarTGeoUniformMagField,G__setup_memfuncTGeoUniformMagField);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Geom2LN_TGeoGlobalMagField),sizeof(TGeoGlobalMagField),-1,32512,"Global field manager",G__setup_memvarTGeoGlobalMagField,G__setup_memfuncTGeoGlobalMagField);
}
extern "C" void G__cpp_setupG__Geom2(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Geom2()");
  G__set_cpp_environmentG__Geom2();
  G__cpp_setup_tagtableG__Geom2();

  G__cpp_setup_inheritanceG__Geom2();

  G__cpp_setup_typetableG__Geom2();

  G__cpp_setup_memvarG__Geom2();

  G__cpp_setup_memfuncG__Geom2();
  G__cpp_setup_globalG__Geom2();
  G__cpp_setup_funcG__Geom2();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Geom2();
  return;
}
class G__cpp_setup_initG__Geom2 {
  public:
    G__cpp_setup_initG__Geom2() { G__add_setup_func("G__Geom2",(G__incsetup)(&G__cpp_setupG__Geom2)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Geom2() { G__remove_setup_func("G__Geom2"); }
};
G__cpp_setup_initG__Geom2 G__cpp_setup_initializerG__Geom2;

