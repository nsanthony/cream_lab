//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:45:39 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__GeomPainter.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TGeoOverlap_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoOverlap(void *p = 0);
   static void *newArray_TGeoOverlap(Long_t size, void *p);
   static void delete_TGeoOverlap(void *p);
   static void deleteArray_TGeoOverlap(void *p);
   static void destruct_TGeoOverlap(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoOverlap*)
   {
      ::TGeoOverlap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoOverlap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoOverlap", ::TGeoOverlap::Class_Version(), "include/TGeoOverlap.h", 51,
                  typeid(::TGeoOverlap), DefineBehavior(ptr, ptr),
                  &::TGeoOverlap::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoOverlap) );
      instance.SetNew(&new_TGeoOverlap);
      instance.SetNewArray(&newArray_TGeoOverlap);
      instance.SetDelete(&delete_TGeoOverlap);
      instance.SetDeleteArray(&deleteArray_TGeoOverlap);
      instance.SetDestructor(&destruct_TGeoOverlap);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoOverlap*)
   {
      return GenerateInitInstanceLocal((::TGeoOverlap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoOverlap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoChecker_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoChecker(void *p = 0);
   static void *newArray_TGeoChecker(Long_t size, void *p);
   static void delete_TGeoChecker(void *p);
   static void deleteArray_TGeoChecker(void *p);
   static void destruct_TGeoChecker(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoChecker*)
   {
      ::TGeoChecker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoChecker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoChecker", ::TGeoChecker::Class_Version(), "include/TGeoChecker.h", 39,
                  typeid(::TGeoChecker), DefineBehavior(ptr, ptr),
                  &::TGeoChecker::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoChecker) );
      instance.SetNew(&new_TGeoChecker);
      instance.SetNewArray(&newArray_TGeoChecker);
      instance.SetDelete(&delete_TGeoChecker);
      instance.SetDeleteArray(&deleteArray_TGeoChecker);
      instance.SetDestructor(&destruct_TGeoChecker);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoChecker*)
   {
      return GenerateInitInstanceLocal((::TGeoChecker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoChecker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoPainter_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TGeoPainter(void *p);
   static void deleteArray_TGeoPainter(void *p);
   static void destruct_TGeoPainter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoPainter*)
   {
      ::TGeoPainter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoPainter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPainter", ::TGeoPainter::Class_Version(), "include/TGeoPainter.h", 43,
                  typeid(::TGeoPainter), DefineBehavior(ptr, ptr),
                  &::TGeoPainter::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoPainter) );
      instance.SetDelete(&delete_TGeoPainter);
      instance.SetDeleteArray(&deleteArray_TGeoPainter);
      instance.SetDestructor(&destruct_TGeoPainter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPainter*)
   {
      return GenerateInitInstanceLocal((::TGeoPainter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoPainter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeoTrack_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeoTrack(void *p = 0);
   static void *newArray_TGeoTrack(Long_t size, void *p);
   static void delete_TGeoTrack(void *p);
   static void deleteArray_TGeoTrack(void *p);
   static void destruct_TGeoTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeoTrack*)
   {
      ::TGeoTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeoTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeoTrack", ::TGeoTrack::Class_Version(), "include/TGeoTrack.h", 35,
                  typeid(::TGeoTrack), DefineBehavior(ptr, ptr),
                  &::TGeoTrack::Dictionary, isa_proxy, 4,
                  sizeof(::TGeoTrack) );
      instance.SetNew(&new_TGeoTrack);
      instance.SetNewArray(&newArray_TGeoTrack);
      instance.SetDelete(&delete_TGeoTrack);
      instance.SetDeleteArray(&deleteArray_TGeoTrack);
      instance.SetDestructor(&destruct_TGeoTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeoTrack*)
   {
      return GenerateInitInstanceLocal((::TGeoTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeoTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TGeoOverlap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoOverlap::Class_Name()
{
   return "TGeoOverlap";
}

//______________________________________________________________________________
const char *TGeoOverlap::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoOverlap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoOverlap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoOverlap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoOverlap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoOverlap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoOverlap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoOverlap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoChecker::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoChecker::Class_Name()
{
   return "TGeoChecker";
}

//______________________________________________________________________________
const char *TGeoChecker::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoChecker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoChecker::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoChecker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoChecker::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoChecker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoChecker::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoChecker*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPainter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPainter::Class_Name()
{
   return "TGeoPainter";
}

//______________________________________________________________________________
const char *TGeoPainter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPainter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPainter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoPainter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPainter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPainter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPainter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoPainter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoTrack::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoTrack::Class_Name()
{
   return "TGeoTrack";
}

//______________________________________________________________________________
const char *TGeoTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeoTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoTrack::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeoTrack*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TGeoPainter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPainter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoPainter::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoPainter::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoPainter::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPainter.
      TClass *R__cl = ::TGeoPainter::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fBombX", &fBombX);
      R__insp.Inspect(R__cl, R__parent, "fBombY", &fBombY);
      R__insp.Inspect(R__cl, R__parent, "fBombZ", &fBombZ);
      R__insp.Inspect(R__cl, R__parent, "fBombR", &fBombR);
      R__insp.Inspect(R__cl, R__parent, "fCheckedBox[6]", fCheckedBox);
      R__insp.Inspect(R__cl, R__parent, "fMat[9]", fMat);
      R__insp.Inspect(R__cl, R__parent, "fNsegments", &fNsegments);
      R__insp.Inspect(R__cl, R__parent, "fNVisNodes", &fNVisNodes);
      R__insp.Inspect(R__cl, R__parent, "fVisLevel", &fVisLevel);
      R__insp.Inspect(R__cl, R__parent, "fVisOption", &fVisOption);
      R__insp.Inspect(R__cl, R__parent, "fExplodedView", &fExplodedView);
      R__insp.Inspect(R__cl, R__parent, "fVisLock", &fVisLock);
      R__insp.Inspect(R__cl, R__parent, "fTopVisible", &fTopVisible);
      R__insp.Inspect(R__cl, R__parent, "fPaintingOverlaps", &fPaintingOverlaps);
      R__insp.Inspect(R__cl, R__parent, "fIsRaytracing", &fIsRaytracing);
      R__insp.Inspect(R__cl, R__parent, "fIsPaintingShape", &fIsPaintingShape);
      R__insp.Inspect(R__cl, R__parent, "fVisBranch", &fVisBranch);
      fVisBranch.ShowMembers(R__insp, strcat(R__parent,"fVisBranch.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fVolInfo", &fVolInfo);
      fVolInfo.ShowMembers(R__insp, strcat(R__parent,"fVolInfo.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fCheckedNode", &fCheckedNode);
      R__insp.Inspect(R__cl, R__parent, "*fOverlap", &fOverlap);
      R__insp.Inspect(R__cl, R__parent, "*fGlobal", &fGlobal);
      R__insp.Inspect(R__cl, R__parent, "*fBuffer", &fBuffer);
      R__insp.Inspect(R__cl, R__parent, "*fGeoManager", &fGeoManager);
      R__insp.Inspect(R__cl, R__parent, "*fChecker", &fChecker);
      R__insp.Inspect(R__cl, R__parent, "*fClippingShape", &fClippingShape);
      R__insp.Inspect(R__cl, R__parent, "*fTopVolume", &fTopVolume);
      R__insp.Inspect(R__cl, R__parent, "*fLastVolume", &fLastVolume);
      R__insp.Inspect(R__cl, R__parent, "*fPlugin", &fPlugin);
      R__insp.Inspect(R__cl, R__parent, "*fVisVolumes", &fVisVolumes);
      R__insp.Inspect(R__cl, R__parent, "fIsEditable", &fIsEditable);
      TVirtualGeoPainter::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TGeoPainter(void *p) {
      delete ((::TGeoPainter*)p);
   }
   static void deleteArray_TGeoPainter(void *p) {
      delete [] ((::TGeoPainter*)p);
   }
   static void destruct_TGeoPainter(void *p) {
      typedef ::TGeoPainter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPainter

//______________________________________________________________________________
void TGeoChecker::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoChecker.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoChecker::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoChecker::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoChecker::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoChecker.
      TClass *R__cl = ::TGeoChecker::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fGeoManager", &fGeoManager);
      R__insp.Inspect(R__cl, R__parent, "*fVsafe", &fVsafe);
      R__insp.Inspect(R__cl, R__parent, "*fBuff1", &fBuff1);
      R__insp.Inspect(R__cl, R__parent, "*fBuff2", &fBuff2);
      R__insp.Inspect(R__cl, R__parent, "fFullCheck", &fFullCheck);
      R__insp.Inspect(R__cl, R__parent, "*fVal1", &fVal1);
      R__insp.Inspect(R__cl, R__parent, "*fVal2", &fVal2);
      R__insp.Inspect(R__cl, R__parent, "*fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__parent, "*fTimer", &fTimer);
      R__insp.Inspect(R__cl, R__parent, "*fSelectedNode", &fSelectedNode);
      R__insp.Inspect(R__cl, R__parent, "fNchecks", &fNchecks);
      R__insp.Inspect(R__cl, R__parent, "fNmeshPoints", &fNmeshPoints);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoChecker(void *p) {
      return  p ? new(p) ::TGeoChecker : new ::TGeoChecker;
   }
   static void *newArray_TGeoChecker(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoChecker[nElements] : new ::TGeoChecker[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoChecker(void *p) {
      delete ((::TGeoChecker*)p);
   }
   static void deleteArray_TGeoChecker(void *p) {
      delete [] ((::TGeoChecker*)p);
   }
   static void destruct_TGeoChecker(void *p) {
      typedef ::TGeoChecker current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoChecker

//______________________________________________________________________________
void TGeoTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoTrack::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoTrack::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoTrack.
      TClass *R__cl = ::TGeoTrack::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fPointsSize", &fPointsSize);
      R__insp.Inspect(R__cl, R__parent, "fNpoints", &fNpoints);
      R__insp.Inspect(R__cl, R__parent, "*fPoints", &fPoints);
      TVirtualGeoTrack::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoTrack(void *p) {
      return  p ? new(p) ::TGeoTrack : new ::TGeoTrack;
   }
   static void *newArray_TGeoTrack(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoTrack[nElements] : new ::TGeoTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoTrack(void *p) {
      delete ((::TGeoTrack*)p);
   }
   static void deleteArray_TGeoTrack(void *p) {
      delete [] ((::TGeoTrack*)p);
   }
   static void destruct_TGeoTrack(void *p) {
      typedef ::TGeoTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoTrack

//______________________________________________________________________________
void TGeoOverlap::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoOverlap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGeoOverlap::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGeoOverlap::Class(),this);
   }
}

//______________________________________________________________________________
void TGeoOverlap::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoOverlap.
      TClass *R__cl = ::TGeoOverlap::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fOverlap", &fOverlap);
      R__insp.Inspect(R__cl, R__parent, "*fVolume1", &fVolume1);
      R__insp.Inspect(R__cl, R__parent, "*fVolume2", &fVolume2);
      R__insp.Inspect(R__cl, R__parent, "*fMatrix1", &fMatrix1);
      R__insp.Inspect(R__cl, R__parent, "*fMatrix2", &fMatrix2);
      R__insp.Inspect(R__cl, R__parent, "*fMarker", &fMarker);
      TNamed::ShowMembers(R__insp, R__parent);
      TAttLine::ShowMembers(R__insp, R__parent);
      TAttFill::ShowMembers(R__insp, R__parent);
      TAtt3D::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeoOverlap(void *p) {
      return  p ? new(p) ::TGeoOverlap : new ::TGeoOverlap;
   }
   static void *newArray_TGeoOverlap(Long_t nElements, void *p) {
      return p ? new(p) ::TGeoOverlap[nElements] : new ::TGeoOverlap[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeoOverlap(void *p) {
      delete ((::TGeoOverlap*)p);
   }
   static void deleteArray_TGeoOverlap(void *p) {
      delete [] ((::TGeoOverlap*)p);
   }
   static void destruct_TGeoOverlap(void *p) {
      typedef ::TGeoOverlap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoOverlap

/********************************************************
* geom/geompainter/src/G__GeomPainter.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__GeomPainter();

extern "C" void G__set_cpp_environmentG__GeomPainter() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TGeoChecker.h");
  G__add_compiledheader("TGeoOverlap.h");
  G__add_compiledheader("TGeoPainter.h");
  G__add_compiledheader("TGeoTrack.h");
  G__cpp_reset_tagtableG__GeomPainter();
}
#include <new>
extern "C" int G__cpp_dllrevG__GeomPainter() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TGeoOverlap */
static int G__G__GeomPainter_101_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoOverlap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoOverlap[n];
     } else {
       p = new((void*) gvp) TGeoOverlap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoOverlap;
     } else {
       p = new((void*) gvp) TGeoOverlap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoOverlap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoOverlap(
(const char*) G__int(libp->para[0]), (TGeoVolume*) G__int(libp->para[1])
, (TGeoVolume*) G__int(libp->para[2]), (const TGeoMatrix*) G__int(libp->para[3])
, (const TGeoMatrix*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TGeoOverlap(
(const char*) G__int(libp->para[0]), (TGeoVolume*) G__int(libp->para[1])
, (TGeoVolume*) G__int(libp->para[2]), (const TGeoMatrix*) G__int(libp->para[3])
, (const TGeoMatrix*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoOverlap(
(const char*) G__int(libp->para[0]), (TGeoVolume*) G__int(libp->para[1])
, (TGeoVolume*) G__int(libp->para[2]), (const TGeoMatrix*) G__int(libp->para[3])
, (const TGeoMatrix*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TGeoOverlap(
(const char*) G__int(libp->para[0]), (TGeoVolume*) G__int(libp->para[1])
, (TGeoVolume*) G__int(libp->para[2]), (const TGeoMatrix*) G__int(libp->para[3])
, (const TGeoMatrix*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoOverlap(
(const char*) G__int(libp->para[0]), (TGeoVolume*) G__int(libp->para[1])
, (TGeoVolume*) G__int(libp->para[2]), (const TGeoMatrix*) G__int(libp->para[3])
, (const TGeoMatrix*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TGeoOverlap(
(const char*) G__int(libp->para[0]), (TGeoVolume*) G__int(libp->para[1])
, (TGeoVolume*) G__int(libp->para[2]), (const TGeoMatrix*) G__int(libp->para[3])
, (const TGeoMatrix*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoOverlap*) G__getstructoffset())->GetPolyMarker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoOverlap*) G__getstructoffset())->GetFirstVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoOverlap*) G__getstructoffset())->GetSecondVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoOverlap*) G__getstructoffset())->GetFirstMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeoOverlap*) G__getstructoffset())->GetSecondMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TGeoOverlap*) G__getstructoffset())->GetOverlap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeoOverlap*) G__getstructoffset())->IsExtrusion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeoOverlap*) G__getstructoffset())->IsOverlap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoOverlap*) G__getstructoffset())->PrintInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeoOverlap*) G__getstructoffset())->SampleOverlap((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoOverlap*) G__getstructoffset())->SampleOverlap();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeoOverlap*) G__getstructoffset())->SetIsExtrusion((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoOverlap*) G__getstructoffset())->SetIsExtrusion();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeoOverlap*) G__getstructoffset())->SetIsOverlap((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoOverlap*) G__getstructoffset())->SetIsOverlap();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoOverlap*) G__getstructoffset())->SetNextPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoOverlap*) G__getstructoffset())->SetFirstVolume((TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoOverlap*) G__getstructoffset())->SetSecondVolume((TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoOverlap*) G__getstructoffset())->SetFirstMatrix((TGeoMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoOverlap*) G__getstructoffset())->SetSecondMatrix((TGeoMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoOverlap*) G__getstructoffset())->SetOverlap((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoOverlap*) G__getstructoffset())->Validate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoOverlap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoOverlap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoOverlap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoOverlap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoOverlap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoOverlap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoOverlap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoOverlap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_101_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoOverlap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoOverlap G__TTGeoOverlap;
static int G__G__GeomPainter_101_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoOverlap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoOverlap*) (soff+(sizeof(TGeoOverlap)*i)))->~G__TTGeoOverlap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoOverlap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoOverlap*) (soff))->~G__TTGeoOverlap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoChecker */
static int G__G__GeomPainter_105_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoChecker* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoChecker[n];
     } else {
       p = new((void*) gvp) TGeoChecker[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoChecker;
     } else {
       p = new((void*) gvp) TGeoChecker;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoChecker* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoChecker((TGeoManager*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TGeoChecker((TGeoManager*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TGeoChecker*) G__getstructoffset())->CheckBoundaryErrors((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoChecker*) G__getstructoffset())->CheckBoundaryErrors((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoChecker*) G__getstructoffset())->CheckBoundaryErrors();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeoChecker*) G__getstructoffset())->CheckBoundaryReference((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoChecker*) G__getstructoffset())->CheckBoundaryReference();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TGeoChecker*) G__getstructoffset())->CheckGeometryFull((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (const Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGeoChecker*) G__getstructoffset())->CheckGeometryFull((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TGeoChecker*) G__getstructoffset())->CheckGeometryFull((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoChecker*) G__getstructoffset())->CheckGeometryFull((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoChecker*) G__getstructoffset())->CheckGeometryFull();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoChecker*) G__getstructoffset())->CheckGeometry((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TGeoChecker*) G__getstructoffset())->CheckOverlaps((const TGeoVolume*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TGeoChecker*) G__getstructoffset())->CheckOverlaps((const TGeoVolume*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoChecker*) G__getstructoffset())->CheckOverlaps((const TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const TGeoChecker*) G__getstructoffset())->CheckOverlapsBySampling((TGeoVolume*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const TGeoChecker*) G__getstructoffset())->CheckOverlapsBySampling((TGeoVolume*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const TGeoChecker*) G__getstructoffset())->CheckOverlapsBySampling((TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TGeoChecker*) G__getstructoffset())->CheckPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Option_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGeoChecker*) G__getstructoffset())->CheckPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TGeoChecker*) G__getstructoffset())->CheckPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoChecker*) G__getstructoffset())->CheckPoint((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoChecker*) G__getstructoffset())->CheckPoint();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TGeoChecker*) G__getstructoffset())->CheckVoxels((TGeoVolume*) G__int(libp->para[0]), (TGeoVoxelFinder*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Option_t*) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->LegoPlot());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoChecker*) G__getstructoffset())->PrintOverlaps();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoChecker*) G__getstructoffset())->RandomPoints((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoChecker*) G__getstructoffset())->RandomRays((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->MakeCheckOverlap(
(const char*) G__int(libp->para[0]), (TGeoVolume*) G__int(libp->para[1])
, (TGeoVolume*) G__int(libp->para[2]), (TGeoMatrix*) G__int(libp->para[3])
, (TGeoMatrix*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((TGeoChecker*) G__getstructoffset())->OpProgress((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1])
, (Long64_t) G__Longlong(libp->para[2]), (TStopwatch*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((TGeoChecker*) G__getstructoffset())->OpProgress((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1])
, (Long64_t) G__Longlong(libp->para[2]), (TStopwatch*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TGeoChecker*) G__getstructoffset())->OpProgress((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1])
, (Long64_t) G__Longlong(libp->para[2]), (TStopwatch*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGeoChecker*) G__getstructoffset())->OpProgress((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1])
, (Long64_t) G__Longlong(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGeoChecker*) G__getstructoffset())->SamplePoints((Int_t) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((const TGeoChecker*) G__getstructoffset())->ShootRay(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t*) G__int(libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), (Double_t*) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((const TGeoChecker*) G__getstructoffset())->ShootRay(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t*) G__int(libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoChecker*) G__getstructoffset())->SetSelectedNode((TGeoNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeoChecker*) G__getstructoffset())->SetNmeshPoints((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoChecker*) G__getstructoffset())->SetNmeshPoints();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoChecker*) G__getstructoffset())->Test((Int_t) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoChecker*) G__getstructoffset())->TestOverlaps((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((TGeoChecker*) G__getstructoffset())->TestVoxels((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TGeoChecker*) G__getstructoffset())->TestVoxels((TGeoVolume*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((TGeoChecker*) G__getstructoffset())->Weight((Double_t) G__double(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((TGeoChecker*) G__getstructoffset())->Weight((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((TGeoChecker*) G__getstructoffset())->Weight());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoChecker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoChecker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoChecker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoChecker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoChecker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoChecker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoChecker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoChecker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_105_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoChecker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__GeomPainter_105_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoChecker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoChecker(*(TGeoChecker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoChecker G__TTGeoChecker;
static int G__G__GeomPainter_105_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoChecker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoChecker*) (soff+(sizeof(TGeoChecker)*i)))->~G__TTGeoChecker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoChecker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoChecker*) (soff))->~G__TTGeoChecker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeomPainter_105_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoChecker* dest = (TGeoChecker*) G__getstructoffset();
   *dest = *(TGeoChecker*) libp->para[0].ref;
   const TGeoChecker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPainter */
static int G__G__GeomPainter_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPainter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeoPainter((TGeoManager*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TGeoPainter((TGeoManager*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPainter*) G__getstructoffset())->CheckEdit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeoPainter*) G__getstructoffset())->CountNodes((TGeoVolume*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGeoPainter*) G__getstructoffset())->GetCheckedNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGeoPainter*) G__getstructoffset())->GetChecker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeoPainter*) G__getstructoffset())->Lock((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoPainter*) G__getstructoffset())->Lock();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeoPainter*) G__getstructoffset())->PaintShape(*(TGeoShape*) libp->para[0].ref, (Option_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TGeoPainter*) G__getstructoffset())->PaintPhysicalNode((TGeoPhysicalNode*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoPainter*) G__getstructoffset())->PaintPhysicalNode((TGeoPhysicalNode*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoPainter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPainter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoPainter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoPainter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoPainter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPainter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPainter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoPainter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_211_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoPainter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__GeomPainter_211_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGeoPainter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGeoPainter(*(TGeoPainter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPainter G__TTGeoPainter;
static int G__G__GeomPainter_211_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoPainter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoPainter*) (soff+(sizeof(TGeoPainter)*i)))->~G__TTGeoPainter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoPainter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoPainter*) (soff))->~G__TTGeoPainter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeomPainter_211_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoPainter* dest = (TGeoPainter*) G__getstructoffset();
   *dest = *(TGeoPainter*) libp->para[0].ref;
   const TGeoPainter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoTrack */
static int G__G__GeomPainter_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoTrack[n];
     } else {
       p = new((void*) gvp) TGeoTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoTrack;
     } else {
       p = new((void*) gvp) TGeoTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeoTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoTrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (TVirtualGeoTrack*) G__int(libp->para[2]), (TObject*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TGeoTrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (TVirtualGeoTrack*) G__int(libp->para[2]), (TObject*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoTrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (TVirtualGeoTrack*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TGeoTrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (TVirtualGeoTrack*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeoTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TGeoTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TGeoTrack*) G__getstructoffset())->AnimateTrack((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Option_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGeoTrack*) G__getstructoffset())->AnimateTrack((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TGeoTrack*) G__getstructoffset())->AnimateTrack((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoTrack*) G__getstructoffset())->AnimateTrack((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoTrack*) G__getstructoffset())->AnimateTrack();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const TGeoTrack*) G__getstructoffset())->GetPoint((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const TGeoTrack*) G__getstructoffset())->GetPoint((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TGeoTrack*) G__getstructoffset())->PaintMarker((Double_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoTrack*) G__getstructoffset())->PaintMarker((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const TGeoTrack*) G__getstructoffset())->SearchPoint((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const TGeoTrack*) G__getstructoffset())->SearchPoint((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TGeoTrack*) G__getstructoffset())->SetBits((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGeoTrack*) G__getstructoffset())->SetBits((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TGeoTrack*) G__getstructoffset())->SetBits((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeoTrack*) G__getstructoffset())->SetBits((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeoTrack*) G__getstructoffset())->SetBits();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGeoTrack*) G__getstructoffset())->Size(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TGeoTrack*) G__getstructoffset())->Sizeof3D();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeoTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeoTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeoTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeoTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeoTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_216_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeoTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoTrack G__TTGeoTrack;
static int G__G__GeomPainter_216_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeoTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeoTrack*) (soff+(sizeof(TGeoTrack)*i)))->~G__TTGeoTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeoTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeoTrack*) (soff))->~G__TTGeoTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TGeoOverlap */

/* TGeoChecker */

/* TGeoPainter */

/* TGeoTrack */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__GeomPainter {
 public:
  G__Sizep2memfuncG__GeomPainter(): p(&G__Sizep2memfuncG__GeomPainter::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__GeomPainter::*p)();
};

size_t G__get_sizep2memfuncG__GeomPainter()
{
  G__Sizep2memfuncG__GeomPainter a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__GeomPainter() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap))) {
     TGeoOverlap *G__Lderived;
     G__Lderived=(TGeoOverlap*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker))) {
     TGeoChecker *G__Lderived;
     G__Lderived=(TGeoChecker*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter))) {
     TGeoPainter *G__Lderived;
     G__Lderived=(TGeoPainter*)0x1000;
     {
       TVirtualGeoPainter *G__Lpbase=(TVirtualGeoPainter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter),G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoPainter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack))) {
     TGeoTrack *G__Lderived;
     G__Lderived=(TGeoTrack*)0x1000;
     {
       TVirtualGeoTrack *G__Lpbase=(TVirtualGeoTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGeoAtt *G__Lpbase=(TGeoAtt*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoAtt),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__GeomPainter() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TGeoElementRN*>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*,less<int> >",117,G__get_linked_tagnum(&G__G__GeomPainterLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TGeoOverlap */
static void G__setup_memvarTGeoOverlap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap));
   { TGeoOverlap *p; p=(TGeoOverlap*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlapcLcLEOverlapType),-1,-2,1,"kGeoOverlap=16384",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlapcLcLEOverlapType),-1,-2,1,"kGeoExtrusion=32768",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fOverlap=",0,"overlap distance");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,-1,2,"fVolume1=",0,"first volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,-1,2,"fVolume2=",0,"second volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoHMatrix),-1,-1,2,"fMatrix1=",0,"positioning matrix for first volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoHMatrix),-1,-1,2,"fMatrix2=",0,"positioning matrix for second volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TPolyMarker3D),-1,-1,2,"fMarker=",0,"points in the overlapping region");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoChecker */
static void G__setup_memvarTGeoChecker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker));
   { TGeoChecker *p; p=(TGeoChecker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoManager),-1,-1,4,"fGeoManager=",0,"pointer to geometry manager");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,-1,4,"fVsafe=",0,"volume to which a safety sphere node was added");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TBuffer3D),-1,-1,4,"fBuff1=",0,"Buffer containing mesh vertices for first volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TBuffer3D),-1,-1,4,"fBuff2=",0,"Buffer containing mesh vertices for second volume");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFullCheck=",0,"Full overlap checking");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVal1=",0,"! Array of number of crossings per volume.");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVal2=",0,"! Array of timing per volume.");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFlags=",0,"! Array of flags per volume.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TStopwatch),-1,-1,4,"fTimer=",0,"! Timer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,-1,4,"fSelectedNode=",0,"! Selected node for overlap checking");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNchecks=",0,"! Number of checks for current volume");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNmeshPoints=",0,"! Number of points on mesh to be checked");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPainter */
static void G__setup_memvarTGeoPainter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter));
   { TGeoPainter *p; p=(TGeoPainter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBombX=",0,"bomb factor on X");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBombY=",0,"bomb factor on Y");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBombZ=",0,"bomb factor on Z");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBombR=",0,"bomb factor on radius (cyl or sph)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCheckedBox[6]=",0,"bounding box of checked node");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMat[9]=",0,"view rotation matrix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNsegments=",0,"number of segments approximating circles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNVisNodes=",0,"number of visible nodes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVisLevel=",0,"depth for drawing");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVisOption=",0,"global visualization option");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fExplodedView=",0,"type of exploding current view");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fVisLock=",0,"lock for adding visible volumes");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTopVisible=",0,"set top volume visible");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPaintingOverlaps=",0,"lock overlaps painting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsRaytracing=",0,"raytracing flag");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsPaintingShape=",0,"flag for shape painting");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TString),-1,-1,4,"fVisBranch=",0,"drawn branch");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TString),-1,-1,4,"fVolInfo=",0,"volume info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,-1,4,"fCheckedNode=",0,"checked node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),-1,-1,4,"fOverlap=",0,"current overlap");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoHMatrix),-1,-1,4,"fGlobal=",0,"current global matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TBuffer3D),-1,-1,4,"fBuffer=",0,"buffer used for painting");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoManager),-1,-1,4,"fGeoManager=",0,"geometry to which applies");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),-1,-1,4,"fChecker=",0,"geometry checker");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoShape),-1,-1,4,"fClippingShape=",0,"clipping shape");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,-1,4,"fTopVolume=",0,"top drawn volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,-1,4,"fLastVolume=",0,"last drawn volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoIteratorPlugin),-1,-1,4,"fPlugin=",0,"User iterator plugin for changing pain volume properties");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TObjArray),-1,-1,4,"fVisVolumes=",0,"list of visible volumes");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsEditable=",0,"flag that geometry is editable");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoTrack */
static void G__setup_memvarTGeoTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack));
   { TGeoTrack *p; p=(TGeoTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPDefault=128",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPOnelevel=256",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPAllDaughters=512",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPType=1024",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPDrawn=2048",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPointsSize=",0,"capacity of points array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNpoints=",0,"number of stored points");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPoints=",0,"[fNpoints] array of points (x,y,z,t) belonging to this track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__GeomPainter() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTGeoOverlap(void) {
   /* TGeoOverlap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap));
   G__memfunc_setup("TGeoOverlap",1096,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap), -1, 0, 1, 1, 4, 0, "u 'TGeoOverlap' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap), -1, 1, 1, 1, 4, 0, "u 'TGeoOverlap' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("TGeoOverlap",1096,G__G__GeomPainter_101_0_3, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoOverlap",1096,G__G__GeomPainter_101_0_4, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name U 'TGeoVolume' - 0 - vol1 "
"U 'TGeoVolume' - 0 - vol2 U 'TGeoMatrix' - 10 - matrix1 "
"U 'TGeoMatrix' - 10 - matrix2 g - 'Bool_t' 0 'kTRUE' isovlp "
"d - 'Double_t' 0 '0.01' ovlp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPolyMarker",1318,G__G__GeomPainter_101_0_10, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TPolyMarker3D), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstVolume",1440,G__G__GeomPainter_101_0_11, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSecondVolume",1524,G__G__GeomPainter_101_0_12, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstMatrix",1437,G__G__GeomPainter_101_0_13, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoHMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSecondMatrix",1521,G__G__GeomPainter_101_0_14, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoHMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOverlap",1017,G__G__GeomPainter_101_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExtrusion",1165,G__G__GeomPainter_101_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOverlap",917,G__G__GeomPainter_101_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("PrintInfo",921,G__G__GeomPainter_101_0_22, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sizeof3D",743,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SampleOverlap",1339,G__G__GeomPainter_101_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1000000' npoints", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetIsExtrusion",1465,G__G__GeomPainter_101_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIsOverlap",1217,G__G__GeomPainter_101_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNextPoint",1237,G__G__GeomPainter_101_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstVolume",1452,G__G__GeomPainter_101_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - vol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSecondVolume",1536,G__G__GeomPainter_101_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - vol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstMatrix",1449,G__G__GeomPainter_101_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoMatrix' - 0 - matrix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSecondMatrix",1533,G__G__GeomPainter_101_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoMatrix' - 0 - matrix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOverlap",1029,G__G__GeomPainter_101_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ovlp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Validate",810,G__G__GeomPainter_101_0_33, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeomPainter_101_0_34, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoOverlap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_101_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoOverlap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_101_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoOverlap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_101_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoOverlap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_101_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_101_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoOverlap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_101_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoOverlap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_101_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoOverlap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_101_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoOverlap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoOverlap", 1222, G__G__GeomPainter_101_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoChecker(void) {
   /* TGeoChecker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker));
   G__memfunc_setup("CleanPoints",1120,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"D - 'Double_t' 0 - points i - 'Int_t' 1 - numPoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NChecksPerVolume",1598,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'TGeoVolume' - 0 - vol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateInGeom",1506,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Score",508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'TGeoVolume' - 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimingPerVolume",1543,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "U 'TGeoVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoChecker",1060,G__G__GeomPainter_105_0_6, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoChecker",1060,G__G__GeomPainter_105_0_7, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker), -1, 0, 1, 1, 1, 0, "U 'TGeoManager' - 0 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBoundaryErrors",1951,G__G__GeomPainter_105_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '1000000' ntracks d - 'Double_t' 0 '-1.' radius", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckBoundaryReference",2225,G__G__GeomPainter_105_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' icheck", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckGeometryFull",1725,G__G__GeomPainter_105_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' checkoverlaps g - 'Bool_t' 0 'kTRUE' checkcrossings "
"i - 'Int_t' 0 '10000' nrays D - 'Double_t' 10 'NULL' vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckGeometry",1322,G__G__GeomPainter_105_0_11, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - nrays d - 'Double_t' 0 - startx "
"d - 'Double_t' 0 - starty d - 'Double_t' 0 - startz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckOverlaps",1322,G__G__GeomPainter_105_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 10 - vol d - 'Double_t' 0 '0.1' ovlp "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckOverlapsBySampling",2336,G__G__GeomPainter_105_0_13, 121, -1, -1, 0, 3, 1, 1, 8, 
"U 'TGeoVolume' - 0 - vol d - 'Double_t' 0 '0.1' ovlp "
"i - 'Int_t' 0 '1000000' npoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckPoint",1000,G__G__GeomPainter_105_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 '0' x d - 'Double_t' 0 '0' y "
"d - 'Double_t' 0 '0' z C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckVoxels",1119,G__G__GeomPainter_105_0_15, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol U 'TGeoVoxelFinder' - 0 - voxels "
"D - 'Double_t' 0 - xyz i - 'Int_t' 0 - npoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LegoPlot",806,G__G__GeomPainter_105_0_16, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TH2F), -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 '60' ntheta d - 'Double_t' 0 '0.' themin "
"d - 'Double_t' 0 '180.' themax i - 'Int_t' 0 '90' nphi "
"d - 'Double_t' 0 '0.' phimin d - 'Double_t' 0 '360.' phimax "
"d - 'Double_t' 0 '0.' rmin d - 'Double_t' 0 '9999999' rmax "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintOverlaps",1369,G__G__GeomPainter_105_0_17, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RandomPoints",1246,G__G__GeomPainter_105_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - npoints "
"C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RandomRays",1024,G__G__GeomPainter_105_0_19, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nrays d - 'Double_t' 0 - startx "
"d - 'Double_t' 0 - starty d - 'Double_t' 0 - startz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeCheckOverlap",1589,G__G__GeomPainter_105_0_20, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name U 'TGeoVolume' - 0 - vol1 "
"U 'TGeoVolume' - 0 - vol2 U 'TGeoMatrix' - 0 - mat1 "
"U 'TGeoMatrix' - 0 - mat2 g - 'Bool_t' 0 - isovlp "
"d - 'Double_t' 0 - ovlp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpProgress",1044,G__G__GeomPainter_105_0_21, 121, -1, -1, 0, 6, 1, 1, 0, 
"C - - 10 - opname n - 'Long64_t' 0 - current "
"n - 'Long64_t' 0 - size U 'TStopwatch' - 0 '0' watch "
"g - 'Bool_t' 0 'kFALSE' last g - 'Bool_t' 0 'kFALSE' refresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SamplePoints",1247,G__G__GeomPainter_105_0_22, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - npoints d - 'Double_t' 1 - dist "
"d - 'Double_t' 0 - epsil C - - 10 - g3path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShootRay",825,G__G__GeomPainter_105_0_23, 121, -1, -1, 0, 8, 1, 1, 8, 
"D - 'Double_t' 0 - start d - 'Double_t' 0 - dirx "
"d - 'Double_t' 0 - diry d - 'Double_t' 0 - dirz "
"D - 'Double_t' 0 - array i - 'Int_t' 1 - nelem "
"i - 'Int_t' 1 - dim D - 'Double_t' 0 '0' enpoint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSelectedNode",1499,G__G__GeomPainter_105_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNmeshPoints",1444,G__G__GeomPainter_105_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1000' npoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Test",416,G__G__GeomPainter_105_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - npoints C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestOverlaps",1260,G__G__GeomPainter_105_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestVoxels",1057,G__G__GeomPainter_105_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 '1000000' npoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Weight",616,G__G__GeomPainter_105_0_29, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '0.01' precision C - 'Option_t' 10 '\"v\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__GeomPainter_105_0_30, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoChecker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_105_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoChecker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_105_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoChecker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_105_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoChecker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_105_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_105_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoChecker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_105_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoChecker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_105_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoChecker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_105_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoChecker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoChecker", 1060, G__G__GeomPainter_105_0_42, (int) ('i'), G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker), -1, 0, 1, 1, 1, 0, "u 'TGeoChecker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoChecker", 1186, G__G__GeomPainter_105_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__GeomPainter_105_0_44, (int) ('u'), G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker), -1, 1, 1, 1, 1, 0, "u 'TGeoChecker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPainter(void) {
   /* TGeoPainter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter));
   G__memfunc_setup("DefineColors",1213,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LocalToMasterVect",1708,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"D - 'Double_t' 10 - local D - 'Double_t' 0 - master", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearVisibleVolumes",1952,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TGeoPainter",1090,G__G__GeomPainter_211_0_4, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter), -1, 0, 1, 1, 1, 0, "U 'TGeoManager' - 0 - manager", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSize3D",795,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - numpoints i - 'Int_t' 0 - numsegs "
"i - 'Int_t' 0 - numpolys", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTrack",766,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoTrack), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - id i - 'Int_t' 0 - pdgcode "
"U 'TObject' - 0 - part", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTrackPoint",1288,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - point D - 'Double_t' 0 - box "
"g - 'Bool_t' 0 'kFALSE' reset", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BombTranslation",1551,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - tr D - 'Double_t' 0 - bombtr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckBoundaryErrors",1951,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '1000000' ntracks d - 'Double_t' 0 '-1.' radius", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckBoundaryReference",2225,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' icheck", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckGeometryFull",1725,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' checkoverlaps g - 'Bool_t' 0 'kTRUE' checkcrossings "
"i - 'Int_t' 0 '10000' nrays D - 'Double_t' 10 'NULL' vertex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckGeometry",1322,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - nrays d - 'Double_t' 0 - startx "
"d - 'Double_t' 0 - starty d - 'Double_t' 0 - startz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckEdit",868,G__G__GeomPainter_211_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckPoint",1000,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 '0' x d - 'Double_t' 0 '0' y "
"d - 'Double_t' 0 '0' z C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckOverlaps",1322,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 8, 
"U 'TGeoVolume' - 10 - vol d - 'Double_t' 0 '0.1' ovlp "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CountNodes",1026,G__G__GeomPainter_211_0_16, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CountVisibleNodes",1744,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefaultAngles",1311,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefaultColors",1335,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistanceToPrimitiveVol",2264,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawBatemanSol",1396,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoBatemanSol' - 0 - sol C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawOverlap",1127,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"Y - - 0 - ovlp C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawCurrentPoint",1659,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - color", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawOnly",816,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPanel",894,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPath",795,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawShape",895,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoShape' - 0 - shape C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawVolume",1030,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EditGeometry",1234,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EstimateCameraMove",1820,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - tmin d - 'Double_t' 0 - tmax "
"D - 'Double_t' 0 - start D - 'Double_t' 0 - end", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteManagerEvent",1936,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TGeoManager' - 0 - geom i - 'Int_t' 0 - event "
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteShapeEvent",1734,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TGeoShape' - 0 - shape i - 'Int_t' 0 - event "
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteVolumeEvent",1869,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TGeoVolume' - 0 - volume i - 'Int_t' 0 - event "
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVolumeInfo",1316,(G__InterfaceMethod) NULL,67, -1, -1, 0, 3, 1, 1, 8, 
"U 'TGeoVolume' - 10 - volume i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBombFactors",1394,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - bombx d - 'Double_t' 1 - bomby "
"d - 'Double_t' 1 - bombz d - 'Double_t' 1 - bombr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBombMode",1061,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCheckedNode",1357,G__G__GeomPainter_211_0_38, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChecker",981,G__G__GeomPainter_211_0_39, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColor",799,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - base f - 'Float_t' 0 - light", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDrawPath",1083,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDrawnVolume",1428,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTopVolume",1227,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVisLevel",1098,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVisOption",1227,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNsegments",1236,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GrabFocus",892,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 '0' nfr d - 'Double_t' 0 '0' dlong "
"d - 'Double_t' 0 '0' dlat d - 'Double_t' 0 '0' dpsi", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetViewBox",996,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetViewAngles",1301,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 1 - longitude d - 'Double_t' 1 - latitude "
"d - 'Double_t' 1 - psi", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExplodedView",1420,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsRaytracing",1232,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPaintingShape",1511,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LegoPlot",806,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TH2F), -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 '60' ntheta d - 'Double_t' 0 '0.' themin "
"d - 'Double_t' 0 '180.' themax i - 'Int_t' 0 '90' nphi "
"d - 'Double_t' 0 '0.' phimin d - 'Double_t' 0 '360.' phimax "
"d - 'Double_t' 0 '0.' rmin d - 'Double_t' 0 '9999999' rmax "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,G__G__GeomPainter_211_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ModifiedPad",1078,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kFALSE' update", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OpProgress",1044,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"C - - 10 - opname n - 'Long64_t' 0 - current "
"n - 'Long64_t' 0 - size U 'TStopwatch' - 0 '0' watch "
"g - 'Bool_t' 0 'kFALSE' last g - 'Bool_t' 0 'kFALSE' refresh", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintNode",898,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TGeoNode' - 0 - node C - 'Option_t' 10 '\"\"' option "
"U 'TGeoMatrix' - 0 '0' global", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintShape",1005,G__G__GeomPainter_211_0_59, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'TGeoShape' - 11 - shape C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintShape",1005,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoShape' - 0 - shape C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintOverlap",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"Y - - 0 - ovlp C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintVolume",1140,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - vol C - 'Option_t' 10 '\"\"' option "
"U 'TGeoMatrix' - 0 '0' global", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintOverlaps",1369,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintPhysicalNode",1727,G__G__GeomPainter_211_0_64, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoPhysicalNode' - 0 - node C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RandomPoints",1246,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 10 - vol i - 'Int_t' 0 - npoints "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RandomRays",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nrays d - 'Double_t' 0 - startx "
"d - 'Double_t' 0 - starty d - 'Double_t' 0 - startz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Raytrace",827,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SamplePoints",1247,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - npoints d - 'Double_t' 1 - dist "
"d - 'Double_t' 0 - epsil C - - 10 - g3path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBombFactors",1406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 '1.3' bombx d - 'Double_t' 0 '1.3' bomby "
"d - 'Double_t' 0 '1.3' bombz d - 'Double_t' 0 '1.3' bombr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetClippingShape",1619,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoShape' - 0 - shape", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetExplodedView",1532,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' iopt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNsegments",1248,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '20' nseg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNmeshPoints",1444,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - npoints", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGeoManager",1282,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoManager' - 0 - geom", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetIteratorPlugin",1765,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoIteratorPlugin' - 0 - plugin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCheckedNode",1369,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoNode' - 0 - node", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRaytracing",1344,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTopVisible",1325,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' vis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTopVolume",1239,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - vol", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVisLevel",1110,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '3' level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVisOption",1239,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShapeDistancetoPrimitive",2488,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 8, 
"U 'TGeoShape' - 10 - shape i - 'Int_t' 0 - numpoints "
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Test",416,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - npoints C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestOverlaps",1260,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestVoxels",1057,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - vol", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnbombTranslation",1778,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - tr D - 'Double_t' 0 - bombtr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - precision C - 'Option_t' 10 '\"v\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeomPainter_211_0_88, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoPainter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_211_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPainter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_211_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoPainter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_211_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoPainter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_211_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_211_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPainter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_211_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPainter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_211_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoPainter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_211_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoPainter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPainter", 1090, G__G__GeomPainter_211_0_100, (int) ('i'), G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter), -1, 0, 1, 1, 1, 0, "u 'TGeoPainter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGeoPainter", 1216, G__G__GeomPainter_211_0_101, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__GeomPainter_211_0_102, (int) ('u'), G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter), -1, 1, 1, 1, 1, 0, "u 'TGeoPainter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoTrack(void) {
   /* TGeoTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack));
   G__memfunc_setup("TGeoTrack",868,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack), -1, 0, 1, 1, 2, 0, "u 'TGeoTrack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack), -1, 1, 1, 1, 2, 0, "u 'TGeoTrack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoTrack",868,G__G__GeomPainter_216_0_3, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeoTrack",868,G__G__GeomPainter_216_0_4, 105, G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - id i - 'Int_t' 0 - pdgcode "
"U 'TVirtualGeoTrack' - 0 '0' parent U 'TObject' - 0 '0' particle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDaughter",1085,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoTrack), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - id i - 'Int_t' 0 - pdgcode "
"U 'TObject' - 0 '0' particle", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddDaughter",1085,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TVirtualGeoTrack' - 0 - other", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddPoint",787,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AnimateTrack",1204,G__G__GeomPainter_216_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 '0' tmin d - 'Double_t' 0 '5E-8' tmax "
"d - 'Double_t' 0 '200' nframes C - 'Option_t' 10 '\"/*\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetObjectInfo",1283,(G__InterfaceMethod) NULL,67, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNpoints",1035,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPoint",810,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - i d - 'Double_t' 1 - x "
"d - 'Double_t' 1 - y d - 'Double_t' 1 - z "
"d - 'Double_t' 1 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPoint",810,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPoint",810,G__G__GeomPainter_216_0_17, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - tof D - 'Double_t' 0 - point "
"i - 'Int_t' 0 '0' istart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintCollect",1218,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - time D - 'Double_t' 0 - box", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintCollectTrack",1719,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - time D - 'Double_t' 0 - box", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintMarker",1118,G__G__GeomPainter_216_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - point C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintTrack",1009,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ResetTrack",1016,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SearchPoint",1120,G__G__GeomPainter_216_0_26, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - time i - 'Int_t' 0 '0' istart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBits",702,G__G__GeomPainter_216_0_27, 121, -1, -1, 0, 4, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' is_default g - 'Bool_t' 0 'kFALSE' is_onelevel "
"g - 'Bool_t' 0 'kFALSE' is_all g - 'Bool_t' 0 'kFALSE' is_type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Size",411,G__G__GeomPainter_216_0_28, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - imin i - 'Int_t' 1 - imax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sizeof3D",743,G__G__GeomPainter_216_0_29, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__GeomPainter_216_0_30, 85, G__get_linked_tagnum(&G__G__GeomPainterLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeoTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_216_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_216_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeoTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_216_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeoTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GeomPainterLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_216_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_216_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_216_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_216_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeoTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_216_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeoTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeoTrack", 994, G__G__GeomPainter_216_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__GeomPainter() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__GeomPainter() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__GeomPainter() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__GeomPainterLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoVoxelFinder = { "TGeoVoxelFinder" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoNode = { "TGeoNode" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoManager = { "TGeoManager" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoMatrix = { "TGeoMatrix" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoOverlap = { "TGeoOverlap" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TBuffer3D = { "TBuffer3D" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TStopwatch = { "TStopwatch" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoChecker = { "TGeoChecker" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TAtt3D = { "TAtt3D" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoHMatrix = { "TGeoHMatrix" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TPolyMarker3D = { "TPolyMarker3D" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoOverlapcLcLEOverlapType = { "TGeoOverlap::EOverlapType" , 101 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoShape = { "TGeoShape" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TVirtualGeoTrack = { "TVirtualGeoTrack" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoBatemanSol = { "TGeoBatemanSol" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoIteratorPlugin = { "TGeoIteratorPlugin" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TVirtualGeoPainter = { "TVirtualGeoPainter" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoAtt = { "TGeoAtt" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR = { "map<int,TGeoElementRN*,less<int>,allocator<pair<const int,TGeoElementRN*> > >" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoPhysicalNode = { "TGeoPhysicalNode" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoPainter = { "TGeoPainter" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoTrack = { "TGeoTrack" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions = { "TGeoTrack::EGeoParticleActions" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__GeomPainter() {
  G__G__GeomPainterLN_TClass.tagnum = -1 ;
  G__G__GeomPainterLN_TBuffer.tagnum = -1 ;
  G__G__GeomPainterLN_TMemberInspector.tagnum = -1 ;
  G__G__GeomPainterLN_TObject.tagnum = -1 ;
  G__G__GeomPainterLN_TNamed.tagnum = -1 ;
  G__G__GeomPainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__GeomPainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__GeomPainterLN_TBrowser.tagnum = -1 ;
  G__G__GeomPainterLN_TObjArray.tagnum = -1 ;
  G__G__GeomPainterLN_TString.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoVolume.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoVoxelFinder.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoNode.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoManager.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoMatrix.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoOverlap.tagnum = -1 ;
  G__G__GeomPainterLN_TBuffer3D.tagnum = -1 ;
  G__G__GeomPainterLN_TH2F.tagnum = -1 ;
  G__G__GeomPainterLN_TStopwatch.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoChecker.tagnum = -1 ;
  G__G__GeomPainterLN_TAttLine.tagnum = -1 ;
  G__G__GeomPainterLN_TAttFill.tagnum = -1 ;
  G__G__GeomPainterLN_TAtt3D.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoHMatrix.tagnum = -1 ;
  G__G__GeomPainterLN_TPolyMarker3D.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoOverlapcLcLEOverlapType.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoShape.tagnum = -1 ;
  G__G__GeomPainterLN_TVirtualGeoTrack.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoBatemanSol.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoIteratorPlugin.tagnum = -1 ;
  G__G__GeomPainterLN_TVirtualGeoPainter.tagnum = -1 ;
  G__G__GeomPainterLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoAtt.tagnum = -1 ;
  G__G__GeomPainterLN_TAttMarker.tagnum = -1 ;
  G__G__GeomPainterLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoPhysicalNode.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoPainter.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoTrack.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__GeomPainter() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TString);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoVoxelFinder);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoNode);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoManager);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoMatrix);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),sizeof(TGeoOverlap),-1,327424,"base class for geometical overlaps",G__setup_memvarTGeoOverlap,G__setup_memfuncTGeoOverlap);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TBuffer3D);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TH2F);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TStopwatch);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),sizeof(TGeoChecker),-1,324864,"a simple geometry checker",G__setup_memvarTGeoChecker,G__setup_memfuncTGeoChecker);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TAtt3D);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoHMatrix);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TPolyMarker3D);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoOverlapcLcLEOverlapType);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoShape);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TVirtualGeoTrack);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoBatemanSol);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoIteratorPlugin);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TVirtualGeoPainter);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoAtt);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoPhysicalNode);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter),sizeof(TGeoPainter),-1,324608,"geometry painter",G__setup_memvarTGeoPainter,G__setup_memfuncTGeoPainter);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),sizeof(TGeoTrack),-1,327424,"geometry tracks class",G__setup_memvarTGeoTrack,G__setup_memfuncTGeoTrack);
   G__get_linked_tagnum_fwd(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions);
}
extern "C" void G__cpp_setupG__GeomPainter(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__GeomPainter()");
  G__set_cpp_environmentG__GeomPainter();
  G__cpp_setup_tagtableG__GeomPainter();

  G__cpp_setup_inheritanceG__GeomPainter();

  G__cpp_setup_typetableG__GeomPainter();

  G__cpp_setup_memvarG__GeomPainter();

  G__cpp_setup_memfuncG__GeomPainter();
  G__cpp_setup_globalG__GeomPainter();
  G__cpp_setup_funcG__GeomPainter();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__GeomPainter();
  return;
}
class G__cpp_setup_initG__GeomPainter {
  public:
    G__cpp_setup_initG__GeomPainter() { G__add_setup_func("G__GeomPainter",(G__incsetup)(&G__cpp_setupG__GeomPainter)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__GeomPainter() { G__remove_setup_func("G__GeomPainter"); }
};
G__cpp_setup_initG__GeomPainter G__cpp_setup_initializerG__GeomPainter;

