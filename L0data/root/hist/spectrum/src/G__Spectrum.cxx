//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:46:48 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Spectrum.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSpectrum2Fit_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSpectrum2Fit(void *p = 0);
   static void *newArray_TSpectrum2Fit(Long_t size, void *p);
   static void delete_TSpectrum2Fit(void *p);
   static void deleteArray_TSpectrum2Fit(void *p);
   static void destruct_TSpectrum2Fit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpectrum2Fit*)
   {
      ::TSpectrum2Fit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpectrum2Fit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpectrum2Fit", ::TSpectrum2Fit::Class_Version(), "include/TSpectrum2Fit.h", 30,
                  typeid(::TSpectrum2Fit), DefineBehavior(ptr, ptr),
                  &::TSpectrum2Fit::Dictionary, isa_proxy, 4,
                  sizeof(::TSpectrum2Fit) );
      instance.SetNew(&new_TSpectrum2Fit);
      instance.SetNewArray(&newArray_TSpectrum2Fit);
      instance.SetDelete(&delete_TSpectrum2Fit);
      instance.SetDeleteArray(&deleteArray_TSpectrum2Fit);
      instance.SetDestructor(&destruct_TSpectrum2Fit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpectrum2Fit*)
   {
      return GenerateInitInstanceLocal((::TSpectrum2Fit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpectrum2Fit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSpectrum2_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSpectrum2(void *p = 0);
   static void *newArray_TSpectrum2(Long_t size, void *p);
   static void delete_TSpectrum2(void *p);
   static void deleteArray_TSpectrum2(void *p);
   static void destruct_TSpectrum2(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpectrum2*)
   {
      ::TSpectrum2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpectrum2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpectrum2", ::TSpectrum2::Class_Version(), "include/TSpectrum2.h", 20,
                  typeid(::TSpectrum2), DefineBehavior(ptr, ptr),
                  &::TSpectrum2::Dictionary, isa_proxy, 4,
                  sizeof(::TSpectrum2) );
      instance.SetNew(&new_TSpectrum2);
      instance.SetNewArray(&newArray_TSpectrum2);
      instance.SetDelete(&delete_TSpectrum2);
      instance.SetDeleteArray(&deleteArray_TSpectrum2);
      instance.SetDestructor(&destruct_TSpectrum2);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpectrum2*)
   {
      return GenerateInitInstanceLocal((::TSpectrum2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpectrum2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSpectrum2Transform_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSpectrum2Transform(void *p = 0);
   static void *newArray_TSpectrum2Transform(Long_t size, void *p);
   static void delete_TSpectrum2Transform(void *p);
   static void deleteArray_TSpectrum2Transform(void *p);
   static void destruct_TSpectrum2Transform(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpectrum2Transform*)
   {
      ::TSpectrum2Transform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpectrum2Transform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpectrum2Transform", ::TSpectrum2Transform::Class_Version(), "include/TSpectrum2Transform.h", 30,
                  typeid(::TSpectrum2Transform), DefineBehavior(ptr, ptr),
                  &::TSpectrum2Transform::Dictionary, isa_proxy, 4,
                  sizeof(::TSpectrum2Transform) );
      instance.SetNew(&new_TSpectrum2Transform);
      instance.SetNewArray(&newArray_TSpectrum2Transform);
      instance.SetDelete(&delete_TSpectrum2Transform);
      instance.SetDeleteArray(&deleteArray_TSpectrum2Transform);
      instance.SetDestructor(&destruct_TSpectrum2Transform);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpectrum2Transform*)
   {
      return GenerateInitInstanceLocal((::TSpectrum2Transform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpectrum2Transform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSpectrum3_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSpectrum3(void *p = 0);
   static void *newArray_TSpectrum3(Long_t size, void *p);
   static void delete_TSpectrum3(void *p);
   static void deleteArray_TSpectrum3(void *p);
   static void destruct_TSpectrum3(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpectrum3*)
   {
      ::TSpectrum3 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpectrum3 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpectrum3", ::TSpectrum3::Class_Version(), "include/TSpectrum3.h", 20,
                  typeid(::TSpectrum3), DefineBehavior(ptr, ptr),
                  &::TSpectrum3::Dictionary, isa_proxy, 4,
                  sizeof(::TSpectrum3) );
      instance.SetNew(&new_TSpectrum3);
      instance.SetNewArray(&newArray_TSpectrum3);
      instance.SetDelete(&delete_TSpectrum3);
      instance.SetDeleteArray(&deleteArray_TSpectrum3);
      instance.SetDestructor(&destruct_TSpectrum3);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpectrum3*)
   {
      return GenerateInitInstanceLocal((::TSpectrum3*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpectrum3*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSpectrumFit_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSpectrumFit(void *p = 0);
   static void *newArray_TSpectrumFit(Long_t size, void *p);
   static void delete_TSpectrumFit(void *p);
   static void deleteArray_TSpectrumFit(void *p);
   static void destruct_TSpectrumFit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpectrumFit*)
   {
      ::TSpectrumFit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpectrumFit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpectrumFit", ::TSpectrumFit::Class_Version(), "include/TSpectrumFit.h", 32,
                  typeid(::TSpectrumFit), DefineBehavior(ptr, ptr),
                  &::TSpectrumFit::Dictionary, isa_proxy, 4,
                  sizeof(::TSpectrumFit) );
      instance.SetNew(&new_TSpectrumFit);
      instance.SetNewArray(&newArray_TSpectrumFit);
      instance.SetDelete(&delete_TSpectrumFit);
      instance.SetDeleteArray(&deleteArray_TSpectrumFit);
      instance.SetDestructor(&destruct_TSpectrumFit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpectrumFit*)
   {
      return GenerateInitInstanceLocal((::TSpectrumFit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpectrumFit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSpectrum_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSpectrum(void *p = 0);
   static void *newArray_TSpectrum(Long_t size, void *p);
   static void delete_TSpectrum(void *p);
   static void deleteArray_TSpectrum(void *p);
   static void destruct_TSpectrum(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpectrum*)
   {
      ::TSpectrum *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpectrum >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpectrum", ::TSpectrum::Class_Version(), "include/TSpectrum.h", 20,
                  typeid(::TSpectrum), DefineBehavior(ptr, ptr),
                  &::TSpectrum::Dictionary, isa_proxy, 4,
                  sizeof(::TSpectrum) );
      instance.SetNew(&new_TSpectrum);
      instance.SetNewArray(&newArray_TSpectrum);
      instance.SetDelete(&delete_TSpectrum);
      instance.SetDeleteArray(&deleteArray_TSpectrum);
      instance.SetDestructor(&destruct_TSpectrum);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpectrum*)
   {
      return GenerateInitInstanceLocal((::TSpectrum*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpectrum*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSpectrumTransform_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSpectrumTransform(void *p = 0);
   static void *newArray_TSpectrumTransform(Long_t size, void *p);
   static void delete_TSpectrumTransform(void *p);
   static void deleteArray_TSpectrumTransform(void *p);
   static void destruct_TSpectrumTransform(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpectrumTransform*)
   {
      ::TSpectrumTransform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpectrumTransform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpectrumTransform", ::TSpectrumTransform::Class_Version(), "include/TSpectrumTransform.h", 32,
                  typeid(::TSpectrumTransform), DefineBehavior(ptr, ptr),
                  &::TSpectrumTransform::Dictionary, isa_proxy, 4,
                  sizeof(::TSpectrumTransform) );
      instance.SetNew(&new_TSpectrumTransform);
      instance.SetNewArray(&newArray_TSpectrumTransform);
      instance.SetDelete(&delete_TSpectrumTransform);
      instance.SetDeleteArray(&deleteArray_TSpectrumTransform);
      instance.SetDestructor(&destruct_TSpectrumTransform);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpectrumTransform*)
   {
      return GenerateInitInstanceLocal((::TSpectrumTransform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpectrumTransform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TSpectrum2Fit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpectrum2Fit::Class_Name()
{
   return "TSpectrum2Fit";
}

//______________________________________________________________________________
const char *TSpectrum2Fit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Fit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpectrum2Fit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Fit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpectrum2Fit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Fit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpectrum2Fit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Fit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSpectrum2::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpectrum2::Class_Name()
{
   return "TSpectrum2";
}

//______________________________________________________________________________
const char *TSpectrum2::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpectrum2::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpectrum2::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpectrum2::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSpectrum2Transform::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpectrum2Transform::Class_Name()
{
   return "TSpectrum2Transform";
}

//______________________________________________________________________________
const char *TSpectrum2Transform::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Transform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpectrum2Transform::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Transform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpectrum2Transform::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Transform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpectrum2Transform::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Transform*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSpectrum3::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpectrum3::Class_Name()
{
   return "TSpectrum3";
}

//______________________________________________________________________________
const char *TSpectrum3::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum3*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpectrum3::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum3*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpectrum3::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum3*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpectrum3::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum3*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSpectrumFit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpectrumFit::Class_Name()
{
   return "TSpectrumFit";
}

//______________________________________________________________________________
const char *TSpectrumFit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrumFit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpectrumFit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrumFit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpectrumFit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrumFit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpectrumFit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrumFit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSpectrum::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpectrum::Class_Name()
{
   return "TSpectrum";
}

//______________________________________________________________________________
const char *TSpectrum::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpectrum::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpectrum::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpectrum::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSpectrumTransform::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpectrumTransform::Class_Name()
{
   return "TSpectrumTransform";
}

//______________________________________________________________________________
const char *TSpectrumTransform::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrumTransform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpectrumTransform::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrumTransform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpectrumTransform::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrumTransform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpectrumTransform::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrumTransform*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TSpectrum::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpectrum.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSpectrum::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSpectrum::Class(),this);
   }
}

//______________________________________________________________________________
void TSpectrum::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSpectrum.
      TClass *R__cl = ::TSpectrum::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMaxPeaks", &fMaxPeaks);
      R__insp.Inspect(R__cl, R__parent, "fNPeaks", &fNPeaks);
      R__insp.Inspect(R__cl, R__parent, "*fPosition", &fPosition);
      R__insp.Inspect(R__cl, R__parent, "*fPositionX", &fPositionX);
      R__insp.Inspect(R__cl, R__parent, "*fPositionY", &fPositionY);
      R__insp.Inspect(R__cl, R__parent, "fResolution", &fResolution);
      R__insp.Inspect(R__cl, R__parent, "*fHistogram", &fHistogram);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSpectrum(void *p) {
      return  p ? new(p) ::TSpectrum : new ::TSpectrum;
   }
   static void *newArray_TSpectrum(Long_t nElements, void *p) {
      return p ? new(p) ::TSpectrum[nElements] : new ::TSpectrum[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSpectrum(void *p) {
      delete ((::TSpectrum*)p);
   }
   static void deleteArray_TSpectrum(void *p) {
      delete [] ((::TSpectrum*)p);
   }
   static void destruct_TSpectrum(void *p) {
      typedef ::TSpectrum current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSpectrum

//______________________________________________________________________________
void TSpectrumFit::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpectrumFit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSpectrumFit::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSpectrumFit::Class(),this);
   }
}

//______________________________________________________________________________
void TSpectrumFit::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSpectrumFit.
      TClass *R__cl = ::TSpectrumFit::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNPeaks", &fNPeaks);
      R__insp.Inspect(R__cl, R__parent, "fNumberIterations", &fNumberIterations);
      R__insp.Inspect(R__cl, R__parent, "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__parent, "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__parent, "fStatisticType", &fStatisticType);
      R__insp.Inspect(R__cl, R__parent, "fAlphaOptim", &fAlphaOptim);
      R__insp.Inspect(R__cl, R__parent, "fPower", &fPower);
      R__insp.Inspect(R__cl, R__parent, "fFitTaylor", &fFitTaylor);
      R__insp.Inspect(R__cl, R__parent, "fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__parent, "fChi", &fChi);
      R__insp.Inspect(R__cl, R__parent, "*fPositionInit", &fPositionInit);
      R__insp.Inspect(R__cl, R__parent, "*fPositionCalc", &fPositionCalc);
      R__insp.Inspect(R__cl, R__parent, "*fPositionErr", &fPositionErr);
      R__insp.Inspect(R__cl, R__parent, "*fAmpInit", &fAmpInit);
      R__insp.Inspect(R__cl, R__parent, "*fAmpCalc", &fAmpCalc);
      R__insp.Inspect(R__cl, R__parent, "*fAmpErr", &fAmpErr);
      R__insp.Inspect(R__cl, R__parent, "*fArea", &fArea);
      R__insp.Inspect(R__cl, R__parent, "*fAreaErr", &fAreaErr);
      R__insp.Inspect(R__cl, R__parent, "fSigmaInit", &fSigmaInit);
      R__insp.Inspect(R__cl, R__parent, "fSigmaCalc", &fSigmaCalc);
      R__insp.Inspect(R__cl, R__parent, "fSigmaErr", &fSigmaErr);
      R__insp.Inspect(R__cl, R__parent, "fTInit", &fTInit);
      R__insp.Inspect(R__cl, R__parent, "fTCalc", &fTCalc);
      R__insp.Inspect(R__cl, R__parent, "fTErr", &fTErr);
      R__insp.Inspect(R__cl, R__parent, "fBInit", &fBInit);
      R__insp.Inspect(R__cl, R__parent, "fBCalc", &fBCalc);
      R__insp.Inspect(R__cl, R__parent, "fBErr", &fBErr);
      R__insp.Inspect(R__cl, R__parent, "fSInit", &fSInit);
      R__insp.Inspect(R__cl, R__parent, "fSCalc", &fSCalc);
      R__insp.Inspect(R__cl, R__parent, "fSErr", &fSErr);
      R__insp.Inspect(R__cl, R__parent, "fA0Init", &fA0Init);
      R__insp.Inspect(R__cl, R__parent, "fA0Calc", &fA0Calc);
      R__insp.Inspect(R__cl, R__parent, "fA0Err", &fA0Err);
      R__insp.Inspect(R__cl, R__parent, "fA1Init", &fA1Init);
      R__insp.Inspect(R__cl, R__parent, "fA1Calc", &fA1Calc);
      R__insp.Inspect(R__cl, R__parent, "fA1Err", &fA1Err);
      R__insp.Inspect(R__cl, R__parent, "fA2Init", &fA2Init);
      R__insp.Inspect(R__cl, R__parent, "fA2Calc", &fA2Calc);
      R__insp.Inspect(R__cl, R__parent, "fA2Err", &fA2Err);
      R__insp.Inspect(R__cl, R__parent, "*fFixPosition", &fFixPosition);
      R__insp.Inspect(R__cl, R__parent, "*fFixAmp", &fFixAmp);
      R__insp.Inspect(R__cl, R__parent, "fFixSigma", &fFixSigma);
      R__insp.Inspect(R__cl, R__parent, "fFixT", &fFixT);
      R__insp.Inspect(R__cl, R__parent, "fFixB", &fFixB);
      R__insp.Inspect(R__cl, R__parent, "fFixS", &fFixS);
      R__insp.Inspect(R__cl, R__parent, "fFixA0", &fFixA0);
      R__insp.Inspect(R__cl, R__parent, "fFixA1", &fFixA1);
      R__insp.Inspect(R__cl, R__parent, "fFixA2", &fFixA2);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSpectrumFit(void *p) {
      return  p ? new(p) ::TSpectrumFit : new ::TSpectrumFit;
   }
   static void *newArray_TSpectrumFit(Long_t nElements, void *p) {
      return p ? new(p) ::TSpectrumFit[nElements] : new ::TSpectrumFit[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSpectrumFit(void *p) {
      delete ((::TSpectrumFit*)p);
   }
   static void deleteArray_TSpectrumFit(void *p) {
      delete [] ((::TSpectrumFit*)p);
   }
   static void destruct_TSpectrumFit(void *p) {
      typedef ::TSpectrumFit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSpectrumFit

//______________________________________________________________________________
void TSpectrumTransform::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpectrumTransform.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSpectrumTransform::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSpectrumTransform::Class(),this);
   }
}

//______________________________________________________________________________
void TSpectrumTransform::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSpectrumTransform.
      TClass *R__cl = ::TSpectrumTransform::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fSize", &fSize);
      R__insp.Inspect(R__cl, R__parent, "fTransformType", &fTransformType);
      R__insp.Inspect(R__cl, R__parent, "fDegree", &fDegree);
      R__insp.Inspect(R__cl, R__parent, "fDirection", &fDirection);
      R__insp.Inspect(R__cl, R__parent, "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__parent, "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__parent, "fFilterCoeff", &fFilterCoeff);
      R__insp.Inspect(R__cl, R__parent, "fEnhanceCoeff", &fEnhanceCoeff);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSpectrumTransform(void *p) {
      return  p ? new(p) ::TSpectrumTransform : new ::TSpectrumTransform;
   }
   static void *newArray_TSpectrumTransform(Long_t nElements, void *p) {
      return p ? new(p) ::TSpectrumTransform[nElements] : new ::TSpectrumTransform[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSpectrumTransform(void *p) {
      delete ((::TSpectrumTransform*)p);
   }
   static void deleteArray_TSpectrumTransform(void *p) {
      delete [] ((::TSpectrumTransform*)p);
   }
   static void destruct_TSpectrumTransform(void *p) {
      typedef ::TSpectrumTransform current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSpectrumTransform

//______________________________________________________________________________
void TSpectrum2::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpectrum2.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSpectrum2::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSpectrum2::Class(),this);
   }
}

//______________________________________________________________________________
void TSpectrum2::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSpectrum2.
      TClass *R__cl = ::TSpectrum2::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMaxPeaks", &fMaxPeaks);
      R__insp.Inspect(R__cl, R__parent, "fNPeaks", &fNPeaks);
      R__insp.Inspect(R__cl, R__parent, "*fPosition", &fPosition);
      R__insp.Inspect(R__cl, R__parent, "*fPositionX", &fPositionX);
      R__insp.Inspect(R__cl, R__parent, "*fPositionY", &fPositionY);
      R__insp.Inspect(R__cl, R__parent, "fResolution", &fResolution);
      R__insp.Inspect(R__cl, R__parent, "*fHistogram", &fHistogram);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSpectrum2(void *p) {
      return  p ? new(p) ::TSpectrum2 : new ::TSpectrum2;
   }
   static void *newArray_TSpectrum2(Long_t nElements, void *p) {
      return p ? new(p) ::TSpectrum2[nElements] : new ::TSpectrum2[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSpectrum2(void *p) {
      delete ((::TSpectrum2*)p);
   }
   static void deleteArray_TSpectrum2(void *p) {
      delete [] ((::TSpectrum2*)p);
   }
   static void destruct_TSpectrum2(void *p) {
      typedef ::TSpectrum2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSpectrum2

//______________________________________________________________________________
void TSpectrum2Fit::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpectrum2Fit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSpectrum2Fit::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSpectrum2Fit::Class(),this);
   }
}

//______________________________________________________________________________
void TSpectrum2Fit::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSpectrum2Fit.
      TClass *R__cl = ::TSpectrum2Fit::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNPeaks", &fNPeaks);
      R__insp.Inspect(R__cl, R__parent, "fNumberIterations", &fNumberIterations);
      R__insp.Inspect(R__cl, R__parent, "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__parent, "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__parent, "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__parent, "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__parent, "fStatisticType", &fStatisticType);
      R__insp.Inspect(R__cl, R__parent, "fAlphaOptim", &fAlphaOptim);
      R__insp.Inspect(R__cl, R__parent, "fPower", &fPower);
      R__insp.Inspect(R__cl, R__parent, "fFitTaylor", &fFitTaylor);
      R__insp.Inspect(R__cl, R__parent, "fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__parent, "fChi", &fChi);
      R__insp.Inspect(R__cl, R__parent, "*fPositionInitX", &fPositionInitX);
      R__insp.Inspect(R__cl, R__parent, "*fPositionCalcX", &fPositionCalcX);
      R__insp.Inspect(R__cl, R__parent, "*fPositionErrX", &fPositionErrX);
      R__insp.Inspect(R__cl, R__parent, "*fPositionInitY", &fPositionInitY);
      R__insp.Inspect(R__cl, R__parent, "*fPositionCalcY", &fPositionCalcY);
      R__insp.Inspect(R__cl, R__parent, "*fPositionErrY", &fPositionErrY);
      R__insp.Inspect(R__cl, R__parent, "*fPositionInitX1", &fPositionInitX1);
      R__insp.Inspect(R__cl, R__parent, "*fPositionCalcX1", &fPositionCalcX1);
      R__insp.Inspect(R__cl, R__parent, "*fPositionErrX1", &fPositionErrX1);
      R__insp.Inspect(R__cl, R__parent, "*fPositionInitY1", &fPositionInitY1);
      R__insp.Inspect(R__cl, R__parent, "*fPositionCalcY1", &fPositionCalcY1);
      R__insp.Inspect(R__cl, R__parent, "*fPositionErrY1", &fPositionErrY1);
      R__insp.Inspect(R__cl, R__parent, "*fAmpInit", &fAmpInit);
      R__insp.Inspect(R__cl, R__parent, "*fAmpCalc", &fAmpCalc);
      R__insp.Inspect(R__cl, R__parent, "*fAmpErr", &fAmpErr);
      R__insp.Inspect(R__cl, R__parent, "*fAmpInitX1", &fAmpInitX1);
      R__insp.Inspect(R__cl, R__parent, "*fAmpCalcX1", &fAmpCalcX1);
      R__insp.Inspect(R__cl, R__parent, "*fAmpErrX1", &fAmpErrX1);
      R__insp.Inspect(R__cl, R__parent, "*fAmpInitY1", &fAmpInitY1);
      R__insp.Inspect(R__cl, R__parent, "*fAmpCalcY1", &fAmpCalcY1);
      R__insp.Inspect(R__cl, R__parent, "*fAmpErrY1", &fAmpErrY1);
      R__insp.Inspect(R__cl, R__parent, "*fVolume", &fVolume);
      R__insp.Inspect(R__cl, R__parent, "*fVolumeErr", &fVolumeErr);
      R__insp.Inspect(R__cl, R__parent, "fSigmaInitX", &fSigmaInitX);
      R__insp.Inspect(R__cl, R__parent, "fSigmaCalcX", &fSigmaCalcX);
      R__insp.Inspect(R__cl, R__parent, "fSigmaErrX", &fSigmaErrX);
      R__insp.Inspect(R__cl, R__parent, "fSigmaInitY", &fSigmaInitY);
      R__insp.Inspect(R__cl, R__parent, "fSigmaCalcY", &fSigmaCalcY);
      R__insp.Inspect(R__cl, R__parent, "fSigmaErrY", &fSigmaErrY);
      R__insp.Inspect(R__cl, R__parent, "fRoInit", &fRoInit);
      R__insp.Inspect(R__cl, R__parent, "fRoCalc", &fRoCalc);
      R__insp.Inspect(R__cl, R__parent, "fRoErr", &fRoErr);
      R__insp.Inspect(R__cl, R__parent, "fTxyInit", &fTxyInit);
      R__insp.Inspect(R__cl, R__parent, "fTxyCalc", &fTxyCalc);
      R__insp.Inspect(R__cl, R__parent, "fTxyErr", &fTxyErr);
      R__insp.Inspect(R__cl, R__parent, "fSxyInit", &fSxyInit);
      R__insp.Inspect(R__cl, R__parent, "fSxyCalc", &fSxyCalc);
      R__insp.Inspect(R__cl, R__parent, "fSxyErr", &fSxyErr);
      R__insp.Inspect(R__cl, R__parent, "fTxInit", &fTxInit);
      R__insp.Inspect(R__cl, R__parent, "fTxCalc", &fTxCalc);
      R__insp.Inspect(R__cl, R__parent, "fTxErr", &fTxErr);
      R__insp.Inspect(R__cl, R__parent, "fTyInit", &fTyInit);
      R__insp.Inspect(R__cl, R__parent, "fTyCalc", &fTyCalc);
      R__insp.Inspect(R__cl, R__parent, "fTyErr", &fTyErr);
      R__insp.Inspect(R__cl, R__parent, "fSxInit", &fSxInit);
      R__insp.Inspect(R__cl, R__parent, "fSxCalc", &fSxCalc);
      R__insp.Inspect(R__cl, R__parent, "fSxErr", &fSxErr);
      R__insp.Inspect(R__cl, R__parent, "fSyInit", &fSyInit);
      R__insp.Inspect(R__cl, R__parent, "fSyCalc", &fSyCalc);
      R__insp.Inspect(R__cl, R__parent, "fSyErr", &fSyErr);
      R__insp.Inspect(R__cl, R__parent, "fBxInit", &fBxInit);
      R__insp.Inspect(R__cl, R__parent, "fBxCalc", &fBxCalc);
      R__insp.Inspect(R__cl, R__parent, "fBxErr", &fBxErr);
      R__insp.Inspect(R__cl, R__parent, "fByInit", &fByInit);
      R__insp.Inspect(R__cl, R__parent, "fByCalc", &fByCalc);
      R__insp.Inspect(R__cl, R__parent, "fByErr", &fByErr);
      R__insp.Inspect(R__cl, R__parent, "fA0Init", &fA0Init);
      R__insp.Inspect(R__cl, R__parent, "fA0Calc", &fA0Calc);
      R__insp.Inspect(R__cl, R__parent, "fA0Err", &fA0Err);
      R__insp.Inspect(R__cl, R__parent, "fAxInit", &fAxInit);
      R__insp.Inspect(R__cl, R__parent, "fAxCalc", &fAxCalc);
      R__insp.Inspect(R__cl, R__parent, "fAxErr", &fAxErr);
      R__insp.Inspect(R__cl, R__parent, "fAyInit", &fAyInit);
      R__insp.Inspect(R__cl, R__parent, "fAyCalc", &fAyCalc);
      R__insp.Inspect(R__cl, R__parent, "fAyErr", &fAyErr);
      R__insp.Inspect(R__cl, R__parent, "*fFixPositionX", &fFixPositionX);
      R__insp.Inspect(R__cl, R__parent, "*fFixPositionY", &fFixPositionY);
      R__insp.Inspect(R__cl, R__parent, "*fFixPositionX1", &fFixPositionX1);
      R__insp.Inspect(R__cl, R__parent, "*fFixPositionY1", &fFixPositionY1);
      R__insp.Inspect(R__cl, R__parent, "*fFixAmp", &fFixAmp);
      R__insp.Inspect(R__cl, R__parent, "*fFixAmpX1", &fFixAmpX1);
      R__insp.Inspect(R__cl, R__parent, "*fFixAmpY1", &fFixAmpY1);
      R__insp.Inspect(R__cl, R__parent, "fFixSigmaX", &fFixSigmaX);
      R__insp.Inspect(R__cl, R__parent, "fFixSigmaY", &fFixSigmaY);
      R__insp.Inspect(R__cl, R__parent, "fFixRo", &fFixRo);
      R__insp.Inspect(R__cl, R__parent, "fFixTxy", &fFixTxy);
      R__insp.Inspect(R__cl, R__parent, "fFixSxy", &fFixSxy);
      R__insp.Inspect(R__cl, R__parent, "fFixTx", &fFixTx);
      R__insp.Inspect(R__cl, R__parent, "fFixTy", &fFixTy);
      R__insp.Inspect(R__cl, R__parent, "fFixSx", &fFixSx);
      R__insp.Inspect(R__cl, R__parent, "fFixSy", &fFixSy);
      R__insp.Inspect(R__cl, R__parent, "fFixBx", &fFixBx);
      R__insp.Inspect(R__cl, R__parent, "fFixBy", &fFixBy);
      R__insp.Inspect(R__cl, R__parent, "fFixA0", &fFixA0);
      R__insp.Inspect(R__cl, R__parent, "fFixAx", &fFixAx);
      R__insp.Inspect(R__cl, R__parent, "fFixAy", &fFixAy);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSpectrum2Fit(void *p) {
      return  p ? new(p) ::TSpectrum2Fit : new ::TSpectrum2Fit;
   }
   static void *newArray_TSpectrum2Fit(Long_t nElements, void *p) {
      return p ? new(p) ::TSpectrum2Fit[nElements] : new ::TSpectrum2Fit[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSpectrum2Fit(void *p) {
      delete ((::TSpectrum2Fit*)p);
   }
   static void deleteArray_TSpectrum2Fit(void *p) {
      delete [] ((::TSpectrum2Fit*)p);
   }
   static void destruct_TSpectrum2Fit(void *p) {
      typedef ::TSpectrum2Fit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSpectrum2Fit

//______________________________________________________________________________
void TSpectrum2Transform::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpectrum2Transform.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSpectrum2Transform::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSpectrum2Transform::Class(),this);
   }
}

//______________________________________________________________________________
void TSpectrum2Transform::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSpectrum2Transform.
      TClass *R__cl = ::TSpectrum2Transform::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fSizeX", &fSizeX);
      R__insp.Inspect(R__cl, R__parent, "fSizeY", &fSizeY);
      R__insp.Inspect(R__cl, R__parent, "fTransformType", &fTransformType);
      R__insp.Inspect(R__cl, R__parent, "fDegree", &fDegree);
      R__insp.Inspect(R__cl, R__parent, "fDirection", &fDirection);
      R__insp.Inspect(R__cl, R__parent, "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__parent, "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__parent, "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__parent, "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__parent, "fFilterCoeff", &fFilterCoeff);
      R__insp.Inspect(R__cl, R__parent, "fEnhanceCoeff", &fEnhanceCoeff);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSpectrum2Transform(void *p) {
      return  p ? new(p) ::TSpectrum2Transform : new ::TSpectrum2Transform;
   }
   static void *newArray_TSpectrum2Transform(Long_t nElements, void *p) {
      return p ? new(p) ::TSpectrum2Transform[nElements] : new ::TSpectrum2Transform[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSpectrum2Transform(void *p) {
      delete ((::TSpectrum2Transform*)p);
   }
   static void deleteArray_TSpectrum2Transform(void *p) {
      delete [] ((::TSpectrum2Transform*)p);
   }
   static void destruct_TSpectrum2Transform(void *p) {
      typedef ::TSpectrum2Transform current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSpectrum2Transform

//______________________________________________________________________________
void TSpectrum3::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpectrum3.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TSpectrum3::Class(),this);
   } else {
      R__b.WriteClassBuffer(TSpectrum3::Class(),this);
   }
}

//______________________________________________________________________________
void TSpectrum3::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSpectrum3.
      TClass *R__cl = ::TSpectrum3::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMaxPeaks", &fMaxPeaks);
      R__insp.Inspect(R__cl, R__parent, "fNPeaks", &fNPeaks);
      R__insp.Inspect(R__cl, R__parent, "*fPosition", &fPosition);
      R__insp.Inspect(R__cl, R__parent, "*fPositionX", &fPositionX);
      R__insp.Inspect(R__cl, R__parent, "*fPositionY", &fPositionY);
      R__insp.Inspect(R__cl, R__parent, "*fPositionZ", &fPositionZ);
      R__insp.Inspect(R__cl, R__parent, "fResolution", &fResolution);
      R__insp.Inspect(R__cl, R__parent, "*fHistogram", &fHistogram);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSpectrum3(void *p) {
      return  p ? new(p) ::TSpectrum3 : new ::TSpectrum3;
   }
   static void *newArray_TSpectrum3(Long_t nElements, void *p) {
      return p ? new(p) ::TSpectrum3[nElements] : new ::TSpectrum3[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSpectrum3(void *p) {
      delete ((::TSpectrum3*)p);
   }
   static void deleteArray_TSpectrum3(void *p) {
      delete [] ((::TSpectrum3*)p);
   }
   static void destruct_TSpectrum3(void *p) {
      typedef ::TSpectrum3 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSpectrum3

/********************************************************
* hist/spectrum/src/G__Spectrum.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Spectrum();

extern "C" void G__set_cpp_environmentG__Spectrum() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TSpectrum2Fit.h");
  G__add_compiledheader("TSpectrum2.h");
  G__add_compiledheader("TSpectrum2Transform.h");
  G__add_compiledheader("TSpectrum3.h");
  G__add_compiledheader("TSpectrumFit.h");
  G__add_compiledheader("TSpectrum.h");
  G__add_compiledheader("TSpectrumTransform.h");
  G__cpp_reset_tagtableG__Spectrum();
}
#include <new>
extern "C" int G__cpp_dllrevG__Spectrum() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSpectrum2Fit */
static int G__G__Spectrum_106_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2Fit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum2Fit[n];
     } else {
       p = new((void*) gvp) TSpectrum2Fit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum2Fit;
     } else {
       p = new((void*) gvp) TSpectrum2Fit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2Fit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSpectrum2Fit((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSpectrum2Fit((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->FitAwmi((Float_t**) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->FitStiefel((Float_t**) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetAmplitudes((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetAmplitudeErrors((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetBackgroundParameters(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSpectrum2Fit*) G__getstructoffset())->GetChi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetPositions((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetPositionErrors((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetRo(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetSigmaX(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetSigmaY(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetTailParameters(
*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]), *(Double_t*) G__Doubleref(&libp->para[9])
, *(Double_t*) G__Doubleref(&libp->para[10]), *(Double_t*) G__Doubleref(&libp->para[11])
, *(Double_t*) G__Doubleref(&libp->para[12]), *(Double_t*) G__Doubleref(&libp->para[13])
, *(Double_t*) G__Doubleref(&libp->para[14]), *(Double_t*) G__Doubleref(&libp->para[15]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetVolumes((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->GetVolumeErrors((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->SetBackgroundParameters((Double_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->SetFitParameters(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->SetPeakParameters(
(Double_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (const Float_t*) G__int(libp->para[6]), (const Bool_t*) G__int(libp->para[7])
, (const Float_t*) G__int(libp->para[8]), (const Bool_t*) G__int(libp->para[9])
, (const Float_t*) G__int(libp->para[10]), (const Bool_t*) G__int(libp->para[11])
, (const Float_t*) G__int(libp->para[12]), (const Bool_t*) G__int(libp->para[13])
, (const Float_t*) G__int(libp->para[14]), (const Bool_t*) G__int(libp->para[15])
, (const Float_t*) G__int(libp->para[16]), (const Bool_t*) G__int(libp->para[17])
, (const Float_t*) G__int(libp->para[18]), (const Bool_t*) G__int(libp->para[19]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->SetTailParameters(
(Double_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Bool_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Bool_t) G__int(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Bool_t) G__int(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Bool_t) G__int(libp->para[15]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpectrum2Fit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Fit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpectrum2Fit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpectrum2Fit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Fit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Fit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum2Fit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Fit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_106_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum2Fit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Spectrum_106_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSpectrum2Fit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSpectrum2Fit(*(TSpectrum2Fit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpectrum2Fit G__TTSpectrum2Fit;
static int G__G__Spectrum_106_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpectrum2Fit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpectrum2Fit*) (soff+(sizeof(TSpectrum2Fit)*i)))->~G__TTSpectrum2Fit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpectrum2Fit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpectrum2Fit*) (soff))->~G__TTSpectrum2Fit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Spectrum_106_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2Fit* dest = (TSpectrum2Fit*) G__getstructoffset();
   *dest = *(TSpectrum2Fit*) libp->para[0].ref;
   const TSpectrum2Fit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSpectrum2 */
static int G__G__Spectrum_109_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum2[n];
     } else {
       p = new((void*) gvp) TSpectrum2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum2;
     } else {
       p = new((void*) gvp) TSpectrum2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum2((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TSpectrum2((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum2((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSpectrum2((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((TSpectrum2*) G__getstructoffset())->Background((const TH1*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((TSpectrum2*) G__getstructoffset())->Background((const TH1*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((TSpectrum2*) G__getstructoffset())->Background((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSpectrum2*) G__getstructoffset())->GetHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSpectrum2*) G__getstructoffset())->GetNPeaks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSpectrum2*) G__getstructoffset())->GetPositionX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSpectrum2*) G__getstructoffset())->GetPositionY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((TSpectrum2*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((TSpectrum2*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TSpectrum2*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((TSpectrum2*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TSpectrum2::SetAverageWindow((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TSpectrum2::SetAverageWindow();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TSpectrum2::SetDeconIterations((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TSpectrum2::SetDeconIterations();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TSpectrum2*) G__getstructoffset())->SetResolution((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSpectrum2*) G__getstructoffset())->SetResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum2*) G__getstructoffset())->Background(
(float**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum2*) G__getstructoffset())->SmoothMarkov((float**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum2*) G__getstructoffset())->Deconvolution(
(float**) G__int(libp->para[0]), (float**) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpectrum2*) G__getstructoffset())->SearchHighRes(
(float**) G__int(libp->para[0]), (float**) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Bool_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) TSpectrum2::StaticSearch((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) TSpectrum2::StaticSearch((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) TSpectrum2::StaticSearch((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) TSpectrum2::StaticSearch((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) TSpectrum2::StaticBackground((const TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) TSpectrum2::StaticBackground((const TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) TSpectrum2::StaticBackground((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpectrum2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpectrum2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpectrum2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_109_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Spectrum_109_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSpectrum2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSpectrum2(*(TSpectrum2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpectrum2 G__TTSpectrum2;
static int G__G__Spectrum_109_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpectrum2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpectrum2*) (soff+(sizeof(TSpectrum2)*i)))->~G__TTSpectrum2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpectrum2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpectrum2*) (soff))->~G__TTSpectrum2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Spectrum_109_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2* dest = (TSpectrum2*) G__getstructoffset();
   *dest = *(TSpectrum2*) libp->para[0].ref;
   const TSpectrum2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSpectrum2Transform */
static int G__G__Spectrum_111_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2Transform* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum2Transform[n];
     } else {
       p = new((void*) gvp) TSpectrum2Transform[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum2Transform;
     } else {
       p = new((void*) gvp) TSpectrum2Transform;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2Transform* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSpectrum2Transform((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TSpectrum2Transform((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->Enhance((const Float_t**) G__int(libp->para[0]), (Float_t**) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->FilterZonal((const Float_t**) G__int(libp->para[0]), (Float_t**) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->SetDirection((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->SetEnhanceCoeff((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->SetFilterCoeff((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->SetRegion((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->SetTransformType((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->Transform((const Float_t**) G__int(libp->para[0]), (Float_t**) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpectrum2Transform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Transform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpectrum2Transform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpectrum2Transform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Transform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Transform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum2Transform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Transform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_111_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum2Transform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Spectrum_111_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSpectrum2Transform* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSpectrum2Transform(*(TSpectrum2Transform*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpectrum2Transform G__TTSpectrum2Transform;
static int G__G__Spectrum_111_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpectrum2Transform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpectrum2Transform*) (soff+(sizeof(TSpectrum2Transform)*i)))->~G__TTSpectrum2Transform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpectrum2Transform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpectrum2Transform*) (soff))->~G__TTSpectrum2Transform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Spectrum_111_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2Transform* dest = (TSpectrum2Transform*) G__getstructoffset();
   *dest = *(TSpectrum2Transform*) libp->para[0].ref;
   const TSpectrum2Transform& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSpectrum3 */
static int G__G__Spectrum_113_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum3* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum3[n];
     } else {
       p = new((void*) gvp) TSpectrum3[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum3;
     } else {
       p = new((void*) gvp) TSpectrum3;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum3* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum3((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TSpectrum3((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum3((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSpectrum3((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 67, (long) ((TSpectrum3*) G__getstructoffset())->Background((const TH1*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSpectrum3*) G__getstructoffset())->Background((const TH1*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum3*) G__getstructoffset())->Background(
(float***) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum3*) G__getstructoffset())->Deconvolution(
(float***) G__int(libp->para[0]), (const float***) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSpectrum3*) G__getstructoffset())->GetHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSpectrum3*) G__getstructoffset())->GetNPeaks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSpectrum3*) G__getstructoffset())->GetPositionX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSpectrum3*) G__getstructoffset())->GetPositionY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSpectrum3*) G__getstructoffset())->GetPositionZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((TSpectrum3*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((TSpectrum3*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TSpectrum3*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((TSpectrum3*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpectrum3*) G__getstructoffset())->SearchFast(
(const float***) G__int(libp->para[0]), (float***) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpectrum3*) G__getstructoffset())->SearchHighRes(
(const float***) G__int(libp->para[0]), (float***) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Bool_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TSpectrum3*) G__getstructoffset())->SetResolution((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSpectrum3*) G__getstructoffset())->SetResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum3*) G__getstructoffset())->SmoothMarkov((float***) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpectrum3::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum3::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpectrum3::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpectrum3::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum3*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum3::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum3::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum3::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_113_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum3::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Spectrum_113_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSpectrum3* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSpectrum3(*(TSpectrum3*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpectrum3 G__TTSpectrum3;
static int G__G__Spectrum_113_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpectrum3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpectrum3*) (soff+(sizeof(TSpectrum3)*i)))->~G__TTSpectrum3();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpectrum3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpectrum3*) (soff))->~G__TTSpectrum3();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Spectrum_113_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum3* dest = (TSpectrum3*) G__getstructoffset();
   *dest = *(TSpectrum3*) libp->para[0].ref;
   const TSpectrum3& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSpectrumFit */
static int G__G__Spectrum_115_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrumFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrumFit[n];
     } else {
       p = new((void*) gvp) TSpectrumFit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrumFit;
     } else {
       p = new((void*) gvp) TSpectrumFit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrumFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSpectrumFit((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSpectrumFit((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->FitAwmi((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->FitStiefel((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TSpectrumFit*) G__getstructoffset())->GetAmplitudes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TSpectrumFit*) G__getstructoffset())->GetAmplitudesErrors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TSpectrumFit*) G__getstructoffset())->GetAreas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TSpectrumFit*) G__getstructoffset())->GetAreasErrors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->GetBackgroundParameters(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSpectrumFit*) G__getstructoffset())->GetChi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TSpectrumFit*) G__getstructoffset())->GetPositions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TSpectrumFit*) G__getstructoffset())->GetPositionsErrors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->GetSigma(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->GetTailParameters(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->SetBackgroundParameters((Double_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->SetFitParameters(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->SetPeakParameters((Double_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (const Float_t*) G__int(libp->para[2]), (const Bool_t*) G__int(libp->para[3])
, (const Float_t*) G__int(libp->para[4]), (const Bool_t*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->SetTailParameters((Double_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpectrumFit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrumFit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpectrumFit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpectrumFit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumFit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrumFit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrumFit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrumFit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_115_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrumFit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Spectrum_115_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSpectrumFit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSpectrumFit(*(TSpectrumFit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpectrumFit G__TTSpectrumFit;
static int G__G__Spectrum_115_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpectrumFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpectrumFit*) (soff+(sizeof(TSpectrumFit)*i)))->~G__TTSpectrumFit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpectrumFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpectrumFit*) (soff))->~G__TTSpectrumFit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Spectrum_115_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrumFit* dest = (TSpectrumFit*) G__getstructoffset();
   *dest = *(TSpectrumFit*) libp->para[0].ref;
   const TSpectrumFit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSpectrum */
static int G__G__Spectrum_117_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum[n];
     } else {
       p = new((void*) gvp) TSpectrum[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum;
     } else {
       p = new((void*) gvp) TSpectrum;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TSpectrum((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrum((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TSpectrum((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((TSpectrum*) G__getstructoffset())->Background((const TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((TSpectrum*) G__getstructoffset())->Background((const TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((TSpectrum*) G__getstructoffset())->Background((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TSpectrum*) G__getstructoffset())->GetHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSpectrum*) G__getstructoffset())->GetNPeaks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSpectrum*) G__getstructoffset())->GetPositionX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TSpectrum*) G__getstructoffset())->GetPositionY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((TSpectrum*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((TSpectrum*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TSpectrum*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((TSpectrum*) G__getstructoffset())->Search((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TSpectrum::SetAverageWindow((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TSpectrum::SetAverageWindow();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TSpectrum::SetDeconIterations((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TSpectrum::SetDeconIterations();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TSpectrum*) G__getstructoffset())->SetResolution((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSpectrum*) G__getstructoffset())->SetResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum*) G__getstructoffset())->Background(
(float*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (bool) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum*) G__getstructoffset())->SmoothMarkov((float*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum*) G__getstructoffset())->Deconvolution((float*) G__int(libp->para[0]), (const float*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum*) G__getstructoffset())->DeconvolutionRL((float*) G__int(libp->para[0]), (const float*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSpectrum*) G__getstructoffset())->Unfolding(
(float*) G__int(libp->para[0]), (const float**) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpectrum*) G__getstructoffset())->SearchHighRes(
(float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (bool) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpectrum*) G__getstructoffset())->Search1HighRes(
(float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (bool) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) TSpectrum::StaticSearch((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) TSpectrum::StaticSearch((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) TSpectrum::StaticSearch((const TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) TSpectrum::StaticSearch((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) TSpectrum::StaticBackground((const TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) TSpectrum::StaticBackground((const TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) TSpectrum::StaticBackground((const TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpectrum::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpectrum::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpectrum::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_117_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpectrum G__TTSpectrum;
static int G__G__Spectrum_117_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpectrum*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpectrum*) (soff+(sizeof(TSpectrum)*i)))->~G__TTSpectrum();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpectrum*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpectrum*) (soff))->~G__TTSpectrum();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSpectrumTransform */
static int G__G__Spectrum_119_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrumTransform* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrumTransform[n];
     } else {
       p = new((void*) gvp) TSpectrumTransform[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpectrumTransform;
     } else {
       p = new((void*) gvp) TSpectrumTransform;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrumTransform* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSpectrumTransform((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSpectrumTransform((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->Enhance((const float*) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->FilterZonal((const float*) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->SetDirection((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->SetEnhanceCoeff((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->SetFilterCoeff((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->SetRegion((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->SetTransformType((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->Transform((const float*) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpectrumTransform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrumTransform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpectrumTransform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpectrumTransform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrumTransform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrumTransform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrumTransform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrumTransform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum_119_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrumTransform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Spectrum_119_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSpectrumTransform* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSpectrumTransform(*(TSpectrumTransform*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpectrumTransform G__TTSpectrumTransform;
static int G__G__Spectrum_119_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpectrumTransform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpectrumTransform*) (soff+(sizeof(TSpectrumTransform)*i)))->~G__TTSpectrumTransform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpectrumTransform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpectrumTransform*) (soff))->~G__TTSpectrumTransform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Spectrum_119_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrumTransform* dest = (TSpectrumTransform*) G__getstructoffset();
   *dest = *(TSpectrumTransform*) libp->para[0].ref;
   const TSpectrumTransform& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSpectrum2Fit */

/* TSpectrum2 */

/* TSpectrum2Transform */

/* TSpectrum3 */

/* TSpectrumFit */

/* TSpectrum */

/* TSpectrumTransform */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Spectrum {
 public:
  G__Sizep2memfuncG__Spectrum(): p(&G__Sizep2memfuncG__Spectrum::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Spectrum::*p)();
};

size_t G__get_sizep2memfuncG__Spectrum()
{
  G__Sizep2memfuncG__Spectrum a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Spectrum() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit))) {
     TSpectrum2Fit *G__Lderived;
     G__Lderived=(TSpectrum2Fit*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit),G__get_linked_tagnum(&G__G__SpectrumLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit),G__get_linked_tagnum(&G__G__SpectrumLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2))) {
     TSpectrum2 *G__Lderived;
     G__Lderived=(TSpectrum2*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2),G__get_linked_tagnum(&G__G__SpectrumLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2),G__get_linked_tagnum(&G__G__SpectrumLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform))) {
     TSpectrum2Transform *G__Lderived;
     G__Lderived=(TSpectrum2Transform*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform),G__get_linked_tagnum(&G__G__SpectrumLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3))) {
     TSpectrum3 *G__Lderived;
     G__Lderived=(TSpectrum3*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3),G__get_linked_tagnum(&G__G__SpectrumLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3),G__get_linked_tagnum(&G__G__SpectrumLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit))) {
     TSpectrumFit *G__Lderived;
     G__Lderived=(TSpectrumFit*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit),G__get_linked_tagnum(&G__G__SpectrumLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit),G__get_linked_tagnum(&G__G__SpectrumLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum))) {
     TSpectrum *G__Lderived;
     G__Lderived=(TSpectrum*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum),G__get_linked_tagnum(&G__G__SpectrumLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum),G__get_linked_tagnum(&G__G__SpectrumLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform))) {
     TSpectrumTransform *G__Lderived;
     G__Lderived=(TSpectrumTransform*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform),G__get_linked_tagnum(&G__G__SpectrumLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform),G__get_linked_tagnum(&G__G__SpectrumLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Spectrum() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__SpectrumLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__SpectrumLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__SpectrumLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__SpectrumLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__SpectrumLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__SpectrumLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSpectrum2Fit */
static void G__setup_memvarTSpectrum2Fit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit));
   { TSpectrum2Fit *p; p=(TSpectrum2Fit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPeaks=",0,"number of peaks present in fit, input parameter, it should be > 0");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumberIterations=",0,"number of iterations in fitting procedure, input parameter, it should be > 0");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmin=",0,"first fitted channel in x direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmax=",0,"last fitted channel in x direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYmin=",0,"first fitted channel in y direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYmax=",0,"last fitted channel in y direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStatisticType=",0,"type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAlphaOptim=",0,"optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPower=",0,"possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFitTaylor=",0,"order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAlpha=",0,"convergence coefficient, input parameter, it should be positive number and <=1, for details see references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fChi=",0,"here the fitting functions return resulting chi square   ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionInitX=",0,"[fNPeaks] array of initial values of x positions of 2D peaks, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionCalcX=",0,"[fNPeaks] array of calculated values of x positions of 2D peaks, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionErrX=",0,"[fNPeaks] array of error values of x positions of 2D peaks, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionInitY=",0,"[fNPeaks] array of initial values of y positions of 2D peaks, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionCalcY=",0,"[fNPeaks] array of calculated values of y positions of 2D peaks, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionErrY=",0,"[fNPeaks] array of error values of y positions of 2D peaks, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionInitX1=",0,"[fNPeaks] array of initial x positions of 1D ridges, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionCalcX1=",0,"[fNPeaks] array of calculated x positions of 1D ridges, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionErrX1=",0,"[fNPeaks] array of x positions errors of 1D ridges, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionInitY1=",0,"[fNPeaks] array of initial y positions of 1D ridges, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionCalcY1=",0,"[fNPeaks] array of calculated y positions of 1D ridges, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionErrY1=",0,"[fNPeaks] array of y positions errors of 1D ridges, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpInit=",0,"[fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpCalc=",0,"[fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpErr=",0,"[fNPeaks] array of amplitudes errors of 2D peaks, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpInitX1=",0,"[fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpCalcX1=",0,"[fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpErrX1=",0,"[fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpInitY1=",0,"[fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpCalcY1=",0,"[fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpErrY1=",0,"[fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVolume=",0,"[fNPeaks] array of calculated volumes of 2D peaks, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVolumeErr=",0,"[fNPeaks] array of volumes errors of 2D peaks, output parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaInitX=",0,"initial value of sigma x parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaCalcX=",0,"calculated value of sigma x parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaErrX=",0,"error value of sigma x parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaInitY=",0,"initial value of sigma y parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaCalcY=",0,"calculated value of sigma y parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaErrY=",0,"error value of sigma y parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRoInit=",0,"initial value of correlation coefficient");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRoCalc=",0,"calculated value of correlation coefficient");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRoErr=",0,"error value of correlation coefficient");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTxyInit=",0,"initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTxyCalc=",0,"calculated value of t parameter for 2D peaks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTxyErr=",0,"error value of t parameter for 2D peaks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSxyInit=",0,"initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSxyCalc=",0,"calculated value of s parameter for 2D peaks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSxyErr=",0,"error value of s parameter for 2D peaks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTxInit=",0,"initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTxCalc=",0,"calculated value of t parameter for 1D ridges in x direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTxErr=",0,"error value of t parameter for 1D ridges in x direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTyInit=",0,"initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTyCalc=",0,"calculated value of t parameter for 1D ridges in y direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTyErr=",0,"error value of t parameter for 1D ridges in y direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSxInit=",0,"initial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSxCalc=",0,"calculated value of s parameter for 1D ridges in x direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSxErr=",0,"error value of s parameter for 1D ridges in x direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSyInit=",0,"initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSyCalc=",0,"calculated value of s parameter for 1D ridges in y direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSyErr=",0,"error value of s parameter for 1D ridges in y direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBxInit=",0,"initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBxCalc=",0,"calculated value of b parameter for 1D ridges in x direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBxErr=",0,"error value of b parameter for 1D ridges in x direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fByInit=",0,"initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fByCalc=",0,"calculated value of b parameter for 1D ridges in y direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fByErr=",0,"error value of b parameter for 1D ridges in y direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA0Init=",0,"initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA0Calc=",0,"calculated value of background a0 parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA0Err=",0,"error value of background a0 parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAxInit=",0,"initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAxCalc=",0,"calculated value of background ax parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAxErr=",0,"error value of background ax parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAyInit=",0,"initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAyCalc=",0,"calculated value of background ay parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAyErr=",0,"error value of background ay parameter   ");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixPositionX=",0,"[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixPositionY=",0,"[fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixPositionX1=",0,"[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixPositionY1=",0,"[fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixAmp=",0,"[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixAmpX1=",0,"[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixAmpY1=",0,"[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixSigmaX=",0,"logical value of sigma x parameter, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixSigmaY=",0,"logical value of sigma y parameter, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixRo=",0,"logical value of correlation coefficient, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixTxy=",0,"logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixSxy=",0,"logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixTx=",0,"logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixTy=",0,"logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixSx=",0,"logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixSy=",0,"logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixBx=",0,"logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixBy=",0,"logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixA0=",0,"logical value of a0 parameter, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixAx=",0,"logical value of ax parameter, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixAy=",0,"logical value of ay parameter, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitOptimChiCounts=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitOptimChiFuncValues=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitOptimMaxLikelihood=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitAlphaHalving=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitAlphaOptimal=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitPower2=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitPower4=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitPower6=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitPower8=8",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitPower10=10",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitPower12=12",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitTaylorOrderFirst=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitTaylorOrderSecond=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2FitcLcLdA),-1,-2,1,"kFitNumRegulCycles=100",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSpectrum2 */
static void G__setup_memvarTSpectrum2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2));
   { TSpectrum2 *p; p=(TSpectrum2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxPeaks=",0,"Maximum number of peaks to be found");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPeaks=",0,"number of peaks found");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPosition=",0,"[fNPeaks] array of current peak positions");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPositionX=",0,"[fNPeaks] X position of peaks");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPositionY=",0,"[fNPeaks] Y position of peaks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fResolution=",0,"resolution of the neighboring peaks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TH1),-1,-1,2,"fHistogram=",0,"resulting histogram");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fgAverageWindow=",0,"Average window of searched peaks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fgIterations=",0,"Maximum number of decon iterations (default=3)");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2cLcLdA),-1,-2,1,"kBackIncreasingWindow=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2cLcLdA),-1,-2,1,"kBackDecreasingWindow=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2cLcLdA),-1,-2,1,"kBackSuccessiveFiltering=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2cLcLdA),-1,-2,1,"kBackOneStepFiltering=1",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSpectrum2Transform */
static void G__setup_memvarTSpectrum2Transform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform));
   { TSpectrum2Transform *p; p=(TSpectrum2Transform*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSizeX=",0,"x length of transformed data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSizeY=",0,"y length of transformed data   ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTransformType=",0,"type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDegree=",0,"degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDirection=",0,"forward or inverse transform");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmin=",0,"first channel x of filtered or enhanced region");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmax=",0,"last channel x of filtered or enhanced region");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYmin=",0,"first channel y of filtered or enhanced region");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYmax=",0,"last channel y of filtered or enhanced region   ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fFilterCoeff=",0,"value set in the filtered region");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEnhanceCoeff=",0,"multiplication coefficient applied in enhanced region;");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformHaar=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformWalsh=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformCos=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformSin=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformFourier=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformHartley=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformFourierWalsh=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformFourierHaar=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformWalshHaar=8",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformCosWalsh=9",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformCosHaar=10",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformSinWalsh=11",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformSinHaar=12",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformForward=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA),-1,-2,1,"kTransformInverse=1",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSpectrum3 */
static void G__setup_memvarTSpectrum3(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3));
   { TSpectrum3 *p; p=(TSpectrum3*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxPeaks=",0,"Maximum number of peaks to be found");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPeaks=",0,"number of peaks found");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPosition=",0,"[fNPeaks] array of current peak positions");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPositionX=",0,"[fNPeaks] X positions of peaks");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPositionY=",0,"[fNPeaks] Y positions of peaks");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPositionZ=",0,"[fNPeaks] Z positions of peaks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fResolution=",0,"resolution of the neighboring peaks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TH1),-1,-1,2,"fHistogram=",0,"resulting histogram");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3cLcLdA),-1,-2,1,"kBackIncreasingWindow=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3cLcLdA),-1,-2,1,"kBackDecreasingWindow=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3cLcLdA),-1,-2,1,"kBackSuccessiveFiltering=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3cLcLdA),-1,-2,1,"kBackOneStepFiltering=1",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSpectrumFit */
static void G__setup_memvarTSpectrumFit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit));
   { TSpectrumFit *p; p=(TSpectrumFit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPeaks=",0,"number of peaks present in fit, input parameter, it should be > 0");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumberIterations=",0,"number of iterations in fitting procedure, input parameter, it should be > 0");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmin=",0,"first fitted channel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmax=",0,"last fitted channel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStatisticType=",0,"type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAlphaOptim=",0,"optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPower=",0,"possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFitTaylor=",0,"order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAlpha=",0,"convergence coefficient, input parameter, it should be positive number and <=1, for details see references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fChi=",0,"here the fitting functions return resulting chi square   ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionInit=",0,"[fNPeaks] array of initial values of peaks positions, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionCalc=",0,"[fNPeaks] array of calculated values of fitted positions, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPositionErr=",0,"[fNPeaks] array of position errors");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpInit=",0,"[fNPeaks] array of initial values of peaks amplitudes, input parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpCalc=",0,"[fNPeaks] array of calculated values of fitted amplitudes, output parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpErr=",0,"[fNPeaks] array of amplitude errors");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fArea=",0,"[fNPeaks] array of calculated areas of peaks");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAreaErr=",0,"[fNPeaks] array of errors of peak areas");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaInit=",0,"initial value of sigma parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaCalc=",0,"calculated value of sigma parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaErr=",0,"error value of sigma parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTInit=",0,"initial value of t parameter (relative amplitude of tail), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTCalc=",0,"calculated value of t parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTErr=",0,"error value of t parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBInit=",0,"initial value of b parameter (slope), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBCalc=",0,"calculated value of b parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBErr=",0,"error value of b parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSInit=",0,"initial value of s parameter (relative amplitude of step), for details see html manual and references");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSCalc=",0,"calculated value of s parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSErr=",0,"error value of s parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA0Init=",0,"initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA0Calc=",0,"calculated value of background a0 parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA0Err=",0,"error value of background a0 parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA1Init=",0,"initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA1Calc=",0,"calculated value of background a1 parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA1Err=",0,"error value of background a1 parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA2Init=",0,"initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA2Calc=",0,"calculated value of background a2 parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA2Err=",0,"error value of background a2 parameter");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixPosition=",0,"[fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional   ");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixAmp=",0,"[fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional      ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixSigma=",0,"logical value of sigma parameter, which allows to fix the parameter (not to fit).   ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixT=",0,"logical value of t parameter, which allows to fix the parameter (not to fit).      ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixB=",0,"logical value of b parameter, which allows to fix the parameter (not to fit).   ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixS=",0,"logical value of s parameter, which allows to fix the parameter (not to fit).      ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixA0=",0,"logical value of a0 parameter, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixA1=",0,"logical value of a1 parameter, which allows to fix the parameter (not to fit).   ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFixA2=",0,"logical value of a2 parameter, which allows to fix the parameter (not to fit).");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitOptimChiCounts=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitOptimChiFuncValues=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitOptimMaxLikelihood=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitAlphaHalving=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitAlphaOptimal=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitPower2=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitPower4=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitPower6=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitPower8=8",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitPower10=10",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitPower12=12",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitTaylorOrderFirst=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitTaylorOrderSecond=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFitcLcLdA),-1,-2,1,"kFitNumRegulCycles=100",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSpectrum */
static void G__setup_memvarTSpectrum(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum));
   { TSpectrum *p; p=(TSpectrum*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxPeaks=",0,"Maximum number of peaks to be found");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPeaks=",0,"number of peaks found");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPosition=",0,"[fNPeaks] array of current peak positions");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPositionX=",0,"[fNPeaks] X position of peaks");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPositionY=",0,"[fNPeaks] Y position of peaks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fResolution=",0,"resolution of the neighboring peaks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TH1),-1,-1,2,"fHistogram=",0,"resulting histogram");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fgAverageWindow=",0,"Average window of searched peaks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fgIterations=",0,"Maximum number of decon iterations (default=3)");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackOrder2=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackOrder4=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackOrder6=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackOrder8=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackIncreasingWindow=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackDecreasingWindow=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackSmoothing3=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackSmoothing5=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackSmoothing7=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackSmoothing9=9",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackSmoothing11=11",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackSmoothing13=13",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumcLcLdA),-1,-2,1,"kBackSmoothing15=15",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSpectrumTransform */
static void G__setup_memvarTSpectrumTransform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform));
   { TSpectrumTransform *p; p=(TSpectrumTransform*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSize=",0,"length of transformed data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTransformType=",0,"type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDegree=",0,"degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDirection=",0,"forward or inverse transform");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmin=",0,"first channel of filtered or enhanced region");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmax=",0,"last channel of filtered or enhanced region");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fFilterCoeff=",0,"value set in the filtered region");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEnhanceCoeff=",0,"multiplication coefficient applied in enhanced region;");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformHaar=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformWalsh=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformCos=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformSin=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformFourier=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformHartley=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformFourierWalsh=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformFourierHaar=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformWalshHaar=8",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformCosWalsh=9",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformCosHaar=10",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformSinWalsh=11",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformSinHaar=12",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformForward=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransformcLcLdA),-1,-2,1,"kTransformInverse=1",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__SpectrumLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Spectrum() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSpectrum2Fit(void) {
   /* TSpectrum2Fit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit));
   G__memfunc_setup("TSpectrum2Fit",1276,G__G__Spectrum_106_0_1, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit), -1, 0, 0, 1, 1, 0, "", "default constructor        ", (void*) NULL, 0);
   G__memfunc_setup("TSpectrum2Fit",1276,G__G__Spectrum_106_0_2, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - numberPeaks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deramp2",651,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 11, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - y0 "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - ro d - 'Double_t' 0 - txy "
"d - 'Double_t' 0 - sxy d - 'Double_t' 0 - bx "
"d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derampx",721,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - x0 "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - tx "
"d - 'Double_t' 0 - sx d - 'Double_t' 0 - bx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derbx",501,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 10, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - txy d - 'Double_t' 0 - tx "
"d - 'Double_t' 0 - bx d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derby",502,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 10, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - txy d - 'Double_t' 0 - ty "
"d - 'Double_t' 0 - bx d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derderi01",800,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - ax "
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - sigmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derderi02",801,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - x0 "
"d - 'Double_t' 0 - y0 d - 'Double_t' 0 - sigmax "
"d - 'Double_t' 0 - sigmay d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derderj02",802,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - x0 "
"d - 'Double_t' 0 - y0 d - 'Double_t' 0 - sigmax "
"d - 'Double_t' 0 - sigmay d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derdersigmax",1247,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derdersigmay",1248,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derfc",484,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deri01",485,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - ax "
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - sigmax "
"d - 'Double_t' 0 - tx d - 'Double_t' 0 - sx "
"d - 'Double_t' 0 - bx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deri02",486,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 12, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - x0 "
"d - 'Double_t' 0 - y0 d - 'Double_t' 0 - sigmax "
"d - 'Double_t' 0 - sigmay d - 'Double_t' 0 - ro "
"d - 'Double_t' 0 - txy d - 'Double_t' 0 - sxy "
"d - 'Double_t' 0 - bx d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derj02",487,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 12, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - x0 "
"d - 'Double_t' 0 - y0 d - 'Double_t' 0 - sigmax "
"d - 'Double_t' 0 - sigmay d - 'Double_t' 0 - ro "
"d - 'Double_t' 0 - txy d - 'Double_t' 0 - sxy "
"d - 'Double_t' 0 - bx d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derpa2",542,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"d - 'Double_t' 0 - sx d - 'Double_t' 0 - sy "
"d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derpro",620,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - sx "
"d - 'Double_t' 0 - sy d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derpsigmax",1044,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - sy "
"d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derpsigmay",1045,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - sx "
"d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derro",508,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sx d - 'Double_t' 0 - sy "
"d - 'Double_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dersigmax",932,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 13, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - ro d - 'Double_t' 0 - txy "
"d - 'Double_t' 0 - sxy d - 'Double_t' 0 - tx "
"d - 'Double_t' 0 - sx d - 'Double_t' 0 - bx "
"d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dersigmay",933,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 13, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - ro d - 'Double_t' 0 - txy "
"d - 'Double_t' 0 - sxy d - 'Double_t' 0 - ty "
"d - 'Double_t' 0 - sy d - 'Double_t' 0 - bx "
"d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dersx",518,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dersxy",639,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dersy",519,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dertx",519,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigmax "
"d - 'Double_t' 0 - bx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dertxy",640,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - bx d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derty",520,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigmax "
"d - 'Double_t' 0 - bx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Erfc",384,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ourpowl",760,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - a i - 'Int_t' 0 - pw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Shape2",547,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 18, 1, 2, 0, 
"i - 'Int_t' 0 - numOfFittedPeaks d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y D - 'Double_t' 10 - parameter "
"d - 'Double_t' 0 - sigmax d - 'Double_t' 0 - sigmay "
"d - 'Double_t' 0 - ro d - 'Double_t' 0 - a0 "
"d - 'Double_t' 0 - ax d - 'Double_t' 0 - ay "
"d - 'Double_t' 0 - txy d - 'Double_t' 0 - sxy "
"d - 'Double_t' 0 - tx d - 'Double_t' 0 - ty "
"d - 'Double_t' 0 - sx d - 'Double_t' 0 - sy "
"d - 'Double_t' 0 - bx d - 'Double_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StiefelInversion",1673,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"D - 'Double_t' 2 - a i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Volume",632,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - sx "
"d - 'Double_t' 0 - sy d - 'Double_t' 0 - ro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitAwmi",689,G__G__Spectrum_106_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 2 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitStiefel",1007,G__G__Spectrum_106_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 2 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitudes",1336,G__G__Spectrum_106_0_36, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - amplitudes F - 'Float_t' 0 - amplitudesX1 "
"F - 'Float_t' 0 - amplitudesY1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitudeErrors",1858,G__G__Spectrum_106_0_37, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - amplitudeErrors F - 'Float_t' 0 - amplitudeErrorsX1 "
"F - 'Float_t' 0 - amplitudeErrorsY1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBackgroundParameters",2356,G__G__Spectrum_106_0_38, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 1 - a0 d - 'Double_t' 1 - a0Err "
"d - 'Double_t' 1 - ax d - 'Double_t' 1 - axErr "
"d - 'Double_t' 1 - ay d - 'Double_t' 1 - ayErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi",564,G__G__Spectrum_106_0_39, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositions",1256,G__G__Spectrum_106_0_40, 121, -1, -1, 0, 4, 1, 1, 0, 
"F - 'Float_t' 0 - positionsX F - 'Float_t' 0 - positionsY "
"F - 'Float_t' 0 - positionsX1 F - 'Float_t' 0 - positionsY1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionErrors",1778,G__G__Spectrum_106_0_41, 121, -1, -1, 0, 4, 1, 1, 0, 
"F - 'Float_t' 0 - positionErrorsX F - 'Float_t' 0 - positionErrorsY "
"F - 'Float_t' 0 - positionErrorsX1 F - 'Float_t' 0 - positionErrorsY1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRo",481,G__G__Spectrum_106_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 1 - ro d - 'Double_t' 1 - roErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaX",873,G__G__Spectrum_106_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 1 - sigmaX d - 'Double_t' 1 - sigmaErrX", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaY",874,G__G__Spectrum_106_0_44, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 1 - sigmaY d - 'Double_t' 1 - sigmaErrY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTailParameters",1726,G__G__Spectrum_106_0_45, 121, -1, -1, 0, 16, 1, 1, 0, 
"d - 'Double_t' 1 - txy d - 'Double_t' 1 - txyErr "
"d - 'Double_t' 1 - tx d - 'Double_t' 1 - txErr "
"d - 'Double_t' 1 - ty d - 'Double_t' 1 - tyErr "
"d - 'Double_t' 1 - bx d - 'Double_t' 1 - bxErr "
"d - 'Double_t' 1 - by d - 'Double_t' 1 - byErr "
"d - 'Double_t' 1 - sxy d - 'Double_t' 1 - sxyErr "
"d - 'Double_t' 1 - sx d - 'Double_t' 1 - sxErr "
"d - 'Double_t' 1 - sy d - 'Double_t' 1 - syErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumes",1035,G__G__Spectrum_106_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - volumes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumeErrors",1557,G__G__Spectrum_106_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - volumeErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundParameters",2368,G__G__Spectrum_106_0_48, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - a0Init g - 'Bool_t' 0 - fixA0 "
"d - 'Double_t' 0 - axInit g - 'Bool_t' 0 - fixAx "
"d - 'Double_t' 0 - ayInit g - 'Bool_t' 0 - fixAy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFitParameters",1635,G__G__Spectrum_106_0_49, 121, -1, -1, 0, 10, 1, 1, 0, 
"i - 'Int_t' 0 - xmin i - 'Int_t' 0 - xmax "
"i - 'Int_t' 0 - ymin i - 'Int_t' 0 - ymax "
"i - 'Int_t' 0 - numberIterations d - 'Double_t' 0 - alpha "
"i - 'Int_t' 0 - statisticType i - 'Int_t' 0 - alphaOptim "
"i - 'Int_t' 0 - power i - 'Int_t' 0 - fitTaylor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeakParameters",1729,G__G__Spectrum_106_0_50, 121, -1, -1, 0, 20, 1, 1, 0, 
"d - 'Double_t' 0 - sigmaX g - 'Bool_t' 0 - fixSigmaX "
"d - 'Double_t' 0 - sigmaY g - 'Bool_t' 0 - fixSigmaY "
"d - 'Double_t' 0 - ro g - 'Bool_t' 0 - fixRo "
"F - 'Float_t' 10 - positionInitX G - 'Bool_t' 10 - fixPositionX "
"F - 'Float_t' 10 - positionInitY G - 'Bool_t' 10 - fixPositionY "
"F - 'Float_t' 10 - positionInitX1 G - 'Bool_t' 10 - fixPositionX1 "
"F - 'Float_t' 10 - positionInitY1 G - 'Bool_t' 10 - fixPositionY1 "
"F - 'Float_t' 10 - ampInit G - 'Bool_t' 10 - fixAmp "
"F - 'Float_t' 10 - ampInitX1 G - 'Bool_t' 10 - fixAmpX1 "
"F - 'Float_t' 10 - ampInitY1 G - 'Bool_t' 10 - fixAmpY1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTailParameters",1738,G__G__Spectrum_106_0_51, 121, -1, -1, 0, 16, 1, 1, 0, 
"d - 'Double_t' 0 - tInitXY g - 'Bool_t' 0 - fixTxy "
"d - 'Double_t' 0 - tInitX g - 'Bool_t' 0 - fixTx "
"d - 'Double_t' 0 - tInitY g - 'Bool_t' 0 - fixTy "
"d - 'Double_t' 0 - bInitX g - 'Bool_t' 0 - fixBx "
"d - 'Double_t' 0 - bInitY g - 'Bool_t' 0 - fixBy "
"d - 'Double_t' 0 - sInitXY g - 'Bool_t' 0 - fixSxy "
"d - 'Double_t' 0 - sInitX g - 'Bool_t' 0 - fixSx "
"d - 'Double_t' 0 - sInitY g - 'Bool_t' 0 - fixSy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Spectrum_106_0_52, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpectrum2Fit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Spectrum_106_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Fit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Spectrum_106_0_54, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpectrum2Fit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Spectrum_106_0_55, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpectrum2Fit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Spectrum_106_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Spectrum_106_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Fit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Spectrum_106_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum2Fit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Spectrum_106_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Fit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Spectrum_106_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum2Fit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSpectrum2Fit", 1276, G__G__Spectrum_106_0_64, (int) ('i'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit), -1, 0, 1, 1, 1, 0, "u 'TSpectrum2Fit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSpectrum2Fit", 1402, G__G__Spectrum_106_0_65, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Spectrum_106_0_66, (int) ('u'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit), -1, 1, 1, 1, 1, 0, "u 'TSpectrum2Fit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSpectrum2(void) {
   /* TSpectrum2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2));
   G__memfunc_setup("TSpectrum2",985,G__G__Spectrum_109_0_1, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSpectrum2",985,G__G__Spectrum_109_0_2, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - maxpositions f - 'Float_t' 0 '1' resolution", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Background",1024,G__G__Spectrum_109_0_3, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TH1), -1, 0, 3, 1, 1, 0, 
"U 'TH1' - 10 - hist i - - 0 '20' niter "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistogram",1230,G__G__Spectrum_109_0_4, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TH1), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPeaks",866,G__G__Spectrum_109_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionX",1229,G__G__Spectrum_109_0_6, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionY",1230,G__G__Spectrum_109_0_7, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Search",598,G__G__Spectrum_109_0_9, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'TH1' - 10 - hist d - 'Double_t' 0 '2' sigma "
"C - 'Option_t' 10 '\"\"' option d - 'Double_t' 0 '0.05' threshold", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAverageWindow",1631,G__G__Spectrum_109_0_10, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 '3' w", "set average window", (void*) G__func2void( (void (*)(Int_t))(&TSpectrum2::SetAverageWindow) ), 0);
   G__memfunc_setup("SetDeconIterations",1847,G__G__Spectrum_109_0_11, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 '3' n", "set max number of decon iterations", (void*) G__func2void( (void (*)(Int_t))(&TSpectrum2::SetDeconIterations) ), 0);
   G__memfunc_setup("SetResolution",1376,G__G__Spectrum_109_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1' resolution", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Background",1024,G__G__Spectrum_109_0_13, 67, -1, -1, 0, 7, 1, 1, 1, 
"F - - 2 - spectrum i - 'Int_t' 0 - ssizex "
"i - 'Int_t' 0 - ssizey i - 'Int_t' 0 - numberIterationsX "
"i - 'Int_t' 0 - numberIterationsY i - 'Int_t' 0 - direction "
"i - 'Int_t' 0 - filterType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmoothMarkov",1258,G__G__Spectrum_109_0_14, 67, -1, -1, 0, 4, 1, 1, 1, 
"F - - 2 - source i - 'Int_t' 0 - ssizex "
"i - 'Int_t' 0 - ssizey i - 'Int_t' 0 - averWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deconvolution",1385,G__G__Spectrum_109_0_15, 67, -1, -1, 0, 7, 1, 1, 1, 
"F - - 2 - source F - - 2 - resp "
"i - 'Int_t' 0 - ssizex i - 'Int_t' 0 - ssizey "
"i - 'Int_t' 0 - numberIterations i - 'Int_t' 0 - numberRepetitions "
"d - 'Double_t' 0 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SearchHighRes",1280,G__G__Spectrum_109_0_16, 105, -1, G__defined_typename("Int_t"), 0, 10, 1, 1, 0, 
"F - - 2 - source F - - 2 - dest "
"i - 'Int_t' 0 - ssizex i - 'Int_t' 0 - ssizey "
"d - 'Double_t' 0 - sigma d - 'Double_t' 0 - threshold "
"g - 'Bool_t' 0 - backgroundRemove i - 'Int_t' 0 - deconIterations "
"g - 'Bool_t' 0 - markov i - 'Int_t' 0 - averWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StaticSearch",1214,G__G__Spectrum_109_0_17, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"U 'TH1' - 10 - hist d - 'Double_t' 0 '2' sigma "
"C - 'Option_t' 10 '\"goff\"' option d - 'Double_t' 0 '0.05' threshold", (char*)NULL, (void*) G__func2void( (Int_t (*)(const TH1*, Double_t, Option_t*, Double_t))(&TSpectrum2::StaticSearch) ), 0);
   G__memfunc_setup("StaticBackground",1640,G__G__Spectrum_109_0_18, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TH1), -1, 0, 3, 3, 1, 0, 
"U 'TH1' - 10 - hist i - 'Int_t' 0 '20' niter "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) G__func2void( (TH1* (*)(const TH1*, Int_t, Option_t*))(&TSpectrum2::StaticBackground) ), 0);
   G__memfunc_setup("Class",502,G__G__Spectrum_109_0_19, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpectrum2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Spectrum_109_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Spectrum_109_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpectrum2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Spectrum_109_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpectrum2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Spectrum_109_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Spectrum_109_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Spectrum_109_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Spectrum_109_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Spectrum_109_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSpectrum2", 985, G__G__Spectrum_109_0_31, (int) ('i'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2), -1, 0, 1, 1, 1, 0, "u 'TSpectrum2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSpectrum2", 1111, G__G__Spectrum_109_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Spectrum_109_0_33, (int) ('u'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2), -1, 1, 1, 1, 1, 0, "u 'TSpectrum2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSpectrum2Transform(void) {
   /* TSpectrum2Transform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform));
   G__memfunc_setup("TSpectrum2Transform",1941,G__G__Spectrum_111_0_1, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSpectrum2Transform",1941,G__G__Spectrum_111_0_2, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sizeX i - 'Int_t' 0 - sizeY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BitReverse",1019,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"F - 'Float_t' 0 - working_space i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BitReverseHaar",1399,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"F - 'Float_t' 0 - working_space i - 'Int_t' 0 - shift "
"i - 'Int_t' 0 - num i - 'Int_t' 0 - start", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FourCos2",755,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"F - 'Float_t' 2 - working_matrix F - 'Float_t' 0 - working_vector "
"i - 'Int_t' 0 - numx i - 'Int_t' 0 - numy "
"i - 'Int_t' 0 - direction i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fourier",732,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"F - 'Float_t' 0 - working_space i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - hartley i - 'Int_t' 0 - direction "
"i - 'Int_t' 0 - zt_clear", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("General2",752,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 2, 0, 
"F - 'Float_t' 2 - working_matrix F - 'Float_t' 0 - working_vector "
"i - 'Int_t' 0 - numx i - 'Int_t' 0 - numy "
"i - 'Int_t' 0 - direction i - 'Int_t' 0 - type "
"i - 'Int_t' 0 - degree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneralExe",992,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 2, 0, 
"F - 'Float_t' 0 - working_space i - 'Int_t' 0 - zt_clear "
"i - 'Int_t' 0 - num i - 'Int_t' 0 - degree "
"i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneralInv",1003,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 0, 
"F - 'Float_t' 0 - working_space i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - degree i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Haar",380,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"F - 'Float_t' 0 - working_space i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HaarWalsh2",941,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"F - 'Float_t' 2 - working_matrix F - 'Float_t' 0 - working_vector "
"i - 'Int_t' 0 - numx i - 'Int_t' 0 - numy "
"i - 'Int_t' 0 - direction i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Walsh",511,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"F - 'Float_t' 0 - working_space i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Enhance",690,G__G__Spectrum_111_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 12 - fSource F - 'Float_t' 2 - fDest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FilterZonal",1130,G__G__Spectrum_111_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 12 - fSource F - 'Float_t' 2 - fDest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDirection",1229,G__G__Spectrum_111_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnhanceCoeff",1473,G__G__Spectrum_111_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - enhanceCoeff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilterCoeff",1397,G__G__Spectrum_111_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - filterCoeff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRegion",912,G__G__Spectrum_111_0_18, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - xmin i - 'Int_t' 0 - xmax "
"i - 'Int_t' 0 - ymin i - 'Int_t' 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTransformType",1674,G__G__Spectrum_111_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - transType i - 'Int_t' 0 - degree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,G__G__Spectrum_111_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 12 - fSource F - 'Float_t' 2 - fDest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Spectrum_111_0_21, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpectrum2Transform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Spectrum_111_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Transform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Spectrum_111_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpectrum2Transform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Spectrum_111_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpectrum2Transform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Spectrum_111_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Spectrum_111_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Transform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Spectrum_111_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum2Transform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Spectrum_111_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Transform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Spectrum_111_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum2Transform::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSpectrum2Transform", 1941, G__G__Spectrum_111_0_33, (int) ('i'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform), -1, 0, 1, 1, 1, 0, "u 'TSpectrum2Transform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSpectrum2Transform", 2067, G__G__Spectrum_111_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Spectrum_111_0_35, (int) ('u'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform), -1, 1, 1, 1, 1, 0, "u 'TSpectrum2Transform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSpectrum3(void) {
   /* TSpectrum3 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3));
   G__memfunc_setup("TSpectrum3",986,G__G__Spectrum_113_0_1, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSpectrum3",986,G__G__Spectrum_113_0_2, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - maxpositions f - 'Float_t' 0 '1' resolution", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Background",1024,G__G__Spectrum_113_0_3, 67, -1, -1, 0, 3, 1, 1, 1, 
"U 'TH1' - 10 - hist i - - 0 - niter "
"C - 'Option_t' 10 '\"goff\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Background",1024,G__G__Spectrum_113_0_4, 67, -1, -1, 0, 9, 1, 1, 1, 
"F - - 3 - spectrum i - 'Int_t' 0 - ssizex "
"i - 'Int_t' 0 - ssizey i - 'Int_t' 0 - ssizez "
"i - 'Int_t' 0 - numberIterationsX i - 'Int_t' 0 - numberIterationsY "
"i - 'Int_t' 0 - numberIterationsZ i - 'Int_t' 0 - direction "
"i - 'Int_t' 0 - filterType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deconvolution",1385,G__G__Spectrum_113_0_5, 67, -1, -1, 0, 8, 1, 1, 1, 
"F - - 3 - source F - - 13 - resp "
"i - 'Int_t' 0 - ssizex i - 'Int_t' 0 - ssizey "
"i - 'Int_t' 0 - ssizez i - 'Int_t' 0 - numberIterations "
"i - 'Int_t' 0 - numberRepetitions d - 'Double_t' 0 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistogram",1230,G__G__Spectrum_113_0_6, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TH1), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPeaks",866,G__G__Spectrum_113_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionX",1229,G__G__Spectrum_113_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionY",1230,G__G__Spectrum_113_0_9, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionZ",1231,G__G__Spectrum_113_0_10, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Search",598,G__G__Spectrum_113_0_12, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'TH1' - 10 - hist d - 'Double_t' 0 '2' sigma "
"C - 'Option_t' 10 '\"goff\"' option d - 'Double_t' 0 '0.05' threshold", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SearchFast",996,G__G__Spectrum_113_0_13, 105, -1, G__defined_typename("Int_t"), 0, 9, 1, 1, 0, 
"F - - 13 - source F - - 3 - dest "
"i - 'Int_t' 0 - ssizex i - 'Int_t' 0 - ssizey "
"i - 'Int_t' 0 - ssizez d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - threshold g - 'Bool_t' 0 - markov "
"i - 'Int_t' 0 - averWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SearchHighRes",1280,G__G__Spectrum_113_0_14, 105, -1, G__defined_typename("Int_t"), 0, 11, 1, 1, 0, 
"F - - 13 - source F - - 3 - dest "
"i - 'Int_t' 0 - ssizex i - 'Int_t' 0 - ssizey "
"i - 'Int_t' 0 - ssizez d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - threshold g - 'Bool_t' 0 - backgroundRemove "
"i - 'Int_t' 0 - deconIterations g - 'Bool_t' 0 - markov "
"i - 'Int_t' 0 - averWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResolution",1376,G__G__Spectrum_113_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1' resolution", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmoothMarkov",1258,G__G__Spectrum_113_0_16, 67, -1, -1, 0, 5, 1, 1, 1, 
"F - - 3 - source i - 'Int_t' 0 - ssizex "
"i - 'Int_t' 0 - ssizey i - 'Int_t' 0 - ssizez "
"i - 'Int_t' 0 - averWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Spectrum_113_0_17, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpectrum3::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Spectrum_113_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum3::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Spectrum_113_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpectrum3::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Spectrum_113_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpectrum3::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Spectrum_113_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Spectrum_113_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum3::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Spectrum_113_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum3::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Spectrum_113_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum3::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Spectrum_113_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum3::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSpectrum3", 986, G__G__Spectrum_113_0_29, (int) ('i'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3), -1, 0, 1, 1, 1, 0, "u 'TSpectrum3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSpectrum3", 1112, G__G__Spectrum_113_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Spectrum_113_0_31, (int) ('u'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3), -1, 1, 1, 1, 1, 0, "u 'TSpectrum3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSpectrumFit(void) {
   /* TSpectrumFit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit));
   G__memfunc_setup("TSpectrumFit",1226,G__G__Spectrum_115_0_1, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit), -1, 0, 0, 1, 1, 0, "", "default constructor     ", (void*) NULL, 0);
   G__memfunc_setup("TSpectrumFit",1226,G__G__Spectrum_115_0_2, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - numberPeaks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Area",377,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - t d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dera1",429,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "d - 'Double_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dera2",430,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "d - 'Double_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deramp",601,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 0, 
"d - 'Double_t' 0 - i d - 'Double_t' 0 - i0 "
"d - 'Double_t' 0 - sigma d - 'Double_t' 0 - t "
"d - 'Double_t' 0 - s d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derb",381,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 0, 
"i - 'Int_t' 0 - num_of_fitted_peaks d - 'Double_t' 0 - i "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - t d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derderi0",751,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - i d - 'Double_t' 0 - amp "
"d - 'Double_t' 0 - i0 d - 'Double_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derdersigma",1127,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - num_of_fitted_peaks d - 'Double_t' 0 - i "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derfc",484,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deri0",436,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"d - 'Double_t' 0 - i d - 'Double_t' 0 - amp "
"d - 'Double_t' 0 - i0 d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - t d - 'Double_t' 0 - s "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derpa",492,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"d - 'Double_t' 0 - sigma d - 'Double_t' 0 - t "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derpb",493,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - t d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derpsigma",924,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - t "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derpt",511,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ders",398,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - num_of_fitted_peaks d - 'Double_t' 0 - i "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dersigma",812,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"i - 'Int_t' 0 - num_of_fitted_peaks d - 'Double_t' 0 - i "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - t d - 'Double_t' 0 - s "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dert",399,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - num_of_fitted_peaks d - 'Double_t' 0 - i "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Erfc",384,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ourpowl",760,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - a i - 'Int_t' 0 - pw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Shape",497,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 10, 1, 2, 0, 
"i - 'Int_t' 0 - num_of_fitted_peaks d - 'Double_t' 0 - i "
"D - 'Double_t' 10 - parameter d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - t d - 'Double_t' 0 - s "
"d - 'Double_t' 0 - b d - 'Double_t' 0 - a0 "
"d - 'Double_t' 0 - a1 d - 'Double_t' 0 - a2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StiefelInversion",1673,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"D - 'Double_t' 2 - a i - 'Int_t' 0 - rozmer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitAwmi",689,G__G__Spectrum_115_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitStiefel",1007,G__G__Spectrum_115_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitudes",1336,G__G__Spectrum_115_0_25, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitudesErrors",1973,G__G__Spectrum_115_0_26, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAreas",780,G__G__Spectrum_115_0_27, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAreasErrors",1417,G__G__Spectrum_115_0_28, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBackgroundParameters",2356,G__G__Spectrum_115_0_29, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 1 - a0 d - 'Double_t' 1 - a0Err "
"d - 'Double_t' 1 - a1 d - 'Double_t' 1 - a1Err "
"d - 'Double_t' 1 - a2 d - 'Double_t' 1 - a2Err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi",564,G__G__Spectrum_115_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositions",1256,G__G__Spectrum_115_0_31, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionsErrors",1893,G__G__Spectrum_115_0_32, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma",785,G__G__Spectrum_115_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 1 - sigma d - 'Double_t' 1 - sigmaErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTailParameters",1726,G__G__Spectrum_115_0_34, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 1 - t d - 'Double_t' 1 - tErr "
"d - 'Double_t' 1 - b d - 'Double_t' 1 - bErr "
"d - 'Double_t' 1 - s d - 'Double_t' 1 - sErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundParameters",2368,G__G__Spectrum_115_0_35, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - a0Init g - 'Bool_t' 0 - fixA0 "
"d - 'Double_t' 0 - a1Init g - 'Bool_t' 0 - fixA1 "
"d - 'Double_t' 0 - a2Init g - 'Bool_t' 0 - fixA2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFitParameters",1635,G__G__Spectrum_115_0_36, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - xmin i - 'Int_t' 0 - xmax "
"i - 'Int_t' 0 - numberIterations d - 'Double_t' 0 - alpha "
"i - 'Int_t' 0 - statisticType i - 'Int_t' 0 - alphaOptim "
"i - 'Int_t' 0 - power i - 'Int_t' 0 - fitTaylor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeakParameters",1729,G__G__Spectrum_115_0_37, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - sigma g - 'Bool_t' 0 - fixSigma "
"F - 'Float_t' 10 - positionInit G - 'Bool_t' 10 - fixPosition "
"F - 'Float_t' 10 - ampInit G - 'Bool_t' 10 - fixAmp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTailParameters",1738,G__G__Spectrum_115_0_38, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - tInit g - 'Bool_t' 0 - fixT "
"d - 'Double_t' 0 - bInit g - 'Bool_t' 0 - fixB "
"d - 'Double_t' 0 - sInit g - 'Bool_t' 0 - fixS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Spectrum_115_0_39, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpectrumFit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Spectrum_115_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrumFit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Spectrum_115_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpectrumFit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Spectrum_115_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpectrumFit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Spectrum_115_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Spectrum_115_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrumFit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Spectrum_115_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrumFit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Spectrum_115_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrumFit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Spectrum_115_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrumFit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSpectrumFit", 1226, G__G__Spectrum_115_0_51, (int) ('i'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit), -1, 0, 1, 1, 1, 0, "u 'TSpectrumFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSpectrumFit", 1352, G__G__Spectrum_115_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Spectrum_115_0_53, (int) ('u'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit), -1, 1, 1, 1, 1, 0, "u 'TSpectrumFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSpectrum(void) {
   /* TSpectrum */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum));
   G__memfunc_setup("TSpectrum",935,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum), -1, 0, 1, 1, 4, 0, "u 'TSpectrum' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum), -1, 1, 1, 1, 4, 0, "u 'TSpectrum' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("TSpectrum",935,G__G__Spectrum_117_0_3, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSpectrum",935,G__G__Spectrum_117_0_4, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - maxpositions f - 'Float_t' 0 '1' resolution", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Background",1024,G__G__Spectrum_117_0_5, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TH1), -1, 0, 3, 1, 1, 0, 
"U 'TH1' - 10 - hist i - 'Int_t' 0 '20' niter "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistogram",1230,G__G__Spectrum_117_0_6, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TH1), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPeaks",866,G__G__Spectrum_117_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionX",1229,G__G__Spectrum_117_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionY",1230,G__G__Spectrum_117_0_9, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Search",598,G__G__Spectrum_117_0_11, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'TH1' - 10 - hist d - 'Double_t' 0 '2' sigma "
"C - 'Option_t' 10 '\"\"' option d - 'Double_t' 0 '0.05' threshold", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAverageWindow",1631,G__G__Spectrum_117_0_12, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 '3' w", "set average window", (void*) G__func2void( (void (*)(Int_t))(&TSpectrum::SetAverageWindow) ), 0);
   G__memfunc_setup("SetDeconIterations",1847,G__G__Spectrum_117_0_13, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 '3' n", "set max number of decon iterations", (void*) G__func2void( (void (*)(Int_t))(&TSpectrum::SetDeconIterations) ), 0);
   G__memfunc_setup("SetResolution",1376,G__G__Spectrum_117_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1' resolution", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Background",1024,G__G__Spectrum_117_0_15, 67, -1, -1, 0, 8, 1, 1, 1, 
"F - - 0 - spectrum i - 'Int_t' 0 - ssize "
"i - 'Int_t' 0 - numberIterations i - 'Int_t' 0 - direction "
"i - 'Int_t' 0 - filterOrder g - - 0 - smoothing "
"i - 'Int_t' 0 - smoothWindow g - - 0 - compton", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmoothMarkov",1258,G__G__Spectrum_117_0_16, 67, -1, -1, 0, 3, 1, 1, 1, 
"F - - 0 - source i - 'Int_t' 0 - ssize "
"i - 'Int_t' 0 - averWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deconvolution",1385,G__G__Spectrum_117_0_17, 67, -1, -1, 0, 6, 1, 1, 1, 
"F - - 0 - source F - - 10 - response "
"i - 'Int_t' 0 - ssize i - 'Int_t' 0 - numberIterations "
"i - 'Int_t' 0 - numberRepetitions d - 'Double_t' 0 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeconvolutionRL",1543,G__G__Spectrum_117_0_18, 67, -1, -1, 0, 6, 1, 1, 1, 
"F - - 0 - source F - - 10 - response "
"i - 'Int_t' 0 - ssize i - 'Int_t' 0 - numberIterations "
"i - 'Int_t' 0 - numberRepetitions d - 'Double_t' 0 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unfolding",934,G__G__Spectrum_117_0_19, 67, -1, -1, 0, 7, 1, 1, 1, 
"F - - 0 - source F - - 12 - respMatrix "
"i - 'Int_t' 0 - ssizex i - 'Int_t' 0 - ssizey "
"i - 'Int_t' 0 - numberIterations i - 'Int_t' 0 - numberRepetitions "
"d - 'Double_t' 0 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SearchHighRes",1280,G__G__Spectrum_117_0_20, 105, -1, G__defined_typename("Int_t"), 0, 9, 1, 1, 0, 
"F - - 0 - source F - - 0 - destVector "
"i - 'Int_t' 0 - ssize f - - 0 - sigma "
"d - 'Double_t' 0 - threshold g - - 0 - backgroundRemove "
"i - 'Int_t' 0 - deconIterations g - - 0 - markov "
"i - 'Int_t' 0 - averWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Search1HighRes",1329,G__G__Spectrum_117_0_21, 105, -1, G__defined_typename("Int_t"), 0, 9, 1, 1, 0, 
"F - - 0 - source F - - 0 - destVector "
"i - 'Int_t' 0 - ssize f - - 0 - sigma "
"d - 'Double_t' 0 - threshold g - - 0 - backgroundRemove "
"i - 'Int_t' 0 - deconIterations g - - 0 - markov "
"i - 'Int_t' 0 - averWindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StaticSearch",1214,G__G__Spectrum_117_0_22, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"U 'TH1' - 10 - hist d - 'Double_t' 0 '2' sigma "
"C - 'Option_t' 10 '\"goff\"' option d - 'Double_t' 0 '0.05' threshold", (char*)NULL, (void*) G__func2void( (Int_t (*)(const TH1*, Double_t, Option_t*, Double_t))(&TSpectrum::StaticSearch) ), 0);
   G__memfunc_setup("StaticBackground",1640,G__G__Spectrum_117_0_23, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TH1), -1, 0, 3, 3, 1, 0, 
"U 'TH1' - 10 - hist i - 'Int_t' 0 '20' niter "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) G__func2void( (TH1* (*)(const TH1*, Int_t, Option_t*))(&TSpectrum::StaticBackground) ), 0);
   G__memfunc_setup("Class",502,G__G__Spectrum_117_0_24, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpectrum::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Spectrum_117_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Spectrum_117_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpectrum::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Spectrum_117_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpectrum::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Spectrum_117_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Spectrum_117_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Spectrum_117_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Spectrum_117_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Spectrum_117_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSpectrum", 1061, G__G__Spectrum_117_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSpectrumTransform(void) {
   /* TSpectrumTransform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform));
   G__memfunc_setup("TSpectrumTransform",1891,G__G__Spectrum_119_0_1, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSpectrumTransform",1891,G__G__Spectrum_119_0_2, 105, G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BitReverse",1019,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"F - - 0 - working_space i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BitReverseHaar",1399,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"F - - 0 - working_space i - 'Int_t' 0 - shift "
"i - 'Int_t' 0 - num i - 'Int_t' 0 - start", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fourier",732,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"F - - 0 - working_space i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - hartley i - 'Int_t' 0 - direction "
"i - 'Int_t' 0 - zt_clear", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneralExe",992,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 2, 0, 
"F - - 0 - working_space i - 'Int_t' 0 - zt_clear "
"i - 'Int_t' 0 - num i - 'Int_t' 0 - degree "
"i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneralInv",1003,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 0, 
"F - - 0 - working_space i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - degree i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Haar",380,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"F - - 0 - working_space i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Walsh",511,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"F - - 0 - working_space i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Enhance",690,G__G__Spectrum_119_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - - 10 - source F - - 0 - destVector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FilterZonal",1130,G__G__Spectrum_119_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - - 10 - source F - - 0 - destVector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDirection",1229,G__G__Spectrum_119_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnhanceCoeff",1473,G__G__Spectrum_119_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - enhanceCoeff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilterCoeff",1397,G__G__Spectrum_119_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - filterCoeff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRegion",912,G__G__Spectrum_119_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - xmin i - 'Int_t' 0 - xmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTransformType",1674,G__G__Spectrum_119_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - transType i - 'Int_t' 0 - degree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,G__G__Spectrum_119_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - - 10 - source F - - 0 - destVector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Spectrum_119_0_18, 85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpectrumTransform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Spectrum_119_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrumTransform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Spectrum_119_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpectrumTransform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Spectrum_119_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpectrumTransform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__SpectrumLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Spectrum_119_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Spectrum_119_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrumTransform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Spectrum_119_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrumTransform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Spectrum_119_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrumTransform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Spectrum_119_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrumTransform::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSpectrumTransform", 1891, G__G__Spectrum_119_0_30, (int) ('i'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform), -1, 0, 1, 1, 1, 0, "u 'TSpectrumTransform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSpectrumTransform", 2017, G__G__Spectrum_119_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Spectrum_119_0_32, (int) ('u'), G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform), -1, 1, 1, 1, 1, 0, "u 'TSpectrumTransform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Spectrum() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Spectrum() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Spectrum() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__SpectrumLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum2Fit = { "TSpectrum2Fit" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum2FitcLcLdA = { "TSpectrum2Fit::$" , 101 , -1 };
G__linked_taginfo G__G__SpectrumLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum2 = { "TSpectrum2" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum2cLcLdA = { "TSpectrum2::$" , 101 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum2Transform = { "TSpectrum2Transform" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum2TransformcLcLdA = { "TSpectrum2Transform::$" , 101 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum3 = { "TSpectrum3" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum3cLcLdA = { "TSpectrum3::$" , 101 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrumFit = { "TSpectrumFit" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrumFitcLcLdA = { "TSpectrumFit::$" , 101 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrum = { "TSpectrum" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrumcLcLdA = { "TSpectrum::$" , 101 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrumTransform = { "TSpectrumTransform" , 99 , -1 };
G__linked_taginfo G__G__SpectrumLN_TSpectrumTransformcLcLdA = { "TSpectrumTransform::$" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Spectrum() {
  G__G__SpectrumLN_TClass.tagnum = -1 ;
  G__G__SpectrumLN_TBuffer.tagnum = -1 ;
  G__G__SpectrumLN_TMemberInspector.tagnum = -1 ;
  G__G__SpectrumLN_TObject.tagnum = -1 ;
  G__G__SpectrumLN_TNamed.tagnum = -1 ;
  G__G__SpectrumLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__SpectrumLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum2Fit.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum2FitcLcLdA.tagnum = -1 ;
  G__G__SpectrumLN_TH1.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum2.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum2cLcLdA.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum2Transform.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum2TransformcLcLdA.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum3.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum3cLcLdA.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrumFit.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrumFitcLcLdA.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrum.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrumcLcLdA.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrumTransform.tagnum = -1 ;
  G__G__SpectrumLN_TSpectrumTransformcLcLdA.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Spectrum() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Fit),sizeof(TSpectrum2Fit),-1,324864,"Spectrum2 Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method)",G__setup_memvarTSpectrum2Fit,G__setup_memfuncTSpectrum2Fit);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TSpectrum2FitcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TH1);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2),sizeof(TSpectrum2),-1,324864,"Peak Finder, background estimator, Deconvolution for 2-D histograms",G__setup_memvarTSpectrum2,G__setup_memfuncTSpectrum2);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TSpectrum2cLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum2Transform),sizeof(TSpectrum2Transform),-1,324864,"Spectrum2 Transformer, it calculates classic orthogonal 2D transforms",G__setup_memvarTSpectrum2Transform,G__setup_memfuncTSpectrum2Transform);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TSpectrum2TransformcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum3),sizeof(TSpectrum3),-1,324864,"Peak Finder, Background estimator, Markov smoothing and Deconvolution for 3-D histograms",G__setup_memvarTSpectrum3,G__setup_memfuncTSpectrum3);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TSpectrum3cLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumFit),sizeof(TSpectrumFit),-1,324864,"Spectrum Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method)",G__setup_memvarTSpectrumFit,G__setup_memfuncTSpectrumFit);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TSpectrumFitcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrum),sizeof(TSpectrum),-1,327424,"Peak Finder, background estimator, Deconvolution",G__setup_memvarTSpectrum,G__setup_memfuncTSpectrum);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TSpectrumcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__SpectrumLN_TSpectrumTransform),sizeof(TSpectrumTransform),-1,324864,"Spectrum Transformer, it calculates classic orthogonal 1D transforms",G__setup_memvarTSpectrumTransform,G__setup_memfuncTSpectrumTransform);
   G__get_linked_tagnum_fwd(&G__G__SpectrumLN_TSpectrumTransformcLcLdA);
}
extern "C" void G__cpp_setupG__Spectrum(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Spectrum()");
  G__set_cpp_environmentG__Spectrum();
  G__cpp_setup_tagtableG__Spectrum();

  G__cpp_setup_inheritanceG__Spectrum();

  G__cpp_setup_typetableG__Spectrum();

  G__cpp_setup_memvarG__Spectrum();

  G__cpp_setup_memfuncG__Spectrum();
  G__cpp_setup_globalG__Spectrum();
  G__cpp_setup_funcG__Spectrum();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Spectrum();
  return;
}
class G__cpp_setup_initG__Spectrum {
  public:
    G__cpp_setup_initG__Spectrum() { G__add_setup_func("G__Spectrum",(G__incsetup)(&G__cpp_setupG__Spectrum)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Spectrum() { G__remove_setup_func("G__Spectrum"); }
};
G__cpp_setup_initG__Spectrum G__cpp_setup_initializerG__Spectrum;

