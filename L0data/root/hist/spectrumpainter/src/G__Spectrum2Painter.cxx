//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:46:52 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Spectrum2Painter.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSpectrum2Painter_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TSpectrum2Painter(void *p);
   static void deleteArray_TSpectrum2Painter(void *p);
   static void destruct_TSpectrum2Painter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpectrum2Painter*)
   {
      ::TSpectrum2Painter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpectrum2Painter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpectrum2Painter", ::TSpectrum2Painter::Class_Version(), "include/TSpectrum2Painter.h", 32,
                  typeid(::TSpectrum2Painter), DefineBehavior(ptr, ptr),
                  &::TSpectrum2Painter::Dictionary, isa_proxy, 0,
                  sizeof(::TSpectrum2Painter) );
      instance.SetDelete(&delete_TSpectrum2Painter);
      instance.SetDeleteArray(&deleteArray_TSpectrum2Painter);
      instance.SetDestructor(&destruct_TSpectrum2Painter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpectrum2Painter*)
   {
      return GenerateInitInstanceLocal((::TSpectrum2Painter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpectrum2Painter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TSpectrum2Painter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpectrum2Painter::Class_Name()
{
   return "TSpectrum2Painter";
}

//______________________________________________________________________________
const char *TSpectrum2Painter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Painter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpectrum2Painter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Painter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpectrum2Painter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Painter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpectrum2Painter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpectrum2Painter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TSpectrum2Painter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpectrum2Painter.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void TSpectrum2Painter::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSpectrum2Painter.
      TClass *R__cl = ::TSpectrum2Painter::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fH2", &fH2);
      R__insp.Inspect(R__cl, R__parent, "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__parent, "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__parent, "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__parent, "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__parent, "fZmin", &fZmin);
      R__insp.Inspect(R__cl, R__parent, "fZmax", &fZmax);
      R__insp.Inspect(R__cl, R__parent, "fBx1", &fBx1);
      R__insp.Inspect(R__cl, R__parent, "fBx2", &fBx2);
      R__insp.Inspect(R__cl, R__parent, "fBy1", &fBy1);
      R__insp.Inspect(R__cl, R__parent, "fBy2", &fBy2);
      R__insp.Inspect(R__cl, R__parent, "fPenColor", &fPenColor);
      R__insp.Inspect(R__cl, R__parent, "fPenDash", &fPenDash);
      R__insp.Inspect(R__cl, R__parent, "fPenWidth", &fPenWidth);
      R__insp.Inspect(R__cl, R__parent, "fModeGroup", &fModeGroup);
      R__insp.Inspect(R__cl, R__parent, "fDisplayMode", &fDisplayMode);
      R__insp.Inspect(R__cl, R__parent, "fZscale", &fZscale);
      R__insp.Inspect(R__cl, R__parent, "fNodesx", &fNodesx);
      R__insp.Inspect(R__cl, R__parent, "fNodesy", &fNodesy);
      R__insp.Inspect(R__cl, R__parent, "fContWidth", &fContWidth);
      R__insp.Inspect(R__cl, R__parent, "fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__parent, "fBeta", &fBeta);
      R__insp.Inspect(R__cl, R__parent, "fViewAngle", &fViewAngle);
      R__insp.Inspect(R__cl, R__parent, "fLevels", &fLevels);
      R__insp.Inspect(R__cl, R__parent, "fRainbow1Step", &fRainbow1Step);
      R__insp.Inspect(R__cl, R__parent, "fRainbow2Step", &fRainbow2Step);
      R__insp.Inspect(R__cl, R__parent, "fRainbow3Step", &fRainbow3Step);
      R__insp.Inspect(R__cl, R__parent, "fColorAlg", &fColorAlg);
      R__insp.Inspect(R__cl, R__parent, "fLHweight", &fLHweight);
      R__insp.Inspect(R__cl, R__parent, "fXlight", &fXlight);
      R__insp.Inspect(R__cl, R__parent, "fYlight", &fYlight);
      R__insp.Inspect(R__cl, R__parent, "fZlight", &fZlight);
      R__insp.Inspect(R__cl, R__parent, "fShadow", &fShadow);
      R__insp.Inspect(R__cl, R__parent, "fShading", &fShading);
      R__insp.Inspect(R__cl, R__parent, "fBezier", &fBezier);
      R__insp.Inspect(R__cl, R__parent, "fChanmarkEnDis", &fChanmarkEnDis);
      R__insp.Inspect(R__cl, R__parent, "fChanmarkStyle", &fChanmarkStyle);
      R__insp.Inspect(R__cl, R__parent, "fChanmarkWidth", &fChanmarkWidth);
      R__insp.Inspect(R__cl, R__parent, "fChanmarkHeight", &fChanmarkHeight);
      R__insp.Inspect(R__cl, R__parent, "fChanmarkColor", &fChanmarkColor);
      R__insp.Inspect(R__cl, R__parent, "fChanlineEnDis", &fChanlineEnDis);
      R__insp.Inspect(R__cl, R__parent, "fChanlineColor", &fChanlineColor);
      R__insp.Inspect(R__cl, R__parent, "fKx", &fKx);
      R__insp.Inspect(R__cl, R__parent, "fKy", &fKy);
      R__insp.Inspect(R__cl, R__parent, "fMxx", &fMxx);
      R__insp.Inspect(R__cl, R__parent, "fMxy", &fMxy);
      R__insp.Inspect(R__cl, R__parent, "fMyx", &fMyx);
      R__insp.Inspect(R__cl, R__parent, "fMyy", &fMyy);
      R__insp.Inspect(R__cl, R__parent, "fTxx", &fTxx);
      R__insp.Inspect(R__cl, R__parent, "fTxy", &fTxy);
      R__insp.Inspect(R__cl, R__parent, "fTyx", &fTyx);
      R__insp.Inspect(R__cl, R__parent, "fTyy", &fTyy);
      R__insp.Inspect(R__cl, R__parent, "fTyz", &fTyz);
      R__insp.Inspect(R__cl, R__parent, "fVx", &fVx);
      R__insp.Inspect(R__cl, R__parent, "fVy", &fVy);
      R__insp.Inspect(R__cl, R__parent, "fNuSli", &fNuSli);
      R__insp.Inspect(R__cl, R__parent, "fZ", &fZ);
      R__insp.Inspect(R__cl, R__parent, "fZeq", &fZeq);
      R__insp.Inspect(R__cl, R__parent, "fGbezx", &fGbezx);
      R__insp.Inspect(R__cl, R__parent, "fGbezy", &fGbezy);
      R__insp.Inspect(R__cl, R__parent, "fDxspline", &fDxspline);
      R__insp.Inspect(R__cl, R__parent, "fDyspline", &fDyspline);
      R__insp.Inspect(R__cl, R__parent, "fZPresetValue", &fZPresetValue);
      R__insp.Inspect(R__cl, R__parent, "fXt", &fXt);
      R__insp.Inspect(R__cl, R__parent, "fYt", &fYt);
      R__insp.Inspect(R__cl, R__parent, "fXs", &fXs);
      R__insp.Inspect(R__cl, R__parent, "fYs", &fYs);
      R__insp.Inspect(R__cl, R__parent, "fXe", &fXe);
      R__insp.Inspect(R__cl, R__parent, "fYe", &fYe);
      R__insp.Inspect(R__cl, R__parent, "fLine", &fLine);
      R__insp.Inspect(R__cl, R__parent, "*fEnvelope", &fEnvelope);
      R__insp.Inspect(R__cl, R__parent, "*fEnvelopeContour", &fEnvelopeContour);
      R__insp.Inspect(R__cl, R__parent, "*fNewColor", &fNewColor);
      R__insp.Inspect(R__cl, R__parent, "fNewColorIndex", &fNewColorIndex);
      R__insp.Inspect(R__cl, R__parent, "fBzX[4]", fBzX);
      R__insp.Inspect(R__cl, R__parent, "fBzY[4]", fBzY);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSpectrum2Painter(void *p) {
      delete ((::TSpectrum2Painter*)p);
   }
   static void deleteArray_TSpectrum2Painter(void *p) {
      delete [] ((::TSpectrum2Painter*)p);
   }
   static void destruct_TSpectrum2Painter(void *p) {
      typedef ::TSpectrum2Painter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSpectrum2Painter

/********************************************************
* hist/spectrumpainter/src/G__Spectrum2Painter.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Spectrum2Painter();

extern "C" void G__set_cpp_environmentG__Spectrum2Painter() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TSpectrum2Painter.h");
  G__cpp_reset_tagtableG__Spectrum2Painter();
}
#include <new>
extern "C" int G__cpp_dllrevG__Spectrum2Painter() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSpectrum2Painter */
static int G__G__Spectrum2Painter_109_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2Painter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSpectrum2Painter((TH2*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSpectrum2Painter((TH2*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetAngles(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetBezier(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetChanGrid(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetChanMarks(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetColorAlgorithm(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetColorIncrements(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetContourWidth(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetDisplayMode(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetLightHeightWeight(*(Double_t*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetLightPosition(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetNodes(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetPenAttr(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetShading(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->GetZScale(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetAngles((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetBezier((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetChanGrid((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetChanMarks((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetColorAlgorithm((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetColorIncrements((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetContourWidth((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetDisplayMode((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetLightHeightWeight((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetLightPosition((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetNodes((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetPenAttr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetShading((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->SetZScale((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      TSpectrum2Painter::PaintSpectrum((TH2*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      TSpectrum2Painter::PaintSpectrum((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpectrum2Painter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Painter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpectrum2Painter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpectrum2Painter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpectrum2Painter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Painter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum2Painter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpectrum2Painter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Spectrum2Painter_109_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpectrum2Painter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Spectrum2Painter_109_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSpectrum2Painter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSpectrum2Painter(*(TSpectrum2Painter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpectrum2Painter G__TTSpectrum2Painter;
static int G__G__Spectrum2Painter_109_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpectrum2Painter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpectrum2Painter*) (soff+(sizeof(TSpectrum2Painter)*i)))->~G__TTSpectrum2Painter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpectrum2Painter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpectrum2Painter*) (soff))->~G__TTSpectrum2Painter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Spectrum2Painter_109_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpectrum2Painter* dest = (TSpectrum2Painter*) G__getstructoffset();
   *dest = *(TSpectrum2Painter*) libp->para[0].ref;
   const TSpectrum2Painter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSpectrum2Painter */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Spectrum2Painter {
 public:
  G__Sizep2memfuncG__Spectrum2Painter(): p(&G__Sizep2memfuncG__Spectrum2Painter::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Spectrum2Painter::*p)();
};

size_t G__get_sizep2memfuncG__Spectrum2Painter()
{
  G__Sizep2memfuncG__Spectrum2Painter a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Spectrum2Painter() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter))) {
     TSpectrum2Painter *G__Lderived;
     G__Lderived=(TSpectrum2Painter*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter),G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter),G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Spectrum2Painter() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSpectrum2Painter */
static void G__setup_memvarTSpectrum2Painter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter));
   { TSpectrum2Painter *p; p=(TSpectrum2Painter*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kModeGroupSimple=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kModeGroupHeight=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kModeGroupLight=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kModeGroupLightHeight=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModePoints=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeGrid=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeContours=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeBars=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeLinesX=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeLinesY=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeBarsX=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeBarsY=8",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeNeedles=9",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeSurface=10",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kDisplayModeTriangles=11",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kZScaleLinear=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kZScaleLog=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kZScaleSqrt=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgRgbSmooth=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgRgbModulo=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgCmySmooth=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgCmyModulo=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgCieSmooth=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgCieModulo=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgYiqSmooth=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgYiqModulo=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgHvsSmooth=8",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kColorAlgHvsModulo=9",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kShadowsNotPainted=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kShadowsPainted=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kNotShaded=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kShaded=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kNoBezierInterpol=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kBezierInterpol=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kPenStyleSolid=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kPenStyleDash=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kPenStyleDot=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kPenStyleDashDot=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksNotDrawn=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksDrawn=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksStyleDot=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksStyleCross=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksStyleStar=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksStyleRectangle=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksStyleX=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksStyleDiamond=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelMarksStyleTriangle=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelGridNotDrawn=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kChannelGridDrawn=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA),-1,-2,1,"kMaximumXScreenResolution=1600",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TH2),-1,-1,2,"fH2=",0,"pointer to 2D histogram TH2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmin=",0,"x-starting channel of spectrum");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXmax=",0,"x-end channel of spectrum");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYmin=",0,"y-starting channel of spectrum");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYmax=",0,"y-end channel of spectrum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZmin=",0,"base counts");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZmax=",0,"counts full scale");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBx1=",0,"positon of picture on Canvas, min x");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBx2=",0,"positon of picture on Canvas, max x");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBy1=",0,"positon of picture on Canvas, min y");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBy2=",0,"positon of picture on Canvas, max y");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPenColor=",0,"color of spectrum");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPenDash=",0,"style of pen");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPenWidth=",0,"width of line");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fModeGroup=",0,"display mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDisplayMode=",0,"spectrum display mode (points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fZscale=",0,"z scale (linear, log, sqrt)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNodesx=",0,"number of nodes in x dimension of grid");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNodesy=",0,"number of nodes in y dimension of grid");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fContWidth=",0,"width between contours, applies only for contours display mode");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAlpha=",0,"angles of display,alfa+beta must be less or equal to 90, alpha- angle between base line of Canvas and right lower edge of picture base plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBeta=",0,"angle between base line of Canvas and left lower edge of picture base plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fViewAngle=",0,"rotation angle of the view, it can be 0, 90, 180, 270 degrees");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLevels=",0,"# of color levels for rainbowed display modes, it does not apply for simple display modes algorithm group");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRainbow1Step=",0,"determines the first component  step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRainbow2Step=",0,"determines the second component  step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRainbow3Step=",0,"determines the third component  step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fColorAlg=",0,"applies only for rainbowed display modes (rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm, cmy modulo color component, cie smooth alorithm, cie modulo color component, yiq smooth alorithm, yiq modulo color component, hsv smooth alorithm, hsv modulo color component, it does not apply for simple display modes algorithm group");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLHweight=",0,"weight between shading according to fictive light source and according to channels counts, applies only for kModeGroupLightHeight modes group");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXlight=",0,"x position of fictive light source, applies only for rainbowed display modes with shading according to light");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYlight=",0,"y position of fictive light source, applies only for rainbowed display modes with shading according to light");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fZlight=",0,"z position of fictive light source, applies only for rainbowed display modes with shading according to light");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fShadow=",0,"determines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fShading=",0,"determines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBezier=",0,"determines Bezier interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChanmarkEnDis=",0,"decides whether the channel marks are shown");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChanmarkStyle=",0,"style of channel marks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChanmarkWidth=",0,"width of channel marks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChanmarkHeight=",0,"height of channel marks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChanmarkColor=",0,"color of channel marks  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChanlineEnDis=",0,"decides whether the channel lines (grid) are shown");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChanlineColor=",0,"color of channel lines (grid)  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fKx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fKy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMxx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMxy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMyx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMyy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTxx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTxy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTyx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTyy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTyz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fNuSli=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZeq=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fGbezx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fGbezy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDxspline=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDyspline=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZPresetValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXt=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYt=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXs=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYs=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXe=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYe=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLine=",0,(char*)NULL);
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"fEnvelope=",0,"!");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"fEnvelopeContour=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TColor),-1,-1,2,"fNewColor=",0,"!  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNewColorIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBzX[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBzY[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Spectrum2Painter() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSpectrum2Painter(void) {
   /* TSpectrum2Painter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter));
   G__memfunc_setup("TSpectrum2Painter",1708,G__G__Spectrum2Painter_109_0_1, 105, G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter), -1, 0, 1, 1, 1, 0, "U 'TH2' - 0 - h2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngles",890,G__G__Spectrum2Painter_109_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - alpha i - 'Int_t' 1 - beta "
"i - 'Int_t' 1 - view", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBezier",897,G__G__Spectrum2Painter_109_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - bezier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChanGrid",1056,G__G__Spectrum2Painter_109_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - enable i - 'Int_t' 1 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChanMarks",1176,G__G__Spectrum2Painter_109_0_5, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 1 - enable i - 'Int_t' 1 - color "
"i - 'Int_t' 1 - width i - 'Int_t' 1 - height "
"i - 'Int_t' 1 - style", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColorAlgorithm",1734,G__G__Spectrum2Painter_109_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - colorAlgorithm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColorIncrements",1847,G__G__Spectrum2Painter_109_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 1 - r d - 'Double_t' 1 - g "
"d - 'Double_t' 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContourWidth",1546,G__G__Spectrum2Painter_109_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDisplayMode",1403,G__G__Spectrum2Painter_109_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - modeGroup i - 'Int_t' 1 - displayMode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightHeightWeight",2009,G__G__Spectrum2Painter_109_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 1 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightPosition",1645,G__G__Spectrum2Painter_109_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - x i - 'Int_t' 1 - y "
"i - 'Int_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNodes",793,G__G__Spectrum2Painter_109_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - nodesx i - 'Int_t' 1 - nodesy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPenAttr",990,G__G__Spectrum2Painter_109_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - color i - 'Int_t' 1 - style "
"i - 'Int_t' 1 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShading",990,G__G__Spectrum2Painter_109_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - shading i - 'Int_t' 1 - shadow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZScale",866,G__G__Spectrum2Painter_109_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAngles",902,G__G__Spectrum2Painter_109_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - alpha i - 'Int_t' 0 - beta "
"i - 'Int_t' 0 - view", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBezier",909,G__G__Spectrum2Painter_109_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bezier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChanGrid",1068,G__G__Spectrum2Painter_109_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - enable i - 'Int_t' 0 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChanMarks",1188,G__G__Spectrum2Painter_109_0_20, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - enable i - 'Int_t' 0 - color "
"i - 'Int_t' 0 - width i - 'Int_t' 0 - height "
"i - 'Int_t' 0 - style", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColorAlgorithm",1746,G__G__Spectrum2Painter_109_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - colorAlgorithm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColorIncrements",1859,G__G__Spectrum2Painter_109_0_22, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - r d - 'Double_t' 0 - g "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetContourWidth",1558,G__G__Spectrum2Painter_109_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDisplayMode",1415,G__G__Spectrum2Painter_109_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - modeGroup i - 'Int_t' 0 - displayMode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLightHeightWeight",2021,G__G__Spectrum2Painter_109_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLightPosition",1657,G__G__Spectrum2Painter_109_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNodes",805,G__G__Spectrum2Painter_109_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nodesx i - 'Int_t' 0 - nodesy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPenAttr",1002,G__G__Spectrum2Painter_109_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - color i - 'Int_t' 0 - style "
"i - 'Int_t' 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShading",1002,G__G__Spectrum2Painter_109_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - shading i - 'Int_t' 0 - shadow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZScale",878,G__G__Spectrum2Painter_109_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintSpectrum",1359,G__G__Spectrum2Painter_109_0_31, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH2' - 0 - h2 C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, Option_t*))(&TSpectrum2Painter::PaintSpectrum) ), 0);
   G__memfunc_setup("BezC",356,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BezierBlend",1094,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - bezf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BezierSmoothing",1561,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - bezf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ColorCalculation",1646,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 9, 1, 2, 0, 
"d - 'Double_t' 0 - dx1 d - 'Double_t' 0 - dy1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - dx2 "
"d - 'Double_t' 0 - dy2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 0 - dx3 d - 'Double_t' 0 - dy3 "
"d - 'Double_t' 0 - z3", "calculation of new color", (void*) NULL, 0);
   G__memfunc_setup("ColorModel",1008,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"h - - 0 - - h - - 0 - - "
"h - - 0 - - h - - 0 - -", "calculation of color according to chosen algorithm   ", (void*) NULL, 0);
   G__memfunc_setup("CopyEnvelope",1241,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - xr d - 'Double_t' 0 - xs "
"d - 'Double_t' 0 - yr d - 'Double_t' 0 - ys", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawMarker",1008,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - w i - 'Int_t' 0 - h "
"i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Envelope",830,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - x1 i - 'Int_t' 0 - y1 "
"i - 'Int_t' 0 - x2 i - 'Int_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnvelopeBars",1222,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - x1 i - 'Int_t' 0 - y1 "
"i - 'Int_t' 0 - x2 i - 'Int_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShadowColorCalculation",2260,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - xtaz d - 'Double_t' 0 - ytaz "
"d - 'Double_t' 0 - ztaz d - 'Double_t' 0 - shad_noise", "shadow color", (void*) NULL, 0);
   G__memfunc_setup("Slice",496,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"d - 'Double_t' 0 - xr d - 'Double_t' 0 - yr "
"d - 'Double_t' 0 - xs d - 'Double_t' 0 - ys "
"U 'TLine' - 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - it i - 'Int_t' 0 - jt "
"i - 'Int_t' 0 - zmt", "transform function", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Spectrum2Painter_109_0_44, 85, G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpectrum2Painter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Spectrum2Painter_109_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Painter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Spectrum2Painter_109_0_46, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpectrum2Painter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Spectrum2Painter_109_0_47, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpectrum2Painter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Spectrum2Painter_109_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Spectrum2Painter_109_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Painter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Spectrum2Painter_109_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum2Painter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Spectrum2Painter_109_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpectrum2Painter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Spectrum2Painter_109_0_55, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpectrum2Painter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSpectrum2Painter", 1708, G__G__Spectrum2Painter_109_0_56, (int) ('i'), G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter), -1, 0, 1, 1, 1, 0, "u 'TSpectrum2Painter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSpectrum2Painter", 1834, G__G__Spectrum2Painter_109_0_57, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Spectrum2Painter_109_0_58, (int) ('u'), G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter), -1, 1, 1, 1, 1, 0, "u 'TSpectrum2Painter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Spectrum2Painter() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Spectrum2Painter() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Spectrum2Painter() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__Spectrum2PainterLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TLine = { "TLine" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TColor = { "TColor" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TSpectrum2Painter = { "TSpectrum2Painter" , 99 , -1 };
G__linked_taginfo G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA = { "TSpectrum2Painter::$" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Spectrum2Painter() {
  G__G__Spectrum2PainterLN_TClass.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TBuffer.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TMemberInspector.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TObject.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TNamed.tagnum = -1 ;
  G__G__Spectrum2PainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__Spectrum2PainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TH2.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TLine.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TColor.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TSpectrum2Painter.tagnum = -1 ;
  G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Spectrum2Painter() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TH2);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TLine);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TColor);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__Spectrum2PainterLN_TSpectrum2Painter),sizeof(TSpectrum2Painter),-1,62464,"TSpectrum 3d graphics package",G__setup_memvarTSpectrum2Painter,G__setup_memfuncTSpectrum2Painter);
   G__get_linked_tagnum_fwd(&G__G__Spectrum2PainterLN_TSpectrum2PaintercLcLdA);
}
extern "C" void G__cpp_setupG__Spectrum2Painter(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Spectrum2Painter()");
  G__set_cpp_environmentG__Spectrum2Painter();
  G__cpp_setup_tagtableG__Spectrum2Painter();

  G__cpp_setup_inheritanceG__Spectrum2Painter();

  G__cpp_setup_typetableG__Spectrum2Painter();

  G__cpp_setup_memvarG__Spectrum2Painter();

  G__cpp_setup_memfuncG__Spectrum2Painter();
  G__cpp_setup_globalG__Spectrum2Painter();
  G__cpp_setup_funcG__Spectrum2Painter();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Spectrum2Painter();
  return;
}
class G__cpp_setup_initG__Spectrum2Painter {
  public:
    G__cpp_setup_initG__Spectrum2Painter() { G__add_setup_func("G__Spectrum2Painter",(G__incsetup)(&G__cpp_setupG__Spectrum2Painter)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Spectrum2Painter() { G__remove_setup_func("G__Spectrum2Painter"); }
};
G__cpp_setup_initG__Spectrum2Painter G__cpp_setup_initializerG__Spectrum2Painter;

