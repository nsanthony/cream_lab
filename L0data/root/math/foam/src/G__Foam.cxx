//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:46:09 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Foam.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TFoamVect_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TFoamVect(void *p = 0);
   static void *newArray_TFoamVect(Long_t size, void *p);
   static void delete_TFoamVect(void *p);
   static void deleteArray_TFoamVect(void *p);
   static void destruct_TFoamVect(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TFoamVect*)
   {
      ::TFoamVect *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TFoamVect >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TFoamVect", ::TFoamVect::Class_Version(), "include/TFoamVect.h", 20,
                  typeid(::TFoamVect), DefineBehavior(ptr, ptr),
                  &::TFoamVect::Dictionary, isa_proxy, 4,
                  sizeof(::TFoamVect) );
      instance.SetNew(&new_TFoamVect);
      instance.SetNewArray(&newArray_TFoamVect);
      instance.SetDelete(&delete_TFoamVect);
      instance.SetDeleteArray(&deleteArray_TFoamVect);
      instance.SetDestructor(&destruct_TFoamVect);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TFoamVect*)
   {
      return GenerateInitInstanceLocal((::TFoamVect*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TFoamVect*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TFoamCell_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TFoamCell(void *p = 0);
   static void *newArray_TFoamCell(Long_t size, void *p);
   static void delete_TFoamCell(void *p);
   static void deleteArray_TFoamCell(void *p);
   static void destruct_TFoamCell(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TFoamCell*)
   {
      ::TFoamCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TFoamCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TFoamCell", ::TFoamCell::Class_Version(), "include/TFoamCell.h", 22,
                  typeid(::TFoamCell), DefineBehavior(ptr, ptr),
                  &::TFoamCell::Dictionary, isa_proxy, 4,
                  sizeof(::TFoamCell) );
      instance.SetNew(&new_TFoamCell);
      instance.SetNewArray(&newArray_TFoamCell);
      instance.SetDelete(&delete_TFoamCell);
      instance.SetDeleteArray(&deleteArray_TFoamCell);
      instance.SetDestructor(&destruct_TFoamCell);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TFoamCell*)
   {
      return GenerateInitInstanceLocal((::TFoamCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TFoamCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TFoamIntegrand_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TFoamIntegrand(void *p);
   static void deleteArray_TFoamIntegrand(void *p);
   static void destruct_TFoamIntegrand(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TFoamIntegrand*)
   {
      ::TFoamIntegrand *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TFoamIntegrand >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TFoamIntegrand", ::TFoamIntegrand::Class_Version(), "include/TFoamIntegrand.h", 16,
                  typeid(::TFoamIntegrand), DefineBehavior(ptr, ptr),
                  &::TFoamIntegrand::Dictionary, isa_proxy, 4,
                  sizeof(::TFoamIntegrand) );
      instance.SetDelete(&delete_TFoamIntegrand);
      instance.SetDeleteArray(&deleteArray_TFoamIntegrand);
      instance.SetDestructor(&destruct_TFoamIntegrand);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TFoamIntegrand*)
   {
      return GenerateInitInstanceLocal((::TFoamIntegrand*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TFoamIntegrand*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TFoamMaxwt_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TFoamMaxwt(void *p = 0);
   static void *newArray_TFoamMaxwt(Long_t size, void *p);
   static void delete_TFoamMaxwt(void *p);
   static void deleteArray_TFoamMaxwt(void *p);
   static void destruct_TFoamMaxwt(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TFoamMaxwt*)
   {
      ::TFoamMaxwt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TFoamMaxwt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TFoamMaxwt", ::TFoamMaxwt::Class_Version(), "include/TFoamMaxwt.h", 20,
                  typeid(::TFoamMaxwt), DefineBehavior(ptr, ptr),
                  &::TFoamMaxwt::Dictionary, isa_proxy, 4,
                  sizeof(::TFoamMaxwt) );
      instance.SetNew(&new_TFoamMaxwt);
      instance.SetNewArray(&newArray_TFoamMaxwt);
      instance.SetDelete(&delete_TFoamMaxwt);
      instance.SetDeleteArray(&deleteArray_TFoamMaxwt);
      instance.SetDestructor(&destruct_TFoamMaxwt);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TFoamMaxwt*)
   {
      return GenerateInitInstanceLocal((::TFoamMaxwt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TFoamMaxwt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TFoam_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TFoam(void *p = 0);
   static void *newArray_TFoam(Long_t size, void *p);
   static void delete_TFoam(void *p);
   static void deleteArray_TFoam(void *p);
   static void destruct_TFoam(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TFoam*)
   {
      ::TFoam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TFoam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TFoam", ::TFoam::Class_Version(), "include/TFoam.h", 29,
                  typeid(::TFoam), DefineBehavior(ptr, ptr),
                  &::TFoam::Dictionary, isa_proxy, 4,
                  sizeof(::TFoam) );
      instance.SetNew(&new_TFoam);
      instance.SetNewArray(&newArray_TFoam);
      instance.SetDelete(&delete_TFoam);
      instance.SetDeleteArray(&deleteArray_TFoam);
      instance.SetDestructor(&destruct_TFoam);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TFoam*)
   {
      return GenerateInitInstanceLocal((::TFoam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TFoam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TFoamVect::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoamVect::Class_Name()
{
   return "TFoamVect";
}

//______________________________________________________________________________
const char *TFoamVect::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoamVect*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoamVect::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoamVect*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoamVect::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoamVect*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoamVect::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoamVect*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TFoamCell::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoamCell::Class_Name()
{
   return "TFoamCell";
}

//______________________________________________________________________________
const char *TFoamCell::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoamCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoamCell::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoamCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoamCell::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoamCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoamCell::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoamCell*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TFoamIntegrand::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoamIntegrand::Class_Name()
{
   return "TFoamIntegrand";
}

//______________________________________________________________________________
const char *TFoamIntegrand::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoamIntegrand*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoamIntegrand::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoamIntegrand*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoamIntegrand::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoamIntegrand*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoamIntegrand::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoamIntegrand*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TFoamMaxwt::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoamMaxwt::Class_Name()
{
   return "TFoamMaxwt";
}

//______________________________________________________________________________
const char *TFoamMaxwt::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoamMaxwt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoamMaxwt::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoamMaxwt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoamMaxwt::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoamMaxwt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoamMaxwt::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoamMaxwt*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TFoam::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoam::Class_Name()
{
   return "TFoam";
}

//______________________________________________________________________________
const char *TFoam::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoam::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TFoam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoam::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoam::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TFoam*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TFoamIntegrand::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoamIntegrand.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TFoamIntegrand::Class(),this);
   } else {
      R__b.WriteClassBuffer(TFoamIntegrand::Class(),this);
   }
}

//______________________________________________________________________________
void TFoamIntegrand::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoamIntegrand.
      TClass *R__cl = ::TFoamIntegrand::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TFoamIntegrand(void *p) {
      delete ((::TFoamIntegrand*)p);
   }
   static void deleteArray_TFoamIntegrand(void *p) {
      delete [] ((::TFoamIntegrand*)p);
   }
   static void destruct_TFoamIntegrand(void *p) {
      typedef ::TFoamIntegrand current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoamIntegrand

//______________________________________________________________________________
void TFoamMaxwt::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoamMaxwt.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TFoamMaxwt::Class(),this);
   } else {
      R__b.WriteClassBuffer(TFoamMaxwt::Class(),this);
   }
}

//______________________________________________________________________________
void TFoamMaxwt::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoamMaxwt.
      TClass *R__cl = ::TFoamMaxwt::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNent", &fNent);
      R__insp.Inspect(R__cl, R__parent, "fnBin", &fnBin);
      R__insp.Inspect(R__cl, R__parent, "fwmax", &fwmax);
      R__insp.Inspect(R__cl, R__parent, "*fWtHst1", &fWtHst1);
      R__insp.Inspect(R__cl, R__parent, "*fWtHst2", &fWtHst2);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TFoamMaxwt(void *p) {
      return  p ? new(p) ::TFoamMaxwt : new ::TFoamMaxwt;
   }
   static void *newArray_TFoamMaxwt(Long_t nElements, void *p) {
      return p ? new(p) ::TFoamMaxwt[nElements] : new ::TFoamMaxwt[nElements];
   }
   // Wrapper around operator delete
   static void delete_TFoamMaxwt(void *p) {
      delete ((::TFoamMaxwt*)p);
   }
   static void deleteArray_TFoamMaxwt(void *p) {
      delete [] ((::TFoamMaxwt*)p);
   }
   static void destruct_TFoamMaxwt(void *p) {
      typedef ::TFoamMaxwt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoamMaxwt

//______________________________________________________________________________
void TFoamVect::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoamVect.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TFoamVect::Class(),this);
   } else {
      R__b.WriteClassBuffer(TFoamVect::Class(),this);
   }
}

//______________________________________________________________________________
void TFoamVect::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoamVect.
      TClass *R__cl = ::TFoamVect::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "*fCoords", &fCoords);
      R__insp.Inspect(R__cl, R__parent, "*fNext", &fNext);
      R__insp.Inspect(R__cl, R__parent, "*fPrev", &fPrev);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TFoamVect(void *p) {
      return  p ? new(p) ::TFoamVect : new ::TFoamVect;
   }
   static void *newArray_TFoamVect(Long_t nElements, void *p) {
      return p ? new(p) ::TFoamVect[nElements] : new ::TFoamVect[nElements];
   }
   // Wrapper around operator delete
   static void delete_TFoamVect(void *p) {
      delete ((::TFoamVect*)p);
   }
   static void deleteArray_TFoamVect(void *p) {
      delete [] ((::TFoamVect*)p);
   }
   static void destruct_TFoamVect(void *p) {
      typedef ::TFoamVect current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoamVect

//______________________________________________________________________________
void TFoamCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoamCell.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TFoamCell::Class(),this);
   } else {
      R__b.WriteClassBuffer(TFoamCell::Class(),this);
   }
}

//______________________________________________________________________________
void TFoamCell::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoamCell.
      TClass *R__cl = ::TFoamCell::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "fSerial", &fSerial);
      R__insp.Inspect(R__cl, R__parent, "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__parent, "fParent", &fParent);
      fParent.ShowMembers(R__insp, strcat(R__parent,"fParent.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDaught0", &fDaught0);
      fDaught0.ShowMembers(R__insp, strcat(R__parent,"fDaught0.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDaught1", &fDaught1);
      fDaught1.ShowMembers(R__insp, strcat(R__parent,"fDaught1.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fXdiv", &fXdiv);
      R__insp.Inspect(R__cl, R__parent, "fBest", &fBest);
      R__insp.Inspect(R__cl, R__parent, "fVolume", &fVolume);
      R__insp.Inspect(R__cl, R__parent, "fIntegral", &fIntegral);
      R__insp.Inspect(R__cl, R__parent, "fDrive", &fDrive);
      R__insp.Inspect(R__cl, R__parent, "fPrimary", &fPrimary);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TFoamCell(void *p) {
      return  p ? new(p) ::TFoamCell : new ::TFoamCell;
   }
   static void *newArray_TFoamCell(Long_t nElements, void *p) {
      return p ? new(p) ::TFoamCell[nElements] : new ::TFoamCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_TFoamCell(void *p) {
      delete ((::TFoamCell*)p);
   }
   static void deleteArray_TFoamCell(void *p) {
      delete [] ((::TFoamCell*)p);
   }
   static void destruct_TFoamCell(void *p) {
      typedef ::TFoamCell current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoamCell

//______________________________________________________________________________
void TFoam::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TFoam::Class(),this);
   } else {
      R__b.WriteClassBuffer(TFoam::Class(),this);
   }
}

//______________________________________________________________________________
void TFoam::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoam.
      TClass *R__cl = ::TFoam::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fName", &fName);
      fName.ShowMembers(R__insp, strcat(R__parent,"fName.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fVersion", &fVersion);
      fVersion.ShowMembers(R__insp, strcat(R__parent,"fVersion.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDate", &fDate);
      fDate.ShowMembers(R__insp, strcat(R__parent,"fDate.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "fNCells", &fNCells);
      R__insp.Inspect(R__cl, R__parent, "fRNmax", &fRNmax);
      R__insp.Inspect(R__cl, R__parent, "fOptDrive", &fOptDrive);
      R__insp.Inspect(R__cl, R__parent, "fChat", &fChat);
      R__insp.Inspect(R__cl, R__parent, "fOptRej", &fOptRej);
      R__insp.Inspect(R__cl, R__parent, "fNBin", &fNBin);
      R__insp.Inspect(R__cl, R__parent, "fNSampl", &fNSampl);
      R__insp.Inspect(R__cl, R__parent, "fEvPerBin", &fEvPerBin);
      R__insp.Inspect(R__cl, R__parent, "*fMaskDiv", &fMaskDiv);
      R__insp.Inspect(R__cl, R__parent, "*fInhiDiv", &fInhiDiv);
      R__insp.Inspect(R__cl, R__parent, "fOptPRD", &fOptPRD);
      R__insp.Inspect(R__cl, R__parent, "*fXdivPRD", &fXdivPRD);
      R__insp.Inspect(R__cl, R__parent, "fNoAct", &fNoAct);
      R__insp.Inspect(R__cl, R__parent, "fLastCe", &fLastCe);
      R__insp.Inspect(R__cl, R__parent, "*fCells", &fCells);
      R__insp.Inspect(R__cl, R__parent, "*fMCMonit", &fMCMonit);
      R__insp.Inspect(R__cl, R__parent, "fMaxWtRej", &fMaxWtRej);
      R__insp.Inspect(R__cl, R__parent, "*fCellsAct", &fCellsAct);
      R__insp.Inspect(R__cl, R__parent, "*fPrimAcu", &fPrimAcu);
      R__insp.Inspect(R__cl, R__parent, "*fHistEdg", &fHistEdg);
      R__insp.Inspect(R__cl, R__parent, "*fHistDbg", &fHistDbg);
      R__insp.Inspect(R__cl, R__parent, "*fHistWt", &fHistWt);
      R__insp.Inspect(R__cl, R__parent, "*fMCvect", &fMCvect);
      R__insp.Inspect(R__cl, R__parent, "fMCwt", &fMCwt);
      R__insp.Inspect(R__cl, R__parent, "*fRvec", &fRvec);
      R__insp.Inspect(R__cl, R__parent, "*fRho", &fRho);
      R__insp.Inspect(R__cl, R__parent, "*fMethodCall", &fMethodCall);
      R__insp.Inspect(R__cl, R__parent, "*fPseRan", &fPseRan);
      R__insp.Inspect(R__cl, R__parent, "fNCalls", &fNCalls);
      R__insp.Inspect(R__cl, R__parent, "fNEffev", &fNEffev);
      R__insp.Inspect(R__cl, R__parent, "fSumWt", &fSumWt);
      R__insp.Inspect(R__cl, R__parent, "fSumWt2", &fSumWt2);
      R__insp.Inspect(R__cl, R__parent, "fSumOve", &fSumOve);
      R__insp.Inspect(R__cl, R__parent, "fNevGen", &fNevGen);
      R__insp.Inspect(R__cl, R__parent, "fWtMax", &fWtMax);
      R__insp.Inspect(R__cl, R__parent, "fWtMin", &fWtMin);
      R__insp.Inspect(R__cl, R__parent, "fPrime", &fPrime);
      R__insp.Inspect(R__cl, R__parent, "fMCresult", &fMCresult);
      R__insp.Inspect(R__cl, R__parent, "fMCerror", &fMCerror);
      R__insp.Inspect(R__cl, R__parent, "*fAlpha", &fAlpha);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TFoam(void *p) {
      return  p ? new(p) ::TFoam : new ::TFoam;
   }
   static void *newArray_TFoam(Long_t nElements, void *p) {
      return p ? new(p) ::TFoam[nElements] : new ::TFoam[nElements];
   }
   // Wrapper around operator delete
   static void delete_TFoam(void *p) {
      delete ((::TFoam*)p);
   }
   static void deleteArray_TFoam(void *p) {
      delete [] ((::TFoam*)p);
   }
   static void destruct_TFoam(void *p) {
      typedef ::TFoam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoam

/********************************************************
* math/foam/src/G__Foam.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Foam();

extern "C" void G__set_cpp_environmentG__Foam() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TFoamCell.h");
  G__add_compiledheader("TFoam.h");
  G__add_compiledheader("TFoamIntegrand.h");
  G__add_compiledheader("TFoamMaxwt.h");
  G__add_compiledheader("TFoamVect.h");
  G__cpp_reset_tagtableG__Foam();
}
#include <new>
extern "C" int G__cpp_dllrevG__Foam() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TFoamVect */
static int G__G__Foam_99_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamVect* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TFoamVect[n];
     } else {
       p = new((void*) gvp) TFoamVect[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TFoamVect;
     } else {
       p = new((void*) gvp) TFoamVect;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamVect* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TFoamVect((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TFoamVect((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamVect* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TFoamVect(*(TFoamVect*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TFoamVect(*(TFoamVect*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TFoamVect& obj = ((TFoamVect*) G__getstructoffset())->operator=(*(TFoamVect*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((TFoamVect*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TFoamVect& obj = ((TFoamVect*) G__getstructoffset())->operator=((Double_t*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TFoamVect& obj = ((TFoamVect*) G__getstructoffset())->operator=((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TFoamVect& obj = ((TFoamVect*) G__getstructoffset())->operator+=(*(TFoamVect*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TFoamVect& obj = ((TFoamVect*) G__getstructoffset())->operator-=(*(TFoamVect*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TFoamVect& obj = ((TFoamVect*) G__getstructoffset())->operator*=(*(Double_t*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TFoamVect* pobj;
         TFoamVect xobj = ((TFoamVect*) G__getstructoffset())->operator+(*(TFoamVect*) libp->para[0].ref);
         pobj = new TFoamVect(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TFoamVect* pobj;
         TFoamVect xobj = ((TFoamVect*) G__getstructoffset())->operator-(*(TFoamVect*) libp->para[0].ref);
         pobj = new TFoamVect(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamVect*) G__getstructoffset())->PrintList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TFoamVect*) G__getstructoffset())->GetDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TFoamVect*) G__getstructoffset())->GetCoord((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TFoamVect::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamVect::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TFoamVect::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TFoamVect::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamVect*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamVect::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoamVect::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamVect::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_99_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoamVect::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoamVect G__TTFoamVect;
static int G__G__Foam_99_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TFoamVect*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TFoamVect*) (soff+(sizeof(TFoamVect)*i)))->~G__TTFoamVect();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TFoamVect*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TFoamVect*) (soff))->~G__TTFoamVect();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TFoamCell */
static int G__G__Foam_100_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TFoamCell[n];
     } else {
       p = new((void*) gvp) TFoamCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TFoamCell;
     } else {
       p = new((void*) gvp) TFoamCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TFoamCell((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TFoamCell((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TFoamCell(*(TFoamCell*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TFoamCell(*(TFoamCell*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->Fill((Int_t) G__int(libp->para[0]), (TFoamCell*) G__int(libp->para[1])
, (TFoamCell*) G__int(libp->para[2]), (TFoamCell*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TFoamCell& obj = ((TFoamCell*) G__getstructoffset())->operator=(*(TFoamCell*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TFoamCell*) G__getstructoffset())->GetXdiv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TFoamCell*) G__getstructoffset())->GetBest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetBest((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetXdiv((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TFoamCell*) G__getstructoffset())->GetHcub(*(TFoamVect*) libp->para[0].ref, *(TFoamVect*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TFoamCell*) G__getstructoffset())->GetHSize(*(TFoamVect*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->CalcVolume();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TFoamCell*) G__getstructoffset())->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TFoamCell*) G__getstructoffset())->GetIntg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TFoamCell*) G__getstructoffset())->GetDriv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TFoamCell*) G__getstructoffset())->GetPrim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetIntg((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetDriv((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetPrim((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TFoamCell*) G__getstructoffset())->GetStat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetStat((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TFoamCell*) G__getstructoffset())->GetPare());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TFoamCell*) G__getstructoffset())->GetDau0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TFoamCell*) G__getstructoffset())->GetDau1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetDau0((TFoamCell*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetDau1((TFoamCell*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->SetSerial((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TFoamCell*) G__getstructoffset())->GetSerial());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TFoamCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TFoamCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TFoamCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoamCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_100_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoamCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoamCell G__TTFoamCell;
static int G__G__Foam_100_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TFoamCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TFoamCell*) (soff+(sizeof(TFoamCell)*i)))->~G__TTFoamCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TFoamCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TFoamCell*) (soff))->~G__TTFoamCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TFoamIntegrand */
static int G__G__Foam_116_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TFoamIntegrand*) G__getstructoffset())->Density((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TFoamIntegrand::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamIntegrand::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TFoamIntegrand::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TFoamIntegrand::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamIntegrand*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamIntegrand::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoamIntegrand::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamIntegrand::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_116_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoamIntegrand::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoamIntegrand G__TTFoamIntegrand;
static int G__G__Foam_116_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TFoamIntegrand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TFoamIntegrand*) (soff+(sizeof(TFoamIntegrand)*i)))->~G__TTFoamIntegrand();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TFoamIntegrand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TFoamIntegrand*) (soff))->~G__TTFoamIntegrand();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Foam_116_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamIntegrand* dest = (TFoamIntegrand*) G__getstructoffset();
   *dest = *(TFoamIntegrand*) libp->para[0].ref;
   const TFoamIntegrand& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TFoamMaxwt */
static int G__G__Foam_117_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamMaxwt* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TFoamMaxwt[n];
     } else {
       p = new((void*) gvp) TFoamMaxwt[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TFoamMaxwt;
     } else {
       p = new((void*) gvp) TFoamMaxwt;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamMaxwt* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TFoamMaxwt((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TFoamMaxwt((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoamMaxwt* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TFoamMaxwt(*(TFoamMaxwt*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TFoamMaxwt(*(TFoamMaxwt*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamMaxwt*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TFoamMaxwt& obj = ((TFoamMaxwt*) G__getstructoffset())->operator=(*(TFoamMaxwt*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamMaxwt*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamMaxwt*) G__getstructoffset())->Make((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamMaxwt*) G__getstructoffset())->GetMCeff((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TFoamMaxwt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamMaxwt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TFoamMaxwt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TFoamMaxwt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoamMaxwt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamMaxwt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoamMaxwt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoamMaxwt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_117_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoamMaxwt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoamMaxwt G__TTFoamMaxwt;
static int G__G__Foam_117_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TFoamMaxwt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TFoamMaxwt*) (soff+(sizeof(TFoamMaxwt)*i)))->~G__TTFoamMaxwt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TFoamMaxwt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TFoamMaxwt*) (soff))->~G__TTFoamMaxwt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TFoam */
static int G__G__Foam_118_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TFoam[n];
     } else {
       p = new((void*) gvp) TFoam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TFoam;
     } else {
       p = new((void*) gvp) TFoam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TFoam((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TFoam((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TFoam(*(TFoam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TFoam(*(TFoam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FoamLN_TFoam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->Initialize((TRandom*) G__int(libp->para[0]), (TFoamIntegrand*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->InitCells();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TFoam*) G__getstructoffset())->CellFill((Int_t) G__int(libp->para[0]), (TFoamCell*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->Explore((TFoamCell*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->Carver(*(Int_t*) G__Intref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->Varedu((Double_t*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->MakeAlpha();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->Grow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((TFoam*) G__getstructoffset())->PeekMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TFoam*) G__getstructoffset())->Divide((TFoamCell*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->MakeActiveList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->GenerCel2(libp->para[0].ref ? *(TFoamCell**) libp->para[0].ref : *(TFoamCell**) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TFoam*) G__getstructoffset())->Eval((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->MakeEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->GetMCvect((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->GetMCwt(*(Double_t*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TFoam*) G__getstructoffset())->GetMCwt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TFoam*) G__getstructoffset())->MCgenerate((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->GetIntegMC(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->GetIntNorm(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->GetWtParams((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->Finalize(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TFoam*) G__getstructoffset())->GetRho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TFoam*) G__getstructoffset())->GetPseRan());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetRhoInt((void*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetRho((TFoamIntegrand*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->ResetRho((TFoamIntegrand*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetPseRan((TRandom*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->ResetPseRan((TRandom*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetkDim((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetnCells((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetnSampl((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetnBin((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetChat((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetOptRej((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetOptDrive((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetEvPerBin((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetMaxWtRej((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetInhiDiv((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->SetXdivPRD((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TFoam*) G__getstructoffset())->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TFoam*) G__getstructoffset())->GetTotDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TFoam*) G__getstructoffset())->GetPrimary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->GetPrimary(*(Double_t*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const TFoam*) G__getstructoffset())->GetnCalls());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const TFoam*) G__getstructoffset())->GetnEffev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->CheckAll((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->PrintCells();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->RootPlot2dim((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->LinkCells();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TFoam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TFoam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TFoam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TFoam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TFoam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_118_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TFoam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoam G__TTFoam;
static int G__G__Foam_118_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TFoam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TFoam*) (soff+(sizeof(TFoam)*i)))->~G__TTFoam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TFoam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TFoam*) (soff))->~G__TTFoam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Foam_118_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TFoam* dest = (TFoam*) G__getstructoffset();
   *dest = *(TFoam*) libp->para[0].ref;
   const TFoam& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TFoamVect */

/* TFoamCell */

/* TFoamIntegrand */

/* TFoamMaxwt */

/* TFoam */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Foam {
 public:
  G__Sizep2memfuncG__Foam(): p(&G__Sizep2memfuncG__Foam::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Foam::*p)();
};

size_t G__get_sizep2memfuncG__Foam()
{
  G__Sizep2memfuncG__Foam a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Foam() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect))) {
     TFoamVect *G__Lderived;
     G__Lderived=(TFoamVect*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell))) {
     TFoamCell *G__Lderived;
     G__Lderived=(TFoamCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand))) {
     TFoamIntegrand *G__Lderived;
     G__Lderived=(TFoamIntegrand*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt))) {
     TFoamMaxwt *G__Lderived;
     G__Lderived=(TFoamMaxwt*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoam))) {
     TFoam *G__Lderived;
     G__Lderived=(TFoam*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoam),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Foam() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__FoamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FoamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FoamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FoamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FoamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__FoamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TFoamVect */
static void G__setup_memvarTFoamVect(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect));
   { TFoamVect *p; p=(TFoamVect*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDim=",0,"Dimension");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCoords=",0,"[fDim] Coordinates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,-1,4,"fNext=",0,"pointer for tree construction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,-1,4,"fPrev=",0,"pointer for tree construction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TFoamCell */
static void G__setup_memvarTFoamCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell));
   { TFoamCell *p; p=(TFoamCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fDim=",0,"Dimension of the vector space");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSerial=",0,"Serial number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStatus=",0,"Status (active, inactive)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRef),-1,-1,4,"fParent=",0,"Pointer to parent cell");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRef),-1,-1,4,"fDaught0=",0,"Pointer to daughter 1");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRef),-1,-1,4,"fDaught1=",0,"Pointer to daughter 2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXdiv=",0,"Factor for division");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBest=",0,"Best Edge for division");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVolume=",0,"Cartesian Volume of cell");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIntegral=",0,"Integral over cell (estimate from exploration)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDrive=",0,"Driver  integral, only for cell build-up");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPrimary=",0,"Primary integral, only for MC generation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TFoamIntegrand */
static void G__setup_memvarTFoamIntegrand(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand));
   { TFoamIntegrand *p; p=(TFoamIntegrand*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TFoamMaxwt */
static void G__setup_memvarTFoamMaxwt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt));
   { TFoamMaxwt *p; p=(TFoamMaxwt*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNent=",0,"No. of MC events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fnBin=",0,"No. of bins on the weight distribution");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fwmax=",0,"Maximum analyzed weight");
   G__memvar_setup((void*)((long)(&p->fWtHst1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TH1D),-1,-1,1,"fWtHst1=",0,"Histogram of the weight wt");
   G__memvar_setup((void*)((long)(&p->fWtHst2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TH1D),-1,-1,1,"fWtHst2=",0,"Histogram of wt filled with wt");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TFoam */
static void G__setup_memvarTFoam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoam));
   { TFoam *p; p=(TFoam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TString),-1,-1,2,"fName=",0,"Name of a given instance of the FOAM class");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TString),-1,-1,2,"fVersion=",0,"Actual version of the FOAM like (1.01m)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TString),-1,-1,2,"fDate=",0,"Release date of FOAM");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDim=",0,"Dimension of the integration/simulation space");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNCells=",0,"Maximum number of cells");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRNmax=",0,"Maximum No. of the rand. numb. requested at once");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fOptDrive=",0,"Optimization switch =1,2 for variance or maximum weight optimization");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChat=",0,"Chat=0,1,2 chat level in output, Chat=1 normal level");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fOptRej=",0,"Switch =0 for weighted events; =1 for unweighted events in MC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNBin=",0,"No. of bins in the edge histogram for cell MC exploration");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSampl=",0,"No. of MC events, when dividing (exploring) cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEvPerBin=",0,"Maximum number of effective (wt=1) events per bin");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaskDiv=",0,"! [fDim] Dynamic Mask for  cell division");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fInhiDiv=",0,"! [fDim] Flags for inhibiting cell division");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fOptPRD=",0,"Option switch for predefined division, for quick check");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,-1,2,"fXdivPRD=",0,"! Lists of division values encoded in one vector per direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNoAct=",0,"Number of active cells");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLastCe=",0,"Index of the last cell");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,-1,2,"fCells=",0,"[fNCells] Array of ALL cells");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),-1,-1,2,"fMCMonit=",0,"Monitor of the MC weight for measuring MC efficiency");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxWtRej=",0,"Maximum weight in rejection for getting wt=1 events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRefArray),-1,-1,2,"fCellsAct=",0,"Array of pointers to active cells, constructed at the end of foam build-up");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPrimAcu=",0,"[fNoAct] Array of cumulative probability of all active cells");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TObjArray),-1,-1,2,"fHistEdg=",0,"Histograms of wt, one for each cell edge");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TObjArray),-1,-1,2,"fHistDbg=",0,"Histograms of wt, for debug");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TH1D),-1,-1,2,"fHistWt=",0,"Histogram of the MC wt");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMCvect=",0,"[fDim] Generated MC vector for the outside user");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMCwt=",0,"MC weight");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRvec=",0,"[fRNmax] random number vector from r.n. generator fDim+1 maximum elements");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand),-1,-1,2,"fRho=",0,"! Pointer to the user-defined integrand function/distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TMethodCall),-1,-1,2,"fMethodCall=",0,"! ROOT's pointer to user-defined global distribution function");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRandom),-1,-1,2,"fPseRan=",0,"Pointer to user-defined generator of pseudorandom numbers");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,2,"fNCalls=",0,"Total number of the function calls");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,2,"fNEffev=",0,"Total number of effective events (wt=1) in the foam buildup");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSumWt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSumWt2=",0,"Total sum of wt and wt^2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSumOve=",0,"Total Sum of overveighted events");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fNevGen=",0,"Total number of the generated MC events");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWtMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWtMin=",0,"Maximum/Minimum MC weight");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPrime=",0,"Primary integral R' (R=R'<wt>)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMCresult=",0,"True Integral R from MC series");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMCerror=",0,"and its error");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAlpha=",0,"[fDim] Internal parameters of the hyperrectangle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Foam() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTFoamVect(void) {
   /* TFoamVect */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect));
   G__memfunc_setup("TFoamVect",873,G__G__Foam_99_0_1, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 0, 0, 1, 1, 0, "", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("TFoamVect",873,G__G__Foam_99_0_2, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "USER Constructor", (void*) NULL, 0);
   G__memfunc_setup("TFoamVect",873,G__G__Foam_99_0_3, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 0, 1, 1, 1, 0, "u 'TFoamVect' - 11 - -", "Copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__Foam_99_0_4, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 1, 1, 1, 1, 0, "u 'TFoamVect' - 11 - -", "= operator; Substitution", (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__G__Foam_99_0_5, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "[] provides POINTER to coordinate", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__Foam_99_0_6, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 1, 1, 1, 1, 0, "D - 'Double_t' 0 - -", "LOAD IN entire double vector", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__Foam_99_0_7, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - -", "LOAD IN double number", (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__G__Foam_99_0_8, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 1, 1, 1, 1, 0, "u 'TFoamVect' - 11 - -", "+=; add vector u+=v  (FAST)", (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__G__Foam_99_0_9, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 1, 1, 1, 1, 0, "u 'TFoamVect' - 11 - -", "+=; add vector u+=v  (FAST)", (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__G__Foam_99_0_10, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 11 - -", "*=; mult. by scalar v*=x (FAST)", (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__G__Foam_99_0_11, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 0, 1, 1, 1, 0, "u 'TFoamVect' - 11 - -", "+;  u=v+s, NEVER USE IT, SLOW!!!", (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__G__Foam_99_0_12, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamVect), -1, 0, 1, 1, 1, 0, "u 'TFoamVect' - 11 - -", "-;  u=v-s, NEVER USE IT, SLOW!!!", (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - option", "Prints vector", (void*) NULL, 1);
   G__memfunc_setup("PrintList",937,G__G__Foam_99_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", "Prints vector and the following linked list", (void*) NULL, 0);
   G__memfunc_setup("GetDim",570,G__G__Foam_99_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Returns dimension", (void*) NULL, 0);
   G__memfunc_setup("GetCoord",791,G__G__Foam_99_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", "Returns coordinate", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Foam_99_0_17, 85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TFoamVect::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_99_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamVect::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_99_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TFoamVect::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_99_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TFoamVect::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_99_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_99_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamVect::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_99_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoamVect::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_99_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamVect::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_99_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoamVect::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TFoamVect", 999, G__G__Foam_99_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTFoamCell(void) {
   /* TFoamCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell));
   G__memfunc_setup("TFoamCell",855,G__G__Foam_100_0_1, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamCell), -1, 0, 0, 1, 1, 0, "", "Default Constructor for ROOT streamers", (void*) NULL, 0);
   G__memfunc_setup("TFoamCell",855,G__G__Foam_100_0_2, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamCell), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "User Constructor", (void*) NULL, 0);
   G__memfunc_setup("TFoamCell",855,G__G__Foam_100_0_3, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamCell), -1, 0, 1, 1, 1, 0, "u 'TFoamCell' - 1 - -", "Copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__Foam_100_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - U 'TFoamCell' - 0 - - "
"U 'TFoamCell' - 0 - - U 'TFoamCell' - 0 - -", "Assigns values of attributes", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__Foam_100_0_5, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamCell), -1, 1, 1, 1, 1, 0, "u 'TFoamCell' - 11 - -", "Substitution operator (never used)", (void*) NULL, 0);
   G__memfunc_setup("GetXdiv",699,G__G__Foam_100_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Pointer to Xdiv", (void*) NULL, 0);
   G__memfunc_setup("GetBest",686,G__G__Foam_100_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Pointer to Best", (void*) NULL, 0);
   G__memfunc_setup("SetBest",698,G__G__Foam_100_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Best", "Set Best edge candidate", (void*) NULL, 0);
   G__memfunc_setup("SetXdiv",711,G__G__Foam_100_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Xdiv", "Set x-division for best edge cand.", (void*) NULL, 0);
   G__memfunc_setup("GetHcub",674,G__G__Foam_100_0_10, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TFoamVect' - 1 - - u 'TFoamVect' - 1 - -", "Get position and size vectors (h-cubical subspace)", (void*) NULL, 0);
   G__memfunc_setup("GetHSize",771,G__G__Foam_100_0_11, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TFoamVect' - 1 - -", "Get size only of cell vector  (h-cubical subspace)", (void*) NULL, 0);
   G__memfunc_setup("CalcVolume",1003,G__G__Foam_100_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", "Calculates volume of cell", (void*) NULL, 0);
   G__memfunc_setup("GetVolume",920,G__G__Foam_100_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Volume of cell", (void*) NULL, 0);
   G__memfunc_setup("GetIntg",690,G__G__Foam_100_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Get Integral", (void*) NULL, 0);
   G__memfunc_setup("GetDriv",693,G__G__Foam_100_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Get Drive", (void*) NULL, 0);
   G__memfunc_setup("GetPrim",696,G__G__Foam_100_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Get Primary", (void*) NULL, 0);
   G__memfunc_setup("SetIntg",702,G__G__Foam_100_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Intg", "Set true integral", (void*) NULL, 0);
   G__memfunc_setup("SetDriv",705,G__G__Foam_100_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Driv", "Set driver integral", (void*) NULL, 0);
   G__memfunc_setup("SetPrim",708,G__G__Foam_100_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Prim", "Set primary integral", (void*) NULL, 0);
   G__memfunc_setup("GetStat",700,G__G__Foam_100_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Get Status", (void*) NULL, 0);
   G__memfunc_setup("SetStat",712,G__G__Foam_100_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Stat", "Set Status", (void*) NULL, 0);
   G__memfunc_setup("GetPare",680,G__G__Foam_100_0_22, 85, G__get_linked_tagnum(&G__G__FoamLN_TFoamCell), -1, 0, 0, 1, 1, 8, "", "Get Pointer to parent cell", (void*) NULL, 0);
   G__memfunc_setup("GetDau0",618,G__G__Foam_100_0_23, 85, G__get_linked_tagnum(&G__G__FoamLN_TFoamCell), -1, 0, 0, 1, 1, 8, "", "Get Pointer to 1-st daughter vertex", (void*) NULL, 0);
   G__memfunc_setup("GetDau1",619,G__G__Foam_100_0_24, 85, G__get_linked_tagnum(&G__G__FoamLN_TFoamCell), -1, 0, 0, 1, 1, 8, "", "Get Pointer to 2-nd daughter vertex", (void*) NULL, 0);
   G__memfunc_setup("SetDau0",630,G__G__Foam_100_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFoamCell' - 0 - Daug", "Set pointer to 1-st daughter", (void*) NULL, 0);
   G__memfunc_setup("SetDau1",631,G__G__Foam_100_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFoamCell' - 0 - Daug", "Set pointer to 2-nd daughter", (void*) NULL, 0);
   G__memfunc_setup("SetSerial",908,G__G__Foam_100_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Serial", "Set serial number", (void*) NULL, 0);
   G__memfunc_setup("GetSerial",896,G__G__Foam_100_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Get serial number", (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - option", "Prints cell content", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Foam_100_0_30, 85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TFoamCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_100_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_100_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TFoamCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_100_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TFoamCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_100_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_100_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_100_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoamCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_100_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_100_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoamCell::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TFoamCell", 981, G__G__Foam_100_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTFoamIntegrand(void) {
   /* TFoamIntegrand */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand));
   G__memfunc_setup("Density",736,G__G__Foam_116_0_2, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ndim D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__Foam_116_0_3, 85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TFoamIntegrand::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_116_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamIntegrand::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_116_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TFoamIntegrand::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_116_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TFoamIntegrand::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_116_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_116_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamIntegrand::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_116_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoamIntegrand::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_116_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamIntegrand::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_116_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoamIntegrand::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TFoamIntegrand", 1521, G__G__Foam_116_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Foam_116_0_16, (int) ('u'), G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand), -1, 1, 1, 1, 1, 0, "u 'TFoamIntegrand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTFoamMaxwt(void) {
   /* TFoamMaxwt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt));
   G__memfunc_setup("TFoamMaxwt",1000,G__G__Foam_117_0_1, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt), -1, 0, 0, 1, 1, 0, "", "NOT IMPLEMENTED (NEVER USED)", (void*) NULL, 0);
   G__memfunc_setup("TFoamMaxwt",1000,G__G__Foam_117_0_2, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - i - 'Int_t' 0 - -", "Principal Constructor", (void*) NULL, 0);
   G__memfunc_setup("TFoamMaxwt",1000,G__G__Foam_117_0_3, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt), -1, 0, 1, 1, 1, 0, "u 'TFoamMaxwt' - 1 - From", "Copy constructor", (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__Foam_117_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "Reset", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__Foam_117_0_5, 117, G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt), -1, 1, 1, 1, 1, 0, "u 'TFoamMaxwt' - 11 - -", "operator =", (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__Foam_117_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Make",382,G__G__Foam_117_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCeff",737,G__G__Foam_117_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", "get MC efficiency= <w>/wmax", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Foam_117_0_9, 85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TFoamMaxwt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_117_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamMaxwt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_117_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TFoamMaxwt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_117_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TFoamMaxwt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_117_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_117_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamMaxwt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_117_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoamMaxwt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_117_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoamMaxwt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_117_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoamMaxwt::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TFoamMaxwt", 1126, G__G__Foam_117_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTFoam(void) {
   /* TFoam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoam));
   G__memfunc_setup("TFoam",471,G__G__Foam_118_0_1, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoam), -1, 0, 0, 1, 1, 0, "", "Default constructor (used only by ROOT streamer)", (void*) NULL, 0);
   G__memfunc_setup("TFoam",471,G__G__Foam_118_0_2, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoam), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", "Principal user-defined constructor", (void*) NULL, 0);
   G__memfunc_setup("TFoam",471,G__G__Foam_118_0_3, 105, G__get_linked_tagnum(&G__G__FoamLN_TFoam), -1, 0, 1, 1, 1, 0, "u 'TFoam' - 11 - -", "Copy Constructor  NOT USED", (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__G__Foam_118_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "Initialization of the FOAM (grid, cells, etc), mandatory!", (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,G__G__Foam_118_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TRandom' - 0 - - U 'TFoamIntegrand' - 0 - -", "Alternative initialization method, backward compatibility", (void*) NULL, 1);
   G__memfunc_setup("InitCells",903,G__G__Foam_118_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "Initializes first cells inside original cube", (void*) NULL, 1);
   G__memfunc_setup("CellFill",775,G__G__Foam_118_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - U 'TFoamCell' - 0 - -", "Allocates new empty cell and return its index", (void*) NULL, 1);
   G__memfunc_setup("Explore",735,G__G__Foam_118_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFoamCell' - 0 - Cell", "Exploration of the new cell, determine <wt>, wtMax etc.", (void*) NULL, 1);
   G__memfunc_setup("Carver",611,G__G__Foam_118_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", "Determines the best edge, wt_max reduction", (void*) NULL, 1);
   G__memfunc_setup("Varedu",615,G__G__Foam_118_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 0 - - i - 'Int_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", "Determines the best edge, variace reduction", (void*) NULL, 1);
   G__memfunc_setup("MakeAlpha",868,G__G__Foam_118_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", "Provides random point inside hyperrectangle", (void*) NULL, 1);
   G__memfunc_setup("Grow",415,G__G__Foam_118_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", "Adds new cells to FOAM object until buffer is full", (void*) NULL, 1);
   G__memfunc_setup("PeekMax",683,G__G__Foam_118_0_13, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 0, "", "Choose one active cell, used by Grow and also in MC generation", (void*) NULL, 1);
   G__memfunc_setup("Divide",597,G__G__Foam_118_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TFoamCell' - 0 - -", "Divide iCell into two daughters; iCell retained, taged as inactive", (void*) NULL, 1);
   G__memfunc_setup("MakeActiveList",1398,G__G__Foam_118_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", "Creates table of active cells", (void*) NULL, 1);
   G__memfunc_setup("GenerCel2",823,G__G__Foam_118_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFoamCell' - 1 - -", "Chose an active cell the with probability ~ Primary integral", (void*) NULL, 1);
   G__memfunc_setup("Eval",392,G__G__Foam_118_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", "Evaluates value of the distribution function", (void*) NULL, 1);
   G__memfunc_setup("MakeEvent",896,G__G__Foam_118_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", "Makes (generates) single MC event", (void*) NULL, 1);
   G__memfunc_setup("GetMCvect",866,G__G__Foam_118_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", "Provides generated randomly MC vector", (void*) NULL, 1);
   G__memfunc_setup("GetMCwt",667,G__G__Foam_118_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 1 - -", "Provides generated MC weight", (void*) NULL, 1);
   G__memfunc_setup("GetMCwt",667,G__G__Foam_118_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "Provides generates MC weight", (void*) NULL, 1);
   G__memfunc_setup("MCgenerate",987,G__G__Foam_118_0_22, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "D - 'Double_t' 0 - MCvect", "All three above function in one", (void*) NULL, 1);
   G__memfunc_setup("GetIntegMC",935,G__G__Foam_118_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", "Provides Integrand and abs. error from MC run", (void*) NULL, 1);
   G__memfunc_setup("GetIntNorm",999,G__G__Foam_118_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", "Provides normalization Inegrand", (void*) NULL, 1);
   G__memfunc_setup("GetWtParams",1103,G__G__Foam_118_0_25, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", "Provides MC weight parameters", (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,G__G__Foam_118_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", "Prints summary of MC integration", (void*) NULL, 1);
   G__memfunc_setup("GetRho",585,G__G__Foam_118_0_27, 85, G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand), -1, 0, 0, 1, 1, 0, "", "Gets pointer of the distribut. (after restoring from disk)", (void*) NULL, 1);
   G__memfunc_setup("GetPseRan",873,G__G__Foam_118_0_28, 85, G__get_linked_tagnum(&G__G__FoamLN_TRandom), -1, 0, 0, 1, 1, 8, "", "Gets pointer of r.n. generator (after restoring from disk)", (void*) NULL, 1);
   G__memfunc_setup("SetRhoInt",896,G__G__Foam_118_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "Y - - 0 - Rho", "Set new integrand distr. in interactive mode", (void*) NULL, 1);
   G__memfunc_setup("SetRho",597,G__G__Foam_118_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFoamIntegrand' - 0 - Rho", "Set new integrand distr. in compiled mode", (void*) NULL, 1);
   G__memfunc_setup("ResetRho",812,G__G__Foam_118_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFoamIntegrand' - 0 - Rho", "Set new distribution, delete old", (void*) NULL, 1);
   G__memfunc_setup("SetPseRan",885,G__G__Foam_118_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRandom' - 0 - PseRan", "Set new r.n. generator", (void*) NULL, 1);
   G__memfunc_setup("ResetPseRan",1100,G__G__Foam_118_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRandom' - 0 - PseRan", "Set new r.n.g, delete old", (void*) NULL, 1);
   G__memfunc_setup("SetkDim",689,G__G__Foam_118_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - kDim", "Sets dimension of cubical space", (void*) NULL, 1);
   G__memfunc_setup("SetnCells",909,G__G__Foam_118_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - nCells", "Sets maximum number of cells", (void*) NULL, 1);
   G__memfunc_setup("SetnSampl",919,G__G__Foam_118_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - nSampl", "Sets no of MC events in cell exploration", (void*) NULL, 1);
   G__memfunc_setup("SetnBin",691,G__G__Foam_118_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nBin", "Sets no of bins in histogs in cell exploration", (void*) NULL, 1);
   G__memfunc_setup("SetChat",684,G__G__Foam_118_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Chat", "Sets option Chat, chat level", (void*) NULL, 1);
   G__memfunc_setup("SetOptRej",896,G__G__Foam_118_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - OptRej", "Sets option for MC rejection", (void*) NULL, 1);
   G__memfunc_setup("SetOptDrive",1113,G__G__Foam_118_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - OptDrive", "Sets optimization switch", (void*) NULL, 1);
   G__memfunc_setup("SetEvPerBin",1063,G__G__Foam_118_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - EvPerBin", "Sets max. no. of effective events per bin", (void*) NULL, 1);
   G__memfunc_setup("SetMaxWtRej",1086,G__G__Foam_118_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - MaxWtRej", "Sets max. weight for rejection", (void*) NULL, 1);
   G__memfunc_setup("SetInhiDiv",983,G__G__Foam_118_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", "Set inhibition of cell division along certain edge", (void*) NULL, 1);
   G__memfunc_setup("SetXdivPRD",941,G__G__Foam_118_0_44, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"D - 'Double_t' 0 - -", "Set predefined division points", (void*) NULL, 1);
   G__memfunc_setup("GetVersion",1030,G__G__Foam_118_0_45, 67, -1, -1, 0, 0, 1, 1, 9, "", "Get version of the FOAM", (void*) NULL, 1);
   G__memfunc_setup("GetTotDim",881,G__G__Foam_118_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Get total dimension", (void*) NULL, 1);
   G__memfunc_setup("GetPrimary",1028,G__G__Foam_118_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Get value of primary integral R'", (void*) NULL, 1);
   G__memfunc_setup("GetPrimary",1028,G__G__Foam_118_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 1 - prime", "Get value of primary integral R'", (void*) NULL, 1);
   G__memfunc_setup("GetnCalls",893,G__G__Foam_118_0_49, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 8, "", "Get total no. of the function calls", (void*) NULL, 1);
   G__memfunc_setup("GetnEffev",890,G__G__Foam_118_0_50, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 8, "", "Get total no. of effective wt=1 events", (void*) NULL, 1);
   G__memfunc_setup("CheckAll",759,G__G__Foam_118_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "Checks correctness of the entire data structure in the FOAM object", (void*) NULL, 1);
   G__memfunc_setup("PrintCells",1024,G__G__Foam_118_0_52, 121, -1, -1, 0, 0, 1, 1, 0, "", "Prints content of all cells", (void*) NULL, 1);
   G__memfunc_setup("RootPlot2dim",1199,G__G__Foam_118_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - -", "Generates C++ code for drawing foam", (void*) NULL, 1);
   G__memfunc_setup("LinkCells",897,G__G__Foam_118_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", "Void function for backward compatibility", (void*) NULL, 1);
   G__memfunc_setup("Sqr",310,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "d - 'Double_t' 0 - x", "Square function", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Foam_118_0_56, 85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TFoam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_118_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_118_0_58, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TFoam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_118_0_59, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TFoam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FoamLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_118_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_118_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_118_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_118_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TFoam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_118_0_67, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TFoam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TFoam", 597, G__G__Foam_118_0_68, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Foam_118_0_69, (int) ('u'), G__get_linked_tagnum(&G__G__FoamLN_TFoam), -1, 1, 1, 1, 1, 0, "u 'TFoam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Foam() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Foam() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Foam() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__FoamLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoamVect = { "TFoamVect" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoamCell = { "TFoamCell" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TMethodCall = { "TMethodCall" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoamIntegrand = { "TFoamIntegrand" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoamMaxwt = { "TFoamMaxwt" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoam = { "TFoam" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Foam() {
  G__G__FoamLN_TClass.tagnum = -1 ;
  G__G__FoamLN_TBuffer.tagnum = -1 ;
  G__G__FoamLN_TMemberInspector.tagnum = -1 ;
  G__G__FoamLN_TObject.tagnum = -1 ;
  G__G__FoamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__FoamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FoamLN_TObjArray.tagnum = -1 ;
  G__G__FoamLN_TString.tagnum = -1 ;
  G__G__FoamLN_TRef.tagnum = -1 ;
  G__G__FoamLN_TFoamVect.tagnum = -1 ;
  G__G__FoamLN_TFoamCell.tagnum = -1 ;
  G__G__FoamLN_TH1D.tagnum = -1 ;
  G__G__FoamLN_TRefArray.tagnum = -1 ;
  G__G__FoamLN_TMethodCall.tagnum = -1 ;
  G__G__FoamLN_TRandom.tagnum = -1 ;
  G__G__FoamLN_TFoamIntegrand.tagnum = -1 ;
  G__G__FoamLN_TFoamMaxwt.tagnum = -1 ;
  G__G__FoamLN_TFoam.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Foam() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TString);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TRef);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),sizeof(TFoamVect),-1,327424,"n-dimensional vector with dynamical allocation",G__setup_memvarTFoamVect,G__setup_memfuncTFoamVect);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),sizeof(TFoamCell),-1,327424,"Single cell of FOAM",G__setup_memvarTFoamCell,G__setup_memfuncTFoamCell);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TH1D);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TRefArray);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TMethodCall);
   G__get_linked_tagnum_fwd(&G__G__FoamLN_TRandom);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand),sizeof(TFoamIntegrand),-1,292097,"n-dimensional real positive integrand of FOAM",G__setup_memvarTFoamIntegrand,G__setup_memfuncTFoamIntegrand);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),sizeof(TFoamMaxwt),-1,327424,"Controlling of the MC weight (maximum weight)",G__setup_memvarTFoamMaxwt,G__setup_memfuncTFoamMaxwt);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoam),sizeof(TFoam),-1,325376,"General purpose self-adapting Monte Carlo event generator",G__setup_memvarTFoam,G__setup_memfuncTFoam);
}
extern "C" void G__cpp_setupG__Foam(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Foam()");
  G__set_cpp_environmentG__Foam();
  G__cpp_setup_tagtableG__Foam();

  G__cpp_setup_inheritanceG__Foam();

  G__cpp_setup_typetableG__Foam();

  G__cpp_setup_memvarG__Foam();

  G__cpp_setup_memfuncG__Foam();
  G__cpp_setup_globalG__Foam();
  G__cpp_setup_funcG__Foam();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Foam();
  return;
}
class G__cpp_setup_initG__Foam {
  public:
    G__cpp_setup_initG__Foam() { G__add_setup_func("G__Foam",(G__incsetup)(&G__cpp_setupG__Foam)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Foam() { G__remove_setup_func("G__Foam"); }
};
G__cpp_setup_initG__Foam G__cpp_setup_initializerG__Foam;

