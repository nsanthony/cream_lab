//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:47:40 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Recorder.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TRecorderState_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TRecorderState(void *p);
   static void deleteArray_TRecorderState(void *p);
   static void destruct_TRecorderState(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecorderState*)
   {
      ::TRecorderState *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecorderState >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecorderState", ::TRecorderState::Class_Version(), "include/TRecorder.h", 530,
                  typeid(::TRecorderState), DefineBehavior(ptr, ptr),
                  &::TRecorderState::Dictionary, isa_proxy, 0,
                  sizeof(::TRecorderState) );
      instance.SetDelete(&delete_TRecorderState);
      instance.SetDeleteArray(&deleteArray_TRecorderState);
      instance.SetDestructor(&destruct_TRecorderState);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecorderState*)
   {
      return GenerateInitInstanceLocal((::TRecorderState*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecorderState*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TRecEvent(void *p);
   static void deleteArray_TRecEvent(void *p);
   static void destruct_TRecEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecEvent*)
   {
      ::TRecEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecEvent", ::TRecEvent::Class_Version(), "include/TRecorder.h", 169,
                  typeid(::TRecEvent), DefineBehavior(ptr, ptr),
                  &::TRecEvent::Dictionary, isa_proxy, 0,
                  sizeof(::TRecEvent) );
      instance.SetDelete(&delete_TRecEvent);
      instance.SetDeleteArray(&deleteArray_TRecEvent);
      instance.SetDestructor(&destruct_TRecEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecEvent*)
   {
      return GenerateInitInstanceLocal((::TRecEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecCmdEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TRecCmdEvent(void *p = 0);
   static void *newArray_TRecCmdEvent(Long_t size, void *p);
   static void delete_TRecCmdEvent(void *p);
   static void deleteArray_TRecCmdEvent(void *p);
   static void destruct_TRecCmdEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecCmdEvent*)
   {
      ::TRecCmdEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecCmdEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecCmdEvent", ::TRecCmdEvent::Class_Version(), "include/TRecorder.h", 211,
                  typeid(::TRecCmdEvent), DefineBehavior(ptr, ptr),
                  &::TRecCmdEvent::Dictionary, isa_proxy, 0,
                  sizeof(::TRecCmdEvent) );
      instance.SetNew(&new_TRecCmdEvent);
      instance.SetNewArray(&newArray_TRecCmdEvent);
      instance.SetDelete(&delete_TRecCmdEvent);
      instance.SetDeleteArray(&deleteArray_TRecCmdEvent);
      instance.SetDestructor(&destruct_TRecCmdEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecCmdEvent*)
   {
      return GenerateInitInstanceLocal((::TRecCmdEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecCmdEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecExtraEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TRecExtraEvent(void *p = 0);
   static void *newArray_TRecExtraEvent(Long_t size, void *p);
   static void delete_TRecExtraEvent(void *p);
   static void deleteArray_TRecExtraEvent(void *p);
   static void destruct_TRecExtraEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecExtraEvent*)
   {
      ::TRecExtraEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecExtraEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecExtraEvent", ::TRecExtraEvent::Class_Version(), "include/TRecorder.h", 253,
                  typeid(::TRecExtraEvent), DefineBehavior(ptr, ptr),
                  &::TRecExtraEvent::Dictionary, isa_proxy, 0,
                  sizeof(::TRecExtraEvent) );
      instance.SetNew(&new_TRecExtraEvent);
      instance.SetNewArray(&newArray_TRecExtraEvent);
      instance.SetDelete(&delete_TRecExtraEvent);
      instance.SetDeleteArray(&deleteArray_TRecExtraEvent);
      instance.SetDestructor(&destruct_TRecExtraEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecExtraEvent*)
   {
      return GenerateInitInstanceLocal((::TRecExtraEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecExtraEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecGuiEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TRecGuiEvent(void *p = 0);
   static void *newArray_TRecGuiEvent(Long_t size, void *p);
   static void delete_TRecGuiEvent(void *p);
   static void deleteArray_TRecGuiEvent(void *p);
   static void destruct_TRecGuiEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecGuiEvent*)
   {
      ::TRecGuiEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecGuiEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecGuiEvent", ::TRecGuiEvent::Class_Version(), "include/TRecorder.h", 296,
                  typeid(::TRecGuiEvent), DefineBehavior(ptr, ptr),
                  &::TRecGuiEvent::Dictionary, isa_proxy, 0,
                  sizeof(::TRecGuiEvent) );
      instance.SetNew(&new_TRecGuiEvent);
      instance.SetNewArray(&newArray_TRecGuiEvent);
      instance.SetDelete(&delete_TRecGuiEvent);
      instance.SetDeleteArray(&deleteArray_TRecGuiEvent);
      instance.SetDestructor(&destruct_TRecGuiEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecGuiEvent*)
   {
      return GenerateInitInstanceLocal((::TRecGuiEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecGuiEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecorderInactive_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TRecorderInactive(void *p = 0);
   static void *newArray_TRecorderInactive(Long_t size, void *p);
   static void delete_TRecorderInactive(void *p);
   static void deleteArray_TRecorderInactive(void *p);
   static void destruct_TRecorderInactive(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecorderInactive*)
   {
      ::TRecorderInactive *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecorderInactive >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecorderInactive", ::TRecorderInactive::Class_Version(), "include/TRecorder.h", 733,
                  typeid(::TRecorderInactive), DefineBehavior(ptr, ptr),
                  &::TRecorderInactive::Dictionary, isa_proxy, 0,
                  sizeof(::TRecorderInactive) );
      instance.SetNew(&new_TRecorderInactive);
      instance.SetNewArray(&newArray_TRecorderInactive);
      instance.SetDelete(&delete_TRecorderInactive);
      instance.SetDeleteArray(&deleteArray_TRecorderInactive);
      instance.SetDestructor(&destruct_TRecorderInactive);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecorderInactive*)
   {
      return GenerateInitInstanceLocal((::TRecorderInactive*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecorderInactive*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecorderPaused_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecorderPaused*)
   {
      ::TRecorderPaused *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecorderPaused >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecorderPaused", ::TRecorderPaused::Class_Version(), "include/TRecorder.h", 771,
                  typeid(::TRecorderPaused), DefineBehavior(ptr, ptr),
                  &::TRecorderPaused::Dictionary, isa_proxy, 0,
                  sizeof(::TRecorderPaused) );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecorderPaused*)
   {
      return GenerateInitInstanceLocal((::TRecorderPaused*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecorderPaused*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecorderRecording_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecorderRecording*)
   {
      ::TRecorderRecording *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecorderRecording >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecorderRecording", ::TRecorderRecording::Class_Version(), "include/TRecorder.h", 658,
                  typeid(::TRecorderRecording), DefineBehavior(ptr, ptr),
                  &::TRecorderRecording::Dictionary, isa_proxy, 0,
                  sizeof(::TRecorderRecording) );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecorderRecording*)
   {
      return GenerateInitInstanceLocal((::TRecorderRecording*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecorderRecording*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecorderReplaying_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecorderReplaying*)
   {
      ::TRecorderReplaying *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecorderReplaying >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecorderReplaying", ::TRecorderReplaying::Class_Version(), "include/TRecorder.h", 566,
                  typeid(::TRecorderReplaying), DefineBehavior(ptr, ptr),
                  &::TRecorderReplaying::Dictionary, isa_proxy, 0,
                  sizeof(::TRecorderReplaying) );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecorderReplaying*)
   {
      return GenerateInitInstanceLocal((::TRecorderReplaying*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecorderReplaying*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecWinPair_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TRecWinPair(void *p);
   static void deleteArray_TRecWinPair(void *p);
   static void destruct_TRecWinPair(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecWinPair*)
   {
      ::TRecWinPair *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecWinPair >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecWinPair", ::TRecWinPair::Class_Version(), "include/TRecorder.h", 364,
                  typeid(::TRecWinPair), DefineBehavior(ptr, ptr),
                  &::TRecWinPair::Dictionary, isa_proxy, 0,
                  sizeof(::TRecWinPair) );
      instance.SetDelete(&delete_TRecWinPair);
      instance.SetDeleteArray(&deleteArray_TRecWinPair);
      instance.SetDestructor(&destruct_TRecWinPair);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecWinPair*)
   {
      return GenerateInitInstanceLocal((::TRecWinPair*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecWinPair*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRecorder_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TRecorder(void *p = 0);
   static void *newArray_TRecorder(Long_t size, void *p);
   static void delete_TRecorder(void *p);
   static void deleteArray_TRecorder(void *p);
   static void destruct_TRecorder(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRecorder*)
   {
      ::TRecorder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRecorder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRecorder", ::TRecorder::Class_Version(), "include/TRecorder.h", 439,
                  typeid(::TRecorder), DefineBehavior(ptr, ptr),
                  &::TRecorder::Dictionary, isa_proxy, 0,
                  sizeof(::TRecorder) );
      instance.SetNew(&new_TRecorder);
      instance.SetNewArray(&newArray_TRecorder);
      instance.SetDelete(&delete_TRecorder);
      instance.SetDeleteArray(&deleteArray_TRecorder);
      instance.SetDestructor(&destruct_TRecorder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRecorder*)
   {
      return GenerateInitInstanceLocal((::TRecorder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRecorder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGRecorder_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGRecorder(void *p = 0);
   static void *newArray_TGRecorder(Long_t size, void *p);
   static void delete_TGRecorder(void *p);
   static void deleteArray_TGRecorder(void *p);
   static void destruct_TGRecorder(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGRecorder*)
   {
      ::TGRecorder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGRecorder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGRecorder", ::TGRecorder::Class_Version(), "include/TRecorder.h", 799,
                  typeid(::TGRecorder), DefineBehavior(ptr, ptr),
                  &::TGRecorder::Dictionary, isa_proxy, 0,
                  sizeof(::TGRecorder) );
      instance.SetNew(&new_TGRecorder);
      instance.SetNewArray(&newArray_TGRecorder);
      instance.SetDelete(&delete_TGRecorder);
      instance.SetDeleteArray(&deleteArray_TGRecorder);
      instance.SetDestructor(&destruct_TGRecorder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGRecorder*)
   {
      return GenerateInitInstanceLocal((::TGRecorder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGRecorder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TRecorderState::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecorderState::Class_Name()
{
   return "TRecorderState";
}

//______________________________________________________________________________
const char *TRecorderState::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderState*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecorderState::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderState*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecorderState::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderState*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecorderState::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderState*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecEvent::Class_Name()
{
   return "TRecEvent";
}

//______________________________________________________________________________
const char *TRecEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecCmdEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecCmdEvent::Class_Name()
{
   return "TRecCmdEvent";
}

//______________________________________________________________________________
const char *TRecCmdEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecCmdEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecCmdEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecCmdEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecCmdEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecCmdEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecCmdEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecCmdEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecExtraEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecExtraEvent::Class_Name()
{
   return "TRecExtraEvent";
}

//______________________________________________________________________________
const char *TRecExtraEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecExtraEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecExtraEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecExtraEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecExtraEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecExtraEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecExtraEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecExtraEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecGuiEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecGuiEvent::Class_Name()
{
   return "TRecGuiEvent";
}

//______________________________________________________________________________
const char *TRecGuiEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecGuiEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecGuiEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecGuiEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecGuiEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecGuiEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecGuiEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecGuiEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecorderInactive::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecorderInactive::Class_Name()
{
   return "TRecorderInactive";
}

//______________________________________________________________________________
const char *TRecorderInactive::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderInactive*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecorderInactive::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderInactive*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecorderInactive::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderInactive*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecorderInactive::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderInactive*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecorderPaused::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecorderPaused::Class_Name()
{
   return "TRecorderPaused";
}

//______________________________________________________________________________
const char *TRecorderPaused::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderPaused*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecorderPaused::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderPaused*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecorderPaused::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderPaused*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecorderPaused::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderPaused*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecorderRecording::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecorderRecording::Class_Name()
{
   return "TRecorderRecording";
}

//______________________________________________________________________________
const char *TRecorderRecording::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderRecording*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecorderRecording::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderRecording*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecorderRecording::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderRecording*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecorderRecording::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderRecording*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecorderReplaying::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecorderReplaying::Class_Name()
{
   return "TRecorderReplaying";
}

//______________________________________________________________________________
const char *TRecorderReplaying::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderReplaying*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecorderReplaying::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorderReplaying*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecorderReplaying::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderReplaying*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecorderReplaying::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorderReplaying*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecWinPair::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecWinPair::Class_Name()
{
   return "TRecWinPair";
}

//______________________________________________________________________________
const char *TRecWinPair::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecWinPair*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecWinPair::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecWinPair*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecWinPair::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecWinPair*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecWinPair::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecWinPair*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRecorder::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRecorder::Class_Name()
{
   return "TRecorder";
}

//______________________________________________________________________________
const char *TRecorder::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRecorder::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRecorder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRecorder::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRecorder::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRecorder*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGRecorder::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGRecorder::Class_Name()
{
   return "TGRecorder";
}

//______________________________________________________________________________
const char *TGRecorder::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGRecorder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGRecorder::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGRecorder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGRecorder::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGRecorder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGRecorder::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGRecorder*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TRecEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fEventTime.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TRecEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(TRecEvent::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fEventTime.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TRecEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecEvent.
      TClass *R__cl = ::TRecEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fEventTime", &fEventTime);
      fEventTime.ShowMembers(R__insp, strcat(R__parent,"fEventTime.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TRecEvent(void *p) {
      delete ((::TRecEvent*)p);
   }
   static void deleteArray_TRecEvent(void *p) {
      delete [] ((::TRecEvent*)p);
   }
   static void destruct_TRecEvent(void *p) {
      typedef ::TRecEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRecEvent

//______________________________________________________________________________
void TRecCmdEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecCmdEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TRecEvent::Streamer(R__b);
      fText.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TRecCmdEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(TRecCmdEvent::IsA(), kTRUE);
      TRecEvent::Streamer(R__b);
      fText.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TRecCmdEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecCmdEvent.
      TClass *R__cl = ::TRecCmdEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fText", &fText);
      fText.ShowMembers(R__insp, strcat(R__parent,"fText.")); R__parent[R__ncp] = 0;
      TRecEvent::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TRecCmdEvent(void *p) {
      return  p ? new(p) ::TRecCmdEvent : new ::TRecCmdEvent;
   }
   static void *newArray_TRecCmdEvent(Long_t nElements, void *p) {
      return p ? new(p) ::TRecCmdEvent[nElements] : new ::TRecCmdEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_TRecCmdEvent(void *p) {
      delete ((::TRecCmdEvent*)p);
   }
   static void deleteArray_TRecCmdEvent(void *p) {
      delete [] ((::TRecCmdEvent*)p);
   }
   static void destruct_TRecCmdEvent(void *p) {
      typedef ::TRecCmdEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRecCmdEvent

//______________________________________________________________________________
void TRecExtraEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecExtraEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TRecEvent::Streamer(R__b);
      fText.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TRecExtraEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(TRecExtraEvent::IsA(), kTRUE);
      TRecEvent::Streamer(R__b);
      fText.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TRecExtraEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecExtraEvent.
      TClass *R__cl = ::TRecExtraEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fText", &fText);
      fText.ShowMembers(R__insp, strcat(R__parent,"fText.")); R__parent[R__ncp] = 0;
      TRecEvent::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TRecExtraEvent(void *p) {
      return  p ? new(p) ::TRecExtraEvent : new ::TRecExtraEvent;
   }
   static void *newArray_TRecExtraEvent(Long_t nElements, void *p) {
      return p ? new(p) ::TRecExtraEvent[nElements] : new ::TRecExtraEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_TRecExtraEvent(void *p) {
      delete ((::TRecExtraEvent*)p);
   }
   static void deleteArray_TRecExtraEvent(void *p) {
      delete [] ((::TRecExtraEvent*)p);
   }
   static void destruct_TRecExtraEvent(void *p) {
      typedef ::TRecExtraEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRecExtraEvent

//______________________________________________________________________________
void TRecGuiEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecGuiEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TRecEvent::Streamer(R__b);
      R__b >> (Int_t&)fType;
      R__b >> fWindow;
      R__b >> fTime;
      R__b >> fX;
      R__b >> fY;
      R__b >> fXRoot;
      R__b >> fYRoot;
      R__b >> fCode;
      R__b >> fState;
      R__b >> fWidth;
      R__b >> fHeight;
      R__b >> fCount;
      R__b >> fSendEvent;
      R__b >> fHandle;
      R__b >> fFormat;
      R__b.ReadStaticArray((long*)fUser);
      R__b >> fMasked;
      R__b.CheckByteCount(R__s, R__c, TRecGuiEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(TRecGuiEvent::IsA(), kTRUE);
      TRecEvent::Streamer(R__b);
      R__b << (Int_t)fType;
      R__b << fWindow;
      R__b << fTime;
      R__b << fX;
      R__b << fY;
      R__b << fXRoot;
      R__b << fYRoot;
      R__b << fCode;
      R__b << fState;
      R__b << fWidth;
      R__b << fHeight;
      R__b << fCount;
      R__b << fSendEvent;
      R__b << fHandle;
      R__b << fFormat;
      R__b.WriteArray(fUser, 5);
      R__b << fMasked;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TRecGuiEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecGuiEvent.
      TClass *R__cl = ::TRecGuiEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fType", &fType);
      R__insp.Inspect(R__cl, R__parent, "fWindow", &fWindow);
      R__insp.Inspect(R__cl, R__parent, "fTime", &fTime);
      R__insp.Inspect(R__cl, R__parent, "fX", &fX);
      R__insp.Inspect(R__cl, R__parent, "fY", &fY);
      R__insp.Inspect(R__cl, R__parent, "fXRoot", &fXRoot);
      R__insp.Inspect(R__cl, R__parent, "fYRoot", &fYRoot);
      R__insp.Inspect(R__cl, R__parent, "fCode", &fCode);
      R__insp.Inspect(R__cl, R__parent, "fState", &fState);
      R__insp.Inspect(R__cl, R__parent, "fWidth", &fWidth);
      R__insp.Inspect(R__cl, R__parent, "fHeight", &fHeight);
      R__insp.Inspect(R__cl, R__parent, "fCount", &fCount);
      R__insp.Inspect(R__cl, R__parent, "fSendEvent", &fSendEvent);
      R__insp.Inspect(R__cl, R__parent, "fHandle", &fHandle);
      R__insp.Inspect(R__cl, R__parent, "fFormat", &fFormat);
      R__insp.Inspect(R__cl, R__parent, "fUser[5]", fUser);
      R__insp.Inspect(R__cl, R__parent, "fMasked", &fMasked);
      TRecEvent::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TRecGuiEvent(void *p) {
      return  p ? new(p) ::TRecGuiEvent : new ::TRecGuiEvent;
   }
   static void *newArray_TRecGuiEvent(Long_t nElements, void *p) {
      return p ? new(p) ::TRecGuiEvent[nElements] : new ::TRecGuiEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_TRecGuiEvent(void *p) {
      delete ((::TRecGuiEvent*)p);
   }
   static void deleteArray_TRecGuiEvent(void *p) {
      delete [] ((::TRecGuiEvent*)p);
   }
   static void destruct_TRecGuiEvent(void *p) {
      typedef ::TRecGuiEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRecGuiEvent

//______________________________________________________________________________
void TRecWinPair::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecWinPair.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fKey;
      R__b >> fValue;
      R__b.CheckByteCount(R__s, R__c, TRecWinPair::IsA());
   } else {
      R__c = R__b.WriteVersion(TRecWinPair::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fKey;
      R__b << fValue;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TRecWinPair::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecWinPair.
      TClass *R__cl = ::TRecWinPair::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fKey", &fKey);
      R__insp.Inspect(R__cl, R__parent, "fValue", &fValue);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TRecWinPair(void *p) {
      delete ((::TRecWinPair*)p);
   }
   static void deleteArray_TRecWinPair(void *p) {
      delete [] ((::TRecWinPair*)p);
   }
   static void destruct_TRecWinPair(void *p) {
      typedef ::TRecWinPair current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRecWinPair

//______________________________________________________________________________
void TRecorder::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecorder.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fFilename.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TRecorder::IsA());
   } else {
      R__c = R__b.WriteVersion(TRecorder::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fFilename.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TRecorder::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecorder.
      TClass *R__cl = ::TRecorder::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fRecorderState", &fRecorderState);
      R__insp.Inspect(R__cl, R__parent, "fFilename", &fFilename);
      fFilename.ShowMembers(R__insp, strcat(R__parent,"fFilename.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TRecorder(void *p) {
      return  p ? new(p) ::TRecorder : new ::TRecorder;
   }
   static void *newArray_TRecorder(Long_t nElements, void *p) {
      return p ? new(p) ::TRecorder[nElements] : new ::TRecorder[nElements];
   }
   // Wrapper around operator delete
   static void delete_TRecorder(void *p) {
      delete ((::TRecorder*)p);
   }
   static void deleteArray_TRecorder(void *p) {
      delete [] ((::TRecorder*)p);
   }
   static void destruct_TRecorder(void *p) {
      typedef ::TRecorder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRecorder

//______________________________________________________________________________
void TRecorderState::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecorderState.

   ::Error("TRecorderState::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TRecorderState::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecorderState.
      TClass *R__cl = ::TRecorderState::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TRecorderState(void *p) {
      delete ((::TRecorderState*)p);
   }
   static void deleteArray_TRecorderState(void *p) {
      delete [] ((::TRecorderState*)p);
   }
   static void destruct_TRecorderState(void *p) {
      typedef ::TRecorderState current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRecorderState

//______________________________________________________________________________
void TRecorderReplaying::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecorderReplaying.

   TRecorderState::Streamer(R__b);
}

//______________________________________________________________________________
void TRecorderReplaying::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecorderReplaying.
      TClass *R__cl = ::TRecorderReplaying::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fRecorder", &fRecorder);
      R__insp.Inspect(R__cl, R__parent, "*fFile", &fFile);
      R__insp.Inspect(R__cl, R__parent, "*fCanv", &fCanv);
      R__insp.Inspect(R__cl, R__parent, "*fTimer", &fTimer);
      R__insp.Inspect(R__cl, R__parent, "*fWinTree", &fWinTree);
      R__insp.Inspect(R__cl, R__parent, "*fGuiTree", &fGuiTree);
      R__insp.Inspect(R__cl, R__parent, "*fCmdTree", &fCmdTree);
      R__insp.Inspect(R__cl, R__parent, "*fExtraTree", &fExtraTree);
      R__insp.Inspect(R__cl, R__parent, "fWin", &fWin);
      R__insp.Inspect(R__cl, R__parent, "*fGuiEvent", &fGuiEvent);
      R__insp.Inspect(R__cl, R__parent, "*fCmdEvent", &fCmdEvent);
      R__insp.Inspect(R__cl, R__parent, "*fExtraEvent", &fExtraEvent);
      R__insp.Inspect(R__cl, R__parent, "fRegWinCounter", &fRegWinCounter);
      R__insp.Inspect(R__cl, R__parent, "fGuiTreeCounter", &fGuiTreeCounter);
      R__insp.Inspect(R__cl, R__parent, "fCmdTreeCounter", &fCmdTreeCounter);
      R__insp.Inspect(R__cl, R__parent, "fExtraTreeCounter", &fExtraTreeCounter);
      R__insp.Inspect(R__cl, R__parent, "fWinTreeEntries", &fWinTreeEntries);
      R__insp.Inspect(R__cl, R__parent, "*fMutex", &fMutex);
      R__insp.Inspect(R__cl, R__parent, "*fWindowList", &fWindowList);
      R__insp.Inspect(R__cl, R__parent, "*fNextEvent", &fNextEvent);
      R__insp.Inspect(R__cl, R__parent, "fPreviousEventTime", &fPreviousEventTime);
      fPreviousEventTime.ShowMembers(R__insp, strcat(R__parent,"fPreviousEventTime.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fWaitingForWindow", &fWaitingForWindow);
      R__insp.Inspect(R__cl, R__parent, "fEventReplayed", &fEventReplayed);
      R__insp.Inspect(R__cl, R__parent, "fShowMouseCursor", &fShowMouseCursor);
      R__insp.Inspect(R__cl, R__parent, "fFilterStatusBar", &fFilterStatusBar);
      TRecorderState::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
} // end of namespace ROOT for class ::TRecorderReplaying

//______________________________________________________________________________
void TRecorderRecording::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecorderRecording.

   TRecorderState::Streamer(R__b);
}

//______________________________________________________________________________
void TRecorderRecording::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecorderRecording.
      TClass *R__cl = ::TRecorderRecording::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fRecorder", &fRecorder);
      R__insp.Inspect(R__cl, R__parent, "*fFile", &fFile);
      R__insp.Inspect(R__cl, R__parent, "*fTimer", &fTimer);
      R__insp.Inspect(R__cl, R__parent, "*fMouseTimer", &fMouseTimer);
      R__insp.Inspect(R__cl, R__parent, "fBeginPave", &fBeginPave);
      R__insp.Inspect(R__cl, R__parent, "*fWinTree", &fWinTree);
      R__insp.Inspect(R__cl, R__parent, "*fGuiTree", &fGuiTree);
      R__insp.Inspect(R__cl, R__parent, "*fCmdTree", &fCmdTree);
      R__insp.Inspect(R__cl, R__parent, "*fExtraTree", &fExtraTree);
      R__insp.Inspect(R__cl, R__parent, "fWin", &fWin);
      R__insp.Inspect(R__cl, R__parent, "*fGuiEvent", &fGuiEvent);
      R__insp.Inspect(R__cl, R__parent, "*fCmdEvent", &fCmdEvent);
      R__insp.Inspect(R__cl, R__parent, "*fExtraEvent", &fExtraEvent);
      R__insp.Inspect(R__cl, R__parent, "fCmdEventPending", &fCmdEventPending);
      R__insp.Inspect(R__cl, R__parent, "fRegWinCounter", &fRegWinCounter);
      R__insp.Inspect(R__cl, R__parent, "fFilteredIdsCount", &fFilteredIdsCount);
      R__insp.Inspect(R__cl, R__parent, "*fFilteredIds", &fFilteredIds);
      R__insp.Inspect(R__cl, R__parent, "fFilterEventPave", &fFilterEventPave);
      TRecorderState::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
} // end of namespace ROOT for class ::TRecorderRecording

//______________________________________________________________________________
void TRecorderInactive::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecorderInactive.

   TRecorderState::Streamer(R__b);
}

//______________________________________________________________________________
void TRecorderInactive::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecorderInactive.
      TClass *R__cl = ::TRecorderInactive::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fCollect", &fCollect);
      TRecorderState::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TRecorderInactive(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TRecorderInactive : new ::TRecorderInactive;
   }
   static void *newArray_TRecorderInactive(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TRecorderInactive[nElements] : new ::TRecorderInactive[nElements];
   }
   // Wrapper around operator delete
   static void delete_TRecorderInactive(void *p) {
      delete ((::TRecorderInactive*)p);
   }
   static void deleteArray_TRecorderInactive(void *p) {
      delete [] ((::TRecorderInactive*)p);
   }
   static void destruct_TRecorderInactive(void *p) {
      typedef ::TRecorderInactive current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRecorderInactive

//______________________________________________________________________________
void TRecorderPaused::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRecorderPaused.

   TRecorderState::Streamer(R__b);
}

//______________________________________________________________________________
void TRecorderPaused::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRecorderPaused.
      TClass *R__cl = ::TRecorderPaused::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fReplayingState", &fReplayingState);
      TRecorderState::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
} // end of namespace ROOT for class ::TRecorderPaused

//______________________________________________________________________________
void TGRecorder::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGRecorder.

   TGMainFrame::Streamer(R__b);
}

//______________________________________________________________________________
void TGRecorder::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGRecorder.
      TClass *R__cl = ::TGRecorder::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fRecorder", &fRecorder);
      R__insp.Inspect(R__cl, R__parent, "*fStartStop", &fStartStop);
      R__insp.Inspect(R__cl, R__parent, "*fReplay", &fReplay);
      R__insp.Inspect(R__cl, R__parent, "*fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__parent, "*fTimeDisplay", &fTimeDisplay);
      R__insp.Inspect(R__cl, R__parent, "*fCursorCheckBox", &fCursorCheckBox);
      R__insp.Inspect(R__cl, R__parent, "*fTimer", &fTimer);
      R__insp.Inspect(R__cl, R__parent, "fStart", &fStart);
      R__insp.Inspect(R__cl, R__parent, "fElapsed", &fElapsed);
      R__insp.Inspect(R__cl, R__parent, "fFilteredIds[12]", fFilteredIds);
      TGMainFrame::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGRecorder(void *p) {
      return  p ? new(p) ::TGRecorder : new ::TGRecorder;
   }
   static void *newArray_TGRecorder(Long_t nElements, void *p) {
      return p ? new(p) ::TGRecorder[nElements] : new ::TGRecorder[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGRecorder(void *p) {
      delete ((::TGRecorder*)p);
   }
   static void deleteArray_TGRecorder(void *p) {
      delete [] ((::TGRecorder*)p);
   }
   static void destruct_TGRecorder(void *p) {
      typedef ::TGRecorder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGRecorder

/********************************************************
* gui/recorder/src/G__Recorder.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Recorder();

extern "C" void G__set_cpp_environmentG__Recorder() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TRecorder.h");
  G__cpp_reset_tagtableG__Recorder();
}
#include <new>
extern "C" int G__cpp_dllrevG__Recorder() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TRecorderState */
static int G__G__Recorder_266_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->Start((TRecorder*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (Window_t*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->Stop((TRecorder*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TRecorderState*) G__getstructoffset())->Replay((TRecorder*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (TRecorder::EReplayModes) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->Pause((TRecorder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->Resume((TRecorder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->ReplayStop((TRecorder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->ListCmd((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->ListGui((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->PrevCanvases((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TRecorderState*) G__getstructoffset())->GetState());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecorderState::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderState::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecorderState::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecorderState::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TRecorderState*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderState*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderState::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderState::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderState::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_266_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderState::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRecorderState G__TTRecorderState;
static int G__G__Recorder_266_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRecorderState*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRecorderState*) (soff+(sizeof(TRecorderState)*i)))->~G__TTRecorderState();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRecorderState*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRecorderState*) (soff))->~G__TTRecorderState();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_266_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorderState* dest = (TRecorderState*) G__getstructoffset();
   *dest = *(TRecorderState*) libp->para[0].ref;
   const TRecorderState& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecEvent */
static int G__G__Recorder_267_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TRecEvent*) G__getstructoffset())->ReplayEvent((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TRecEvent*) G__getstructoffset())->ReplayEvent();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TRecEvent*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTime* pobj;
         const TTime xobj = ((const TRecEvent*) G__getstructoffset())->GetTime();
         pobj = new TTime(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecEvent*) G__getstructoffset())->SetTime(*((TTime*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_267_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRecEvent G__TTRecEvent;
static int G__G__Recorder_267_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRecEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRecEvent*) (soff+(sizeof(TRecEvent)*i)))->~G__TTRecEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRecEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRecEvent*) (soff))->~G__TTRecEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_267_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecEvent* dest = (TRecEvent*) G__getstructoffset();
   *dest = *(TRecEvent*) libp->para[0].ref;
   const TRecEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecCmdEvent */
static int G__G__Recorder_269_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecCmdEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecCmdEvent[n];
     } else {
       p = new((void*) gvp) TRecCmdEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecCmdEvent;
     } else {
       p = new((void*) gvp) TRecCmdEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecCmdEvent*) G__getstructoffset())->SetText((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TRecCmdEvent*) G__getstructoffset())->GetText());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecCmdEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecCmdEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecCmdEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecCmdEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecCmdEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecCmdEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecCmdEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecCmdEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_269_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecCmdEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_269_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecCmdEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecCmdEvent(*(TRecCmdEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRecCmdEvent G__TTRecCmdEvent;
static int G__G__Recorder_269_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRecCmdEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRecCmdEvent*) (soff+(sizeof(TRecCmdEvent)*i)))->~G__TTRecCmdEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRecCmdEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRecCmdEvent*) (soff))->~G__TTRecCmdEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_269_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecCmdEvent* dest = (TRecCmdEvent*) G__getstructoffset();
   *dest = *(TRecCmdEvent*) libp->para[0].ref;
   const TRecCmdEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecExtraEvent */
static int G__G__Recorder_270_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecExtraEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecExtraEvent[n];
     } else {
       p = new((void*) gvp) TRecExtraEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecExtraEvent;
     } else {
       p = new((void*) gvp) TRecExtraEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecExtraEvent*) G__getstructoffset())->SetText(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TRecExtraEvent*) G__getstructoffset())->GetText();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecExtraEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecExtraEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecExtraEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecExtraEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecExtraEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecExtraEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecExtraEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecExtraEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_270_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecExtraEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_270_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecExtraEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecExtraEvent(*(TRecExtraEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRecExtraEvent G__TTRecExtraEvent;
static int G__G__Recorder_270_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRecExtraEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRecExtraEvent*) (soff+(sizeof(TRecExtraEvent)*i)))->~G__TTRecExtraEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRecExtraEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRecExtraEvent*) (soff))->~G__TTRecExtraEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_270_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecExtraEvent* dest = (TRecExtraEvent*) G__getstructoffset();
   *dest = *(TRecExtraEvent*) libp->para[0].ref;
   const TRecExtraEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecGuiEvent */
static int G__G__Recorder_271_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecGuiEvent::CreateEvent((TRecGuiEvent*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecGuiEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecGuiEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecGuiEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecGuiEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecGuiEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecGuiEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecGuiEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecGuiEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_271_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecGuiEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__G__Recorder_271_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecGuiEvent *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecGuiEvent[n];
     } else {
       p = new((void*) gvp) TRecGuiEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecGuiEvent;
     } else {
       p = new((void*) gvp) TRecGuiEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_271_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecGuiEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecGuiEvent(*(TRecGuiEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRecGuiEvent G__TTRecGuiEvent;
static int G__G__Recorder_271_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRecGuiEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRecGuiEvent*) (soff+(sizeof(TRecGuiEvent)*i)))->~G__TTRecGuiEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRecGuiEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRecGuiEvent*) (soff))->~G__TTRecGuiEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_271_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecGuiEvent* dest = (TRecGuiEvent*) G__getstructoffset();
   *dest = *(TRecGuiEvent*) libp->para[0].ref;
   const TRecGuiEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecorderInactive */
static int G__G__Recorder_272_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorderInactive* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecorderInactive[n];
     } else {
       p = new((void*) gvp) TRecorderInactive[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecorderInactive;
     } else {
       p = new((void*) gvp) TRecorderInactive;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((TRecorderInactive*) G__getstructoffset())->Start((TRecorder*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (Window_t*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TRecorderInactive*) G__getstructoffset())->Start((TRecorder*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (Window_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TRecorderInactive*) G__getstructoffset())->Start((TRecorder*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecorderInactive::DumpRootEvent((TRecGuiEvent*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) TRecorderInactive::DisplayValid((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecorderInactive::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderInactive::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecorderInactive::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecorderInactive::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderInactive*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderInactive::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderInactive::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderInactive::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_272_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderInactive::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_272_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecorderInactive* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecorderInactive(*(TRecorderInactive*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRecorderInactive G__TTRecorderInactive;
static int G__G__Recorder_272_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRecorderInactive*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRecorderInactive*) (soff+(sizeof(TRecorderInactive)*i)))->~G__TTRecorderInactive();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRecorderInactive*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRecorderInactive*) (soff))->~G__TTRecorderInactive();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_272_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorderInactive* dest = (TRecorderInactive*) G__getstructoffset();
   *dest = *(TRecorderInactive*) libp->para[0].ref;
   const TRecorderInactive& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecorderPaused */
static int G__G__Recorder_273_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecorderPaused::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_273_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderPaused::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_273_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecorderPaused::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_273_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecorderPaused::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_273_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderPaused*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_273_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderPaused::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_273_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderPaused::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_273_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderPaused::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_273_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderPaused::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_273_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecorderPaused* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecorderPaused(*(TRecorderPaused*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_273_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorderPaused* dest = (TRecorderPaused*) G__getstructoffset();
   *dest = *(TRecorderPaused*) libp->para[0].ref;
   const TRecorderPaused& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecorderRecording */
static int G__G__Recorder_274_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RegisterWindow((Window_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RecordCmdEvent((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RecordGuiEvent((Event_t*) G__int(libp->para[0]), (Window_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RecordGuiBldEvent((Event_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RecordGuiCNEvent((Event_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RecordMousePosition();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RecordPave((const TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RecordText((const TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->FilterEventPave();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->StartEditing();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->RecordExtraEvent(*((TString*) G__int(libp->para[0])), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecorderRecording::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderRecording::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecorderRecording::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecorderRecording::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderRecording*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderRecording::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderRecording::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderRecording::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_274_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderRecording::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_274_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecorderRecording* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecorderRecording(*(TRecorderRecording*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_274_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorderRecording* dest = (TRecorderRecording*) G__getstructoffset();
   *dest = *(TRecorderRecording*) libp->para[0].ref;
   const TRecorderRecording& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecorderReplaying */
static int G__G__Recorder_275_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderReplaying*) G__getstructoffset())->Continue();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderReplaying*) G__getstructoffset())->RegisterWindow((Window_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderReplaying*) G__getstructoffset())->ReplayRealtime();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecorderReplaying::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderReplaying::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecorderReplaying::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecorderReplaying::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorderReplaying*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderReplaying::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderReplaying::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorderReplaying::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_275_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorderReplaying::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_275_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecorderReplaying* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecorderReplaying(*(TRecorderReplaying*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_275_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorderReplaying* dest = (TRecorderReplaying*) G__getstructoffset();
   *dest = *(TRecorderReplaying*) libp->para[0].ref;
   const TRecorderReplaying& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecWinPair */
static int G__G__Recorder_278_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecWinPair* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TRecWinPair((Window_t) G__int(libp->para[0]), (Window_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TRecWinPair((Window_t) G__int(libp->para[0]), (Window_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecWinPair::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecWinPair::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecWinPair::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecWinPair::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecWinPair*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecWinPair::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecWinPair::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecWinPair::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_278_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecWinPair::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_278_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecWinPair* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecWinPair(*(TRecWinPair*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRecWinPair G__TTRecWinPair;
static int G__G__Recorder_278_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRecWinPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRecWinPair*) (soff+(sizeof(TRecWinPair)*i)))->~G__TTRecWinPair();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRecWinPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRecWinPair*) (soff))->~G__TTRecWinPair();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_278_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecWinPair* dest = (TRecWinPair*) G__getstructoffset();
   *dest = *(TRecWinPair*) libp->para[0].ref;
   const TRecWinPair& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRecorder */
static int G__G__Recorder_279_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecorder[n];
     } else {
       p = new((void*) gvp) TRecorder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecorder;
     } else {
       p = new((void*) gvp) TRecorder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecorder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorder* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecorder((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TRecorder((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRecorder((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TRecorder((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecorder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TRecorder*) G__getstructoffset())->Start((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Window_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TRecorder*) G__getstructoffset())->Start((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (Window_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TRecorder*) G__getstructoffset())->Start((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TRecorder*) G__getstructoffset())->Start((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TRecorder*) G__getstructoffset())->Stop((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TRecorder*) G__getstructoffset())->Stop();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TRecorder*) G__getstructoffset())->Replay((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (TRecorder::EReplayModes) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TRecorder*) G__getstructoffset())->Replay((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TRecorder*) G__getstructoffset())->Replay((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorder*) G__getstructoffset())->Replay();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorder*) G__getstructoffset())->Pause();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorder*) G__getstructoffset())->Resume();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorder*) G__getstructoffset())->ReplayStop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorder*) G__getstructoffset())->ListCmd((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorder*) G__getstructoffset())->ListGui((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TRecorder*) G__getstructoffset())->GetState());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorder*) G__getstructoffset())->PrevCanvases((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRecorder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRecorder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRecorder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRecorder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRecorder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_279_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRecorder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Recorder_279_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRecorder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRecorder(*(TRecorder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TRecorder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRecorder G__TTRecorder;
static int G__G__Recorder_279_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRecorder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRecorder*) (soff+(sizeof(TRecorder)*i)))->~G__TTRecorder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRecorder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRecorder*) (soff))->~G__TTRecorder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Recorder_279_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRecorder* dest = (TRecorder*) G__getstructoffset();
   *dest = *(TRecorder*) libp->para[0].ref;
   const TRecorder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGRecorder */
static int G__G__Recorder_282_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGRecorder* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGRecorder(
(const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TGRecorder(
(const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGRecorder((const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TGRecorder((const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGRecorder((const TGWindow*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TGRecorder((const TGWindow*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TGRecorder[n];
       } else {
         p = new((void*) gvp) TGRecorder[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TGRecorder;
       } else {
         p = new((void*) gvp) TGRecorder;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGRecorder*) G__getstructoffset())->StartStop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGRecorder*) G__getstructoffset())->Update();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGRecorder*) G__getstructoffset())->Replay();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGRecorder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGRecorder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGRecorder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGRecorder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGRecorder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGRecorder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGRecorder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGRecorder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Recorder_282_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGRecorder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGRecorder G__TTGRecorder;
static int G__G__Recorder_282_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGRecorder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGRecorder*) (soff+(sizeof(TGRecorder)*i)))->~G__TTGRecorder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGRecorder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGRecorder*) (soff))->~G__TTGRecorder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TRecorderState */

/* TRecEvent */

/* TRecCmdEvent */

/* TRecExtraEvent */

/* TRecGuiEvent */

/* TRecorderInactive */

/* TRecorderPaused */

/* TRecorderRecording */

/* TRecorderReplaying */

/* TRecWinPair */

/* TRecorder */

/* TGRecorder */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Recorder {
 public:
  G__Sizep2memfuncG__Recorder(): p(&G__Sizep2memfuncG__Recorder::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Recorder::*p)();
};

size_t G__get_sizep2memfuncG__Recorder()
{
  G__Sizep2memfuncG__Recorder a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Recorder() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent))) {
     TRecEvent *G__Lderived;
     G__Lderived=(TRecEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent),G__get_linked_tagnum(&G__G__RecorderLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent))) {
     TRecCmdEvent *G__Lderived;
     G__Lderived=(TRecCmdEvent*)0x1000;
     {
       TRecEvent *G__Lpbase=(TRecEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent),G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent),G__get_linked_tagnum(&G__G__RecorderLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent))) {
     TRecExtraEvent *G__Lderived;
     G__Lderived=(TRecExtraEvent*)0x1000;
     {
       TRecEvent *G__Lpbase=(TRecEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent),G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent),G__get_linked_tagnum(&G__G__RecorderLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent))) {
     TRecGuiEvent *G__Lderived;
     G__Lderived=(TRecGuiEvent*)0x1000;
     {
       TRecEvent *G__Lpbase=(TRecEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent),G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent),G__get_linked_tagnum(&G__G__RecorderLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive))) {
     TRecorderInactive *G__Lderived;
     G__Lderived=(TRecorderInactive*)0x1000;
     {
       TRecorderState *G__Lpbase=(TRecorderState*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive),G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused))) {
     TRecorderPaused *G__Lderived;
     G__Lderived=(TRecorderPaused*)0x1000;
     {
       TRecorderState *G__Lpbase=(TRecorderState*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused),G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording))) {
     TRecorderRecording *G__Lderived;
     G__Lderived=(TRecorderRecording*)0x1000;
     {
       TRecorderState *G__Lpbase=(TRecorderState*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording),G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying))) {
     TRecorderReplaying *G__Lderived;
     G__Lderived=(TRecorderReplaying*)0x1000;
     {
       TRecorderState *G__Lpbase=(TRecorderState*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying),G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair))) {
     TRecWinPair *G__Lderived;
     G__Lderived=(TRecWinPair*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair),G__get_linked_tagnum(&G__G__RecorderLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TRecorder))) {
     TRecorder *G__Lderived;
     G__Lderived=(TRecorder*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorder),G__get_linked_tagnum(&G__G__RecorderLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder))) {
     TGRecorder *G__Lderived;
     G__Lderived=(TGRecorder*)0x1000;
     {
       TGMainFrame *G__Lpbase=(TGMainFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder),G__get_linked_tagnum(&G__G__RecorderLN_TGMainFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder),G__get_linked_tagnum(&G__G__RecorderLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder),G__get_linked_tagnum(&G__G__RecorderLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder),G__get_linked_tagnum(&G__G__RecorderLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder),G__get_linked_tagnum(&G__G__RecorderLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder),G__get_linked_tagnum(&G__G__RecorderLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder),G__get_linked_tagnum(&G__G__RecorderLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Recorder() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 4 bytes (unsigned long)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__RecorderLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__RecorderLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__RecorderLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__RecorderLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__RecorderLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__RecorderLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Window_t",107,-1,0,-1);
   G__setnewtype(-1,"Window handle",0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__RecorderLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__RecorderLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__RecorderLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__RecorderLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TRecorderState */
static void G__setup_memvarTRecorderState(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState));
   { TRecorderState *p; p=(TRecorderState*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecEvent */
static void G__setup_memvarTRecEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent));
   { TRecEvent *p; p=(TRecEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTime),-1,-1,4,"fEventTime=",0,"Time of original event execution");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecEventcLcLERecEventType),-1,-2,1,"kCmdEvent=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecEventcLcLERecEventType),-1,-2,1,"kGuiEvent=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecEventcLcLERecEventType),-1,-2,1,"kExtraEvent=2",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecCmdEvent */
static void G__setup_memvarTRecCmdEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent));
   { TRecCmdEvent *p; p=(TRecCmdEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TString),-1,-1,4,"fText=",0,"Text of stored command");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecExtraEvent */
static void G__setup_memvarTRecExtraEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent));
   { TRecExtraEvent *p; p=(TRecExtraEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TString),-1,-1,4,"fText=",0,"Text of stored command");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecGuiEvent */
static void G__setup_memvarTRecGuiEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent));
   { TRecGuiEvent *p; p=(TRecGuiEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__RecorderLN_EGEventType),-1,-1,2,"fType=",0,"Type of event (see EGEventType)");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("Window_t"),-1,2,"fWindow=",0,"Window ID which reported event is relative to");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("Time_t"),-1,2,"fTime=",0,"Time event occured in ms");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fX=",0,"Pointer x coordinate in event window");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fY=",0,"Pointer y coordinate in event window");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXRoot=",0,"x coordinate relative to root");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYRoot=",0,"y coordinate relative to root");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fCode=",0,"Key or button code");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fState=",0,"Key or button mask");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fWidth=",0,"Width of exposed area");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fHeight=",0,"Height of exposed area");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCount=",0,"If non-zero, at least this many more exposes");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSendEvent=",0,"True if event came from SendEvent");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("Handle_t"),-1,2,"fHandle=",0,"General resource handle (used for atoms or windows)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFormat=",0,"Next fields only used by kClientMessageEvent");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,2,"fUser[5]=",0,"5 longs can be used by client message events");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("Window_t"),-1,2,"fMasked=",0,"If non-zero, event recorded in HandleMaskEvent()");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEventcLcLEConfigureNotifyType),-1,-2,1,"kCNMove=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEventcLcLEConfigureNotifyType),-1,-2,1,"kCNResize=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEventcLcLEConfigureNotifyType),-1,-2,1,"kCNMoveResize=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEventcLcLEConfigureNotifyType),-1,-2,1,"kCNFilter=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEventcLcLERootAtoms),-1,-2,1,"kWM_DELETE_WINDOW=10001",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEventcLcLERootAtoms),-1,-2,1,"kROOT_MESSAGE=10002",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecorderInactive */
static void G__setup_memvarTRecorderInactive(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive));
   { TRecorderInactive *p; p=(TRecorderInactive*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TSeqCollection),-1,-1,4,"fCollect=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecorderPaused */
static void G__setup_memvarTRecorderPaused(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused));
   { TRecorderPaused *p; p=(TRecorderPaused*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying),-1,-1,4,"fReplayingState=",0,"Replaying that is paused");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecorderRecording */
static void G__setup_memvarTRecorderRecording(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording));
   { TRecorderRecording *p; p=(TRecorderRecording*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecorder),-1,-1,4,"fRecorder=",0,"Reference to recorder (owner of this state) is kept in order to switch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TFile),-1,-1,4,"fFile=",0,"ROOT file to store recorded events in");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTimer),-1,-1,4,"fTimer=",0,"Timer used for recording");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTimer),-1,-1,4,"fMouseTimer=",0,"Timer used for recording mouse position");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fBeginPave=",0,"TLatex/TPaveLabel edition starting time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTree),-1,-1,4,"fWinTree=",0,"TTree with registered windows");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTree),-1,-1,4,"fGuiTree=",0,"TTree with recorded GUI events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTree),-1,-1,4,"fCmdTree=",0,"TTree with recorded commandline events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTree),-1,-1,4,"fExtraTree=",0,"TTree with recorded extra events (PaveLabels and Texts)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fWin=",0,"The newest registered window to be stored in TTree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent),-1,-1,4,"fGuiEvent=",0,"The newest GUI event to be stored in TTree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent),-1,-1,4,"fCmdEvent=",0,"The newest commandline event to be stored in TTree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent),-1,-1,4,"fExtraEvent=",0,"The newest extra event to be stored in TTree");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCmdEventPending=",0,"Indication if there is a still pending commandline event that should be stored.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRegWinCounter=",0,"Counter of registered ROOT windows.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFilteredIdsCount=",0,"Only when GUI for recorder is used: Count of windows in GUI recorder");
   G__memvar_setup((void*)0,75,0,0,-1,G__defined_typename("Window_t"),-1,4,"fFilteredIds=",0,"Only when GUI for recorer is used: IDs of windows that creates that GUI.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFilterEventPave=",0,"Special flag to filter events during the pave recording");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecorderReplaying */
static void G__setup_memvarTRecorderReplaying(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying));
   { TRecorderReplaying *p; p=(TRecorderReplaying*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecorder),-1,-1,4,"fRecorder=",0,"Reference to recorder (owner of this state) is kept in order to switch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TFile),-1,-1,4,"fFile=",0,"ROOT file which the recorded events are being read from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TCanvas),-1,-1,4,"fCanv=",0,"Used to record the previous canvases");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTimer),-1,-1,4,"fTimer=",0,"Timer used for replaying");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTree),-1,-1,4,"fWinTree=",0,"TTree with recorded windows (=registered during recording)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTree),-1,-1,4,"fGuiTree=",0,"TTree with recorded GUI events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTree),-1,-1,4,"fCmdTree=",0,"TTree with recorded commandline events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTree),-1,-1,4,"fExtraTree=",0,"TTree with recorded extra events (PaveLabels and Texts)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fWin=",0,"Window ID being currenty mapped");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent),-1,-1,4,"fGuiEvent=",0,"GUI event being currently replayed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent),-1,-1,4,"fCmdEvent=",0,"Commandline event being currently replayed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent),-1,-1,4,"fExtraEvent=",0,"Extra event being currently replayed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRegWinCounter=",0,"Counter of registered windows when replaying");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGuiTreeCounter=",0,"Counter of GUI events that have been replayed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCmdTreeCounter=",0,"Counter of commandline events that have been replayed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fExtraTreeCounter=",0,"Counter of extra events that have been replayed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fWinTreeEntries=",0,"Number of registered windows during _recording_");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TMutex),-1,-1,4,"fMutex=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TList),-1,-1,4,"fWindowList=",0,"List of TRecWinPair objects. Mapping of window IDs is stored here.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent),-1,-1,4,"fNextEvent=",0,"The next event that is going to be replayed (GUI event or commandline)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTime),-1,-1,4,"fPreviousEventTime=",0,"Execution time of the previously replayed event.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fWaitingForWindow=",0,"Signalizes that we wait for a window to be registered in order");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEventReplayed=",0,"Signalizes that the last event sent to the replaying has been already replayed.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fShowMouseCursor=",0,"Specifies if mouse cursor should be also replayed");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFilterStatusBar=",0,"Special flag to filter status bar element");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecWinPair */
static void G__setup_memvarTRecWinPair(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair));
   { TRecWinPair *p; p=(TRecWinPair*)0x1000; if (p) { }
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("Window_t"),-1,2,"fKey=",0,"ID of original window (for which an event was originally recorded)");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("Window_t"),-1,2,"fValue=",0,"ID of a new window (for which an event is being replayed)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRecorder */
static void G__setup_memvarTRecorder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorder));
   { TRecorder *p; p=(TRecorder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState),-1,-1,4,"fRecorderState=",0,"! Current state of recorder");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TString),-1,-1,2,"fFilename=",0,"Events file name");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLEReplayModes),-1,-2,1,"kRealtime=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState),-1,-2,1,"kInactive=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState),-1,-2,1,"kRecording=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState),-1,-2,1,"kPaused=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState),-1,-2,1,"kReplaying=3",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGRecorder */
static void G__setup_memvarTGRecorder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder));
   { TGRecorder *p; p=(TGRecorder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TRecorder),-1,-1,4,"fRecorder=",0,"Recorder");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TGPictureButton),-1,-1,4,"fStartStop=",0,"Button for start and stop of recording");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TGPictureButton),-1,-1,4,"fReplay=",0,"Button for start of replaying");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TGLabel),-1,-1,4,"fStatus=",0,"Label with actual status");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TGLabel),-1,-1,4,"fTimeDisplay=",0,"Label with time counter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TGCheckButton),-1,-1,4,"fCursorCheckBox=",0,"Check box \"Show mouse cursor\" for replaying");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TTimer),-1,-1,4,"fTimer=",0,"Timer for handling GUI of recorder");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,4,"fStart=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,4,"fElapsed=",0,"playing/recording time");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgWidgetsCount=12",0,"Number of windows in GUI recorder");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("Window_t"),-1,4,"fFilteredIds[12]=",0,"IDs of these windows in GUI recorder");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__RecorderLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Recorder() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTRecorderState(void) {
   /* TRecorderState */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState));
   G__memfunc_setup("ChangeState",1095,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'TRecorder' - 0 - r U 'TRecorderState' - 0 - s "
"g - 'Bool_t' 0 - deletePreviousState", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Start",526,G__G__Recorder_266_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TRecorder' - 0 - - C - - 10 - - "
"C - 'Option_t' 10 - - K - 'Window_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Stop",422,G__G__Recorder_266_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TRecorder' - 0 - - g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Replay",621,G__G__Recorder_266_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'TRecorder' - 0 - - C - - 10 - - "
"g - 'Bool_t' 0 - - i 'TRecorder::EReplayModes' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pause",510,G__G__Recorder_266_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRecorder' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Resume",625,G__G__Recorder_266_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRecorder' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReplayStop",1043,G__G__Recorder_266_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRecorder' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ListCmd",688,G__G__Recorder_266_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ListGui",705,G__G__Recorder_266_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrevCanvases",1233,G__G__Recorder_266_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetState",801,G__G__Recorder_266_0_11, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__Recorder_266_0_12, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecorderState::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_266_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderState::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_266_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecorderState::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_266_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecorderState::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__Recorder_266_0_16, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__Recorder_266_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__Recorder_266_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_266_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_266_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderState::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_266_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderState::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_266_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderState::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_266_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderState::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TRecorderState", 1545, G__G__Recorder_266_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_266_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState), -1, 1, 1, 1, 1, 0, "u 'TRecorderState' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecEvent(void) {
   /* TRecEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent));
   G__memfunc_setup("ReplayEvent",1135,G__G__Recorder_267_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' showMouseCursor", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetType",706,G__G__Recorder_267_0_2, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecEventcLcLERecEventType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTime",687,G__G__Recorder_267_0_3, 117, G__get_linked_tagnum(&G__G__RecorderLN_TTime), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime",699,G__G__Recorder_267_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTime' - 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Recorder_267_0_5, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_267_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_267_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_267_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_267_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_267_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_267_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_267_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_267_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TRecEvent", 1006, G__G__Recorder_267_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_267_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent), -1, 1, 1, 1, 1, 0, "u 'TRecEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecCmdEvent(void) {
   /* TRecCmdEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent));
   G__memfunc_setup("TRecCmdEvent",1156,G__G__Recorder_269_0_1, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetText",721,G__G__Recorder_269_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetText",709,G__G__Recorder_269_0_3, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__RecorderLN_TRecEventcLcLERecEventType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReplayEvent",1135,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Recorder_269_0_6, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecCmdEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_269_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecCmdEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_269_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecCmdEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_269_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecCmdEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_269_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_269_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecCmdEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_269_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecCmdEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_269_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecCmdEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_269_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecCmdEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRecCmdEvent", 1156, G__G__Recorder_269_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent), -1, 0, 1, 1, 1, 0, "u 'TRecCmdEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TRecCmdEvent", 1282, G__G__Recorder_269_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_269_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent), -1, 1, 1, 1, 1, 0, "u 'TRecCmdEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecExtraEvent(void) {
   /* TRecExtraEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent));
   G__memfunc_setup("TRecExtraEvent",1396,G__G__Recorder_270_0_1, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetText",721,G__G__Recorder_270_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetText",709,G__G__Recorder_270_0_3, 117, G__get_linked_tagnum(&G__G__RecorderLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__RecorderLN_TRecEventcLcLERecEventType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReplayEvent",1135,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Recorder_270_0_6, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecExtraEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_270_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecExtraEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_270_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecExtraEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_270_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecExtraEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_270_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_270_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecExtraEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_270_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecExtraEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_270_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecExtraEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_270_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecExtraEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRecExtraEvent", 1396, G__G__Recorder_270_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent), -1, 0, 1, 1, 1, 0, "u 'TRecExtraEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TRecExtraEvent", 1522, G__G__Recorder_270_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_270_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent), -1, 1, 1, 1, 1, 0, "u 'TRecExtraEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecGuiEvent(void) {
   /* TRecGuiEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent));
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__RecorderLN_TRecEventcLcLERecEventType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReplayEvent",1135,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' showMouseCursor", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateEvent",1110,G__G__Recorder_271_0_3, 85, G__get_linked_tagnum(&G__G__RecorderLN_Event_t), -1, 0, 1, 3, 1, 0, "U 'TRecGuiEvent' - 0 - ge", (char*)NULL, (void*) G__func2void( (Event_t* (*)(TRecGuiEvent*))(&TRecGuiEvent::CreateEvent) ), 0);
   G__memfunc_setup("Class",502,G__G__Recorder_271_0_4, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecGuiEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_271_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecGuiEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_271_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecGuiEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_271_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecGuiEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_271_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_271_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecGuiEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_271_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecGuiEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_271_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecGuiEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_271_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecGuiEvent::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TRecGuiEvent", 1173, G__G__Recorder_271_0_16, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TRecGuiEvent", 1173, G__G__Recorder_271_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent), -1, 0, 1, 1, 1, 0, "u 'TRecGuiEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TRecGuiEvent", 1299, G__G__Recorder_271_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_271_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent), -1, 1, 1, 1, 1, 0, "u 'TRecGuiEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecorderInactive(void) {
   /* TRecorderInactive */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive));
   G__memfunc_setup("TRecorderInactive",1725,G__G__Recorder_272_0_1, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ListCmd",688,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ListGui",705,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Start",526,G__G__Recorder_272_0_4, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TRecorder' - 0 - r C - - 10 - filename "
"C - 'Option_t' 10 - option K - 'Window_t' 0 '0' w "
"i - 'Int_t' 0 '0' winCount", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Replay",621,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'TRecorder' - 0 - r C - - 10 - filename "
"g - 'Bool_t' 0 - showMouseCursor i 'TRecorder::EReplayModes' - 0 - mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetState",801,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpRootEvent",1340,G__G__Recorder_272_0_7, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TRecGuiEvent' - 0 - e i - 'Int_t' 0 - n", (char*)NULL, (void*) G__func2void( (void (*)(TRecGuiEvent*, Int_t))(&TRecorderInactive::DumpRootEvent) ), 0);
   G__memfunc_setup("DisplayValid",1222,G__G__Recorder_272_0_8, 108, -1, -1, 0, 1, 3, 1, 0, "l - 'Long_t' 0 - n", (char*)NULL, (void*) G__func2void( (long (*)(Long_t))(&TRecorderInactive::DisplayValid) ), 0);
   G__memfunc_setup("PrevCanvases",1233,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - filename C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Recorder_272_0_10, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecorderInactive::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_272_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderInactive::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_272_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecorderInactive::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_272_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecorderInactive::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_272_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_272_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderInactive::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_272_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderInactive::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_272_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderInactive::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_272_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderInactive::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRecorderInactive", 1725, G__G__Recorder_272_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive), -1, 0, 1, 1, 1, 0, "u 'TRecorderInactive' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TRecorderInactive", 1851, G__G__Recorder_272_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_272_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive), -1, 1, 1, 1, 1, 0, "u 'TRecorderInactive' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecorderPaused(void) {
   /* TRecorderPaused */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused));
   G__memfunc_setup("TRecorderPaused",1516,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused), -1, 0, 1, 1, 2, 0, "U 'TRecorderReplaying' - 0 - state", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Resume",625,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TRecorder' - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReplayStop",1043,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TRecorder' - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Recorder_273_0_5, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecorderPaused::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_273_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderPaused::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_273_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecorderPaused::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_273_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecorderPaused::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_273_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_273_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderPaused::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_273_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderPaused::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_273_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderPaused::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_273_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderPaused::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRecorderPaused", 1516, G__G__Recorder_273_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused), -1, 0, 1, 1, 1, 0, "u 'TRecorderPaused' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_273_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused), -1, 1, 1, 1, 1, 0, "u 'TRecorderPaused' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecorderRecording(void) {
   /* TRecorderRecording */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording));
   G__memfunc_setup("IsFiltered",1003,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "k - 'Window_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTypeOfConfigureNotify",2462,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'Event_t' - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyEvent",925,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'Event_t' - 0 - e k - 'Window_t' 0 - wid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TRecorderRecording",1831,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording), -1, 0, 5, 1, 2, 0, 
"U 'TRecorder' - 0 - r C - - 10 - filename "
"C - 'Option_t' 10 - option K - 'Window_t' 0 - w "
"i - 'Int_t' 0 - winCount", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StartRecording",1451,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Stop",422,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TRecorder' - 0 - r g - 'Bool_t' 0 - guiCommand", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RegisterWindow",1469,G__G__Recorder_274_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'Window_t' 0 - w", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("RecordCmdEvent",1397,G__G__Recorder_274_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - line", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("RecordGuiEvent",1414,G__G__Recorder_274_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'Event_t' - 0 - e k - 'Window_t' 0 - wid", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("RecordGuiBldEvent",1688,G__G__Recorder_274_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Event_t' - 0 - e", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("RecordGuiCNEvent",1559,G__G__Recorder_274_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Event_t' - 0 - e", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("RecordMousePosition",1981,G__G__Recorder_274_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecordPave",1003,G__G__Recorder_274_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 10 - obj", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("RecordText",1028,G__G__Recorder_274_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 10 - obj", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("FilterEventPave",1524,G__G__Recorder_274_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("StartEditing",1234,G__G__Recorder_274_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("RecordExtraEvent",1637,G__G__Recorder_274_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - line k - 'ULong_t' 0 - ExtTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Recorder_274_0_19, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecorderRecording::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_274_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderRecording::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_274_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecorderRecording::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_274_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecorderRecording::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_274_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_274_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderRecording::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_274_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderRecording::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_274_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderRecording::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_274_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderRecording::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRecorderRecording", 1831, G__G__Recorder_274_0_31, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording), -1, 0, 1, 1, 1, 0, "u 'TRecorderRecording' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_274_0_32, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording), -1, 1, 1, 1, 1, 0, "u 'TRecorderRecording' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecorderReplaying(void) {
   /* TRecorderReplaying */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying));
   G__memfunc_setup("PrepareNextEvent",1648,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemapWindowReferences",2159,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanOverlap",1003,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FilterEvent",1128,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'TRecGuiEvent' - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TRecorderReplaying",1845,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying), -1, 0, 1, 1, 2, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"U 'TRecorder' - 0 - r g - 'Bool_t' 0 - showMouseCursor "
"i 'TRecorder::EReplayModes' - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pause",510,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TRecorder' - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Continue",837,G__G__Recorder_275_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReplayStop",1043,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TRecorder' - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RegisterWindow",1469,G__G__Recorder_275_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'Window_t' 0 - w", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("ReplayRealtime",1440,G__G__Recorder_275_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", "SLOT", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Recorder_275_0_13, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecorderReplaying::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_275_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderReplaying::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_275_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecorderReplaying::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_275_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecorderReplaying::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_275_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_275_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderReplaying::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_275_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderReplaying::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_275_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorderReplaying::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_275_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorderReplaying::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRecorderReplaying", 1845, G__G__Recorder_275_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying), -1, 0, 1, 1, 1, 0, "u 'TRecorderReplaying' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_275_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying), -1, 1, 1, 1, 1, 0, "u 'TRecorderReplaying' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecWinPair(void) {
   /* TRecWinPair */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair));
   G__memfunc_setup("TRecWinPair",1064,G__G__Recorder_278_0_1, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair), -1, 0, 2, 1, 1, 0, 
"k - 'Window_t' 0 - key k - 'Window_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Recorder_278_0_2, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecWinPair::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_278_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecWinPair::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_278_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecWinPair::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_278_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecWinPair::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_278_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_278_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecWinPair::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_278_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecWinPair::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_278_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecWinPair::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_278_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecWinPair::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRecWinPair", 1064, G__G__Recorder_278_0_14, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair), -1, 0, 1, 1, 1, 0, "u 'TRecWinPair' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TRecWinPair", 1190, G__G__Recorder_278_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_278_0_16, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair), -1, 1, 1, 1, 1, 0, "u 'TRecWinPair' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRecorder(void) {
   /* TRecorder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorder));
   G__memfunc_setup("ChangeState",1095,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'TRecorderState' - 0 - newstate g - 'Bool_t' 0 'kTRUE' deletePreviousState", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TRecorder",906,G__G__Recorder_279_0_2, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecorder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TRecorder",906,G__G__Recorder_279_0_3, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecorder), -1, 0, 2, 1, 1, 0, 
"C - - 10 - filename C - 'Option_t' 10 '\"READ\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Start",526,G__G__Recorder_279_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - filename C - 'Option_t' 10 '\"RECREATE\"' option "
"K - 'Window_t' 0 '0' w i - 'Int_t' 0 '0' winCount", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stop",422,G__G__Recorder_279_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' guiCommand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Replay",621,G__G__Recorder_279_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 - filename g - 'Bool_t' 0 'kTRUE' showMouseCursor "
"i 'TRecorder::EReplayModes' - 0 'kRealtime' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Replay",621,G__G__Recorder_279_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Pause",510,G__G__Recorder_279_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resume",625,G__G__Recorder_279_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplayStop",1043,G__G__Recorder_279_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ListCmd",688,G__G__Recorder_279_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ListGui",705,G__G__Recorder_279_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,G__G__Recorder_279_0_14, 105, G__get_linked_tagnum(&G__G__RecorderLN_TRecordercLcLERecorderState), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrevCanvases",1233,G__G__Recorder_279_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - filename C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Recorder_279_0_16, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRecorder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_279_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_279_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRecorder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_279_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRecorder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_279_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_279_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_279_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_279_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRecorder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_279_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRecorder::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRecorder", 906, G__G__Recorder_279_0_28, (int) ('i'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorder), -1, 0, 1, 1, 1, 0, "u 'TRecorder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TRecorder", 1032, G__G__Recorder_279_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Recorder_279_0_30, (int) ('u'), G__get_linked_tagnum(&G__G__RecorderLN_TRecorder), -1, 1, 1, 1, 1, 0, "u 'TRecorder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGRecorder(void) {
   /* TGRecorder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder));
   G__memfunc_setup("SetDefault",1009,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGRecorder",977,G__G__Recorder_282_0_2, 105, G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder), -1, 0, 3, 1, 1, 0, 
"U 'TGWindow' - 10 '0' p h - 'UInt_t' 0 '230' w "
"h - 'UInt_t' 0 '150' h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StartStop",948,G__G__Recorder_282_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,G__G__Recorder_282_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Replay",621,G__G__Recorder_282_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Recorder_282_0_6, 85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGRecorder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Recorder_282_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGRecorder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Recorder_282_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGRecorder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Recorder_282_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGRecorder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__RecorderLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Recorder_282_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Recorder_282_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGRecorder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Recorder_282_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGRecorder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Recorder_282_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGRecorder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Recorder_282_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGRecorder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGRecorder", 1103, G__G__Recorder_282_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Recorder() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Recorder() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Recorder() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__RecorderLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TTimer = { "TTimer" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TQObject = { "TQObject" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TTime = { "TTime" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_EGEventType = { "EGEventType" , 101 , -1 };
G__linked_taginfo G__G__RecorderLN_Event_t = { "Event_t" , 115 , -1 };
G__linked_taginfo G__G__RecorderLN_TGWindow = { "TGWindow" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TGObject = { "TGObject" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TGFrame = { "TGFrame" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TGCompositeFrame = { "TGCompositeFrame" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TSeqCollection = { "TSeqCollection" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__RecorderLN_TGMainFrame = { "TGMainFrame" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TMutex = { "TMutex" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TGPictureButton = { "TGPictureButton" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TGCheckButton = { "TGCheckButton" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TGLabel = { "TGLabel" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecorderState = { "TRecorderState" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecEvent = { "TRecEvent" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecEventcLcLERecEventType = { "TRecEvent::ERecEventType" , 101 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecCmdEvent = { "TRecCmdEvent" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecExtraEvent = { "TRecExtraEvent" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecGuiEvent = { "TRecGuiEvent" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecorderInactive = { "TRecorderInactive" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecorderPaused = { "TRecorderPaused" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecorderRecording = { "TRecorderRecording" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecorderReplaying = { "TRecorderReplaying" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecGuiEventcLcLEConfigureNotifyType = { "TRecGuiEvent::EConfigureNotifyType" , 101 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecGuiEventcLcLERootAtoms = { "TRecGuiEvent::ERootAtoms" , 101 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecWinPair = { "TRecWinPair" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecorder = { "TRecorder" , 99 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecordercLcLEReplayModes = { "TRecorder::EReplayModes" , 101 , -1 };
G__linked_taginfo G__G__RecorderLN_TRecordercLcLERecorderState = { "TRecorder::ERecorderState" , 101 , -1 };
G__linked_taginfo G__G__RecorderLN_TGRecorder = { "TGRecorder" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Recorder() {
  G__G__RecorderLN_TClass.tagnum = -1 ;
  G__G__RecorderLN_TBuffer.tagnum = -1 ;
  G__G__RecorderLN_TMemberInspector.tagnum = -1 ;
  G__G__RecorderLN_TObject.tagnum = -1 ;
  G__G__RecorderLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__RecorderLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__RecorderLN_TList.tagnum = -1 ;
  G__G__RecorderLN_TBrowser.tagnum = -1 ;
  G__G__RecorderLN_TTimer.tagnum = -1 ;
  G__G__RecorderLN_TString.tagnum = -1 ;
  G__G__RecorderLN_TQObject.tagnum = -1 ;
  G__G__RecorderLN_TTime.tagnum = -1 ;
  G__G__RecorderLN_EGEventType.tagnum = -1 ;
  G__G__RecorderLN_Event_t.tagnum = -1 ;
  G__G__RecorderLN_TGWindow.tagnum = -1 ;
  G__G__RecorderLN_TGObject.tagnum = -1 ;
  G__G__RecorderLN_TGFrame.tagnum = -1 ;
  G__G__RecorderLN_TGCompositeFrame.tagnum = -1 ;
  G__G__RecorderLN_TSeqCollection.tagnum = -1 ;
  G__G__RecorderLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__RecorderLN_TGMainFrame.tagnum = -1 ;
  G__G__RecorderLN_TCanvas.tagnum = -1 ;
  G__G__RecorderLN_TMutex.tagnum = -1 ;
  G__G__RecorderLN_TTree.tagnum = -1 ;
  G__G__RecorderLN_TFile.tagnum = -1 ;
  G__G__RecorderLN_TGPictureButton.tagnum = -1 ;
  G__G__RecorderLN_TGCheckButton.tagnum = -1 ;
  G__G__RecorderLN_TGLabel.tagnum = -1 ;
  G__G__RecorderLN_TRecorderState.tagnum = -1 ;
  G__G__RecorderLN_TRecEvent.tagnum = -1 ;
  G__G__RecorderLN_TRecEventcLcLERecEventType.tagnum = -1 ;
  G__G__RecorderLN_TRecCmdEvent.tagnum = -1 ;
  G__G__RecorderLN_TRecExtraEvent.tagnum = -1 ;
  G__G__RecorderLN_TRecGuiEvent.tagnum = -1 ;
  G__G__RecorderLN_TRecorderInactive.tagnum = -1 ;
  G__G__RecorderLN_TRecorderPaused.tagnum = -1 ;
  G__G__RecorderLN_TRecorderRecording.tagnum = -1 ;
  G__G__RecorderLN_TRecorderReplaying.tagnum = -1 ;
  G__G__RecorderLN_TRecGuiEventcLcLEConfigureNotifyType.tagnum = -1 ;
  G__G__RecorderLN_TRecGuiEventcLcLERootAtoms.tagnum = -1 ;
  G__G__RecorderLN_TRecWinPair.tagnum = -1 ;
  G__G__RecorderLN_TRecorder.tagnum = -1 ;
  G__G__RecorderLN_TRecordercLcLEReplayModes.tagnum = -1 ;
  G__G__RecorderLN_TRecordercLcLERecorderState.tagnum = -1 ;
  G__G__RecorderLN_TGRecorder.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Recorder() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TList);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TTimer);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TString);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TQObject);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TTime);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_EGEventType);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_Event_t);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TGWindow);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TGObject);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TGFrame);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TGCompositeFrame);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TSeqCollection);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TGMainFrame);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TMutex);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TTree);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TFile);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TGPictureButton);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TGCheckButton);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TGLabel);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderState),sizeof(TRecorderState),-1,1025,"Abstract class that defines interface for a state of recorder",G__setup_memvarTRecorderState,G__setup_memfuncTRecorderState);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecEvent),sizeof(TRecEvent),-1,28674,"Abstract class. Defines basic interface for storing information about ROOT events",G__setup_memvarTRecEvent,G__setup_memfuncTRecEvent);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TRecEventcLcLERecEventType);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecCmdEvent),sizeof(TRecCmdEvent),-1,28928,"Class stores information about 1 commandline event (= 1 command typed by user in commandline)",G__setup_memvarTRecCmdEvent,G__setup_memfuncTRecCmdEvent);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecExtraEvent),sizeof(TRecExtraEvent),-1,28928,"Class stores information about extra events",G__setup_memvarTRecExtraEvent,G__setup_memfuncTRecExtraEvent);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecGuiEvent),sizeof(TRecGuiEvent),-1,28672,"Class stores information about 1 GUI event in ROOT",G__setup_memvarTRecGuiEvent,G__setup_memfuncTRecGuiEvent);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderInactive),sizeof(TRecorderInactive),-1,1280,"Represents state of TRecorder after its creation",G__setup_memvarTRecorderInactive,G__setup_memfuncTRecorderInactive);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderPaused),sizeof(TRecorderPaused),-1,33792,"Represents state of TRecorder when paused",G__setup_memvarTRecorderPaused,G__setup_memfuncTRecorderPaused);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderRecording),sizeof(TRecorderRecording),-1,33792,"Represents state of TRecorder when recording events",G__setup_memvarTRecorderRecording,G__setup_memfuncTRecorderRecording);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorderReplaying),sizeof(TRecorderReplaying),-1,33792,"Represents state of TRecorder when replaying",G__setup_memvarTRecorderReplaying,G__setup_memfuncTRecorderReplaying);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TRecGuiEventcLcLEConfigureNotifyType);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TRecGuiEventcLcLERootAtoms);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecWinPair),sizeof(TRecWinPair),-1,61440,"Class used for storing of window IDs mapping. Needed for replaying events.",G__setup_memvarTRecWinPair,G__setup_memfuncTRecWinPair);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TRecorder),sizeof(TRecorder),-1,62720,"Class provides direct recorder/replayer interface for a user.",G__setup_memvarTRecorder,G__setup_memfuncTRecorder);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TRecordercLcLEReplayModes);
   G__get_linked_tagnum_fwd(&G__G__RecorderLN_TRecordercLcLERecorderState);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__RecorderLN_TGRecorder),sizeof(TGRecorder),-1,62720,"GUI class of the event recorder.",G__setup_memvarTGRecorder,G__setup_memfuncTGRecorder);
}
extern "C" void G__cpp_setupG__Recorder(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Recorder()");
  G__set_cpp_environmentG__Recorder();
  G__cpp_setup_tagtableG__Recorder();

  G__cpp_setup_inheritanceG__Recorder();

  G__cpp_setup_typetableG__Recorder();

  G__cpp_setup_memvarG__Recorder();

  G__cpp_setup_memfuncG__Recorder();
  G__cpp_setup_globalG__Recorder();
  G__cpp_setup_funcG__Recorder();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Recorder();
  return;
}
class G__cpp_setup_initG__Recorder {
  public:
    G__cpp_setup_initG__Recorder() { G__add_setup_func("G__Recorder",(G__incsetup)(&G__cpp_setupG__Recorder)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Recorder() { G__remove_setup_func("G__Recorder"); }
};
G__cpp_setup_initG__Recorder G__cpp_setup_initializerG__Recorder;

