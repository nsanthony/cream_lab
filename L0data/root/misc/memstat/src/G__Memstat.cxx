//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:49:33 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Memstat.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace Memstat {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Memstat_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Memstat", 0 /*version*/, "include/TMemStatHelpers.h", 35,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Memstat_Dictionary, 0);
         return &instance;
      }
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Memstat_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void TMemStatDepend_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TMemStatDepend_Dictionary();
   static void *new_TMemStatDepend(void *p = 0);
   static void *newArray_TMemStatDepend(Long_t size, void *p);
   static void delete_TMemStatDepend(void *p);
   static void deleteArray_TMemStatDepend(void *p);
   static void destruct_TMemStatDepend(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMemStatDepend*)
   {
      ::TMemStatDepend *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TMemStatDepend),0);
      static ::ROOT::TGenericClassInfo 
         instance("TMemStatDepend", "include/TMemStatDepend.h", 33,
                  typeid(::TMemStatDepend), DefineBehavior(ptr, ptr),
                  0, &TMemStatDepend_Dictionary, isa_proxy, 0,
                  sizeof(::TMemStatDepend) );
      instance.SetNew(&new_TMemStatDepend);
      instance.SetNewArray(&newArray_TMemStatDepend);
      instance.SetDelete(&delete_TMemStatDepend);
      instance.SetDeleteArray(&deleteArray_TMemStatDepend);
      instance.SetDestructor(&destruct_TMemStatDepend);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMemStatDepend*)
   {
      return GenerateInitInstanceLocal((::TMemStatDepend*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMemStatDepend*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TMemStatDepend_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TMemStatDepend*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TMemStatManager_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMemStatManager(void *p = 0);
   static void *newArray_TMemStatManager(Long_t size, void *p);
   static void delete_TMemStatManager(void *p);
   static void deleteArray_TMemStatManager(void *p);
   static void destruct_TMemStatManager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMemStatManager*)
   {
      ::TMemStatManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMemStatManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMemStatManager", ::TMemStatManager::Class_Version(), "include/TMemStatManager.h", 49,
                  typeid(::TMemStatManager), DefineBehavior(ptr, ptr),
                  &::TMemStatManager::Dictionary, isa_proxy, 4,
                  sizeof(::TMemStatManager) );
      instance.SetNew(&new_TMemStatManager);
      instance.SetNewArray(&newArray_TMemStatManager);
      instance.SetDelete(&delete_TMemStatManager);
      instance.SetDeleteArray(&deleteArray_TMemStatManager);
      instance.SetDestructor(&destruct_TMemStatManager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMemStatManager*)
   {
      return GenerateInitInstanceLocal((::TMemStatManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMemStatManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMemStatCodeInfo_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMemStatCodeInfo(void *p = 0);
   static void *newArray_TMemStatCodeInfo(Long_t size, void *p);
   static void delete_TMemStatCodeInfo(void *p);
   static void deleteArray_TMemStatCodeInfo(void *p);
   static void destruct_TMemStatCodeInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMemStatCodeInfo*)
   {
      ::TMemStatCodeInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMemStatCodeInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMemStatCodeInfo", ::TMemStatCodeInfo::Class_Version(), "include/TMemStatInfo.h", 71,
                  typeid(::TMemStatCodeInfo), DefineBehavior(ptr, ptr),
                  &::TMemStatCodeInfo::Dictionary, isa_proxy, 4,
                  sizeof(::TMemStatCodeInfo) );
      instance.SetNew(&new_TMemStatCodeInfo);
      instance.SetNewArray(&newArray_TMemStatCodeInfo);
      instance.SetDelete(&delete_TMemStatCodeInfo);
      instance.SetDeleteArray(&deleteArray_TMemStatCodeInfo);
      instance.SetDestructor(&destruct_TMemStatCodeInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMemStatCodeInfo*)
   {
      return GenerateInitInstanceLocal((::TMemStatCodeInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMemStatCodeInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMemStatInfoStamp_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMemStatInfoStamp(void *p = 0);
   static void *newArray_TMemStatInfoStamp(Long_t size, void *p);
   static void delete_TMemStatInfoStamp(void *p);
   static void deleteArray_TMemStatInfoStamp(void *p);
   static void destruct_TMemStatInfoStamp(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMemStatInfoStamp*)
   {
      ::TMemStatInfoStamp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMemStatInfoStamp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMemStatInfoStamp", ::TMemStatInfoStamp::Class_Version(), "include/TMemStatInfo.h", 47,
                  typeid(::TMemStatInfoStamp), DefineBehavior(ptr, ptr),
                  &::TMemStatInfoStamp::Dictionary, isa_proxy, 4,
                  sizeof(::TMemStatInfoStamp) );
      instance.SetNew(&new_TMemStatInfoStamp);
      instance.SetNewArray(&newArray_TMemStatInfoStamp);
      instance.SetDelete(&delete_TMemStatInfoStamp);
      instance.SetDeleteArray(&deleteArray_TMemStatInfoStamp);
      instance.SetDestructor(&destruct_TMemStatInfoStamp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMemStatInfoStamp*)
   {
      return GenerateInitInstanceLocal((::TMemStatInfoStamp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMemStatInfoStamp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMemStat_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMemStat(void *p = 0);
   static void *newArray_TMemStat(Long_t size, void *p);
   static void delete_TMemStat(void *p);
   static void deleteArray_TMemStat(void *p);
   static void destruct_TMemStat(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMemStat*)
   {
      ::TMemStat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMemStat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMemStat", ::TMemStat::Class_Version(), "include/TMemStat.h", 46,
                  typeid(::TMemStat), DefineBehavior(ptr, ptr),
                  &::TMemStat::Dictionary, isa_proxy, 0,
                  sizeof(::TMemStat) );
      instance.SetNew(&new_TMemStat);
      instance.SetNewArray(&newArray_TMemStat);
      instance.SetDelete(&delete_TMemStat);
      instance.SetDeleteArray(&deleteArray_TMemStat);
      instance.SetDestructor(&destruct_TMemStat);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMemStat*)
   {
      return GenerateInitInstanceLocal((::TMemStat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMemStat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMemStatStackInfo_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMemStatStackInfo(void *p = 0);
   static void *newArray_TMemStatStackInfo(Long_t size, void *p);
   static void delete_TMemStatStackInfo(void *p);
   static void deleteArray_TMemStatStackInfo(void *p);
   static void destruct_TMemStatStackInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMemStatStackInfo*)
   {
      ::TMemStatStackInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMemStatStackInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMemStatStackInfo", ::TMemStatStackInfo::Class_Version(), "include/TMemStatInfo.h", 98,
                  typeid(::TMemStatStackInfo), DefineBehavior(ptr, ptr),
                  &::TMemStatStackInfo::Dictionary, isa_proxy, 4,
                  sizeof(::TMemStatStackInfo) );
      instance.SetNew(&new_TMemStatStackInfo);
      instance.SetNewArray(&newArray_TMemStatStackInfo);
      instance.SetDelete(&delete_TMemStatStackInfo);
      instance.SetDeleteArray(&deleteArray_TMemStatStackInfo);
      instance.SetDestructor(&destruct_TMemStatStackInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMemStatStackInfo*)
   {
      return GenerateInitInstanceLocal((::TMemStatStackInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMemStatStackInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TMemStatManager::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMemStatManager::Class_Name()
{
   return "TMemStatManager";
}

//______________________________________________________________________________
const char *TMemStatManager::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStatManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMemStatManager::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStatManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMemStatManager::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStatManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMemStatManager::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStatManager*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMemStatCodeInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMemStatCodeInfo::Class_Name()
{
   return "TMemStatCodeInfo";
}

//______________________________________________________________________________
const char *TMemStatCodeInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStatCodeInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMemStatCodeInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStatCodeInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMemStatCodeInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStatCodeInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMemStatCodeInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStatCodeInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMemStatInfoStamp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMemStatInfoStamp::Class_Name()
{
   return "TMemStatInfoStamp";
}

//______________________________________________________________________________
const char *TMemStatInfoStamp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStatInfoStamp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMemStatInfoStamp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStatInfoStamp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMemStatInfoStamp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStatInfoStamp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMemStatInfoStamp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStatInfoStamp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMemStat::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMemStat::Class_Name()
{
   return "TMemStat";
}

//______________________________________________________________________________
const char *TMemStat::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMemStat::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMemStat::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMemStat::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStat*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMemStatStackInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMemStatStackInfo::Class_Name()
{
   return "TMemStatStackInfo";
}

//______________________________________________________________________________
const char *TMemStatStackInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStatStackInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMemStatStackInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMemStatStackInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMemStatStackInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStatStackInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMemStatStackInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMemStatStackInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TMemStatInfoStamp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMemStatInfoStamp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMemStatInfoStamp::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMemStatInfoStamp::Class(),this);
   }
}

//______________________________________________________________________________
void TMemStatInfoStamp::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMemStatInfoStamp.
      TClass *R__cl = ::TMemStatInfoStamp::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fTotalAllocCount", &fTotalAllocCount);
      R__insp.Inspect(R__cl, R__parent, "fTotalAllocSize", &fTotalAllocSize);
      R__insp.Inspect(R__cl, R__parent, "fAllocCount", &fAllocCount);
      R__insp.Inspect(R__cl, R__parent, "fAllocSize", &fAllocSize);
      R__insp.Inspect(R__cl, R__parent, "fStampNumber", &fStampNumber);
      R__insp.Inspect(R__cl, R__parent, "fID", &fID);
      R__insp.Inspect(R__cl, R__parent, "fStampType", &fStampType);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMemStatInfoStamp(void *p) {
      return  p ? new(p) ::TMemStatInfoStamp : new ::TMemStatInfoStamp;
   }
   static void *newArray_TMemStatInfoStamp(Long_t nElements, void *p) {
      return p ? new(p) ::TMemStatInfoStamp[nElements] : new ::TMemStatInfoStamp[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMemStatInfoStamp(void *p) {
      delete ((::TMemStatInfoStamp*)p);
   }
   static void deleteArray_TMemStatInfoStamp(void *p) {
      delete [] ((::TMemStatInfoStamp*)p);
   }
   static void destruct_TMemStatInfoStamp(void *p) {
      typedef ::TMemStatInfoStamp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMemStatInfoStamp

//______________________________________________________________________________
void TMemStatCodeInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMemStatCodeInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMemStatCodeInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMemStatCodeInfo::Class(),this);
   }
}

//______________________________________________________________________________
void TMemStatCodeInfo::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMemStatCodeInfo.
      TClass *R__cl = ::TMemStatCodeInfo::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fLastStamp", &fLastStamp);
      fLastStamp.ShowMembers(R__insp, strcat(R__parent,"fLastStamp.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCurrentStamp", &fCurrentStamp);
      fCurrentStamp.ShowMembers(R__insp, strcat(R__parent,"fCurrentStamp.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxStampSize", &fMaxStampSize);
      fMaxStampSize.ShowMembers(R__insp, strcat(R__parent,"fMaxStampSize.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxStamp", &fMaxStamp);
      fMaxStamp.ShowMembers(R__insp, strcat(R__parent,"fMaxStamp.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCode", &fCode);
      R__insp.Inspect(R__cl, R__parent, "fInfo", &fInfo);
      fInfo.ShowMembers(R__insp, strcat(R__parent,"fInfo.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fFunction", &fFunction);
      fFunction.ShowMembers(R__insp, strcat(R__parent,"fFunction.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLib", &fLib);
      fLib.ShowMembers(R__insp, strcat(R__parent,"fLib.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCodeID", &fCodeID);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMemStatCodeInfo(void *p) {
      return  p ? new(p) ::TMemStatCodeInfo : new ::TMemStatCodeInfo;
   }
   static void *newArray_TMemStatCodeInfo(Long_t nElements, void *p) {
      return p ? new(p) ::TMemStatCodeInfo[nElements] : new ::TMemStatCodeInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMemStatCodeInfo(void *p) {
      delete ((::TMemStatCodeInfo*)p);
   }
   static void deleteArray_TMemStatCodeInfo(void *p) {
      delete [] ((::TMemStatCodeInfo*)p);
   }
   static void destruct_TMemStatCodeInfo(void *p) {
      typedef ::TMemStatCodeInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMemStatCodeInfo

//______________________________________________________________________________
void TMemStatStackInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMemStatStackInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMemStatStackInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMemStatStackInfo::Class(),this);
   }
}

//______________________________________________________________________________
void TMemStatStackInfo::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMemStatStackInfo.
      TClass *R__cl = ::TMemStatStackInfo::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fSize", &fSize);
      R__insp.Inspect(R__cl, R__parent, "fLastStamp", &fLastStamp);
      fLastStamp.ShowMembers(R__insp, strcat(R__parent,"fLastStamp.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCurrentStamp", &fCurrentStamp);
      fCurrentStamp.ShowMembers(R__insp, strcat(R__parent,"fCurrentStamp.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxStampSize", &fMaxStampSize);
      fMaxStampSize.ShowMembers(R__insp, strcat(R__parent,"fMaxStampSize.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxStamp", &fMaxStamp);
      fMaxStamp.ShowMembers(R__insp, strcat(R__parent,"fMaxStamp.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fNextHash", &fNextHash);
      R__insp.Inspect(R__cl, R__parent, "*fStackSymbols", &fStackSymbols);
      R__insp.Inspect(R__cl, R__parent, "*fSymbolIndexes", &fSymbolIndexes);
      R__insp.Inspect(R__cl, R__parent, "fStackID", &fStackID);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMemStatStackInfo(void *p) {
      return  p ? new(p) ::TMemStatStackInfo : new ::TMemStatStackInfo;
   }
   static void *newArray_TMemStatStackInfo(Long_t nElements, void *p) {
      return p ? new(p) ::TMemStatStackInfo[nElements] : new ::TMemStatStackInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMemStatStackInfo(void *p) {
      delete ((::TMemStatStackInfo*)p);
   }
   static void deleteArray_TMemStatStackInfo(void *p) {
      delete [] ((::TMemStatStackInfo*)p);
   }
   static void destruct_TMemStatStackInfo(void *p) {
      typedef ::TMemStatStackInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMemStatStackInfo

//______________________________________________________________________________
void TMemStatManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMemStatManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMemStatManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMemStatManager::Class(),this);
   }
}

//______________________________________________________________________________
void TMemStatManager::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMemStatManager.
      TClass *R__cl = ::TMemStatManager::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fSTHashTable", (void*)&fSTHashTable);
      ::ROOT::GenericShowMembers("IntVector_t", (void*)&fSTHashTable, R__insp, strcat(R__parent,"fSTHashTable."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCount", &fCount);
      R__insp.Inspect(R__cl, R__parent, "fStampNumber", &fStampNumber);
      R__insp.Inspect(R__cl, R__parent, "fStackVector", (void*)&fStackVector);
      ::ROOT::GenericShowMembers("vector<TMemStatStackInfo>", (void*)&fStackVector, R__insp, strcat(R__parent,"fStackVector."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fStampVector", (void*)&fStampVector);
      ::ROOT::GenericShowMembers("vector<TMemStatInfoStamp>", (void*)&fStampVector, R__insp, strcat(R__parent,"fStampVector."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fStampTime", (void*)&fStampTime);
      ::ROOT::GenericShowMembers("vector<TTimeStamp>", (void*)&fStampTime, R__insp, strcat(R__parent,"fStampTime."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCodeInfoArray", (void*)&fCodeInfoArray);
      ::ROOT::GenericShowMembers("TMemStatManager::CodeInfoContainer_t", (void*)&fCodeInfoArray, R__insp, strcat(R__parent,"fCodeInfoArray."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCodeInfoMap", (void*)&fCodeInfoMap);
      ::ROOT::GenericShowMembers("map<const void*,UInt_t>", (void*)&fCodeInfoMap, R__insp, strcat(R__parent,"fCodeInfoMap."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDebugLevel", &fDebugLevel);
      R__insp.Inspect(R__cl, R__parent, "*fStampCallBack", &fStampCallBack);
      R__insp.Inspect(R__cl, R__parent, "*fPreviousMallocHook", &fPreviousMallocHook);
      R__insp.Inspect(R__cl, R__parent, "*fPreviousFreeHook", &fPreviousFreeHook);
      R__insp.Inspect(R__cl, R__parent, "fLastStamp", &fLastStamp);
      fLastStamp.ShowMembers(R__insp, strcat(R__parent,"fLastStamp.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCurrentStamp", &fCurrentStamp);
      fCurrentStamp.ShowMembers(R__insp, strcat(R__parent,"fCurrentStamp.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fAutoStampSize", &fAutoStampSize);
      R__insp.Inspect(R__cl, R__parent, "fAutoStampN", &fAutoStampN);
      R__insp.Inspect(R__cl, R__parent, "fAutoStampDumpSize", &fAutoStampDumpSize);
      R__insp.Inspect(R__cl, R__parent, "fMinStampSize", &fMinStampSize);
      R__insp.Inspect(R__cl, R__parent, "fSize", &fSize);
      R__insp.Inspect(R__cl, R__parent, "*fLeak", &fLeak);
      R__insp.Inspect(R__cl, R__parent, "fAllocCount", &fAllocCount);
      R__insp.Inspect(R__cl, R__parent, "fMultDeleteTable", (void*)&fMultDeleteTable);
      ::ROOT::GenericShowMembers("TMemStatManager::TDeleteTable_t", (void*)&fMultDeleteTable, R__insp, strcat(R__parent,"fMultDeleteTable."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDumpFile", (void*)&fDumpFile);
      ::ROOT::GenericShowMembers("TFilePtr_t", (void*)&fDumpFile, R__insp, strcat(R__parent,"fDumpFile."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fDumpTree", &fDumpTree);
      R__insp.Inspect(R__cl, R__parent, "*fDumpSysTree", &fDumpSysTree);
      R__insp.Inspect(R__cl, R__parent, "fUseGNUBuildinBacktrace", &fUseGNUBuildinBacktrace);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMemStatManager(void *p) {
      return  p ? new(p) ::TMemStatManager : new ::TMemStatManager;
   }
   static void *newArray_TMemStatManager(Long_t nElements, void *p) {
      return p ? new(p) ::TMemStatManager[nElements] : new ::TMemStatManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMemStatManager(void *p) {
      delete ((::TMemStatManager*)p);
   }
   static void deleteArray_TMemStatManager(void *p) {
      delete [] ((::TMemStatManager*)p);
   }
   static void destruct_TMemStatManager(void *p) {
      typedef ::TMemStatManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMemStatManager

//______________________________________________________________________________
void TMemStat::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMemStat.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TMemStat::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMemStat.
      TClass *R__cl = ::TMemStat::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fSortStat", &fSortStat);
      R__insp.Inspect(R__cl, R__parent, "fSortStamp", &fSortStamp);
      R__insp.Inspect(R__cl, R__parent, "fMaximum", &fMaximum);
      R__insp.Inspect(R__cl, R__parent, "fSortDeep", &fSortDeep);
      R__insp.Inspect(R__cl, R__parent, "fStackDeep", &fStackDeep);
      R__insp.Inspect(R__cl, R__parent, "fMaxStringLength", &fMaxStringLength);
      R__insp.Inspect(R__cl, R__parent, "fSelected", &fSelected);
      R__insp.Inspect(R__cl, R__parent, "fIsActive", &fIsActive);
      R__insp.Inspect(R__cl, R__parent, "fOrder", &fOrder);
      R__insp.Inspect(R__cl, R__parent, "fSelectedCodeIndex", (void*)&fSelectedCodeIndex);
      ::ROOT::GenericShowMembers("UIntVector_t", (void*)&fSelectedCodeIndex, R__insp, strcat(R__parent,"fSelectedCodeIndex."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSelectedStackIndex", (void*)&fSelectedStackIndex);
      ::ROOT::GenericShowMembers("UIntVector_t", (void*)&fSelectedStackIndex, R__insp, strcat(R__parent,"fSelectedStackIndex."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fArrayIndexes", (void*)&fArrayIndexes);
      ::ROOT::GenericShowMembers("IntVector_t", (void*)&fArrayIndexes, R__insp, strcat(R__parent,"fArrayIndexes."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fSelectedCodeBitmap", &fSelectedCodeBitmap);
      R__insp.Inspect(R__cl, R__parent, "*fSelectedStackBitmap", &fSelectedStackBitmap);
      R__insp.Inspect(R__cl, R__parent, "fFile", (void*)&fFile);
      ::ROOT::GenericShowMembers("TFilePtr", (void*)&fFile, R__insp, strcat(R__parent,"fFile."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fStampArray", &fStampArray);
      R__insp.Inspect(R__cl, R__parent, "*fArray", &fArray);
      R__insp.Inspect(R__cl, R__parent, "*fArrayGraphics", &fArrayGraphics);
      R__insp.Inspect(R__cl, R__parent, "fDisablePrintLib", &fDisablePrintLib);
      fDisablePrintLib.ShowMembers(R__insp, strcat(R__parent,"fDisablePrintLib.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDisablePrintCode", &fDisablePrintCode);
      fDisablePrintCode.ShowMembers(R__insp, strcat(R__parent,"fDisablePrintCode.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fOption", &fOption);
      fOption.ShowMembers(R__insp, strcat(R__parent,"fOption.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__parent, "*fTreeSys", &fTreeSys);
      R__insp.Inspect(R__cl, R__parent, "*fStackSummary", &fStackSummary);
      R__insp.Inspect(R__cl, R__parent, "*fManager", &fManager);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMemStat(void *p) {
      return  p ? new(p) ::TMemStat : new ::TMemStat;
   }
   static void *newArray_TMemStat(Long_t nElements, void *p) {
      return p ? new(p) ::TMemStat[nElements] : new ::TMemStat[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMemStat(void *p) {
      delete ((::TMemStat*)p);
   }
   static void deleteArray_TMemStat(void *p) {
      delete [] ((::TMemStat*)p);
   }
   static void destruct_TMemStat(void *p) {
      typedef ::TMemStat current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMemStat

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMemStatDepend(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMemStatDepend : new ::TMemStatDepend;
   }
   static void *newArray_TMemStatDepend(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMemStatDepend[nElements] : new ::TMemStatDepend[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMemStatDepend(void *p) {
      delete ((::TMemStatDepend*)p);
   }
   static void deleteArray_TMemStatDepend(void *p) {
      delete [] ((::TMemStatDepend*)p);
   }
   static void destruct_TMemStatDepend(void *p) {
      typedef ::TMemStatDepend current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMemStatDepend

namespace ROOT {
   void vectorlETMemStatCodeInfogR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlETMemStatCodeInfogR_Dictionary();
   static void *new_vectorlETMemStatCodeInfogR(void *p = 0);
   static void *newArray_vectorlETMemStatCodeInfogR(Long_t size, void *p);
   static void delete_vectorlETMemStatCodeInfogR(void *p);
   static void deleteArray_vectorlETMemStatCodeInfogR(void *p);
   static void destruct_vectorlETMemStatCodeInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TMemStatCodeInfo>*)
   {
      vector<TMemStatCodeInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TMemStatCodeInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TMemStatCodeInfo>", -2, "prec_stl/vector", 49,
                  typeid(vector<TMemStatCodeInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlETMemStatCodeInfogR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TMemStatCodeInfo>) );
      instance.SetNew(&new_vectorlETMemStatCodeInfogR);
      instance.SetNewArray(&newArray_vectorlETMemStatCodeInfogR);
      instance.SetDelete(&delete_vectorlETMemStatCodeInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlETMemStatCodeInfogR);
      instance.SetDestructor(&destruct_vectorlETMemStatCodeInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TMemStatCodeInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TMemStatCodeInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETMemStatCodeInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TMemStatCodeInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETMemStatCodeInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TMemStatCodeInfo> : new vector<TMemStatCodeInfo>;
   }
   static void *newArray_vectorlETMemStatCodeInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TMemStatCodeInfo>[nElements] : new vector<TMemStatCodeInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETMemStatCodeInfogR(void *p) {
      delete ((vector<TMemStatCodeInfo>*)p);
   }
   static void deleteArray_vectorlETMemStatCodeInfogR(void *p) {
      delete [] ((vector<TMemStatCodeInfo>*)p);
   }
   static void destruct_vectorlETMemStatCodeInfogR(void *p) {
      typedef vector<TMemStatCodeInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TMemStatCodeInfo>

namespace ROOT {
   void vectorlETMemStatInfoStampgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlETMemStatInfoStampgR_Dictionary();
   static void *new_vectorlETMemStatInfoStampgR(void *p = 0);
   static void *newArray_vectorlETMemStatInfoStampgR(Long_t size, void *p);
   static void delete_vectorlETMemStatInfoStampgR(void *p);
   static void deleteArray_vectorlETMemStatInfoStampgR(void *p);
   static void destruct_vectorlETMemStatInfoStampgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TMemStatInfoStamp>*)
   {
      vector<TMemStatInfoStamp> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TMemStatInfoStamp>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TMemStatInfoStamp>", -2, "prec_stl/vector", 49,
                  typeid(vector<TMemStatInfoStamp>), DefineBehavior(ptr, ptr),
                  0, &vectorlETMemStatInfoStampgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TMemStatInfoStamp>) );
      instance.SetNew(&new_vectorlETMemStatInfoStampgR);
      instance.SetNewArray(&newArray_vectorlETMemStatInfoStampgR);
      instance.SetDelete(&delete_vectorlETMemStatInfoStampgR);
      instance.SetDeleteArray(&deleteArray_vectorlETMemStatInfoStampgR);
      instance.SetDestructor(&destruct_vectorlETMemStatInfoStampgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TMemStatInfoStamp> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TMemStatInfoStamp>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETMemStatInfoStampgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TMemStatInfoStamp>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETMemStatInfoStampgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TMemStatInfoStamp> : new vector<TMemStatInfoStamp>;
   }
   static void *newArray_vectorlETMemStatInfoStampgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TMemStatInfoStamp>[nElements] : new vector<TMemStatInfoStamp>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETMemStatInfoStampgR(void *p) {
      delete ((vector<TMemStatInfoStamp>*)p);
   }
   static void deleteArray_vectorlETMemStatInfoStampgR(void *p) {
      delete [] ((vector<TMemStatInfoStamp>*)p);
   }
   static void destruct_vectorlETMemStatInfoStampgR(void *p) {
      typedef vector<TMemStatInfoStamp> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TMemStatInfoStamp>

namespace ROOT {
   void vectorlETMemStatStackInfogR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlETMemStatStackInfogR_Dictionary();
   static void *new_vectorlETMemStatStackInfogR(void *p = 0);
   static void *newArray_vectorlETMemStatStackInfogR(Long_t size, void *p);
   static void delete_vectorlETMemStatStackInfogR(void *p);
   static void deleteArray_vectorlETMemStatStackInfogR(void *p);
   static void destruct_vectorlETMemStatStackInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TMemStatStackInfo>*)
   {
      vector<TMemStatStackInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TMemStatStackInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TMemStatStackInfo>", -2, "prec_stl/vector", 49,
                  typeid(vector<TMemStatStackInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlETMemStatStackInfogR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TMemStatStackInfo>) );
      instance.SetNew(&new_vectorlETMemStatStackInfogR);
      instance.SetNewArray(&newArray_vectorlETMemStatStackInfogR);
      instance.SetDelete(&delete_vectorlETMemStatStackInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlETMemStatStackInfogR);
      instance.SetDestructor(&destruct_vectorlETMemStatStackInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TMemStatStackInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TMemStatStackInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETMemStatStackInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TMemStatStackInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETMemStatStackInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TMemStatStackInfo> : new vector<TMemStatStackInfo>;
   }
   static void *newArray_vectorlETMemStatStackInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TMemStatStackInfo>[nElements] : new vector<TMemStatStackInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETMemStatStackInfogR(void *p) {
      delete ((vector<TMemStatStackInfo>*)p);
   }
   static void deleteArray_vectorlETMemStatStackInfogR(void *p) {
      delete [] ((vector<TMemStatStackInfo>*)p);
   }
   static void destruct_vectorlETMemStatStackInfogR(void *p) {
      typedef vector<TMemStatStackInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TMemStatStackInfo>

namespace ROOT {
   void vectorlETTimeStampgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlETTimeStampgR_Dictionary();
   static void *new_vectorlETTimeStampgR(void *p = 0);
   static void *newArray_vectorlETTimeStampgR(Long_t size, void *p);
   static void delete_vectorlETTimeStampgR(void *p);
   static void deleteArray_vectorlETTimeStampgR(void *p);
   static void destruct_vectorlETTimeStampgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TTimeStamp>*)
   {
      vector<TTimeStamp> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TTimeStamp>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TTimeStamp>", -2, "prec_stl/vector", 49,
                  typeid(vector<TTimeStamp>), DefineBehavior(ptr, ptr),
                  0, &vectorlETTimeStampgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TTimeStamp>) );
      instance.SetNew(&new_vectorlETTimeStampgR);
      instance.SetNewArray(&newArray_vectorlETTimeStampgR);
      instance.SetDelete(&delete_vectorlETTimeStampgR);
      instance.SetDeleteArray(&deleteArray_vectorlETTimeStampgR);
      instance.SetDestructor(&destruct_vectorlETTimeStampgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TTimeStamp> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TTimeStamp>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETTimeStampgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TTimeStamp>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETTimeStampgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TTimeStamp> : new vector<TTimeStamp>;
   }
   static void *newArray_vectorlETTimeStampgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TTimeStamp>[nElements] : new vector<TTimeStamp>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETTimeStampgR(void *p) {
      delete ((vector<TTimeStamp>*)p);
   }
   static void deleteArray_vectorlETTimeStampgR(void *p) {
      delete [] ((vector<TTimeStamp>*)p);
   }
   static void destruct_vectorlETTimeStampgR(void *p) {
      typedef vector<TTimeStamp> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TTimeStamp>

/********************************************************
* misc/memstat/src/G__Memstat.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Memstat();

extern "C" void G__set_cpp_environmentG__Memstat() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TMemStatHelpers.h");
  G__add_compiledheader("TMemStatDepend.h");
  G__add_compiledheader("TMemStat.h");
  G__add_compiledheader("TMemStatManager.h");
  G__add_compiledheader("TMemStatInfo.h");
  G__cpp_reset_tagtableG__Memstat();
}
#include <new>
extern "C" int G__cpp_dllrevG__Memstat() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Memstat */
static int G__G__Memstat_112_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = Memstat::dig2bytes((Long64_t) G__Longlong(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMemStatDepend */
static int G__G__Memstat_116_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) TMemStatDepend::GetMallocHook());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_116_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) TMemStatDepend::GetFreeHook());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_116_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatDepend::SetMallocHook((TMemStatDepend::MallocHookFunc_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_116_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatDepend::SetFreeHook((TMemStatDepend::FreeHookFunc_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_116_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 104, (long) TMemStatDepend::Backtrace((void**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) TMemStatDepend::Backtrace((void**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_116_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatDepend::BacktraceSymbols((void**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_116_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatDepend::GetSymbols((void*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, *(TString*) libp->para[3].ref
, *(TString*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_116_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatDepend::Demangle((char*) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__G__Memstat_116_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatDepend *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatDepend[n];
     } else {
       p = new((void*) gvp) TMemStatDepend[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatDepend;
     } else {
       p = new((void*) gvp) TMemStatDepend;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Memstat_116_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMemStatDepend* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMemStatDepend(*(TMemStatDepend*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMemStatDepend G__TTMemStatDepend;
static int G__G__Memstat_116_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMemStatDepend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMemStatDepend*) (soff+(sizeof(TMemStatDepend)*i)))->~G__TTMemStatDepend();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMemStatDepend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMemStatDepend*) (soff))->~G__TTMemStatDepend();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Memstat_116_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatDepend* dest = (TMemStatDepend*) G__getstructoffset();
   const TMemStatDepend& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMemStatManager */
static int G__G__Memstat_157_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatManager[n];
     } else {
       p = new((void*) gvp) TMemStatManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatManager;
     } else {
       p = new((void*) gvp) TMemStatManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatManager*) G__getstructoffset())->Enable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatManager*) G__getstructoffset())->Disable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatManager*) G__getstructoffset())->SetAutoStamp((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMemStatManager*) G__getstructoffset())->AddStamps((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMemStatManager*) G__getstructoffset())->AddStamps();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatManager::SAddStamps((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMemStatManager::GetInstance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatManager::Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMemStatInfoStamp& obj = ((TMemStatManager*) G__getstructoffset())->AddStamp();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMemStatCodeInfo& obj = ((TMemStatManager*) G__getstructoffset())->GetCodeInfo((void*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((TMemStatManager*) G__getstructoffset())->GetCodeInfoIndex((void*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TMemStatManager*) G__getstructoffset())->DumpTo((TMemStatManager::EDumpTo) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TMemStatManager*) G__getstructoffset())->DumpTo((TMemStatManager::EDumpTo) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TMemStatManager*) G__getstructoffset())->DumpTo((TMemStatManager::EDumpTo) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatManager*) G__getstructoffset())->SetUseGNUBuildinBacktrace((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMemStatManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMemStatManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStatManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_157_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStatManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Memstat_157_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMemStatManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMemStatManager(*(TMemStatManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMemStatManager G__TTMemStatManager;
static int G__G__Memstat_157_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMemStatManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMemStatManager*) (soff+(sizeof(TMemStatManager)*i)))->~G__TTMemStatManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMemStatManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMemStatManager*) (soff))->~G__TTMemStatManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Memstat_157_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatManager* dest = (TMemStatManager*) G__getstructoffset();
   *dest = *(TMemStatManager*) libp->para[0].ref;
   const TMemStatManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMemStatCodeInfo */
static int G__G__Memstat_159_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatCodeInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatCodeInfo[n];
     } else {
       p = new((void*) gvp) TMemStatCodeInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatCodeInfo;
     } else {
       p = new((void*) gvp) TMemStatCodeInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatCodeInfo*) G__getstructoffset())->SetInfo((void*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatCodeInfo*) G__getstructoffset())->MakeStamp((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatCodeInfo*) G__getstructoffset())->Inc((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatCodeInfo*) G__getstructoffset())->Dec((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMemStatCodeInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatCodeInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMemStatCodeInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatCodeInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatCodeInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatCodeInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStatCodeInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatCodeInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_159_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStatCodeInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Memstat_159_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMemStatCodeInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMemStatCodeInfo(*(TMemStatCodeInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMemStatCodeInfo G__TTMemStatCodeInfo;
static int G__G__Memstat_159_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMemStatCodeInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMemStatCodeInfo*) (soff+(sizeof(TMemStatCodeInfo)*i)))->~G__TTMemStatCodeInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMemStatCodeInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMemStatCodeInfo*) (soff))->~G__TTMemStatCodeInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Memstat_159_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatCodeInfo* dest = (TMemStatCodeInfo*) G__getstructoffset();
   *dest = *(TMemStatCodeInfo*) libp->para[0].ref;
   const TMemStatCodeInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMemStatInfoStamp */
static int G__G__Memstat_160_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatInfoStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatInfoStamp[n];
     } else {
       p = new((void*) gvp) TMemStatInfoStamp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatInfoStamp;
     } else {
       p = new((void*) gvp) TMemStatInfoStamp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TMemStatInfoStamp*) G__getstructoffset())->Equal(*(TMemStatInfoStamp*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatInfoStamp*) G__getstructoffset())->Inc((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatInfoStamp*) G__getstructoffset())->Dec((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMemStatInfoStamp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatInfoStamp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMemStatInfoStamp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatInfoStamp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatInfoStamp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatInfoStamp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStatInfoStamp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatInfoStamp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_160_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStatInfoStamp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Memstat_160_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMemStatInfoStamp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMemStatInfoStamp(*(TMemStatInfoStamp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMemStatInfoStamp G__TTMemStatInfoStamp;
static int G__G__Memstat_160_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMemStatInfoStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMemStatInfoStamp*) (soff+(sizeof(TMemStatInfoStamp)*i)))->~G__TTMemStatInfoStamp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMemStatInfoStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMemStatInfoStamp*) (soff))->~G__TTMemStatInfoStamp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Memstat_160_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatInfoStamp* dest = (TMemStatInfoStamp*) G__getstructoffset();
   *dest = *(TMemStatInfoStamp*) libp->para[0].ref;
   const TMemStatInfoStamp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMemStat */
static int G__G__Memstat_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStat* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStat((Option_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TMemStat((Option_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TMemStat[n];
       } else {
         p = new((void*) gvp) TMemStat[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TMemStat;
       } else {
         p = new((void*) gvp) TMemStat;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->AddStamp((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMemStat*) G__getstructoffset())->GetFillSelection((TMemStat::Selection_t*) G__int(libp->para[0]), (TMemStat::ESelection) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TMemStat*) G__getstructoffset())->GetOption());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TMemStat*) G__getstructoffset())->GetStampList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TMemStat*) G__getstructoffset())->GetStackDeep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TMemStat*) G__getstructoffset())->GetSortDeep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TMemStat*) G__getstructoffset())->GetMaxStringLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TMemStat*) G__getstructoffset())->MakeReport((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TMemStat*) G__getstructoffset())->MakeReport((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TMemStat*) G__getstructoffset())->MakeReport((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TMemStat*) G__getstructoffset())->MakeReport((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMemStat*) G__getstructoffset())->MakeReport();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->MakeHisMemoryStamp((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->MakeHisMemoryTime();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const TMemStat*) G__getstructoffset())->PrintCode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const TMemStat*) G__getstructoffset())->PrintCode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMemStat*) G__getstructoffset())->PrintCodeWithID((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const TMemStat*) G__getstructoffset())->PrintStack((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const TMemStat*) G__getstructoffset())->PrintStack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const TMemStat*) G__getstructoffset())->PrintStack();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const TMemStat*) G__getstructoffset())->PrintStackWithID((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const TMemStat*) G__getstructoffset())->PrintStackWithID((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMemStat*) G__getstructoffset())->Report((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMemStat*) G__getstructoffset())->Report();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->ResetSelection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TMemStat*) G__getstructoffset())->SetAutoStamp((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TMemStat*) G__getstructoffset())->SetAutoStamp((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMemStat*) G__getstructoffset())->SetAutoStamp();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->SetCurrentStamp((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->SetCurrentStamp(*(TObjString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->SetSortStat((TMemStat::StatType) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->SetSortStamp((TMemStat::StampType) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->SetStackDeep((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->SetSortDeep((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TMemStat*) G__getstructoffset())->SelectCode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TMemStat::OperType) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TMemStat*) G__getstructoffset())->SelectCode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TMemStat*) G__getstructoffset())->SelectCode((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMemStat*) G__getstructoffset())->SelectCode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMemStat*) G__getstructoffset())->SelectStack((TMemStat::OperType) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMemStat*) G__getstructoffset())->SelectStack();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->SortCode((TMemStat::StatType) G__int(libp->para[0]), (TMemStat::StampType) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->SortStack((TMemStat::StatType) G__int(libp->para[0]), (TMemStat::StampType) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMemStat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMemStat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_170_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMemStat G__TTMemStat;
static int G__G__Memstat_170_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMemStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMemStat*) (soff+(sizeof(TMemStat)*i)))->~G__TTMemStat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMemStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMemStat*) (soff))->~G__TTMemStat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMemStatStackInfo */
static int G__G__Memstat_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatStackInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatStackInfo[n];
     } else {
       p = new((void*) gvp) TMemStatStackInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMemStatStackInfo;
     } else {
       p = new((void*) gvp) TMemStatStackInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatStackInfo*) G__getstructoffset())->Init((Int_t) G__int(libp->para[0]), (void**) G__int(libp->para[1])
, (TMemStatManager*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatStackInfo*) G__getstructoffset())->Inc((Int_t) G__int(libp->para[0]), (TMemStatManager*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatStackInfo*) G__getstructoffset())->Dec((Int_t) G__int(libp->para[0]), (TMemStatManager*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TMemStatStackInfo*) G__getstructoffset())->Equal((UInt_t) G__int(libp->para[0]), (void**) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((TMemStatStackInfo*) G__getstructoffset())->StackAt((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatStackInfo*) G__getstructoffset())->MakeStamp((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) TMemStatStackInfo::HashStack((UInt_t) G__int(libp->para[0]), (void**) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMemStatStackInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatStackInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMemStatStackInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMemStatStackInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMemStatStackInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatStackInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStatStackInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMemStatStackInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Memstat_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMemStatStackInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Memstat_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMemStatStackInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMemStatStackInfo(*(TMemStatStackInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMemStatStackInfo G__TTMemStatStackInfo;
static int G__G__Memstat_209_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMemStatStackInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMemStatStackInfo*) (soff+(sizeof(TMemStatStackInfo)*i)))->~G__TTMemStatStackInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMemStatStackInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMemStatStackInfo*) (soff))->~G__TTMemStatStackInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Memstat_209_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMemStatStackInfo* dest = (TMemStatStackInfo*) G__getstructoffset();
   *dest = *(TMemStatStackInfo*) libp->para[0].ref;
   const TMemStatStackInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Memstat */

/* TMemStatDepend */

/* TMemStatManager */

/* TMemStatCodeInfo */

/* TMemStatInfoStamp */

/* TMemStat */

/* TMemStatStackInfo */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Memstat {
 public:
  G__Sizep2memfuncG__Memstat(): p(&G__Sizep2memfuncG__Memstat::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Memstat::*p)();
};

size_t G__get_sizep2memfuncG__Memstat()
{
  G__Sizep2memfuncG__Memstat a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Memstat() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager))) {
     TMemStatManager *G__Lderived;
     G__Lderived=(TMemStatManager*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager),G__get_linked_tagnum(&G__G__MemstatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo))) {
     TMemStatCodeInfo *G__Lderived;
     G__Lderived=(TMemStatCodeInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo),G__get_linked_tagnum(&G__G__MemstatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp))) {
     TMemStatInfoStamp *G__Lderived;
     G__Lderived=(TMemStatInfoStamp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),G__get_linked_tagnum(&G__G__MemstatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MemstatLN_TMemStat))) {
     TMemStat *G__Lderived;
     G__Lderived=(TMemStat*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStat),G__get_linked_tagnum(&G__G__MemstatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo))) {
     TMemStatStackInfo *G__Lderived;
     G__Lderived=(TMemStatStackInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo),G__get_linked_tagnum(&G__G__MemstatLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Memstat() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 4 bytes (unsigned long)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MallocHookFunc_t",89,-1,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend));
   G__setnewtype(-1,"void* (*MallocHookFunc_t)(size_t size, const void *caller);",0);
   G__search_typename2("FreeHookFunc_t",89,-1,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend));
   G__setnewtype(-1,"void (*FreeHookFunc_t)(void* ptr, const void *caller);",0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__MemstatLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__MemstatLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__MemstatLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__MemstatLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("UIntVector_t",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("IntVector_t",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<std::string>",117,G__get_linked_tagnum(&G__G__MemstatLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<string>",117,G__get_linked_tagnum(&G__G__MemstatLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<string,less<string> >",117,G__get_linked_tagnum(&G__G__MemstatLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Selection_t",117,G__get_linked_tagnum(&G__G__MemstatLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStat));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMemStatCodeInfo>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("CodeInfoContainer_t",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgR),0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("StampCallback_t",89,-1,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager));
   G__setnewtype(-1,"void (*StampCallback_t)(const Char_t * desription);",0);
   G__search_typename2("vector<TMemStatStackInfo>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMemStatInfoStamp>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TTimeStamp>",117,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETTimeStampcOallocatorlETTimeStampgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlETTimeStampcOallocatorlETTimeStampgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETTimeStampcOallocatorlETTimeStampgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MemstatLN_reverse_iteratorlEvectorlETTimeStampcOallocatorlETTimeStampgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETTimeStampcOallocatorlETTimeStampgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const void*,UInt_t>",117,G__get_linked_tagnum(&G__G__MemstatLN_maplEconstsPvoidmUcOunsignedsPintcOlesslEconstsPvoidmUgRcOallocatorlEpairlEconstsPvoidmUsPconstcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const void*,unsigned int>",117,G__get_linked_tagnum(&G__G__MemstatLN_maplEconstsPvoidmUcOunsignedsPintcOlesslEconstsPvoidmUgRcOallocatorlEpairlEconstsPvoidmUsPconstcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const void*,unsigned int,less<const void*> >",117,G__get_linked_tagnum(&G__G__MemstatLN_maplEconstsPvoidmUcOunsignedsPintcOlesslEconstsPvoidmUgRcOallocatorlEpairlEconstsPvoidmUsPconstcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Memstat */
static void G__setup_memvarMemstat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MemstatLN_Memstat));
   {
   }
   G__tag_memvar_reset();
}


   /* TMemStatDepend */
static void G__setup_memvarTMemStatDepend(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend));
   { TMemStatDepend *p; p=(TMemStatDepend*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* TMemStatManager */
static void G__setup_memvarTMemStatManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager));
   { TMemStatManager *p; p=(TMemStatManager*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManagercLcLEStatusBits),-1,-2,1,"kUserDisable=262144",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManagercLcLEStatusBits),-1,-2,1,"kStatDisable=65536",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManagercLcLEStatusBits),-1,-2,1,"kStatRoutine=131072",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManagercLcLEDumpTo),-1,-2,1,"kTree=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManagercLcLEDumpTo),-1,-2,1,"kSysTree=1",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fSTHashTable)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("IntVector_t"),-1,1,"fSTHashTable=",0,"!pointer to the hash table");
   G__memvar_setup((void*)((long)(&p->fCount)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fCount=",0,"!number of entries in table");
   G__memvar_setup((void*)((long)(&p->fStampNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fStampNumber=",0,"current stamp number");
   G__memvar_setup((void*)((long)(&p->fStackVector)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgR),G__defined_typename("vector<TMemStatStackInfo>"),-1,1,"fStackVector=",0,"vector with stack symbols");
   G__memvar_setup((void*)((long)(&p->fStampVector)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgR),G__defined_typename("vector<TMemStatInfoStamp>"),-1,1,"fStampVector=",0,"vector of stamp information");
   G__memvar_setup((void*)((long)(&p->fStampTime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETTimeStampcOallocatorlETTimeStampgRsPgR),G__defined_typename("vector<TTimeStamp>"),-1,1,"fStampTime=",0,"vector of stamp information");
   G__memvar_setup((void*)((long)(&p->fCodeInfoArray)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgR),G__defined_typename("CodeInfoContainer_t"),-1,1,"fCodeInfoArray=",0,"vector with code info");
   G__memvar_setup((void*)((long)(&p->fCodeInfoMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_maplEconstsPvoidmUcOunsignedsPintcOlesslEconstsPvoidmUgRcOallocatorlEpairlEconstsPvoidmUsPconstcOunsignedsPintgRsPgRsPgR),G__defined_typename("map<const void*,UInt_t>"),-1,1,"fCodeInfoMap=",0,"! map of code information");
   G__memvar_setup((void*)((long)(&p->fDebugLevel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fDebugLevel=",0,"!debug level");
   G__memvar_setup((void*)((long)(&p->fStampCallBack)-(long)(p)),89,0,0,-1,G__defined_typename("StampCallback_t"),-1,1,"fStampCallBack=",0,"!call back function");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("MallocHookFunc_t"),-1,2,"fPreviousMallocHook=",0,"!old malloc function");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("FreeHookFunc_t"),-1,2,"fPreviousFreeHook=",0,"!old free function");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,2,"fLastStamp=",0,"last written stamp");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,2,"fCurrentStamp=",0,"current stamp");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fAutoStampSize=",0,"change of size invoking STAMP");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fAutoStampN=",0,"change of number of allocation  STAMP");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fAutoStampDumpSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMinStampSize=",0,"the minimal size to be dumped to tree");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSize=",0,"!size of hash table");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManagercLcLTMemTable_t),-1,-1,2,"fLeak=",0,"!pointer to the hash table");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAllocCount=",0,"!number of memory allocation blocks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManagercLcLTDeleteTable_t),-1,-1,2,"fMultDeleteTable=",0,"!pointer to the table");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_auto_ptrlETFilegR),G__defined_typename("TFilePtr_t"),-1,2,"fDumpFile=",0,"!file to dump current information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TTree),-1,-1,2,"fDumpTree=",0,"!tree to dump information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TTree),-1,-1,2,"fDumpSysTree=",0,"!tree to dump information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager),-1,-2,2,"fgInstance=",0,"pointer to instance");
   G__memvar_setup((void*)0,89,0,0,-1,-1,-2,2,"fgStackTop=",0,"stack top pointer");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUseGNUBuildinBacktrace=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMemStatCodeInfo */
static void G__setup_memvarTMemStatCodeInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo));
   { TMemStatCodeInfo *p; p=(TMemStatCodeInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fLastStamp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,1,"fLastStamp=",0,"last time stamp info");
   G__memvar_setup((void*)((long)(&p->fCurrentStamp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,1,"fCurrentStamp=",0,"current  time stamp info");
   G__memvar_setup((void*)((long)(&p->fMaxStampSize)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,1,"fMaxStampSize=",0,"max current size stamp");
   G__memvar_setup((void*)((long)(&p->fMaxStamp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,1,"fMaxStamp=",0,"max current size stamp");
   G__memvar_setup((void*)((long)(&p->fCode)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"fCode=",0,"pointer to the code");
   G__memvar_setup((void*)((long)(&p->fInfo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TString),-1,-1,1,"fInfo=",0,"pointer description");
   G__memvar_setup((void*)((long)(&p->fFunction)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TString),-1,-1,1,"fFunction=",0,"function");
   G__memvar_setup((void*)((long)(&p->fLib)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TString),-1,-1,1,"fLib=",0,"library");
   G__memvar_setup((void*)((long)(&p->fCodeID)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"fCodeID=",0,"ID number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMemStatInfoStamp */
static void G__setup_memvarTMemStatInfoStamp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp));
   { TMemStatInfoStamp *p; p=(TMemStatInfoStamp*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStampcLcLEStampType),-1,-2,1,"kCode=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStampcLcLEStampType),-1,-2,1,"kStack=1",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fTotalAllocCount)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"fTotalAllocCount=",0,"total number of allocation for stack sequence");
   G__memvar_setup((void*)((long)(&p->fTotalAllocSize)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"fTotalAllocSize=",0,"total size of allocated memory");
   G__memvar_setup((void*)((long)(&p->fAllocCount)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fAllocCount=",0,"current number of allocation-deallocation");
   G__memvar_setup((void*)((long)(&p->fAllocSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fAllocSize=",0,"current allocated size");
   G__memvar_setup((void*)((long)(&p->fStampNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fStampNumber=",0,"stamp number");
   G__memvar_setup((void*)((long)(&p->fID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fID=",0,"code ID number");
   G__memvar_setup((void*)((long)(&p->fStampType)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"fStampType=",0,"stamp Type");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMemStat */
static void G__setup_memvarTMemStat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStat));
   { TMemStat *p; p=(TMemStat*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLESelection),-1,-2,1,"kFunction=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLESelection),-1,-2,1,"kLibrary=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStatType),-1,-2,1,"kTotalAllocCount=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStatType),-1,-2,1,"kAllocCount=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStatType),-1,-2,1,"kTotalAllocSize=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStatType),-1,-2,1,"kAllocSize=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStatType),-1,-2,1,"kUndef=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStampType),-1,-2,1,"kCurrent=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStampType),-1,-2,1,"kMaxSize=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStampType),-1,-2,1,"kMaxCount=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLOperType),-1,-2,1,"kAND=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLOperType),-1,-2,1,"kOR=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLOperType),-1,-2,1,"kNOT=2",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStatType),-1,-1,4,"fSortStat=",0,"sorting statistic type");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatcLcLStampType),-1,-1,4,"fSortStamp=",0,"sorting stamp type");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaximum=",0,"maximum value of all graphs");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fSortDeep=",0,"Deepness of the information to be print - draw");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fStackDeep=",0,"Deepness of the stack information");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fMaxStringLength=",0,"max length of information string");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSelected=",0,"index of selected object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsActive=",0,"is object attached to MemStat");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fOrder=",0,"sorting order");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("UIntVector_t"),-1,4,"fSelectedCodeIndex=",0,"vector of indexes of selected items - code");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("UIntVector_t"),-1,4,"fSelectedStackIndex=",0,"vector of indexes of selected items - stack");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("IntVector_t"),-1,4,"fArrayIndexes=",0,"indexes of selected objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TBits),-1,-1,4,"fSelectedCodeBitmap=",0,"bitmask   of selected items        - code");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TBits),-1,-1,4,"fSelectedStackBitmap=",0,"bitmask   of selected items - stack");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_auto_ptrlETFilegR),G__defined_typename("TFilePtr"),-1,4,"fFile=",0,"current file with information  - stamps");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TObjArray),-1,-1,4,"fStampArray=",0,"array of stamp names");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TObjArray),-1,-1,4,"fArray=",0,"array of objects to draw");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TObjArray),-1,-1,4,"fArrayGraphics=",0,"array of graphic objects");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TObjArray),-1,-1,4,"fDisablePrintLib=",0,"disable printing for libraries");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TObjArray),-1,-1,4,"fDisablePrintCode=",0,"disable printing for libraries");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TString),-1,-1,4,"fOption=",0,"current options");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TTree),-1,-1,4,"fTree=",0,"current tree with information  - stamps");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TTree),-1,-1,4,"fTreeSys=",0,"tree with system information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,4,"fStackSummary=",0,"summary information for selected stack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager),-1,-1,4,"fManager=",0,"current MemStatManager");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMemStatStackInfo */
static void G__setup_memvarTMemStatStackInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo));
   { TMemStatStackInfo *p; p=(TMemStatStackInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfocLcLdA),-1,-2,1,"kStackHistorySize=50",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fSize)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"fSize=",0,"size of the stack");
   G__memvar_setup((void*)((long)(&p->fLastStamp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,1,"fLastStamp=",0,"last time stamp info");
   G__memvar_setup((void*)((long)(&p->fCurrentStamp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,1,"fCurrentStamp=",0,"current  time stamp info");
   G__memvar_setup((void*)((long)(&p->fMaxStampSize)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,1,"fMaxStampSize=",0,"max current size stamp");
   G__memvar_setup((void*)((long)(&p->fMaxStamp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),-1,-1,1,"fMaxStamp=",0,"max current size stamp");
   G__memvar_setup((void*)((long)(&p->fNextHash)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fNextHash=",0,"index  to the next info for given hash value");
   G__memvar_setup((void*)((long)(&p->fStackSymbols)-(long)(p)),89,2,0,-1,-1,-1,1,"fStackSymbols=",0,"!Stack Symbols");
   G__memvar_setup((void*)((long)(&p->fSymbolIndexes)-(long)(p)),72,0,0,-1,G__defined_typename("UInt_t"),-1,1,"fSymbolIndexes=",0,"[fSize]symbol indexes");
   G__memvar_setup((void*)((long)(&p->fStackID)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"fStackID=",0,"ID number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MemstatLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Memstat() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMemstat(void) {
   /* Memstat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MemstatLN_Memstat));
   G__memfunc_setup("dig2bytes",909,G__G__Memstat_112_0_1, 117, G__get_linked_tagnum(&G__G__MemstatLN_string), -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - bytes", (char*)NULL, (void*) G__func2void( (string (*)(Long64_t))(&Memstat::dig2bytes) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMemStatDepend(void) {
   /* TMemStatDepend */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend));
   G__memfunc_setup("GetMallocHook",1289,G__G__Memstat_116_0_1, 89, -1, G__defined_typename("TMemStatDepend::MallocHookFunc_t"), 0, 0, 3, 1, 0, "", "malloc function getter", (void*) G__func2void( (TMemStatDepend::MallocHookFunc_t (*)())(&TMemStatDepend::GetMallocHook) ), 0);
   G__memfunc_setup("GetFreeHook",1075,G__G__Memstat_116_0_2, 89, -1, G__defined_typename("TMemStatDepend::FreeHookFunc_t"), 0, 0, 3, 1, 0, "", "free function getter", (void*) G__func2void( (TMemStatDepend::FreeHookFunc_t (*)())(&TMemStatDepend::GetFreeHook) ), 0);
   G__memfunc_setup("SetMallocHook",1301,G__G__Memstat_116_0_3, 121, -1, -1, 0, 1, 3, 1, 0, "Y - 'TMemStatDepend::MallocHookFunc_t' 0 - p", "malloc function setter", (void*) G__func2void( (void (*)(TMemStatDepend::MallocHookFunc_t))(&TMemStatDepend::SetMallocHook) ), 0);
   G__memfunc_setup("SetFreeHook",1087,G__G__Memstat_116_0_4, 121, -1, -1, 0, 1, 3, 1, 0, "Y - 'TMemStatDepend::FreeHookFunc_t' 0 - p", "free function setter", (void*) G__func2void( (void (*)(TMemStatDepend::FreeHookFunc_t))(&TMemStatDepend::SetFreeHook) ), 0);
   G__memfunc_setup("Backtrace",896,G__G__Memstat_116_0_5, 104, -1, G__defined_typename("size_t"), 0, 3, 3, 1, 0, 
"Y - - 2 - trace h - 'size_t' 0 - size "
"g - 'Bool_t' 0 'kFALSE' _bUseGNUBuildinBacktrace", (char*)NULL, (void*) G__func2void( (size_t (*)(void**, size_t, Bool_t))(&TMemStatDepend::Backtrace) ), 0);
   G__memfunc_setup("BacktraceSymbols",1641,G__G__Memstat_116_0_6, 67, -1, -1, 2, 2, 3, 1, 0, 
"Y - - 2 - trace h - 'size_t' 0 - size", (char*)NULL, (void*) G__func2void( (char** (*)(void**, size_t))(&TMemStatDepend::BacktraceSymbols) ), 0);
   G__memfunc_setup("GetSymbols",1033,G__G__Memstat_116_0_7, 121, -1, -1, 0, 5, 3, 1, 0, 
"Y - - 0 - pFunction u 'TString' - 1 - strInfo "
"u 'TString' - 1 - strLib u 'TString' - 1 - strFun "
"u 'TString' - 1 - strLine", (char*)NULL, (void*) G__func2void( (void (*)(void*, TString&, TString&, TString&, TString&))(&TMemStatDepend::GetSymbols) ), 0);
   G__memfunc_setup("Demangle",797,G__G__Memstat_116_0_8, 121, -1, -1, 0, 2, 3, 1, 0, 
"C - - 0 - codeInfo u 'TString' - 1 - str", (char*)NULL, (void*) G__func2void( (void (*)(char*, TString&))(&TMemStatDepend::Demangle) ), 0);
   // automatic default constructor
   G__memfunc_setup("TMemStatDepend", 1375, G__G__Memstat_116_0_9, (int) ('i'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TMemStatDepend", 1375, G__G__Memstat_116_0_10, (int) ('i'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend), -1, 0, 1, 1, 1, 0, "u 'TMemStatDepend' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMemStatDepend", 1501, G__G__Memstat_116_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Memstat_116_0_12, (int) ('u'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend), -1, 1, 1, 1, 1, 0, "u 'TMemStatDepend' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMemStatManager(void) {
   /* TMemStatManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager));
   G__memfunc_setup("TMemStatManager",1482,G__G__Memstat_157_0_1, 105, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Enable",583,G__G__Memstat_157_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", "enable memory statistic", (void*) NULL, 0);
   G__memfunc_setup("Disable",692,G__G__Memstat_157_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", "Disable memory statistic", (void*) NULL, 0);
   G__memfunc_setup("SetAutoStamp",1226,G__G__Memstat_157_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - sizeMem h - 'UInt_t' 0 - n "
"h - 'UInt_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddStamps",897,G__G__Memstat_157_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' stampname", "add  stamps to the list of stamps for changed stacks", (void*) NULL, 0);
   G__memfunc_setup("SAddStamps",980,G__G__Memstat_157_0_6, 121, -1, -1, 0, 1, 3, 1, 0, "C - 'Char_t' 10 - stampname", "static version add  stamps to the list of stamps for changed stacks", (void*) G__func2void( (void (*)(const Char_t*))(&TMemStatManager::SAddStamps) ), 0);
   G__memfunc_setup("GetInstance",1109,G__G__Memstat_157_0_7, 85, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager), -1, 0, 0, 3, 1, 0, "", "get instance of class - ONLY ONE INSTANCE", (void*) G__func2void( (TMemStatManager* (*)())(&TMemStatManager::GetInstance) ), 0);
   G__memfunc_setup("Close",502,G__G__Memstat_157_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", "close MemStatManager", (void*) G__func2void( (void (*)())(&TMemStatManager::Close) ), 0);
   G__memfunc_setup("AddStamp",782,G__G__Memstat_157_0_9, 117, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp), -1, 1, 0, 1, 1, 0, "", "add one stamp to the list of stamps", (void*) NULL, 0);
   G__memfunc_setup("GetCodeInfo",1063,G__G__Memstat_157_0_10, 117, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo), -1, 1, 1, 1, 1, 0, "Y - - 0 - address", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCodeInfoIndex",1567,G__G__Memstat_157_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "Y - - 0 - address", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpTo",601,G__G__Memstat_157_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i 'TMemStatManager::EDumpTo' - 0 - _DumpTo g - 'Bool_t' 0 'kTRUE' _clearStamps "
"C - - 10 '0' _stampName", "write current status to file", (void*) NULL, 0);
   G__memfunc_setup("SetUseGNUBuildinBacktrace",2442,G__G__Memstat_157_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - _NewVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("STAddInfo",828,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo), -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - size Y - - 2 - stackptrs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("STFindInfo",948,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo), -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - size Y - - 2 - stackptrs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RehashLeak",984,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - newSize", "rehash leak pointers", (void*) NULL, 0);
   G__memfunc_setup("AddPointer",1002,(G__InterfaceMethod) NULL, 89, -1, -1, 0, 2, 1, 2, 0, 
"h - 'size_t' 0 - size Y - - 0 '0' ptr", "add pointer to the table", (void*) NULL, 0);
   G__memfunc_setup("FreePointer",1123,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "Y - - 0 - p", "free pointer", (void*) NULL, 0);
   G__memfunc_setup("AllocHook",892,(G__InterfaceMethod) NULL, 89, -1, -1, 0, 2, 3, 2, 0, 
"h - 'size_t' 0 - size Y - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FreeHook",787,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 3, 2, 0, 
"Y - - 0 - ptr Y - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FreeHashtable",1294,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Memstat_157_0_23, 85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMemStatManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Memstat_157_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Memstat_157_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMemStatManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Memstat_157_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMemStatManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Memstat_157_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Memstat_157_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Memstat_157_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStatManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Memstat_157_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Memstat_157_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStatManager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TMemStatManager", 1482, G__G__Memstat_157_0_35, (int) ('i'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager), -1, 0, 1, 1, 1, 0, "u 'TMemStatManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMemStatManager", 1608, G__G__Memstat_157_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Memstat_157_0_37, (int) ('u'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager), -1, 1, 1, 1, 1, 0, "u 'TMemStatManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMemStatCodeInfo(void) {
   /* TMemStatCodeInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo));
   G__memfunc_setup("TMemStatCodeInfo",1558,G__G__Memstat_159_0_1, 105, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo), -1, 0, 0, 1, 1, 0, "", "store information about line of code", (void*) NULL, 0);
   G__memfunc_setup("SetInfo",696,G__G__Memstat_159_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "Y - - 0 - info", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeStamp",899,G__G__Memstat_159_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - stampNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Inc",282,G__G__Memstat_159_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - memSize", "increment counters -when memory allocated", (void*) NULL, 0);
   G__memfunc_setup("Dec",268,G__G__Memstat_159_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - memSize", "decrement counters -when memory deallocated", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Memstat_159_0_7, 85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMemStatCodeInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Memstat_159_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatCodeInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Memstat_159_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMemStatCodeInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Memstat_159_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMemStatCodeInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Memstat_159_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Memstat_159_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatCodeInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Memstat_159_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStatCodeInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Memstat_159_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatCodeInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Memstat_159_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStatCodeInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TMemStatCodeInfo", 1558, G__G__Memstat_159_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo), -1, 0, 1, 1, 1, 0, "u 'TMemStatCodeInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMemStatCodeInfo", 1684, G__G__Memstat_159_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Memstat_159_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo), -1, 1, 1, 1, 1, 0, "u 'TMemStatCodeInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMemStatInfoStamp(void) {
   /* TMemStatInfoStamp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp));
   G__memfunc_setup("TMemStatInfoStamp",1696,G__G__Memstat_160_0_1, 105, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp), -1, 0, 0, 1, 1, 0, "", "stamp of memory usage information", (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Equal",504,G__G__Memstat_160_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TMemStatInfoStamp' - 1 - stamp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Inc",282,G__G__Memstat_160_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - memSize", "increment counters -when memory allocated", (void*) NULL, 0);
   G__memfunc_setup("Dec",268,G__G__Memstat_160_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - memSize", "decrement counters -when memory deallocated", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Memstat_160_0_6, 85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMemStatInfoStamp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Memstat_160_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatInfoStamp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Memstat_160_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMemStatInfoStamp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Memstat_160_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMemStatInfoStamp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Memstat_160_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Memstat_160_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatInfoStamp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Memstat_160_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStatInfoStamp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Memstat_160_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatInfoStamp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Memstat_160_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStatInfoStamp::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TMemStatInfoStamp", 1696, G__G__Memstat_160_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp), -1, 0, 1, 1, 1, 0, "u 'TMemStatInfoStamp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMemStatInfoStamp", 1822, G__G__Memstat_160_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Memstat_160_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp), -1, 1, 1, 1, 1, 0, "u 'TMemStatInfoStamp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMemStat(void) {
   /* TMemStat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStat));
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMemStat",987,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"C - - 10 - fname i - 'Int_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnabledCode",1062,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "u 'TMemStatCodeInfo' - 11 - info", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCodeArray",1272,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeGraph",880,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__MemstatLN_TGraph), -1, 0, 5, 1, 4, 0, 
"i 'TMemStat::StatType' - 0 - statType i - 'Int_t' 0 - id "
"i - 'Int_t' 0 - type d - 'Double_t' 1 - xmax "
"d - 'Double_t' 1 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeGraphCode",1259,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__MemstatLN_TObjArray), -1, 0, 2, 1, 4, 0, 
"i 'TMemStat::StatType' - 0 - statType i - 'Int_t' 0 - nentries", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeGraphStack",1382,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__MemstatLN_TObjArray), -1, 0, 2, 1, 4, 0, 
"i 'TMemStat::StatType' - 0 - statType i - 'Int_t' 0 - nentries", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeStampsText",1435,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeStackArray",1395,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessOption",1368,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefreshSelect",1327,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMemStat",783,G__G__Memstat_170_0_13, 105, G__get_linked_tagnum(&G__G__MemstatLN_TMemStat), -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"read\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddStamp",782,G__G__Memstat_170_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - stampName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFillSelection",1613,G__G__Memstat_170_0_16, 121, -1, -1, 0, 2, 1, 1, 8, 
"U 'set<string,less<string>,allocator<string> >' 'TMemStat::Selection_t' 0 - _Container i 'TMemStat::ESelection' - 0 - _Selection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOption",921,G__G__Memstat_170_0_17, 67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStampList",1217,G__G__Memstat_170_0_18, 85, G__get_linked_tagnum(&G__G__MemstatLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStackDeep",1172,G__G__Memstat_170_0_19, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSortDeep",1094,G__G__Memstat_170_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxStringLength",1823,G__G__Memstat_170_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjectInfo",1283,(G__InterfaceMethod) NULL,67, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeReport",1018,G__G__Memstat_170_0_23, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 '\"\"' lib C - - 10 '\"\"' fun "
"C - 'Option_t' 10 'NULL' option C - - 10 '\"\"' fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeHisMemoryStamp",1824,G__G__Memstat_170_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - topDiff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeHisMemoryTime",1706,G__G__Memstat_170_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintCode",904,G__G__Memstat_170_0_27, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 '10' nentries", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintCodeWithID",1457,G__G__Memstat_170_0_28, 121, -1, -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintStack",1027,G__G__Memstat_170_0_29, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 '10' nentries h - 'UInt_t' 0 '1' deep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintStackWithID",1580,G__G__Memstat_170_0_30, 121, -1, -1, 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - _id h - 'UInt_t' 0 '0' _deep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Report",636,G__G__Memstat_170_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSelection",1449,G__G__Memstat_170_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAutoStamp",1226,G__G__Memstat_170_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '2000000' autoStampSize i - 'Int_t' 0 '200000' autoStampAlloc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentStamp",1556,G__G__Memstat_170_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - stampName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentStamp",1556,G__G__Memstat_170_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TObjString' - 11 - stampName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSortStat",1136,G__G__Memstat_170_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TMemStat::StatType' - 0 - NewVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSortStamp",1241,G__G__Memstat_170_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TMemStat::StampType' - 0 - NewVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStackDeep",1184,G__G__Memstat_170_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - NewVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSortDeep",1106,G__G__Memstat_170_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - NewVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectCode",987,G__G__Memstat_170_0_40, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"\"' contlib C - - 10 '\"\"' contfunction "
"i 'TMemStat::OperType' - 0 'kOR' oType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectStack",1110,G__G__Memstat_170_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TMemStat::OperType' - 0 'kOR' oType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortCode",803,G__G__Memstat_170_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'TMemStat::StatType' - 0 - sortType i 'TMemStat::StampType' - 0 - stampType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortStack",926,G__G__Memstat_170_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'TMemStat::StatType' - 0 - sortType i 'TMemStat::StampType' - 0 - stampType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Memstat_170_0_44, 85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMemStat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Memstat_170_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Memstat_170_0_46, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMemStat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Memstat_170_0_47, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMemStat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Memstat_170_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Memstat_170_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Memstat_170_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Memstat_170_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Memstat_170_0_55, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStat::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TMemStat", 909, G__G__Memstat_170_0_56, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMemStatStackInfo(void) {
   /* TMemStatStackInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo));
   G__memfunc_setup("TMemStatStackInfo",1681,G__G__Memstat_209_0_1, 105, G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__Memstat_209_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - stacksize Y - - 2 - stackptrs "
"U 'TMemStatManager' - 0 - manager i - 'Int_t' 0 - ID", "initialization", (void*) NULL, 0);
   G__memfunc_setup("Inc",282,G__G__Memstat_209_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - memSize U 'TMemStatManager' - 0 - manager", "increment counters -when memory allocated", (void*) NULL, 0);
   G__memfunc_setup("Dec",268,G__G__Memstat_209_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - memSize U 'TMemStatManager' - 0 - manager", "decrement counters -when memory deallocated", (void*) NULL, 0);
   G__memfunc_setup("Hash",388,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Equal",504,G__G__Memstat_209_0_6, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - size Y - - 2 - ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StackAt",683,G__G__Memstat_209_0_7, 89, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeStamp",899,G__G__Memstat_209_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - stampNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HashStack",890,G__G__Memstat_209_0_9, 107, -1, G__defined_typename("ULong_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 0 - size Y - - 2 - ptr", (char*)NULL, (void*) G__func2void( (ULong_t (*)(UInt_t, void**))(&TMemStatStackInfo::HashStack) ), 0);
   G__memfunc_setup("Class",502,G__G__Memstat_209_0_10, 85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMemStatStackInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Memstat_209_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatStackInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Memstat_209_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMemStatStackInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Memstat_209_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMemStatStackInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__MemstatLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Memstat_209_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Memstat_209_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatStackInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Memstat_209_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStatStackInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Memstat_209_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMemStatStackInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Memstat_209_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMemStatStackInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TMemStatStackInfo", 1681, G__G__Memstat_209_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo), -1, 0, 1, 1, 1, 0, "u 'TMemStatStackInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMemStatStackInfo", 1807, G__G__Memstat_209_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Memstat_209_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo), -1, 1, 1, 1, 1, 0, "u 'TMemStatStackInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Memstat() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Memstat() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Memstat() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__MemstatLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TObjString = { "TObjString" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_Memstat = { "Memstat" , 110 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatDepend = { "TMemStatDepend" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__MemstatLN_TBits = { "TBits" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatManager = { "TMemStatManager" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatCodeInfo = { "TMemStatCodeInfo" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatInfoStamp = { "TMemStatInfoStamp" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_auto_ptrlETFilegR = { "auto_ptr<TFile>" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStat = { "TMemStat" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR = { "set<string,less<string>,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatcLcLESelection = { "TMemStat::ESelection" , 101 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatcLcLStatType = { "TMemStat::StatType" , 101 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatcLcLStampType = { "TMemStat::StampType" , 101 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatcLcLOperType = { "TMemStat::OperType" , 101 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatStackInfo = { "TMemStatStackInfo" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatInfoStampcLcLEStampType = { "TMemStatInfoStamp::EStampType" , 101 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatStackInfocLcLdA = { "TMemStatStackInfo::$" , 101 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatManagercLcLTMemTable_t = { "TMemStatManager::TMemTable_t" , 115 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatManagercLcLTDeleteTable_t = { "TMemStatManager::TDeleteTable_t" , 115 , -1 };
G__linked_taginfo G__G__MemstatLN_vectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgR = { "vector<TMemStatCodeInfo,allocator<TMemStatCodeInfo> >" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMemStatCodeInfo,allocator<TMemStatCodeInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatManagercLcLEStatusBits = { "TMemStatManager::EStatusBits" , 101 , -1 };
G__linked_taginfo G__G__MemstatLN_TMemStatManagercLcLEDumpTo = { "TMemStatManager::EDumpTo" , 101 , -1 };
G__linked_taginfo G__G__MemstatLN_vectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgR = { "vector<TMemStatStackInfo,allocator<TMemStatStackInfo> >" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMemStatStackInfo,allocator<TMemStatStackInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_vectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgR = { "vector<TMemStatInfoStamp,allocator<TMemStatInfoStamp> >" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMemStatInfoStamp,allocator<TMemStatInfoStamp> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_vectorlETTimeStampcOallocatorlETTimeStampgRsPgR = { "vector<TTimeStamp,allocator<TTimeStamp> >" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_reverse_iteratorlEvectorlETTimeStampcOallocatorlETTimeStampgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TTimeStamp,allocator<TTimeStamp> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MemstatLN_maplEconstsPvoidmUcOunsignedsPintcOlesslEconstsPvoidmUgRcOallocatorlEpairlEconstsPvoidmUsPconstcOunsignedsPintgRsPgRsPgR = { "map<const void*,unsigned int,less<const void*>,allocator<pair<const void* const,unsigned int> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Memstat() {
  G__G__MemstatLN_TClass.tagnum = -1 ;
  G__G__MemstatLN_TBuffer.tagnum = -1 ;
  G__G__MemstatLN_TMemberInspector.tagnum = -1 ;
  G__G__MemstatLN_TObject.tagnum = -1 ;
  G__G__MemstatLN_string.tagnum = -1 ;
  G__G__MemstatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__MemstatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MemstatLN_TObjArray.tagnum = -1 ;
  G__G__MemstatLN_TString.tagnum = -1 ;
  G__G__MemstatLN_TObjString.tagnum = -1 ;
  G__G__MemstatLN_Memstat.tagnum = -1 ;
  G__G__MemstatLN_TMemStatDepend.tagnum = -1 ;
  G__G__MemstatLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__MemstatLN_TBits.tagnum = -1 ;
  G__G__MemstatLN_TTree.tagnum = -1 ;
  G__G__MemstatLN_TMemStatManager.tagnum = -1 ;
  G__G__MemstatLN_TGraph.tagnum = -1 ;
  G__G__MemstatLN_TMemStatCodeInfo.tagnum = -1 ;
  G__G__MemstatLN_TMemStatInfoStamp.tagnum = -1 ;
  G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__MemstatLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__MemstatLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MemstatLN_auto_ptrlETFilegR.tagnum = -1 ;
  G__G__MemstatLN_TMemStat.tagnum = -1 ;
  G__G__MemstatLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__G__MemstatLN_TMemStatcLcLESelection.tagnum = -1 ;
  G__G__MemstatLN_TMemStatcLcLStatType.tagnum = -1 ;
  G__G__MemstatLN_TMemStatcLcLStampType.tagnum = -1 ;
  G__G__MemstatLN_TMemStatcLcLOperType.tagnum = -1 ;
  G__G__MemstatLN_TMemStatStackInfo.tagnum = -1 ;
  G__G__MemstatLN_TMemStatInfoStampcLcLEStampType.tagnum = -1 ;
  G__G__MemstatLN_TMemStatStackInfocLcLdA.tagnum = -1 ;
  G__G__MemstatLN_TMemStatManagercLcLTMemTable_t.tagnum = -1 ;
  G__G__MemstatLN_TMemStatManagercLcLTDeleteTable_t.tagnum = -1 ;
  G__G__MemstatLN_vectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgR.tagnum = -1 ;
  G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MemstatLN_TMemStatManagercLcLEStatusBits.tagnum = -1 ;
  G__G__MemstatLN_TMemStatManagercLcLEDumpTo.tagnum = -1 ;
  G__G__MemstatLN_vectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgR.tagnum = -1 ;
  G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MemstatLN_vectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgR.tagnum = -1 ;
  G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MemstatLN_vectorlETTimeStampcOallocatorlETTimeStampgRsPgR.tagnum = -1 ;
  G__G__MemstatLN_reverse_iteratorlEvectorlETTimeStampcOallocatorlETTimeStampgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MemstatLN_maplEconstsPvoidmUcOunsignedsPintcOlesslEconstsPvoidmUgRcOallocatorlEpairlEconstsPvoidmUsPconstcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Memstat() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_string);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TString);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TObjString);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MemstatLN_Memstat),0,-1,0,(char*)NULL,G__setup_memvarMemstat,G__setup_memfuncMemstat);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatDepend),sizeof(TMemStatDepend),-1,0,(char*)NULL,G__setup_memvarTMemStatDepend,G__setup_memfuncTMemStatDepend);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TBits);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TTree);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatManager),sizeof(TMemStatManager),-1,292096,"a manager of memstat sessions.",G__setup_memvarTMemStatManager,G__setup_memfuncTMemStatManager);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TGraph);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatCodeInfo),sizeof(TMemStatCodeInfo),-1,292096,"a code information structure",G__setup_memvarTMemStatCodeInfo,G__setup_memfuncTMemStatCodeInfo);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatInfoStamp),sizeof(TMemStatInfoStamp),-1,292096,"information about stamps",G__setup_memvarTMemStatInfoStamp,G__setup_memfuncTMemStatInfoStamp);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_auto_ptrlETFilegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStat),sizeof(TMemStat),-1,29952,"a user interface class of memstat",G__setup_memvarTMemStat,G__setup_memfuncTMemStat);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatcLcLESelection);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatcLcLStatType);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatcLcLStampType);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatcLcLOperType);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MemstatLN_TMemStatStackInfo),sizeof(TMemStatStackInfo),-1,292096,"a stack information structure",G__setup_memvarTMemStatStackInfo,G__setup_memfuncTMemStatStackInfo);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatInfoStampcLcLEStampType);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatStackInfocLcLdA);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatManagercLcLTMemTable_t);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatManagercLcLTDeleteTable_t);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_vectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatCodeInfocOallocatorlETMemStatCodeInfogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatManagercLcLEStatusBits);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_TMemStatManagercLcLEDumpTo);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_vectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatStackInfocOallocatorlETMemStatStackInfogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_vectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_reverse_iteratorlEvectorlETMemStatInfoStampcOallocatorlETMemStatInfoStampgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_vectorlETTimeStampcOallocatorlETTimeStampgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_reverse_iteratorlEvectorlETTimeStampcOallocatorlETTimeStampgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MemstatLN_maplEconstsPvoidmUcOunsignedsPintcOlesslEconstsPvoidmUgRcOallocatorlEpairlEconstsPvoidmUsPconstcOunsignedsPintgRsPgRsPgR);
}
extern "C" void G__cpp_setupG__Memstat(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Memstat()");
  G__set_cpp_environmentG__Memstat();
  G__cpp_setup_tagtableG__Memstat();

  G__cpp_setup_inheritanceG__Memstat();

  G__cpp_setup_typetableG__Memstat();

  G__cpp_setup_memvarG__Memstat();

  G__cpp_setup_memfuncG__Memstat();
  G__cpp_setup_globalG__Memstat();
  G__cpp_setup_funcG__Memstat();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Memstat();
  return;
}
class G__cpp_setup_initG__Memstat {
  public:
    G__cpp_setup_initG__Memstat() { G__add_setup_func("G__Memstat",(G__incsetup)(&G__cpp_setupG__Memstat)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Memstat() { G__remove_setup_func("G__Memstat"); }
};
G__cpp_setup_initG__Memstat G__cpp_setup_initializerG__Memstat;

