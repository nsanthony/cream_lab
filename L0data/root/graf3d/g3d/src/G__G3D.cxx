//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:42:52 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__G3D.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TAxis3D_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TAxis3D(void *p = 0);
   static void *newArray_TAxis3D(Long_t size, void *p);
   static void delete_TAxis3D(void *p);
   static void deleteArray_TAxis3D(void *p);
   static void destruct_TAxis3D(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TAxis3D*)
   {
      ::TAxis3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TAxis3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TAxis3D", ::TAxis3D::Class_Version(), "include/TAxis3D.h", 33,
                  typeid(::TAxis3D), DefineBehavior(ptr, ptr),
                  &::TAxis3D::Dictionary, isa_proxy, 4,
                  sizeof(::TAxis3D) );
      instance.SetNew(&new_TAxis3D);
      instance.SetNewArray(&newArray_TAxis3D);
      instance.SetDelete(&delete_TAxis3D);
      instance.SetDeleteArray(&deleteArray_TAxis3D);
      instance.SetDestructor(&destruct_TAxis3D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TAxis3D*)
   {
      return GenerateInitInstanceLocal((::TAxis3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TAxis3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMaterial_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMaterial(void *p = 0);
   static void *newArray_TMaterial(Long_t size, void *p);
   static void delete_TMaterial(void *p);
   static void deleteArray_TMaterial(void *p);
   static void destruct_TMaterial(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMaterial*)
   {
      ::TMaterial *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMaterial >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMaterial", ::TMaterial::Class_Version(), "include/TMaterial.h", 32,
                  typeid(::TMaterial), DefineBehavior(ptr, ptr),
                  &::TMaterial::Dictionary, isa_proxy, 1,
                  sizeof(::TMaterial) );
      instance.SetNew(&new_TMaterial);
      instance.SetNewArray(&newArray_TMaterial);
      instance.SetDelete(&delete_TMaterial);
      instance.SetDeleteArray(&deleteArray_TMaterial);
      instance.SetDestructor(&destruct_TMaterial);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMaterial*)
   {
      return GenerateInitInstanceLocal((::TMaterial*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMaterial*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TNode_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TNode(void *p = 0);
   static void *newArray_TNode(Long_t size, void *p);
   static void delete_TNode(void *p);
   static void deleteArray_TNode(void *p);
   static void destruct_TNode(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TNode*)
   {
      ::TNode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TNode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TNode", ::TNode::Class_Version(), "include/TNode.h", 43,
                  typeid(::TNode), DefineBehavior(ptr, ptr),
                  &::TNode::Dictionary, isa_proxy, 1,
                  sizeof(::TNode) );
      instance.SetNew(&new_TNode);
      instance.SetNewArray(&newArray_TNode);
      instance.SetDelete(&delete_TNode);
      instance.SetDeleteArray(&deleteArray_TNode);
      instance.SetDestructor(&destruct_TNode);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TNode*)
   {
      return GenerateInitInstanceLocal((::TNode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TNode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TShape_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TShape(void *p = 0);
   static void *newArray_TShape(Long_t size, void *p);
   static void delete_TShape(void *p);
   static void deleteArray_TShape(void *p);
   static void destruct_TShape(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TShape*)
   {
      ::TShape *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TShape >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TShape", ::TShape::Class_Version(), "include/TShape.h", 47,
                  typeid(::TShape), DefineBehavior(ptr, ptr),
                  &::TShape::Dictionary, isa_proxy, 1,
                  sizeof(::TShape) );
      instance.SetNew(&new_TShape);
      instance.SetNewArray(&newArray_TShape);
      instance.SetDelete(&delete_TShape);
      instance.SetDeleteArray(&deleteArray_TShape);
      instance.SetDestructor(&destruct_TShape);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TShape*)
   {
      return GenerateInitInstanceLocal((::TShape*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TShape*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TBRIK_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TBRIK(void *p = 0);
   static void *newArray_TBRIK(Long_t size, void *p);
   static void delete_TBRIK(void *p);
   static void deleteArray_TBRIK(void *p);
   static void destruct_TBRIK(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TBRIK*)
   {
      ::TBRIK *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TBRIK >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TBRIK", ::TBRIK::Class_Version(), "include/TBRIK.h", 28,
                  typeid(::TBRIK), DefineBehavior(ptr, ptr),
                  &::TBRIK::Dictionary, isa_proxy, 4,
                  sizeof(::TBRIK) );
      instance.SetNew(&new_TBRIK);
      instance.SetNewArray(&newArray_TBRIK);
      instance.SetDelete(&delete_TBRIK);
      instance.SetDeleteArray(&deleteArray_TBRIK);
      instance.SetDestructor(&destruct_TBRIK);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TBRIK*)
   {
      return GenerateInitInstanceLocal((::TBRIK*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TBRIK*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TTUBE_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TTUBE(void *p = 0);
   static void *newArray_TTUBE(Long_t size, void *p);
   static void delete_TTUBE(void *p);
   static void deleteArray_TTUBE(void *p);
   static void destruct_TTUBE(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TTUBE*)
   {
      ::TTUBE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TTUBE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TTUBE", ::TTUBE::Class_Version(), "include/TTUBE.h", 34,
                  typeid(::TTUBE), DefineBehavior(ptr, ptr),
                  &::TTUBE::Dictionary, isa_proxy, 1,
                  sizeof(::TTUBE) );
      instance.SetNew(&new_TTUBE);
      instance.SetNewArray(&newArray_TTUBE);
      instance.SetDelete(&delete_TTUBE);
      instance.SetDeleteArray(&deleteArray_TTUBE);
      instance.SetDestructor(&destruct_TTUBE);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TTUBE*)
   {
      return GenerateInitInstanceLocal((::TTUBE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TTUBE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCONE_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TCONE(void *p = 0);
   static void *newArray_TCONE(Long_t size, void *p);
   static void delete_TCONE(void *p);
   static void deleteArray_TCONE(void *p);
   static void destruct_TCONE(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCONE*)
   {
      ::TCONE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCONE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCONE", ::TCONE::Class_Version(), "include/TCONE.h", 30,
                  typeid(::TCONE), DefineBehavior(ptr, ptr),
                  &::TCONE::Dictionary, isa_proxy, 4,
                  sizeof(::TCONE) );
      instance.SetNew(&new_TCONE);
      instance.SetNewArray(&newArray_TCONE);
      instance.SetDelete(&delete_TCONE);
      instance.SetDeleteArray(&deleteArray_TCONE);
      instance.SetDestructor(&destruct_TCONE);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCONE*)
   {
      return GenerateInitInstanceLocal((::TCONE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCONE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TTUBS_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TTUBS(void *p = 0);
   static void *newArray_TTUBS(Long_t size, void *p);
   static void delete_TTUBS(void *p);
   static void deleteArray_TTUBS(void *p);
   static void destruct_TTUBS(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TTUBS*)
   {
      ::TTUBS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TTUBS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TTUBS", ::TTUBS::Class_Version(), "include/TTUBS.h", 31,
                  typeid(::TTUBS), DefineBehavior(ptr, ptr),
                  &::TTUBS::Dictionary, isa_proxy, 4,
                  sizeof(::TTUBS) );
      instance.SetNew(&new_TTUBS);
      instance.SetNewArray(&newArray_TTUBS);
      instance.SetDelete(&delete_TTUBS);
      instance.SetDeleteArray(&deleteArray_TTUBS);
      instance.SetDestructor(&destruct_TTUBS);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TTUBS*)
   {
      return GenerateInitInstanceLocal((::TTUBS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TTUBS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCONS_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TCONS(void *p = 0);
   static void *newArray_TCONS(Long_t size, void *p);
   static void delete_TCONS(void *p);
   static void deleteArray_TCONS(void *p);
   static void destruct_TCONS(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCONS*)
   {
      ::TCONS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCONS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCONS", ::TCONS::Class_Version(), "include/TCONS.h", 29,
                  typeid(::TCONS), DefineBehavior(ptr, ptr),
                  &::TCONS::Dictionary, isa_proxy, 4,
                  sizeof(::TCONS) );
      instance.SetNew(&new_TCONS);
      instance.SetNewArray(&newArray_TCONS);
      instance.SetDelete(&delete_TCONS);
      instance.SetDeleteArray(&deleteArray_TCONS);
      instance.SetDestructor(&destruct_TCONS);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCONS*)
   {
      return GenerateInitInstanceLocal((::TCONS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCONS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCTUB_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TCTUB(void *p = 0);
   static void *newArray_TCTUB(Long_t size, void *p);
   static void delete_TCTUB(void *p);
   static void deleteArray_TCTUB(void *p);
   static void destruct_TCTUB(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCTUB*)
   {
      ::TCTUB *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCTUB >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCTUB", ::TCTUB::Class_Version(), "include/TCTUB.h", 31,
                  typeid(::TCTUB), DefineBehavior(ptr, ptr),
                  &::TCTUB::Dictionary, isa_proxy, 1,
                  sizeof(::TCTUB) );
      instance.SetNew(&new_TCTUB);
      instance.SetNewArray(&newArray_TCTUB);
      instance.SetDelete(&delete_TCTUB);
      instance.SetDeleteArray(&deleteArray_TCTUB);
      instance.SetDestructor(&destruct_TCTUB);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCTUB*)
   {
      return GenerateInitInstanceLocal((::TCTUB*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCTUB*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TELTU_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TELTU(void *p = 0);
   static void *newArray_TELTU(Long_t size, void *p);
   static void delete_TELTU(void *p);
   static void deleteArray_TELTU(void *p);
   static void destruct_TELTU(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TELTU*)
   {
      ::TELTU *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TELTU >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TELTU", ::TELTU::Class_Version(), "include/TELTU.h", 33,
                  typeid(::TELTU), DefineBehavior(ptr, ptr),
                  &::TELTU::Dictionary, isa_proxy, 4,
                  sizeof(::TELTU) );
      instance.SetNew(&new_TELTU);
      instance.SetNewArray(&newArray_TELTU);
      instance.SetDelete(&delete_TELTU);
      instance.SetDeleteArray(&deleteArray_TELTU);
      instance.SetDestructor(&destruct_TELTU);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TELTU*)
   {
      return GenerateInitInstanceLocal((::TELTU*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TELTU*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TRotMatrix_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TRotMatrix(void *p = 0);
   static void *newArray_TRotMatrix(Long_t size, void *p);
   static void delete_TRotMatrix(void *p);
   static void deleteArray_TRotMatrix(void *p);
   static void destruct_TRotMatrix(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TRotMatrix*)
   {
      ::TRotMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TRotMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TRotMatrix", ::TRotMatrix::Class_Version(), "include/TRotMatrix.h", 30,
                  typeid(::TRotMatrix), DefineBehavior(ptr, ptr),
                  &::TRotMatrix::Dictionary, isa_proxy, 1,
                  sizeof(::TRotMatrix) );
      instance.SetNew(&new_TRotMatrix);
      instance.SetNewArray(&newArray_TRotMatrix);
      instance.SetDelete(&delete_TRotMatrix);
      instance.SetDeleteArray(&deleteArray_TRotMatrix);
      instance.SetDestructor(&destruct_TRotMatrix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TRotMatrix*)
   {
      return GenerateInitInstanceLocal((::TRotMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRotMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGeometry_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGeometry(void *p = 0);
   static void *newArray_TGeometry(Long_t size, void *p);
   static void delete_TGeometry(void *p);
   static void deleteArray_TGeometry(void *p);
   static void destruct_TGeometry(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGeometry*)
   {
      ::TGeometry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGeometry >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGeometry", ::TGeometry::Class_Version(), "include/TGeometry.h", 43,
                  typeid(::TGeometry), DefineBehavior(ptr, ptr),
                  &::TGeometry::Dictionary, isa_proxy, 1,
                  sizeof(::TGeometry) );
      instance.SetNew(&new_TGeometry);
      instance.SetNewArray(&newArray_TGeometry);
      instance.SetDelete(&delete_TGeometry);
      instance.SetDeleteArray(&deleteArray_TGeometry);
      instance.SetDestructor(&destruct_TGeometry);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGeometry*)
   {
      return GenerateInitInstanceLocal((::TGeometry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGeometry*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGTRA_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TGTRA(void *p = 0);
   static void *newArray_TGTRA(Long_t size, void *p);
   static void delete_TGTRA(void *p);
   static void deleteArray_TGTRA(void *p);
   static void destruct_TGTRA(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGTRA*)
   {
      ::TGTRA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGTRA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGTRA", ::TGTRA::Class_Version(), "include/TGTRA.h", 29,
                  typeid(::TGTRA), DefineBehavior(ptr, ptr),
                  &::TGTRA::Dictionary, isa_proxy, 4,
                  sizeof(::TGTRA) );
      instance.SetNew(&new_TGTRA);
      instance.SetNewArray(&newArray_TGTRA);
      instance.SetDelete(&delete_TGTRA);
      instance.SetDeleteArray(&deleteArray_TGTRA);
      instance.SetDestructor(&destruct_TGTRA);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGTRA*)
   {
      return GenerateInitInstanceLocal((::TGTRA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGTRA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPolyLine3D_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPolyLine3D(void *p = 0);
   static void *newArray_TPolyLine3D(Long_t size, void *p);
   static void delete_TPolyLine3D(void *p);
   static void deleteArray_TPolyLine3D(void *p);
   static void destruct_TPolyLine3D(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPolyLine3D*)
   {
      ::TPolyLine3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPolyLine3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPolyLine3D", ::TPolyLine3D::Class_Version(), "include/TPolyLine3D.h", 42,
                  typeid(::TPolyLine3D), DefineBehavior(ptr, ptr),
                  &::TPolyLine3D::Dictionary, isa_proxy, 1,
                  sizeof(::TPolyLine3D) );
      instance.SetNew(&new_TPolyLine3D);
      instance.SetNewArray(&newArray_TPolyLine3D);
      instance.SetDelete(&delete_TPolyLine3D);
      instance.SetDeleteArray(&deleteArray_TPolyLine3D);
      instance.SetDestructor(&destruct_TPolyLine3D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPolyLine3D*)
   {
      return GenerateInitInstanceLocal((::TPolyLine3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPolyLine3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void THelix_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_THelix(void *p = 0);
   static void *newArray_THelix(Long_t size, void *p);
   static void delete_THelix(void *p);
   static void deleteArray_THelix(void *p);
   static void destruct_THelix(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::THelix*)
   {
      ::THelix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::THelix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("THelix", ::THelix::Class_Version(), "include/THelix.h", 40,
                  typeid(::THelix), DefineBehavior(ptr, ptr),
                  &::THelix::Dictionary, isa_proxy, 1,
                  sizeof(::THelix) );
      instance.SetNew(&new_THelix);
      instance.SetNewArray(&newArray_THelix);
      instance.SetDelete(&delete_THelix);
      instance.SetDeleteArray(&deleteArray_THelix);
      instance.SetDestructor(&destruct_THelix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::THelix*)
   {
      return GenerateInitInstanceLocal((::THelix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::THelix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void THYPE_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_THYPE(void *p = 0);
   static void *newArray_THYPE(Long_t size, void *p);
   static void delete_THYPE(void *p);
   static void deleteArray_THYPE(void *p);
   static void destruct_THYPE(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::THYPE*)
   {
      ::THYPE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::THYPE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("THYPE", ::THYPE::Class_Version(), "include/THYPE.h", 30,
                  typeid(::THYPE), DefineBehavior(ptr, ptr),
                  &::THYPE::Dictionary, isa_proxy, 4,
                  sizeof(::THYPE) );
      instance.SetNew(&new_THYPE);
      instance.SetNewArray(&newArray_THYPE);
      instance.SetDelete(&delete_THYPE);
      instance.SetDeleteArray(&deleteArray_THYPE);
      instance.SetDestructor(&destruct_THYPE);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::THYPE*)
   {
      return GenerateInitInstanceLocal((::THYPE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::THYPE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMarker3DBox_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMarker3DBox(void *p = 0);
   static void *newArray_TMarker3DBox(Long_t size, void *p);
   static void delete_TMarker3DBox(void *p);
   static void deleteArray_TMarker3DBox(void *p);
   static void destruct_TMarker3DBox(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMarker3DBox*)
   {
      ::TMarker3DBox *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMarker3DBox >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMarker3DBox", ::TMarker3DBox::Class_Version(), "include/TMarker3DBox.h", 46,
                  typeid(::TMarker3DBox), DefineBehavior(ptr, ptr),
                  &::TMarker3DBox::Dictionary, isa_proxy, 1,
                  sizeof(::TMarker3DBox) );
      instance.SetNew(&new_TMarker3DBox);
      instance.SetNewArray(&newArray_TMarker3DBox);
      instance.SetDelete(&delete_TMarker3DBox);
      instance.SetDeleteArray(&deleteArray_TMarker3DBox);
      instance.SetDestructor(&destruct_TMarker3DBox);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMarker3DBox*)
   {
      return GenerateInitInstanceLocal((::TMarker3DBox*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMarker3DBox*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMixture_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMixture(void *p = 0);
   static void *newArray_TMixture(Long_t size, void *p);
   static void delete_TMixture(void *p);
   static void deleteArray_TMixture(void *p);
   static void destruct_TMixture(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMixture*)
   {
      ::TMixture *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMixture >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMixture", ::TMixture::Class_Version(), "include/TMixture.h", 29,
                  typeid(::TMixture), DefineBehavior(ptr, ptr),
                  &::TMixture::Dictionary, isa_proxy, 1,
                  sizeof(::TMixture) );
      instance.SetNew(&new_TMixture);
      instance.SetNewArray(&newArray_TMixture);
      instance.SetDelete(&delete_TMixture);
      instance.SetDeleteArray(&deleteArray_TMixture);
      instance.SetDestructor(&destruct_TMixture);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMixture*)
   {
      return GenerateInitInstanceLocal((::TMixture*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMixture*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TNodeDiv_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TNodeDiv(void *p = 0);
   static void *newArray_TNodeDiv(Long_t size, void *p);
   static void delete_TNodeDiv(void *p);
   static void deleteArray_TNodeDiv(void *p);
   static void destruct_TNodeDiv(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TNodeDiv*)
   {
      ::TNodeDiv *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TNodeDiv >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TNodeDiv", ::TNodeDiv::Class_Version(), "include/TNodeDiv.h", 30,
                  typeid(::TNodeDiv), DefineBehavior(ptr, ptr),
                  &::TNodeDiv::Dictionary, isa_proxy, 4,
                  sizeof(::TNodeDiv) );
      instance.SetNew(&new_TNodeDiv);
      instance.SetNewArray(&newArray_TNodeDiv);
      instance.SetDelete(&delete_TNodeDiv);
      instance.SetDeleteArray(&deleteArray_TNodeDiv);
      instance.SetDestructor(&destruct_TNodeDiv);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TNodeDiv*)
   {
      return GenerateInitInstanceLocal((::TNodeDiv*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TNodeDiv*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPARA_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPARA(void *p = 0);
   static void *newArray_TPARA(Long_t size, void *p);
   static void delete_TPARA(void *p);
   static void deleteArray_TPARA(void *p);
   static void destruct_TPARA(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPARA*)
   {
      ::TPARA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPARA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPARA", ::TPARA::Class_Version(), "include/TPARA.h", 32,
                  typeid(::TPARA), DefineBehavior(ptr, ptr),
                  &::TPARA::Dictionary, isa_proxy, 4,
                  sizeof(::TPARA) );
      instance.SetNew(&new_TPARA);
      instance.SetNewArray(&newArray_TPARA);
      instance.SetDelete(&delete_TPARA);
      instance.SetDeleteArray(&deleteArray_TPARA);
      instance.SetDestructor(&destruct_TPARA);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPARA*)
   {
      return GenerateInitInstanceLocal((::TPARA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPARA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPCON_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPCON(void *p = 0);
   static void *newArray_TPCON(Long_t size, void *p);
   static void delete_TPCON(void *p);
   static void deleteArray_TPCON(void *p);
   static void destruct_TPCON(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPCON*)
   {
      ::TPCON *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPCON >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPCON", ::TPCON::Class_Version(), "include/TPCON.h", 35,
                  typeid(::TPCON), DefineBehavior(ptr, ptr),
                  &::TPCON::Dictionary, isa_proxy, 1,
                  sizeof(::TPCON) );
      instance.SetNew(&new_TPCON);
      instance.SetNewArray(&newArray_TPCON);
      instance.SetDelete(&delete_TPCON);
      instance.SetDeleteArray(&deleteArray_TPCON);
      instance.SetDestructor(&destruct_TPCON);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPCON*)
   {
      return GenerateInitInstanceLocal((::TPCON*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPCON*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPGON_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPGON(void *p = 0);
   static void *newArray_TPGON(Long_t size, void *p);
   static void delete_TPGON(void *p);
   static void deleteArray_TPGON(void *p);
   static void destruct_TPGON(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPGON*)
   {
      ::TPGON *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPGON >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPGON", ::TPGON::Class_Version(), "include/TPGON.h", 32,
                  typeid(::TPGON), DefineBehavior(ptr, ptr),
                  &::TPGON::Dictionary, isa_proxy, 4,
                  sizeof(::TPGON) );
      instance.SetNew(&new_TPGON);
      instance.SetNewArray(&newArray_TPGON);
      instance.SetDelete(&delete_TPGON);
      instance.SetDeleteArray(&deleteArray_TPGON);
      instance.SetDestructor(&destruct_TPGON);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPGON*)
   {
      return GenerateInitInstanceLocal((::TPGON*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPGON*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPoints3DABC_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TPoints3DABC(void *p);
   static void deleteArray_TPoints3DABC(void *p);
   static void destruct_TPoints3DABC(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPoints3DABC*)
   {
      ::TPoints3DABC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPoints3DABC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPoints3DABC", ::TPoints3DABC::Class_Version(), "include/TPoints3DABC.h", 27,
                  typeid(::TPoints3DABC), DefineBehavior(ptr, ptr),
                  &::TPoints3DABC::Dictionary, isa_proxy, 0,
                  sizeof(::TPoints3DABC) );
      instance.SetDelete(&delete_TPoints3DABC);
      instance.SetDeleteArray(&deleteArray_TPoints3DABC);
      instance.SetDestructor(&destruct_TPoints3DABC);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPoints3DABC*)
   {
      return GenerateInitInstanceLocal((::TPoints3DABC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPoints3DABC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPolyMarker3D_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPolyMarker3D(void *p = 0);
   static void *newArray_TPolyMarker3D(Long_t size, void *p);
   static void delete_TPolyMarker3D(void *p);
   static void deleteArray_TPolyMarker3D(void *p);
   static void destruct_TPolyMarker3D(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPolyMarker3D*)
   {
      ::TPolyMarker3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPolyMarker3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPolyMarker3D", ::TPolyMarker3D::Class_Version(), "include/TPolyMarker3D.h", 41,
                  typeid(::TPolyMarker3D), DefineBehavior(ptr, ptr),
                  &::TPolyMarker3D::Dictionary, isa_proxy, 1,
                  sizeof(::TPolyMarker3D) );
      instance.SetNew(&new_TPolyMarker3D);
      instance.SetNewArray(&newArray_TPolyMarker3D);
      instance.SetDelete(&delete_TPolyMarker3D);
      instance.SetDeleteArray(&deleteArray_TPolyMarker3D);
      instance.SetDestructor(&destruct_TPolyMarker3D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPolyMarker3D*)
   {
      return GenerateInitInstanceLocal((::TPolyMarker3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPolyMarker3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TPointSet3D_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TPointSet3D(void *p = 0);
   static void *newArray_TPointSet3D(Long_t size, void *p);
   static void delete_TPointSet3D(void *p);
   static void deleteArray_TPointSet3D(void *p);
   static void destruct_TPointSet3D(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPointSet3D*)
   {
      ::TPointSet3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPointSet3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPointSet3D", ::TPointSet3D::Class_Version(), "include/TPointSet3D.h", 26,
                  typeid(::TPointSet3D), DefineBehavior(ptr, ptr),
                  &::TPointSet3D::Dictionary, isa_proxy, 1,
                  sizeof(::TPointSet3D) );
      instance.SetNew(&new_TPointSet3D);
      instance.SetNewArray(&newArray_TPointSet3D);
      instance.SetDelete(&delete_TPointSet3D);
      instance.SetDeleteArray(&deleteArray_TPointSet3D);
      instance.SetDestructor(&destruct_TPointSet3D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPointSet3D*)
   {
      return GenerateInitInstanceLocal((::TPointSet3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPointSet3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSPHE_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TSPHE(void *p = 0);
   static void *newArray_TSPHE(Long_t size, void *p);
   static void delete_TSPHE(void *p);
   static void deleteArray_TSPHE(void *p);
   static void destruct_TSPHE(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSPHE*)
   {
      ::TSPHE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSPHE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSPHE", ::TSPHE::Class_Version(), "include/TSPHE.h", 30,
                  typeid(::TSPHE), DefineBehavior(ptr, ptr),
                  &::TSPHE::Dictionary, isa_proxy, 1,
                  sizeof(::TSPHE) );
      instance.SetNew(&new_TSPHE);
      instance.SetNewArray(&newArray_TSPHE);
      instance.SetDelete(&delete_TSPHE);
      instance.SetDeleteArray(&deleteArray_TSPHE);
      instance.SetDestructor(&destruct_TSPHE);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSPHE*)
   {
      return GenerateInitInstanceLocal((::TSPHE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSPHE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TTRAP_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TTRAP(void *p = 0);
   static void *newArray_TTRAP(Long_t size, void *p);
   static void delete_TTRAP(void *p);
   static void deleteArray_TTRAP(void *p);
   static void destruct_TTRAP(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TTRAP*)
   {
      ::TTRAP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TTRAP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TTRAP", ::TTRAP::Class_Version(), "include/TTRAP.h", 35,
                  typeid(::TTRAP), DefineBehavior(ptr, ptr),
                  &::TTRAP::Dictionary, isa_proxy, 4,
                  sizeof(::TTRAP) );
      instance.SetNew(&new_TTRAP);
      instance.SetNewArray(&newArray_TTRAP);
      instance.SetDelete(&delete_TTRAP);
      instance.SetDeleteArray(&deleteArray_TTRAP);
      instance.SetDestructor(&destruct_TTRAP);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TTRAP*)
   {
      return GenerateInitInstanceLocal((::TTRAP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TTRAP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TTRD1_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TTRD1(void *p = 0);
   static void *newArray_TTRD1(Long_t size, void *p);
   static void delete_TTRD1(void *p);
   static void deleteArray_TTRD1(void *p);
   static void destruct_TTRD1(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TTRD1*)
   {
      ::TTRD1 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TTRD1 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TTRD1", ::TTRD1::Class_Version(), "include/TTRD1.h", 30,
                  typeid(::TTRD1), DefineBehavior(ptr, ptr),
                  &::TTRD1::Dictionary, isa_proxy, 4,
                  sizeof(::TTRD1) );
      instance.SetNew(&new_TTRD1);
      instance.SetNewArray(&newArray_TTRD1);
      instance.SetDelete(&delete_TTRD1);
      instance.SetDeleteArray(&deleteArray_TTRD1);
      instance.SetDestructor(&destruct_TTRD1);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TTRD1*)
   {
      return GenerateInitInstanceLocal((::TTRD1*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TTRD1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TTRD2_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TTRD2(void *p = 0);
   static void *newArray_TTRD2(Long_t size, void *p);
   static void delete_TTRD2(void *p);
   static void deleteArray_TTRD2(void *p);
   static void destruct_TTRD2(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TTRD2*)
   {
      ::TTRD2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TTRD2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TTRD2", ::TTRD2::Class_Version(), "include/TTRD2.h", 31,
                  typeid(::TTRD2), DefineBehavior(ptr, ptr),
                  &::TTRD2::Dictionary, isa_proxy, 4,
                  sizeof(::TTRD2) );
      instance.SetNew(&new_TTRD2);
      instance.SetNewArray(&newArray_TTRD2);
      instance.SetDelete(&delete_TTRD2);
      instance.SetDeleteArray(&deleteArray_TTRD2);
      instance.SetDestructor(&destruct_TTRD2);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TTRD2*)
   {
      return GenerateInitInstanceLocal((::TTRD2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TTRD2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TView3D_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TView3D(void *p = 0);
   static void *newArray_TView3D(Long_t size, void *p);
   static void delete_TView3D(void *p);
   static void deleteArray_TView3D(void *p);
   static void destruct_TView3D(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TView3D*)
   {
      ::TView3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TView3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TView3D", ::TView3D::Class_Version(), "include/TView3D.h", 31,
                  typeid(::TView3D), DefineBehavior(ptr, ptr),
                  &::TView3D::Dictionary, isa_proxy, 1,
                  sizeof(::TView3D) );
      instance.SetNew(&new_TView3D);
      instance.SetNewArray(&newArray_TView3D);
      instance.SetDelete(&delete_TView3D);
      instance.SetDeleteArray(&deleteArray_TView3D);
      instance.SetDestructor(&destruct_TView3D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TView3D*)
   {
      return GenerateInitInstanceLocal((::TView3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TView3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TXTRU_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TXTRU(void *p = 0);
   static void *newArray_TXTRU(Long_t size, void *p);
   static void delete_TXTRU(void *p);
   static void deleteArray_TXTRU(void *p);
   static void destruct_TXTRU(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TXTRU*)
   {
      ::TXTRU *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TXTRU >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TXTRU", ::TXTRU::Class_Version(), "include/TXTRU.h", 24,
                  typeid(::TXTRU), DefineBehavior(ptr, ptr),
                  &::TXTRU::Dictionary, isa_proxy, 4,
                  sizeof(::TXTRU) );
      instance.SetNew(&new_TXTRU);
      instance.SetNewArray(&newArray_TXTRU);
      instance.SetDelete(&delete_TXTRU);
      instance.SetDeleteArray(&deleteArray_TXTRU);
      instance.SetDestructor(&destruct_TXTRU);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TXTRU*)
   {
      return GenerateInitInstanceLocal((::TXTRU*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TXTRU*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TAxis3D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAxis3D::Class_Name()
{
   return "TAxis3D";
}

//______________________________________________________________________________
const char *TAxis3D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAxis3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAxis3D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TAxis3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAxis3D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAxis3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAxis3D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TAxis3D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMaterial::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMaterial::Class_Name()
{
   return "TMaterial";
}

//______________________________________________________________________________
const char *TMaterial::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMaterial*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMaterial::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMaterial*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMaterial::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMaterial*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMaterial::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMaterial*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TNode::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TNode::Class_Name()
{
   return "TNode";
}

//______________________________________________________________________________
const char *TNode::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TNode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TNode::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TNode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TNode::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TNode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TNode::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TNode*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TShape::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TShape::Class_Name()
{
   return "TShape";
}

//______________________________________________________________________________
const char *TShape::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TShape*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TShape::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TShape*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TShape::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TShape*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TShape::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TShape*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TBRIK::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TBRIK::Class_Name()
{
   return "TBRIK";
}

//______________________________________________________________________________
const char *TBRIK::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TBRIK*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TBRIK::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TBRIK*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TBRIK::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TBRIK*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TBRIK::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TBRIK*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TTUBE::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TTUBE::Class_Name()
{
   return "TTUBE";
}

//______________________________________________________________________________
const char *TTUBE::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTUBE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTUBE::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTUBE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTUBE::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTUBE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTUBE::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTUBE*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCONE::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCONE::Class_Name()
{
   return "TCONE";
}

//______________________________________________________________________________
const char *TCONE::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCONE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCONE::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCONE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCONE::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCONE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCONE::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCONE*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TTUBS::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TTUBS::Class_Name()
{
   return "TTUBS";
}

//______________________________________________________________________________
const char *TTUBS::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTUBS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTUBS::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTUBS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTUBS::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTUBS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTUBS::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTUBS*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCONS::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCONS::Class_Name()
{
   return "TCONS";
}

//______________________________________________________________________________
const char *TCONS::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCONS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCONS::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCONS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCONS::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCONS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCONS::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCONS*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCTUB::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCTUB::Class_Name()
{
   return "TCTUB";
}

//______________________________________________________________________________
const char *TCTUB::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCTUB*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCTUB::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCTUB*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCTUB::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCTUB*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCTUB::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCTUB*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TELTU::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TELTU::Class_Name()
{
   return "TELTU";
}

//______________________________________________________________________________
const char *TELTU::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TELTU*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TELTU::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TELTU*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TELTU::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TELTU*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TELTU::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TELTU*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRotMatrix::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRotMatrix::Class_Name()
{
   return "TRotMatrix";
}

//______________________________________________________________________________
const char *TRotMatrix::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRotMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRotMatrix::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TRotMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRotMatrix::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRotMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRotMatrix::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TRotMatrix*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeometry::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeometry::Class_Name()
{
   return "TGeometry";
}

//______________________________________________________________________________
const char *TGeometry::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeometry*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeometry::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGeometry*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeometry::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeometry*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeometry::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGeometry*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGTRA::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGTRA::Class_Name()
{
   return "TGTRA";
}

//______________________________________________________________________________
const char *TGTRA::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGTRA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGTRA::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGTRA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGTRA::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGTRA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGTRA::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGTRA*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPolyLine3D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPolyLine3D::Class_Name()
{
   return "TPolyLine3D";
}

//______________________________________________________________________________
const char *TPolyLine3D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPolyLine3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPolyLine3D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPolyLine3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPolyLine3D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPolyLine3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPolyLine3D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPolyLine3D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *THelix::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *THelix::Class_Name()
{
   return "THelix";
}

//______________________________________________________________________________
const char *THelix::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THelix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int THelix::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THelix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void THelix::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THelix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *THelix::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THelix*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *THYPE::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *THYPE::Class_Name()
{
   return "THYPE";
}

//______________________________________________________________________________
const char *THYPE::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THYPE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int THYPE::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THYPE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void THYPE::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THYPE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *THYPE::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THYPE*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMarker3DBox::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMarker3DBox::Class_Name()
{
   return "TMarker3DBox";
}

//______________________________________________________________________________
const char *TMarker3DBox::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMarker3DBox*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMarker3DBox::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMarker3DBox*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMarker3DBox::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMarker3DBox*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMarker3DBox::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMarker3DBox*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMixture::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMixture::Class_Name()
{
   return "TMixture";
}

//______________________________________________________________________________
const char *TMixture::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMixture*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMixture::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMixture*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMixture::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMixture*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMixture::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMixture*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TNodeDiv::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TNodeDiv::Class_Name()
{
   return "TNodeDiv";
}

//______________________________________________________________________________
const char *TNodeDiv::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TNodeDiv*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TNodeDiv::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TNodeDiv*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TNodeDiv::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TNodeDiv*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TNodeDiv::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TNodeDiv*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPARA::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPARA::Class_Name()
{
   return "TPARA";
}

//______________________________________________________________________________
const char *TPARA::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPARA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPARA::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPARA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPARA::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPARA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPARA::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPARA*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPCON::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPCON::Class_Name()
{
   return "TPCON";
}

//______________________________________________________________________________
const char *TPCON::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPCON*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPCON::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPCON*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPCON::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPCON*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPCON::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPCON*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPGON::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPGON::Class_Name()
{
   return "TPGON";
}

//______________________________________________________________________________
const char *TPGON::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPGON*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPGON::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPGON*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPGON::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPGON*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPGON::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPGON*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPoints3DABC::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPoints3DABC::Class_Name()
{
   return "TPoints3DABC";
}

//______________________________________________________________________________
const char *TPoints3DABC::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPoints3DABC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPoints3DABC::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPoints3DABC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPoints3DABC::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPoints3DABC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPoints3DABC::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPoints3DABC*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPolyMarker3D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPolyMarker3D::Class_Name()
{
   return "TPolyMarker3D";
}

//______________________________________________________________________________
const char *TPolyMarker3D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPolyMarker3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPolyMarker3D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPolyMarker3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPolyMarker3D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPolyMarker3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPolyMarker3D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPolyMarker3D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPointSet3D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPointSet3D::Class_Name()
{
   return "TPointSet3D";
}

//______________________________________________________________________________
const char *TPointSet3D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPointSet3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPointSet3D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPointSet3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPointSet3D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPointSet3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPointSet3D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPointSet3D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSPHE::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSPHE::Class_Name()
{
   return "TSPHE";
}

//______________________________________________________________________________
const char *TSPHE::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSPHE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSPHE::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSPHE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSPHE::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSPHE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSPHE::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSPHE*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TTRAP::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TTRAP::Class_Name()
{
   return "TTRAP";
}

//______________________________________________________________________________
const char *TTRAP::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTRAP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTRAP::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTRAP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTRAP::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTRAP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTRAP::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTRAP*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TTRD1::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TTRD1::Class_Name()
{
   return "TTRD1";
}

//______________________________________________________________________________
const char *TTRD1::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTRD1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTRD1::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTRD1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTRD1::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTRD1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTRD1::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTRD1*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TTRD2::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TTRD2::Class_Name()
{
   return "TTRD2";
}

//______________________________________________________________________________
const char *TTRD2::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTRD2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTRD2::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TTRD2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTRD2::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTRD2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTRD2::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TTRD2*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TView3D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TView3D::Class_Name()
{
   return "TView3D";
}

//______________________________________________________________________________
const char *TView3D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TView3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TView3D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TView3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TView3D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TView3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TView3D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TView3D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXTRU::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXTRU::Class_Name()
{
   return "TXTRU";
}

//______________________________________________________________________________
const char *TXTRU::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXTRU*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXTRU::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXTRU*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXTRU::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXTRU*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXTRU::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXTRU*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TAxis3D::Streamer(TBuffer &R__b)
{
   // Stream an object of class TAxis3D.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TAxis3D::Class(),this);
   } else {
      R__b.WriteClassBuffer(TAxis3D::Class(),this);
   }
}

//______________________________________________________________________________
void TAxis3D::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TAxis3D.
      TClass *R__cl = ::TAxis3D::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fAxis[3]", fAxis);
      R__insp.Inspect(R__cl, R__parent, "fOption", &fOption);
      fOption.ShowMembers(R__insp, strcat(R__parent,"fOption.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fSelected", &fSelected);
      R__insp.Inspect(R__cl, R__parent, "fZoomMode", &fZoomMode);
      R__insp.Inspect(R__cl, R__parent, "fStickyZoom", &fStickyZoom);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TAxis3D(void *p) {
      return  p ? new(p) ::TAxis3D : new ::TAxis3D;
   }
   static void *newArray_TAxis3D(Long_t nElements, void *p) {
      return p ? new(p) ::TAxis3D[nElements] : new ::TAxis3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_TAxis3D(void *p) {
      delete ((::TAxis3D*)p);
   }
   static void deleteArray_TAxis3D(void *p) {
      delete [] ((::TAxis3D*)p);
   }
   static void destruct_TAxis3D(void *p) {
      typedef ::TAxis3D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TAxis3D

//______________________________________________________________________________
void TBRIK::Streamer(TBuffer &R__b)
{
   // Stream an object of class TBRIK.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TBRIK::Class(),this);
   } else {
      R__b.WriteClassBuffer(TBRIK::Class(),this);
   }
}

//______________________________________________________________________________
void TBRIK::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TBRIK.
      TClass *R__cl = ::TBRIK::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDx", &fDx);
      R__insp.Inspect(R__cl, R__parent, "fDy", &fDy);
      R__insp.Inspect(R__cl, R__parent, "fDz", &fDz);
      TShape::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TBRIK(void *p) {
      return  p ? new(p) ::TBRIK : new ::TBRIK;
   }
   static void *newArray_TBRIK(Long_t nElements, void *p) {
      return p ? new(p) ::TBRIK[nElements] : new ::TBRIK[nElements];
   }
   // Wrapper around operator delete
   static void delete_TBRIK(void *p) {
      delete ((::TBRIK*)p);
   }
   static void deleteArray_TBRIK(void *p) {
      delete [] ((::TBRIK*)p);
   }
   static void destruct_TBRIK(void *p) {
      typedef ::TBRIK current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TBRIK

//______________________________________________________________________________
void TCONE::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCONE.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCONE::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCONE::Class(),this);
   }
}

//______________________________________________________________________________
void TCONE::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TCONE.
      TClass *R__cl = ::TCONE::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fRmin2", &fRmin2);
      R__insp.Inspect(R__cl, R__parent, "fRmax2", &fRmax2);
      TTUBE::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCONE(void *p) {
      return  p ? new(p) ::TCONE : new ::TCONE;
   }
   static void *newArray_TCONE(Long_t nElements, void *p) {
      return p ? new(p) ::TCONE[nElements] : new ::TCONE[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCONE(void *p) {
      delete ((::TCONE*)p);
   }
   static void deleteArray_TCONE(void *p) {
      delete [] ((::TCONE*)p);
   }
   static void destruct_TCONE(void *p) {
      typedef ::TCONE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCONE

//______________________________________________________________________________
void TCONS::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCONS.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCONS::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCONS::Class(),this);
   }
}

//______________________________________________________________________________
void TCONS::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TCONS.
      TClass *R__cl = ::TCONS::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fRmin2", &fRmin2);
      R__insp.Inspect(R__cl, R__parent, "fRmax2", &fRmax2);
      TTUBS::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCONS(void *p) {
      return  p ? new(p) ::TCONS : new ::TCONS;
   }
   static void *newArray_TCONS(Long_t nElements, void *p) {
      return p ? new(p) ::TCONS[nElements] : new ::TCONS[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCONS(void *p) {
      delete ((::TCONS*)p);
   }
   static void deleteArray_TCONS(void *p) {
      delete [] ((::TCONS*)p);
   }
   static void destruct_TCONS(void *p) {
      typedef ::TCONS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCONS

//______________________________________________________________________________
void TCTUB::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TCTUB.
      TClass *R__cl = ::TCTUB::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fCosLow[3]", fCosLow);
      R__insp.Inspect(R__cl, R__parent, "fCosHigh[3]", fCosHigh);
      TTUBS::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCTUB(void *p) {
      return  p ? new(p) ::TCTUB : new ::TCTUB;
   }
   static void *newArray_TCTUB(Long_t nElements, void *p) {
      return p ? new(p) ::TCTUB[nElements] : new ::TCTUB[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCTUB(void *p) {
      delete ((::TCTUB*)p);
   }
   static void deleteArray_TCTUB(void *p) {
      delete [] ((::TCTUB*)p);
   }
   static void destruct_TCTUB(void *p) {
      typedef ::TCTUB current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCTUB

//______________________________________________________________________________
void TELTU::Streamer(TBuffer &R__b)
{
   // Stream an object of class TELTU.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TELTU::Class(),this);
   } else {
      R__b.WriteClassBuffer(TELTU::Class(),this);
   }
}

//______________________________________________________________________________
void TELTU::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TELTU.
      TClass *R__cl = ::TELTU::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TTUBE::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TELTU(void *p) {
      return  p ? new(p) ::TELTU : new ::TELTU;
   }
   static void *newArray_TELTU(Long_t nElements, void *p) {
      return p ? new(p) ::TELTU[nElements] : new ::TELTU[nElements];
   }
   // Wrapper around operator delete
   static void delete_TELTU(void *p) {
      delete ((::TELTU*)p);
   }
   static void deleteArray_TELTU(void *p) {
      delete [] ((::TELTU*)p);
   }
   static void destruct_TELTU(void *p) {
      typedef ::TELTU current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TELTU

//______________________________________________________________________________
void TGTRA::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGTRA.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TGTRA::Class(),this);
   } else {
      R__b.WriteClassBuffer(TGTRA::Class(),this);
   }
}

//______________________________________________________________________________
void TGTRA::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGTRA.
      TClass *R__cl = ::TGTRA::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fTwist", &fTwist);
      R__insp.Inspect(R__cl, R__parent, "fH1", &fH1);
      R__insp.Inspect(R__cl, R__parent, "fBl1", &fBl1);
      R__insp.Inspect(R__cl, R__parent, "fTl1", &fTl1);
      R__insp.Inspect(R__cl, R__parent, "fAlpha1", &fAlpha1);
      R__insp.Inspect(R__cl, R__parent, "fH2", &fH2);
      R__insp.Inspect(R__cl, R__parent, "fBl2", &fBl2);
      R__insp.Inspect(R__cl, R__parent, "fTl2", &fTl2);
      R__insp.Inspect(R__cl, R__parent, "fAlpha2", &fAlpha2);
      TBRIK::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGTRA(void *p) {
      return  p ? new(p) ::TGTRA : new ::TGTRA;
   }
   static void *newArray_TGTRA(Long_t nElements, void *p) {
      return p ? new(p) ::TGTRA[nElements] : new ::TGTRA[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGTRA(void *p) {
      delete ((::TGTRA*)p);
   }
   static void deleteArray_TGTRA(void *p) {
      delete [] ((::TGTRA*)p);
   }
   static void destruct_TGTRA(void *p) {
      typedef ::TGTRA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGTRA

//______________________________________________________________________________
void TGeometry::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeometry.
      TClass *R__cl = ::TGeometry::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fMaterials", &fMaterials);
      R__insp.Inspect(R__cl, R__parent, "*fMatrices", &fMatrices);
      R__insp.Inspect(R__cl, R__parent, "*fShapes", &fShapes);
      R__insp.Inspect(R__cl, R__parent, "*fNodes", &fNodes);
      R__insp.Inspect(R__cl, R__parent, "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__parent, "*fCurrentNode", &fCurrentNode);
      R__insp.Inspect(R__cl, R__parent, "*fMaterialPointer", &fMaterialPointer);
      R__insp.Inspect(R__cl, R__parent, "*fMatrixPointer", &fMatrixPointer);
      R__insp.Inspect(R__cl, R__parent, "*fShapePointer", &fShapePointer);
      R__insp.Inspect(R__cl, R__parent, "fBomb", &fBomb);
      R__insp.Inspect(R__cl, R__parent, "fGeomLevel", &fGeomLevel);
      R__insp.Inspect(R__cl, R__parent, "fX", &fX);
      R__insp.Inspect(R__cl, R__parent, "fY", &fY);
      R__insp.Inspect(R__cl, R__parent, "fZ", &fZ);
      R__insp.Inspect(R__cl, R__parent, "fTranslation[20][3]", fTranslation);
      R__insp.Inspect(R__cl, R__parent, "fRotMatrix[20][9]", fRotMatrix);
      R__insp.Inspect(R__cl, R__parent, "fIsReflection[20]", fIsReflection);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGeometry(void *p) {
      return  p ? new(p) ::TGeometry : new ::TGeometry;
   }
   static void *newArray_TGeometry(Long_t nElements, void *p) {
      return p ? new(p) ::TGeometry[nElements] : new ::TGeometry[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGeometry(void *p) {
      delete ((::TGeometry*)p);
   }
   static void deleteArray_TGeometry(void *p) {
      delete [] ((::TGeometry*)p);
   }
   static void destruct_TGeometry(void *p) {
      typedef ::TGeometry current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeometry

//______________________________________________________________________________
void THelix::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class THelix.
      TClass *R__cl = ::THelix::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fX0", &fX0);
      R__insp.Inspect(R__cl, R__parent, "fY0", &fY0);
      R__insp.Inspect(R__cl, R__parent, "fZ0", &fZ0);
      R__insp.Inspect(R__cl, R__parent, "fVt", &fVt);
      R__insp.Inspect(R__cl, R__parent, "fPhi0", &fPhi0);
      R__insp.Inspect(R__cl, R__parent, "fVz", &fVz);
      R__insp.Inspect(R__cl, R__parent, "fW", &fW);
      R__insp.Inspect(R__cl, R__parent, "fAxis[3]", fAxis);
      R__insp.Inspect(R__cl, R__parent, "*fRotMat", &fRotMat);
      R__insp.Inspect(R__cl, R__parent, "fRange[2]", fRange);
      TPolyLine3D::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_THelix(void *p) {
      return  p ? new(p) ::THelix : new ::THelix;
   }
   static void *newArray_THelix(Long_t nElements, void *p) {
      return p ? new(p) ::THelix[nElements] : new ::THelix[nElements];
   }
   // Wrapper around operator delete
   static void delete_THelix(void *p) {
      delete ((::THelix*)p);
   }
   static void deleteArray_THelix(void *p) {
      delete [] ((::THelix*)p);
   }
   static void destruct_THelix(void *p) {
      typedef ::THelix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::THelix

//______________________________________________________________________________
void THYPE::Streamer(TBuffer &R__b)
{
   // Stream an object of class THYPE.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(THYPE::Class(),this);
   } else {
      R__b.WriteClassBuffer(THYPE::Class(),this);
   }
}

//______________________________________________________________________________
void THYPE::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class THYPE.
      TClass *R__cl = ::THYPE::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fPhi", &fPhi);
      TTUBE::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_THYPE(void *p) {
      return  p ? new(p) ::THYPE : new ::THYPE;
   }
   static void *newArray_THYPE(Long_t nElements, void *p) {
      return p ? new(p) ::THYPE[nElements] : new ::THYPE[nElements];
   }
   // Wrapper around operator delete
   static void delete_THYPE(void *p) {
      delete ((::THYPE*)p);
   }
   static void deleteArray_THYPE(void *p) {
      delete [] ((::THYPE*)p);
   }
   static void destruct_THYPE(void *p) {
      typedef ::THYPE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::THYPE

//______________________________________________________________________________
void TMaterial::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMaterial.
      TClass *R__cl = ::TMaterial::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNumber", &fNumber);
      R__insp.Inspect(R__cl, R__parent, "fA", &fA);
      R__insp.Inspect(R__cl, R__parent, "fZ", &fZ);
      R__insp.Inspect(R__cl, R__parent, "fDensity", &fDensity);
      R__insp.Inspect(R__cl, R__parent, "fRadLength", &fRadLength);
      R__insp.Inspect(R__cl, R__parent, "fInterLength", &fInterLength);
      TNamed::ShowMembers(R__insp, R__parent);
      TAttFill::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMaterial(void *p) {
      return  p ? new(p) ::TMaterial : new ::TMaterial;
   }
   static void *newArray_TMaterial(Long_t nElements, void *p) {
      return p ? new(p) ::TMaterial[nElements] : new ::TMaterial[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMaterial(void *p) {
      delete ((::TMaterial*)p);
   }
   static void deleteArray_TMaterial(void *p) {
      delete [] ((::TMaterial*)p);
   }
   static void destruct_TMaterial(void *p) {
      typedef ::TMaterial current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMaterial

//______________________________________________________________________________
void TMixture::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMixture.
      TClass *R__cl = ::TMixture::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNmixt", &fNmixt);
      R__insp.Inspect(R__cl, R__parent, "*fAmixt", &fAmixt);
      R__insp.Inspect(R__cl, R__parent, "*fZmixt", &fZmixt);
      R__insp.Inspect(R__cl, R__parent, "*fWmixt", &fWmixt);
      TMaterial::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMixture(void *p) {
      return  p ? new(p) ::TMixture : new ::TMixture;
   }
   static void *newArray_TMixture(Long_t nElements, void *p) {
      return p ? new(p) ::TMixture[nElements] : new ::TMixture[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMixture(void *p) {
      delete ((::TMixture*)p);
   }
   static void deleteArray_TMixture(void *p) {
      delete [] ((::TMixture*)p);
   }
   static void destruct_TMixture(void *p) {
      typedef ::TMixture current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMixture

//______________________________________________________________________________
void TNode::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TNode.
      TClass *R__cl = ::TNode::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fX", &fX);
      R__insp.Inspect(R__cl, R__parent, "fY", &fY);
      R__insp.Inspect(R__cl, R__parent, "fZ", &fZ);
      R__insp.Inspect(R__cl, R__parent, "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__parent, "*fShape", &fShape);
      R__insp.Inspect(R__cl, R__parent, "*fParent", &fParent);
      R__insp.Inspect(R__cl, R__parent, "*fNodes", &fNodes);
      R__insp.Inspect(R__cl, R__parent, "fOption", &fOption);
      fOption.ShowMembers(R__insp, strcat(R__parent,"fOption.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fVisibility", &fVisibility);
      TNamed::ShowMembers(R__insp, R__parent);
      TAttLine::ShowMembers(R__insp, R__parent);
      TAttFill::ShowMembers(R__insp, R__parent);
      TAtt3D::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TNode(void *p) {
      return  p ? new(p) ::TNode : new ::TNode;
   }
   static void *newArray_TNode(Long_t nElements, void *p) {
      return p ? new(p) ::TNode[nElements] : new ::TNode[nElements];
   }
   // Wrapper around operator delete
   static void delete_TNode(void *p) {
      delete ((::TNode*)p);
   }
   static void deleteArray_TNode(void *p) {
      delete [] ((::TNode*)p);
   }
   static void destruct_TNode(void *p) {
      typedef ::TNode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TNode

//______________________________________________________________________________
void TNodeDiv::Streamer(TBuffer &R__b)
{
   // Stream an object of class TNodeDiv.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TNodeDiv::Class(),this);
   } else {
      R__b.WriteClassBuffer(TNodeDiv::Class(),this);
   }
}

//______________________________________________________________________________
void TNodeDiv::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TNodeDiv.
      TClass *R__cl = ::TNodeDiv::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNdiv", &fNdiv);
      R__insp.Inspect(R__cl, R__parent, "fAxis", &fAxis);
      TNode::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TNodeDiv(void *p) {
      return  p ? new(p) ::TNodeDiv : new ::TNodeDiv;
   }
   static void *newArray_TNodeDiv(Long_t nElements, void *p) {
      return p ? new(p) ::TNodeDiv[nElements] : new ::TNodeDiv[nElements];
   }
   // Wrapper around operator delete
   static void delete_TNodeDiv(void *p) {
      delete ((::TNodeDiv*)p);
   }
   static void deleteArray_TNodeDiv(void *p) {
      delete [] ((::TNodeDiv*)p);
   }
   static void destruct_TNodeDiv(void *p) {
      typedef ::TNodeDiv current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TNodeDiv

//______________________________________________________________________________
void TPARA::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPARA.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TPARA::Class(),this);
   } else {
      R__b.WriteClassBuffer(TPARA::Class(),this);
   }
}

//______________________________________________________________________________
void TPARA::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPARA.
      TClass *R__cl = ::TPARA::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__parent, "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__parent, "fPhi", &fPhi);
      TBRIK::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPARA(void *p) {
      return  p ? new(p) ::TPARA : new ::TPARA;
   }
   static void *newArray_TPARA(Long_t nElements, void *p) {
      return p ? new(p) ::TPARA[nElements] : new ::TPARA[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPARA(void *p) {
      delete ((::TPARA*)p);
   }
   static void deleteArray_TPARA(void *p) {
      delete [] ((::TPARA*)p);
   }
   static void destruct_TPARA(void *p) {
      typedef ::TPARA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPARA

//______________________________________________________________________________
void TPCON::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPCON.
      TClass *R__cl = ::TPCON::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fSiTab", &fSiTab);
      R__insp.Inspect(R__cl, R__parent, "*fCoTab", &fCoTab);
      R__insp.Inspect(R__cl, R__parent, "fPhi1", &fPhi1);
      R__insp.Inspect(R__cl, R__parent, "fDphi1", &fDphi1);
      R__insp.Inspect(R__cl, R__parent, "fNdiv", &fNdiv);
      R__insp.Inspect(R__cl, R__parent, "fNz", &fNz);
      R__insp.Inspect(R__cl, R__parent, "*fRmin", &fRmin);
      R__insp.Inspect(R__cl, R__parent, "*fRmax", &fRmax);
      R__insp.Inspect(R__cl, R__parent, "*fDz", &fDz);
      TShape::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPCON(void *p) {
      return  p ? new(p) ::TPCON : new ::TPCON;
   }
   static void *newArray_TPCON(Long_t nElements, void *p) {
      return p ? new(p) ::TPCON[nElements] : new ::TPCON[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPCON(void *p) {
      delete ((::TPCON*)p);
   }
   static void deleteArray_TPCON(void *p) {
      delete [] ((::TPCON*)p);
   }
   static void destruct_TPCON(void *p) {
      typedef ::TPCON current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPCON

//______________________________________________________________________________
void TPGON::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPGON.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TPGON::Class(),this);
   } else {
      R__b.WriteClassBuffer(TPGON::Class(),this);
   }
}

//______________________________________________________________________________
void TPGON::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPGON.
      TClass *R__cl = ::TPGON::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TPCON::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPGON(void *p) {
      return  p ? new(p) ::TPGON : new ::TPGON;
   }
   static void *newArray_TPGON(Long_t nElements, void *p) {
      return p ? new(p) ::TPGON[nElements] : new ::TPGON[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPGON(void *p) {
      delete ((::TPGON*)p);
   }
   static void deleteArray_TPGON(void *p) {
      delete [] ((::TPGON*)p);
   }
   static void destruct_TPGON(void *p) {
      typedef ::TPGON current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPGON

//______________________________________________________________________________
void TPolyLine3D::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPolyLine3D.
      TClass *R__cl = ::TPolyLine3D::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fN", &fN);
      R__insp.Inspect(R__cl, R__parent, "*fP", &fP);
      R__insp.Inspect(R__cl, R__parent, "fOption", &fOption);
      fOption.ShowMembers(R__insp, strcat(R__parent,"fOption.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLastPoint", &fLastPoint);
      TObject::ShowMembers(R__insp, R__parent);
      TAttLine::ShowMembers(R__insp, R__parent);
      TAtt3D::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPolyLine3D(void *p) {
      return  p ? new(p) ::TPolyLine3D : new ::TPolyLine3D;
   }
   static void *newArray_TPolyLine3D(Long_t nElements, void *p) {
      return p ? new(p) ::TPolyLine3D[nElements] : new ::TPolyLine3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPolyLine3D(void *p) {
      delete ((::TPolyLine3D*)p);
   }
   static void deleteArray_TPolyLine3D(void *p) {
      delete [] ((::TPolyLine3D*)p);
   }
   static void destruct_TPolyLine3D(void *p) {
      typedef ::TPolyLine3D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPolyLine3D

//______________________________________________________________________________
void TPolyMarker3D::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPolyMarker3D.
      TClass *R__cl = ::TPolyMarker3D::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fN", &fN);
      R__insp.Inspect(R__cl, R__parent, "*fP", &fP);
      R__insp.Inspect(R__cl, R__parent, "fOption", &fOption);
      fOption.ShowMembers(R__insp, strcat(R__parent,"fOption.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLastPoint", &fLastPoint);
      R__insp.Inspect(R__cl, R__parent, "fName", &fName);
      fName.ShowMembers(R__insp, strcat(R__parent,"fName.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
      TAttMarker::ShowMembers(R__insp, R__parent);
      TAtt3D::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPolyMarker3D(void *p) {
      return  p ? new(p) ::TPolyMarker3D : new ::TPolyMarker3D;
   }
   static void *newArray_TPolyMarker3D(Long_t nElements, void *p) {
      return p ? new(p) ::TPolyMarker3D[nElements] : new ::TPolyMarker3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPolyMarker3D(void *p) {
      delete ((::TPolyMarker3D*)p);
   }
   static void deleteArray_TPolyMarker3D(void *p) {
      delete [] ((::TPolyMarker3D*)p);
   }
   static void destruct_TPolyMarker3D(void *p) {
      typedef ::TPolyMarker3D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPolyMarker3D

//______________________________________________________________________________
void TPointSet3D::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPointSet3D.
      TClass *R__cl = ::TPointSet3D::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fOwnIds", &fOwnIds);
      R__insp.Inspect(R__cl, R__parent, "fIds", &fIds);
      fIds.ShowMembers(R__insp, strcat(R__parent,"fIds.")); R__parent[R__ncp] = 0;
      TPolyMarker3D::ShowMembers(R__insp, R__parent);
      TAttBBox::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPointSet3D(void *p) {
      return  p ? new(p) ::TPointSet3D : new ::TPointSet3D;
   }
   static void *newArray_TPointSet3D(Long_t nElements, void *p) {
      return p ? new(p) ::TPointSet3D[nElements] : new ::TPointSet3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPointSet3D(void *p) {
      delete ((::TPointSet3D*)p);
   }
   static void deleteArray_TPointSet3D(void *p) {
      delete [] ((::TPointSet3D*)p);
   }
   static void destruct_TPointSet3D(void *p) {
      typedef ::TPointSet3D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPointSet3D

//______________________________________________________________________________
void TRotMatrix::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRotMatrix.
      TClass *R__cl = ::TRotMatrix::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNumber", &fNumber);
      R__insp.Inspect(R__cl, R__parent, "fType", &fType);
      R__insp.Inspect(R__cl, R__parent, "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__parent, "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__parent, "fPsi", &fPsi);
      R__insp.Inspect(R__cl, R__parent, "fMatrix[9]", fMatrix);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TRotMatrix(void *p) {
      return  p ? new(p) ::TRotMatrix : new ::TRotMatrix;
   }
   static void *newArray_TRotMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::TRotMatrix[nElements] : new ::TRotMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_TRotMatrix(void *p) {
      delete ((::TRotMatrix*)p);
   }
   static void deleteArray_TRotMatrix(void *p) {
      delete [] ((::TRotMatrix*)p);
   }
   static void destruct_TRotMatrix(void *p) {
      typedef ::TRotMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRotMatrix

//______________________________________________________________________________
void TShape::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TShape.
      TClass *R__cl = ::TShape::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNumber", &fNumber);
      R__insp.Inspect(R__cl, R__parent, "fVisibility", &fVisibility);
      R__insp.Inspect(R__cl, R__parent, "*fMaterial", &fMaterial);
      TNamed::ShowMembers(R__insp, R__parent);
      TAttLine::ShowMembers(R__insp, R__parent);
      TAttFill::ShowMembers(R__insp, R__parent);
      TAtt3D::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TShape(void *p) {
      return  p ? new(p) ::TShape : new ::TShape;
   }
   static void *newArray_TShape(Long_t nElements, void *p) {
      return p ? new(p) ::TShape[nElements] : new ::TShape[nElements];
   }
   // Wrapper around operator delete
   static void delete_TShape(void *p) {
      delete ((::TShape*)p);
   }
   static void deleteArray_TShape(void *p) {
      delete [] ((::TShape*)p);
   }
   static void destruct_TShape(void *p) {
      typedef ::TShape current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TShape

//______________________________________________________________________________
void TSPHE::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSPHE.
      TClass *R__cl = ::TSPHE::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fSiTab", &fSiTab);
      R__insp.Inspect(R__cl, R__parent, "*fCoTab", &fCoTab);
      R__insp.Inspect(R__cl, R__parent, "*fCoThetaTab", &fCoThetaTab);
      R__insp.Inspect(R__cl, R__parent, "fNdiv", &fNdiv);
      R__insp.Inspect(R__cl, R__parent, "fNz", &fNz);
      R__insp.Inspect(R__cl, R__parent, "fAspectRatio", &fAspectRatio);
      R__insp.Inspect(R__cl, R__parent, "fRmin", &fRmin);
      R__insp.Inspect(R__cl, R__parent, "fRmax", &fRmax);
      R__insp.Inspect(R__cl, R__parent, "fThemin", &fThemin);
      R__insp.Inspect(R__cl, R__parent, "fThemax", &fThemax);
      R__insp.Inspect(R__cl, R__parent, "fPhimin", &fPhimin);
      R__insp.Inspect(R__cl, R__parent, "fPhimax", &fPhimax);
      R__insp.Inspect(R__cl, R__parent, "faX", &faX);
      R__insp.Inspect(R__cl, R__parent, "faY", &faY);
      R__insp.Inspect(R__cl, R__parent, "faZ", &faZ);
      TShape::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSPHE(void *p) {
      return  p ? new(p) ::TSPHE : new ::TSPHE;
   }
   static void *newArray_TSPHE(Long_t nElements, void *p) {
      return p ? new(p) ::TSPHE[nElements] : new ::TSPHE[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSPHE(void *p) {
      delete ((::TSPHE*)p);
   }
   static void deleteArray_TSPHE(void *p) {
      delete [] ((::TSPHE*)p);
   }
   static void destruct_TSPHE(void *p) {
      typedef ::TSPHE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSPHE

//______________________________________________________________________________
void TTRAP::Streamer(TBuffer &R__b)
{
   // Stream an object of class TTRAP.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TTRAP::Class(),this);
   } else {
      R__b.WriteClassBuffer(TTRAP::Class(),this);
   }
}

//______________________________________________________________________________
void TTRAP::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TTRAP.
      TClass *R__cl = ::TTRAP::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fH1", &fH1);
      R__insp.Inspect(R__cl, R__parent, "fBl1", &fBl1);
      R__insp.Inspect(R__cl, R__parent, "fTl1", &fTl1);
      R__insp.Inspect(R__cl, R__parent, "fAlpha1", &fAlpha1);
      R__insp.Inspect(R__cl, R__parent, "fH2", &fH2);
      R__insp.Inspect(R__cl, R__parent, "fBl2", &fBl2);
      R__insp.Inspect(R__cl, R__parent, "fTl2", &fTl2);
      R__insp.Inspect(R__cl, R__parent, "fAlpha2", &fAlpha2);
      TBRIK::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TTRAP(void *p) {
      return  p ? new(p) ::TTRAP : new ::TTRAP;
   }
   static void *newArray_TTRAP(Long_t nElements, void *p) {
      return p ? new(p) ::TTRAP[nElements] : new ::TTRAP[nElements];
   }
   // Wrapper around operator delete
   static void delete_TTRAP(void *p) {
      delete ((::TTRAP*)p);
   }
   static void deleteArray_TTRAP(void *p) {
      delete [] ((::TTRAP*)p);
   }
   static void destruct_TTRAP(void *p) {
      typedef ::TTRAP current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TTRAP

//______________________________________________________________________________
void TTRD1::Streamer(TBuffer &R__b)
{
   // Stream an object of class TTRD1.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TTRD1::Class(),this);
   } else {
      R__b.WriteClassBuffer(TTRD1::Class(),this);
   }
}

//______________________________________________________________________________
void TTRD1::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TTRD1.
      TClass *R__cl = ::TTRD1::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDx2", &fDx2);
      TBRIK::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TTRD1(void *p) {
      return  p ? new(p) ::TTRD1 : new ::TTRD1;
   }
   static void *newArray_TTRD1(Long_t nElements, void *p) {
      return p ? new(p) ::TTRD1[nElements] : new ::TTRD1[nElements];
   }
   // Wrapper around operator delete
   static void delete_TTRD1(void *p) {
      delete ((::TTRD1*)p);
   }
   static void deleteArray_TTRD1(void *p) {
      delete [] ((::TTRD1*)p);
   }
   static void destruct_TTRD1(void *p) {
      typedef ::TTRD1 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TTRD1

//______________________________________________________________________________
void TTRD2::Streamer(TBuffer &R__b)
{
   // Stream an object of class TTRD2.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TTRD2::Class(),this);
   } else {
      R__b.WriteClassBuffer(TTRD2::Class(),this);
   }
}

//______________________________________________________________________________
void TTRD2::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TTRD2.
      TClass *R__cl = ::TTRD2::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDx2", &fDx2);
      R__insp.Inspect(R__cl, R__parent, "fDy2", &fDy2);
      TBRIK::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TTRD2(void *p) {
      return  p ? new(p) ::TTRD2 : new ::TTRD2;
   }
   static void *newArray_TTRD2(Long_t nElements, void *p) {
      return p ? new(p) ::TTRD2[nElements] : new ::TTRD2[nElements];
   }
   // Wrapper around operator delete
   static void delete_TTRD2(void *p) {
      delete ((::TTRD2*)p);
   }
   static void deleteArray_TTRD2(void *p) {
      delete [] ((::TTRD2*)p);
   }
   static void destruct_TTRD2(void *p) {
      typedef ::TTRD2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TTRD2

//______________________________________________________________________________
void TTUBE::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TTUBE.
      TClass *R__cl = ::TTUBE::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fRmin", &fRmin);
      R__insp.Inspect(R__cl, R__parent, "fRmax", &fRmax);
      R__insp.Inspect(R__cl, R__parent, "fDz", &fDz);
      R__insp.Inspect(R__cl, R__parent, "fNdiv", &fNdiv);
      R__insp.Inspect(R__cl, R__parent, "fAspectRatio", &fAspectRatio);
      R__insp.Inspect(R__cl, R__parent, "*fSiTab", &fSiTab);
      R__insp.Inspect(R__cl, R__parent, "*fCoTab", &fCoTab);
      TShape::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TTUBE(void *p) {
      return  p ? new(p) ::TTUBE : new ::TTUBE;
   }
   static void *newArray_TTUBE(Long_t nElements, void *p) {
      return p ? new(p) ::TTUBE[nElements] : new ::TTUBE[nElements];
   }
   // Wrapper around operator delete
   static void delete_TTUBE(void *p) {
      delete ((::TTUBE*)p);
   }
   static void deleteArray_TTUBE(void *p) {
      delete [] ((::TTUBE*)p);
   }
   static void destruct_TTUBE(void *p) {
      typedef ::TTUBE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TTUBE

//______________________________________________________________________________
void TTUBS::Streamer(TBuffer &R__b)
{
   // Stream an object of class TTUBS.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TTUBS::Class(),this);
   } else {
      R__b.WriteClassBuffer(TTUBS::Class(),this);
   }
}

//______________________________________________________________________________
void TTUBS::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TTUBS.
      TClass *R__cl = ::TTUBS::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fPhi1", &fPhi1);
      R__insp.Inspect(R__cl, R__parent, "fPhi2", &fPhi2);
      TTUBE::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TTUBS(void *p) {
      return  p ? new(p) ::TTUBS : new ::TTUBS;
   }
   static void *newArray_TTUBS(Long_t nElements, void *p) {
      return p ? new(p) ::TTUBS[nElements] : new ::TTUBS[nElements];
   }
   // Wrapper around operator delete
   static void delete_TTUBS(void *p) {
      delete ((::TTUBS*)p);
   }
   static void deleteArray_TTUBS(void *p) {
      delete [] ((::TTUBS*)p);
   }
   static void destruct_TTUBS(void *p) {
      typedef ::TTUBS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TTUBS

//______________________________________________________________________________
void TMarker3DBox::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMarker3DBox.
      TClass *R__cl = ::TMarker3DBox::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fX", &fX);
      R__insp.Inspect(R__cl, R__parent, "fY", &fY);
      R__insp.Inspect(R__cl, R__parent, "fZ", &fZ);
      R__insp.Inspect(R__cl, R__parent, "fDx", &fDx);
      R__insp.Inspect(R__cl, R__parent, "fDy", &fDy);
      R__insp.Inspect(R__cl, R__parent, "fDz", &fDz);
      R__insp.Inspect(R__cl, R__parent, "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__parent, "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__parent, "*fRefObject", &fRefObject);
      TObject::ShowMembers(R__insp, R__parent);
      TAttLine::ShowMembers(R__insp, R__parent);
      TAttFill::ShowMembers(R__insp, R__parent);
      TAtt3D::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMarker3DBox(void *p) {
      return  p ? new(p) ::TMarker3DBox : new ::TMarker3DBox;
   }
   static void *newArray_TMarker3DBox(Long_t nElements, void *p) {
      return p ? new(p) ::TMarker3DBox[nElements] : new ::TMarker3DBox[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMarker3DBox(void *p) {
      delete ((::TMarker3DBox*)p);
   }
   static void deleteArray_TMarker3DBox(void *p) {
      delete [] ((::TMarker3DBox*)p);
   }
   static void destruct_TMarker3DBox(void *p) {
      typedef ::TMarker3DBox current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMarker3DBox

//______________________________________________________________________________
void TPoints3DABC::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPoints3DABC.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TPoints3DABC::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPoints3DABC.
      TClass *R__cl = ::TPoints3DABC::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TPoints3DABC(void *p) {
      delete ((::TPoints3DABC*)p);
   }
   static void deleteArray_TPoints3DABC(void *p) {
      delete [] ((::TPoints3DABC*)p);
   }
   static void destruct_TPoints3DABC(void *p) {
      typedef ::TPoints3DABC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPoints3DABC

//______________________________________________________________________________
void TXTRU::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXTRU.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TXTRU::Class(),this);
   } else {
      R__b.WriteClassBuffer(TXTRU::Class(),this);
   }
}

//______________________________________________________________________________
void TXTRU::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXTRU.
      TClass *R__cl = ::TXTRU::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNxy", &fNxy);
      R__insp.Inspect(R__cl, R__parent, "fNxyAlloc", &fNxyAlloc);
      R__insp.Inspect(R__cl, R__parent, "fNz", &fNz);
      R__insp.Inspect(R__cl, R__parent, "fNzAlloc", &fNzAlloc);
      R__insp.Inspect(R__cl, R__parent, "*fXvtx", &fXvtx);
      R__insp.Inspect(R__cl, R__parent, "*fYvtx", &fYvtx);
      R__insp.Inspect(R__cl, R__parent, "*fZ", &fZ);
      R__insp.Inspect(R__cl, R__parent, "*fScale", &fScale);
      R__insp.Inspect(R__cl, R__parent, "*fX0", &fX0);
      R__insp.Inspect(R__cl, R__parent, "*fY0", &fY0);
      R__insp.Inspect(R__cl, R__parent, "fPolygonShape", &fPolygonShape);
      R__insp.Inspect(R__cl, R__parent, "fZOrdering", &fZOrdering);
      R__insp.Inspect(R__cl, R__parent, "fSplitConcave", &fSplitConcave);
      TShape::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TXTRU(void *p) {
      return  p ? new(p) ::TXTRU : new ::TXTRU;
   }
   static void *newArray_TXTRU(Long_t nElements, void *p) {
      return p ? new(p) ::TXTRU[nElements] : new ::TXTRU[nElements];
   }
   // Wrapper around operator delete
   static void delete_TXTRU(void *p) {
      delete ((::TXTRU*)p);
   }
   static void deleteArray_TXTRU(void *p) {
      delete [] ((::TXTRU*)p);
   }
   static void destruct_TXTRU(void *p) {
      typedef ::TXTRU current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXTRU

//______________________________________________________________________________
void TView3D::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TView3D.
      TClass *R__cl = ::TView3D::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fLatitude", &fLatitude);
      R__insp.Inspect(R__cl, R__parent, "fLongitude", &fLongitude);
      R__insp.Inspect(R__cl, R__parent, "fPsi", &fPsi);
      R__insp.Inspect(R__cl, R__parent, "fDview", &fDview);
      R__insp.Inspect(R__cl, R__parent, "fDproj", &fDproj);
      R__insp.Inspect(R__cl, R__parent, "fUpix", &fUpix);
      R__insp.Inspect(R__cl, R__parent, "fVpix", &fVpix);
      R__insp.Inspect(R__cl, R__parent, "fTN[16]", fTN);
      R__insp.Inspect(R__cl, R__parent, "fTB[16]", fTB);
      R__insp.Inspect(R__cl, R__parent, "fRmax[3]", fRmax);
      R__insp.Inspect(R__cl, R__parent, "fRmin[3]", fRmin);
      R__insp.Inspect(R__cl, R__parent, "fUVcoord[4]", fUVcoord);
      R__insp.Inspect(R__cl, R__parent, "fTnorm[16]", fTnorm);
      R__insp.Inspect(R__cl, R__parent, "fTback[16]", fTback);
      R__insp.Inspect(R__cl, R__parent, "fX1[3]", fX1);
      R__insp.Inspect(R__cl, R__parent, "fX2[3]", fX2);
      R__insp.Inspect(R__cl, R__parent, "fY1[3]", fY1);
      R__insp.Inspect(R__cl, R__parent, "fY2[3]", fY2);
      R__insp.Inspect(R__cl, R__parent, "fZ1[3]", fZ1);
      R__insp.Inspect(R__cl, R__parent, "fZ2[3]", fZ2);
      R__insp.Inspect(R__cl, R__parent, "fSystem", &fSystem);
      R__insp.Inspect(R__cl, R__parent, "*fOutline", &fOutline);
      R__insp.Inspect(R__cl, R__parent, "fDefaultOutline", &fDefaultOutline);
      R__insp.Inspect(R__cl, R__parent, "fAutoRange", &fAutoRange);
      R__insp.Inspect(R__cl, R__parent, "fChanged", &fChanged);
      TView::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TView3D(void *p) {
      return  p ? new(p) ::TView3D : new ::TView3D;
   }
   static void *newArray_TView3D(Long_t nElements, void *p) {
      return p ? new(p) ::TView3D[nElements] : new ::TView3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_TView3D(void *p) {
      delete ((::TView3D*)p);
   }
   static void deleteArray_TView3D(void *p) {
      delete [] ((::TView3D*)p);
   }
   static void destruct_TView3D(void *p) {
      typedef ::TView3D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TView3D

/********************************************************
* graf3d/g3d/src/G__G3D.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__G3D();

extern "C" void G__set_cpp_environmentG__G3D() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TAxis3D.h");
  G__add_compiledheader("TBRIK.h");
  G__add_compiledheader("TCONE.h");
  G__add_compiledheader("TCONS.h");
  G__add_compiledheader("TCTUB.h");
  G__add_compiledheader("TELTU.h");
  G__add_compiledheader("TGeometry.h");
  G__add_compiledheader("TGTRA.h");
  G__add_compiledheader("THelix.h");
  G__add_compiledheader("THYPE.h");
  G__add_compiledheader("TMarker3DBox.h");
  G__add_compiledheader("TMaterial.h");
  G__add_compiledheader("TMixture.h");
  G__add_compiledheader("TNodeDiv.h");
  G__add_compiledheader("TNode.h");
  G__add_compiledheader("TPARA.h");
  G__add_compiledheader("TPCON.h");
  G__add_compiledheader("TPGON.h");
  G__add_compiledheader("TPoints3DABC.h");
  G__add_compiledheader("TPointSet3D.h");
  G__add_compiledheader("TPolyLine3D.h");
  G__add_compiledheader("TPolyMarker3D.h");
  G__add_compiledheader("TRotMatrix.h");
  G__add_compiledheader("TShape.h");
  G__add_compiledheader("TSPHE.h");
  G__add_compiledheader("TTRAP.h");
  G__add_compiledheader("TTRD1.h");
  G__add_compiledheader("TTRD2.h");
  G__add_compiledheader("TTUBE.h");
  G__add_compiledheader("TTUBS.h");
  G__add_compiledheader("TView3D.h");
  G__add_compiledheader("TXTRU.h");
  G__cpp_reset_tagtableG__G3D();
}
#include <new>
extern "C" int G__cpp_dllrevG__G3D() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TAxis3D */
static int G__G__G3D_116_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAxis3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAxis3D[n];
     } else {
       p = new((void*) gvp) TAxis3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TAxis3D;
     } else {
       p = new((void*) gvp) TAxis3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TAxis3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAxis3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAxis3D((Option_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TAxis3D((Option_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TAxis3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TAxis3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TAxis3D(*(TAxis3D*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TAxis3D(*(TAxis3D*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TAxis3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Bool_t& obj = ((TAxis3D*) G__getstructoffset())->StickyZoom();
         result7->ref = (long) (&obj);
         G__letint(result7, 'g', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Bool_t& obj = ((TAxis3D*) G__getstructoffset())->Zoom();
         result7->ref = (long) (&obj);
         G__letint(result7, 'g', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const TAxis3D*) G__getstructoffset())->GetNdivisions((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const TAxis3D*) G__getstructoffset())->GetNdivisions());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 115, (long) ((const TAxis3D*) G__getstructoffset())->GetAxisColor((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 115, (long) ((const TAxis3D*) G__getstructoffset())->GetAxisColor());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 115, (long) ((const TAxis3D*) G__getstructoffset())->GetLabelColor((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 115, (long) ((const TAxis3D*) G__getstructoffset())->GetLabelColor());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 115, (long) ((const TAxis3D*) G__getstructoffset())->GetLabelFont((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 115, (long) ((const TAxis3D*) G__getstructoffset())->GetLabelFont());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const TAxis3D*) G__getstructoffset())->GetLabelOffset((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const TAxis3D*) G__getstructoffset())->GetLabelOffset());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const TAxis3D*) G__getstructoffset())->GetLabelSize((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const TAxis3D*) G__getstructoffset())->GetLabelSize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) TAxis3D::GetPadAxis((TVirtualPad*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) TAxis3D::GetPadAxis());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const TAxis3D*) G__getstructoffset())->GetTitleOffset((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const TAxis3D*) G__getstructoffset())->GetTitleOffset());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const TAxis3D*) G__getstructoffset())->GetTickLength((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const TAxis3D*) G__getstructoffset())->GetTickLength());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAxis3D*) G__getstructoffset())->GetCenter((Axis_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAxis3D*) G__getstructoffset())->GetLowEdge((Axis_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAxis3D*) G__getstructoffset())->GetXaxis());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAxis3D*) G__getstructoffset())->GetYaxis());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TAxis3D*) G__getstructoffset())->GetZaxis());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAxis3D*) G__getstructoffset())->PaintAxis((TGaxis*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 68, (long) TAxis3D::PixeltoXYZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (TView*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 68, (long) TAxis3D::PixeltoXYZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetAxisColor((Color_t) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetAxisColor((Color_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetAxisColor();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TAxis3D*) G__getstructoffset())->SetAxisRange((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetAxisRange((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetLabelColor((Color_t) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetLabelColor((Color_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetLabelColor();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetLabelFont((Style_t) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetLabelFont((Style_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetLabelFont();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetLabelOffset((Float_t) G__double(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetLabelOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetLabelOffset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetLabelSize((Float_t) G__double(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetLabelSize((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetLabelSize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetNdivisions((Int_t) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetNdivisions((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetNdivisions();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetOption((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetOption();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetTickLength((Float_t) G__double(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetTickLength((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetTickLength();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TAxis3D*) G__getstructoffset())->SetTitleOffset((Float_t) G__double(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TAxis3D*) G__getstructoffset())->SetTitleOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TAxis3D*) G__getstructoffset())->SetTitleOffset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAxis3D*) G__getstructoffset())->SetXTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAxis3D*) G__getstructoffset())->SetYTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAxis3D*) G__getstructoffset())->SetZTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) TAxis3D::ToggleRulers((TVirtualPad*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) TAxis3D::ToggleRulers());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) TAxis3D::ToggleZoom((TVirtualPad*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) TAxis3D::ToggleZoom());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TAxis3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAxis3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TAxis3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TAxis3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TAxis3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAxis3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAxis3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TAxis3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_116_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TAxis3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TAxis3D G__TTAxis3D;
static int G__G__G3D_116_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TAxis3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TAxis3D*) (soff+(sizeof(TAxis3D)*i)))->~G__TTAxis3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TAxis3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TAxis3D*) (soff))->~G__TTAxis3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMaterial */
static int G__G__G3D_118_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMaterial* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMaterial[n];
     } else {
       p = new((void*) gvp) TMaterial[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMaterial;
     } else {
       p = new((void*) gvp) TMaterial;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMaterial));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMaterial* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMaterial(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) TMaterial(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMaterial));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMaterial* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMaterial(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) TMaterial(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMaterial));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMaterial*) G__getstructoffset())->GetNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMaterial*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMaterial*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMaterial*) G__getstructoffset())->GetDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMaterial*) G__getstructoffset())->GetRadLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMaterial*) G__getstructoffset())->GetInterLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMaterial::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMaterial::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMaterial::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMaterial::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMaterial*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMaterial::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMaterial::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMaterial::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_118_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMaterial::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_118_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMaterial* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMaterial(*(TMaterial*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMaterial));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMaterial G__TTMaterial;
static int G__G__G3D_118_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMaterial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMaterial*) (soff+(sizeof(TMaterial)*i)))->~G__TTMaterial();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMaterial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMaterial*) (soff))->~G__TTMaterial();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_118_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMaterial* dest = (TMaterial*) G__getstructoffset();
   *dest = *(TMaterial*) libp->para[0].ref;
   const TMaterial& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TNode */
static int G__G__G3D_125_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode[n];
     } else {
       p = new((void*) gvp) TNode[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode;
     } else {
       p = new((void*) gvp) TNode;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (const char*) G__int(libp->para[6]), (Option_t*) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (const char*) G__int(libp->para[6]), (Option_t*) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (const char*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (const char*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (TRotMatrix*) G__int(libp->para[6]), (Option_t*) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (TRotMatrix*) G__int(libp->para[6]), (Option_t*) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (TRotMatrix*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (TRotMatrix*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TNode(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->BuildListOfNodes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TNode*) G__getstructoffset())->cd((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TNode*) G__getstructoffset())->cd();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TNode*) G__getstructoffset())->DrawOnly((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TNode*) G__getstructoffset())->DrawOnly();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TNode*) G__getstructoffset())->GetListOfNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TNode*) G__getstructoffset())->GetMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TNode*) G__getstructoffset())->GetNode((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TNode*) G__getstructoffset())->GetOption());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TNode*) G__getstructoffset())->GetParent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TNode*) G__getstructoffset())->GetShape());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TNode*) G__getstructoffset())->GetVisibility());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TNode*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TNode*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TNode*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->ImportShapeAttributes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->Local2Master((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->Local2Master((const Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->Master2Local((const Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->Master2Local((const Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TNode*) G__getstructoffset())->SetMatrix((TRotMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TNode*) G__getstructoffset())->SetMatrix();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->SetParent((TNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TNode*) G__getstructoffset())->SetPosition((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TNode*) G__getstructoffset())->SetPosition((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TNode*) G__getstructoffset())->SetPosition((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TNode*) G__getstructoffset())->SetPosition();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TNode*) G__getstructoffset())->SetVisibility((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TNode*) G__getstructoffset())->SetVisibility();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->UpdateMatrix();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->UpdateTempMatrix(
(const Double_t*) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TNode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TNode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TNode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TNode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_125_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TNode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TNode G__TTNode;
static int G__G__G3D_125_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TNode*) (soff+(sizeof(TNode)*i)))->~G__TTNode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TNode*) (soff))->~G__TTNode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TShape */
static int G__G__G3D_126_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TShape* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TShape[n];
     } else {
       p = new((void*) gvp) TShape[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TShape;
     } else {
       p = new((void*) gvp) TShape;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TShape));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TShape* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TShape(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TShape(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TShape));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TShape* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TShape(*(TShape*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TShape(*(TShape*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TShape));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TShape& obj = ((TShape*) G__getstructoffset())->operator=(*(TShape*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBuffer3D& obj = ((const TShape*) G__getstructoffset())->GetBuffer3D((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TShape*) G__getstructoffset())->GetMaterial());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TShape*) G__getstructoffset())->GetNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TShape*) G__getstructoffset())->GetVisibility());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TShape*) G__getstructoffset())->SetPoints((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TShape*) G__getstructoffset())->SetVisibility((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TShape*) G__getstructoffset())->TransformPoints((Double_t*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TShape::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TShape::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TShape::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TShape::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TShape*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TShape::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TShape::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TShape::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_126_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TShape::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TShape G__TTShape;
static int G__G__G3D_126_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TShape*) (soff+(sizeof(TShape)*i)))->~G__TTShape();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TShape*) (soff))->~G__TTShape();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TBRIK */
static int G__G__G3D_127_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBRIK* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBRIK[n];
     } else {
       p = new((void*) gvp) TBRIK[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBRIK;
     } else {
       p = new((void*) gvp) TBRIK;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TBRIK));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBRIK* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TBRIK(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
   } else {
     p = new((void*) gvp) TBRIK(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TBRIK));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TBRIK*) G__getstructoffset())->GetDx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TBRIK*) G__getstructoffset())->GetDy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TBRIK*) G__getstructoffset())->GetDz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TBRIK::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBRIK::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TBRIK::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TBRIK::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBRIK*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBRIK::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBRIK::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBRIK::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_127_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBRIK::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_127_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TBRIK* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TBRIK(*(TBRIK*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TBRIK));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TBRIK G__TTBRIK;
static int G__G__G3D_127_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TBRIK*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TBRIK*) (soff+(sizeof(TBRIK)*i)))->~G__TTBRIK();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TBRIK*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TBRIK*) (soff))->~G__TTBRIK();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_127_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBRIK* dest = (TBRIK*) G__getstructoffset();
   *dest = *(TBRIK*) libp->para[0].ref;
   const TBRIK& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TTUBE */
static int G__G__G3D_128_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTUBE* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTUBE[n];
     } else {
       p = new((void*) gvp) TTUBE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTUBE;
     } else {
       p = new((void*) gvp) TTUBE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTUBE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTUBE* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTUBE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TTUBE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTUBE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) TTUBE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTUBE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTUBE* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTUBE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) TTUBE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTUBE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTUBE*) G__getstructoffset())->GetRmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTUBE*) G__getstructoffset())->GetRmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTUBE*) G__getstructoffset())->GetDz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TTUBE*) G__getstructoffset())->GetNdiv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTUBE*) G__getstructoffset())->GetAspectRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TTUBE*) G__getstructoffset())->GetNumberOfDivisions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTUBE*) G__getstructoffset())->SetNumberOfDivisions((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TTUBE*) G__getstructoffset())->SetAspectRatio((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TTUBE*) G__getstructoffset())->SetAspectRatio();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TTUBE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTUBE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TTUBE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTUBE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTUBE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTUBE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTUBE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTUBE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_128_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTUBE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TTUBE G__TTTUBE;
static int G__G__G3D_128_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TTUBE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TTUBE*) (soff+(sizeof(TTUBE)*i)))->~G__TTTUBE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TTUBE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TTUBE*) (soff))->~G__TTTUBE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCONE */
static int G__G__G3D_129_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCONE* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCONE[n];
     } else {
       p = new((void*) gvp) TCONE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCONE;
     } else {
       p = new((void*) gvp) TCONE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCONE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCONE* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCONE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) TCONE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCONE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCONE* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCONE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) TCONE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCONE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) TCONE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCONE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TCONE*) G__getstructoffset())->GetRmin2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TCONE*) G__getstructoffset())->GetRmax2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCONE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCONE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCONE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCONE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCONE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCONE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCONE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCONE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_129_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCONE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_129_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TCONE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TCONE(*(TCONE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCONE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCONE G__TTCONE;
static int G__G__G3D_129_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCONE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCONE*) (soff+(sizeof(TCONE)*i)))->~G__TTCONE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCONE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCONE*) (soff))->~G__TTCONE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TTUBS */
static int G__G__G3D_130_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTUBS* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTUBS[n];
     } else {
       p = new((void*) gvp) TTUBS[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTUBS;
     } else {
       p = new((void*) gvp) TTUBS;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTUBS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTUBS* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTUBS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) TTUBS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTUBS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTUBS* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTUBS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) TTUBS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTUBS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTUBS*) G__getstructoffset())->GetPhi1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTUBS*) G__getstructoffset())->GetPhi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TTUBS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTUBS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TTUBS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTUBS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTUBS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTUBS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTUBS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTUBS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_130_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTUBS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_130_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TTUBS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TTUBS(*(TTUBS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTUBS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TTUBS G__TTTUBS;
static int G__G__G3D_130_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TTUBS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TTUBS*) (soff+(sizeof(TTUBS)*i)))->~G__TTTUBS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TTUBS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TTUBS*) (soff))->~G__TTTUBS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCONS */
static int G__G__G3D_131_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCONS* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCONS[n];
     } else {
       p = new((void*) gvp) TCONS[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCONS;
     } else {
       p = new((void*) gvp) TCONS;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCONS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCONS* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCONS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9]));
   } else {
     p = new((void*) gvp) TCONS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCONS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCONS* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCONS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) TCONS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCONS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TCONS(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCONS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TCONS*) G__getstructoffset())->GetRmin2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TCONS*) G__getstructoffset())->GetRmax2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCONS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCONS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCONS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCONS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCONS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCONS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCONS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCONS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_131_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCONS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_131_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TCONS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TCONS(*(TCONS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCONS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCONS G__TTCONS;
static int G__G__G3D_131_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCONS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCONS*) (soff+(sizeof(TCONS)*i)))->~G__TTCONS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCONS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCONS*) (soff))->~G__TTCONS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCTUB */
static int G__G__G3D_132_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCTUB* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCTUB[n];
     } else {
       p = new((void*) gvp) TCTUB[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCTUB;
     } else {
       p = new((void*) gvp) TCTUB;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCTUB));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCTUB* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 14
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCTUB(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13]));
   } else {
     p = new((void*) gvp) TCTUB(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCTUB));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCTUB* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCTUB(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t*) G__int(libp->para[8]), (Float_t*) G__int(libp->para[9]));
   } else {
     p = new((void*) gvp) TCTUB(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t*) G__int(libp->para[8]), (Float_t*) G__int(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCTUB));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCTUB::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCTUB::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCTUB::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCTUB::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCTUB*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCTUB::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCTUB::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCTUB::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_132_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCTUB::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_132_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TCTUB* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TCTUB(*(TCTUB*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TCTUB));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCTUB G__TTCTUB;
static int G__G__G3D_132_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCTUB*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCTUB*) (soff+(sizeof(TCTUB)*i)))->~G__TTCTUB();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCTUB*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCTUB*) (soff))->~G__TTCTUB();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TELTU */
static int G__G__G3D_133_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TELTU* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TELTU[n];
     } else {
       p = new((void*) gvp) TELTU[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TELTU;
     } else {
       p = new((void*) gvp) TELTU;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TELTU));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TELTU* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TELTU(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
   } else {
     p = new((void*) gvp) TELTU(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TELTU));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TELTU::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TELTU::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TELTU::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TELTU::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TELTU*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TELTU::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TELTU::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TELTU::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_133_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TELTU::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_133_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TELTU* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TELTU(*(TELTU*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TELTU));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TELTU G__TTELTU;
static int G__G__G3D_133_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TELTU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TELTU*) (soff+(sizeof(TELTU)*i)))->~G__TTELTU();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TELTU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TELTU*) (soff))->~G__TTELTU();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRotMatrix */
static int G__G__G3D_145_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRotMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRotMatrix[n];
     } else {
       p = new((void*) gvp) TRotMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRotMatrix;
     } else {
       p = new((void*) gvp) TRotMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRotMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TRotMatrix(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TRotMatrix(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRotMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TRotMatrix(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) TRotMatrix(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRotMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TRotMatrix(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) TRotMatrix(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TRotMatrix*) G__getstructoffset())->Determinant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((TRotMatrix*) G__getstructoffset())->GetMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TRotMatrix*) G__getstructoffset())->GetNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TRotMatrix*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TRotMatrix*) G__getstructoffset())->GetTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TRotMatrix*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TRotMatrix*) G__getstructoffset())->GetPsi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TRotMatrix*) G__getstructoffset())->GetGLMatrix((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TRotMatrix*) G__getstructoffset())->IsReflection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((TRotMatrix*) G__getstructoffset())->SetAngles((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRotMatrix*) G__getstructoffset())->SetMatrix((const Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TRotMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRotMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TRotMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TRotMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TRotMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRotMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRotMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TRotMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_145_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TRotMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_145_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRotMatrix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRotMatrix(*(TRotMatrix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRotMatrix G__TTRotMatrix;
static int G__G__G3D_145_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRotMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRotMatrix*) (soff+(sizeof(TRotMatrix)*i)))->~G__TTRotMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRotMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRotMatrix*) (soff))->~G__TTRotMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_145_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRotMatrix* dest = (TRotMatrix*) G__getstructoffset();
   *dest = *(TRotMatrix*) libp->para[0].ref;
   const TRotMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeometry */
static int G__G__G3D_146_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeometry* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeometry[n];
     } else {
       p = new((void*) gvp) TGeometry[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGeometry;
     } else {
       p = new((void*) gvp) TGeometry;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGeometry* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGeometry((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGeometry((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeometry*) G__getstructoffset())->cd((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeometry*) G__getstructoffset())->cd();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGeometry*) G__getstructoffset())->GetBomb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TGeometry*) G__getstructoffset())->GeomLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetListOfShapes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetListOfNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetListOfMaterials());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetListOfMatrices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetCurrentNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetMaterial((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetMaterialByNumber((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetNode((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetShape((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetShapeByNumber((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetRotMatrix((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetRotMatrixByNumber((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetCurrentMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetCurrentPosition((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGeometry*) G__getstructoffset())->GetCurrentPosition((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TGeometry*) G__getstructoffset())->GetCurrentReflection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->Local2Master((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->Local2Master((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->Master2Local((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->Master2Local((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((TGeometry*) G__getstructoffset())->Node(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (const char*) G__int(libp->para[6]), (Option_t*) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((TGeometry*) G__getstructoffset())->Node(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (const char*) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((TGeometry*) G__getstructoffset())->Node((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((TGeometry*) G__getstructoffset())->Node((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TGeometry*) G__getstructoffset())->Node((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGeometry*) G__getstructoffset())->Node((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGeometry*) G__getstructoffset())->PushLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGeometry*) G__getstructoffset())->PopLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeometry*) G__getstructoffset())->SetBomb((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeometry*) G__getstructoffset())->SetBomb();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->SetCurrentNode((TNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeometry*) G__getstructoffset())->SetGeomLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeometry*) G__getstructoffset())->SetGeomLevel();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGeometry*) G__getstructoffset())->SetMatrix((TRotMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeometry*) G__getstructoffset())->SetMatrix();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TGeometry*) G__getstructoffset())->SetPosition((TRotMatrix*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGeometry*) G__getstructoffset())->SetPosition((TRotMatrix*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TGeometry*) G__getstructoffset())->SetPosition((TRotMatrix*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeometry*) G__getstructoffset())->SetPosition((TRotMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->SetPosition((TRotMatrix*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->SetPosition((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->SetPosition((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->UpdateMatrix((TNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TGeometry*) G__getstructoffset())->UpdateTempMatrix((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (TRotMatrix*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGeometry*) G__getstructoffset())->UpdateTempMatrix((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TGeometry*) G__getstructoffset())->UpdateTempMatrix((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGeometry*) G__getstructoffset())->UpdateTempMatrix((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGeometry*) G__getstructoffset())->UpdateTempMatrix();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((TGeometry*) G__getstructoffset())->UpdateTempMatrix((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TGeometry*) G__getstructoffset())->UpdateTempMatrix((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeometry::Get((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeometry::UpdateTempMatrix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGeometry::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeometry::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGeometry::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGeometry::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGeometry*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeometry::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeometry::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGeometry::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_146_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGeometry::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeometry G__TTGeometry;
static int G__G__G3D_146_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGeometry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGeometry*) (soff+(sizeof(TGeometry)*i)))->~G__TTGeometry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGeometry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGeometry*) (soff))->~G__TTGeometry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGTRA */
static int G__G__G3D_147_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGTRA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGTRA[n];
     } else {
       p = new((void*) gvp) TGTRA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGTRA;
     } else {
       p = new((void*) gvp) TGTRA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TGTRA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGTRA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 15
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGTRA(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]));
   } else {
     p = new((void*) gvp) TGTRA(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TGTRA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetTwist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetH1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetBl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetTl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetAlpha1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetH2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetBl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetTl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TGTRA*) G__getstructoffset())->GetAlpha2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGTRA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGTRA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGTRA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGTRA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGTRA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGTRA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGTRA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGTRA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_147_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGTRA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_147_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGTRA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGTRA(*(TGTRA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TGTRA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGTRA G__TTGTRA;
static int G__G__G3D_147_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGTRA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGTRA*) (soff+(sizeof(TGTRA)*i)))->~G__TTGTRA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGTRA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGTRA*) (soff))->~G__TTGTRA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_147_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGTRA* dest = (TGTRA*) G__getstructoffset();
   *dest = *(TGTRA*) libp->para[0].ref;
   const TGTRA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPolyLine3D */
static int G__G__G3D_148_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyLine3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D[n];
     } else {
       p = new((void*) gvp) TPolyLine3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D;
     } else {
       p = new((void*) gvp) TPolyLine3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyLine3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D((Int_t) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPolyLine3D((Int_t) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TPolyLine3D((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyLine3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPolyLine3D((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyLine3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPolyLine3D((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyLine3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Option_t*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Option_t*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyLine3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Option_t*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Option_t*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TPolyLine3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyLine3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPolyLine3D(*(TPolyLine3D*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TPolyLine3D(*(TPolyLine3D*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TPolyLine3D& obj = ((TPolyLine3D*) G__getstructoffset())->operator=(*(TPolyLine3D*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TPolyLine3D*) G__getstructoffset())->DrawPolyLine((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TPolyLine3D*) G__getstructoffset())->DrawPolyLine((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPolyLine3D*) G__getstructoffset())->GetLastPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPolyLine3D*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TPolyLine3D*) G__getstructoffset())->GetP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPolyLine3D*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPolyLine3D*) G__getstructoffset())->SetNextPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TPolyLine3D*) G__getstructoffset())->SetOption((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TPolyLine3D*) G__getstructoffset())->SetOption();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPolyLine3D*) G__getstructoffset())->SetPoint((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TPolyLine3D*) G__getstructoffset())->SetPolyLine((Int_t) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TPolyLine3D*) G__getstructoffset())->SetPolyLine((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TPolyLine3D*) G__getstructoffset())->SetPolyLine((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TPolyLine3D*) G__getstructoffset())->SetPolyLine((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TPolyLine3D*) G__getstructoffset())->SetPolyLine((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TPolyLine3D*) G__getstructoffset())->SetPolyLine((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPolyLine3D*) G__getstructoffset())->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPolyLine3D::DrawOutlineCube((TList*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPolyLine3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPolyLine3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPolyLine3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPolyLine3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPolyLine3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPolyLine3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPolyLine3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPolyLine3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_148_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPolyLine3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPolyLine3D G__TTPolyLine3D;
static int G__G__G3D_148_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPolyLine3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPolyLine3D*) (soff+(sizeof(TPolyLine3D)*i)))->~G__TTPolyLine3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPolyLine3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPolyLine3D*) (soff))->~G__TTPolyLine3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* THelix */
static int G__G__G3D_151_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THelix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THelix[n];
     } else {
       p = new((void*) gvp) THelix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THelix;
     } else {
       p = new((void*) gvp) THelix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_THelix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THelix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new THelix(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) THelix(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_THelix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THelix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THelix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (EHelixRangeType) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) THelix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (EHelixRangeType) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THelix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (EHelixRangeType) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) THelix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (EHelixRangeType) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THelix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) THelix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THelix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) THelix(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_THelix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THelix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new THelix(*(THelix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) THelix(*(THelix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_THelix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THelix*) G__getstructoffset())->SetAxis((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THelix*) G__getstructoffset())->SetAxis((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((THelix*) G__getstructoffset())->SetRange((Double_t*) G__int(libp->para[0]), (EHelixRangeType) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((THelix*) G__getstructoffset())->SetRange((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((THelix*) G__getstructoffset())->SetRange((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (EHelixRangeType) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((THelix*) G__getstructoffset())->SetRange((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((THelix*) G__getstructoffset())->SetHelix((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (EHelixRangeType) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((THelix*) G__getstructoffset())->SetHelix((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (EHelixRangeType) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((THelix*) G__getstructoffset())->SetHelix((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((THelix*) G__getstructoffset())->SetHelix((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) THelix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THelix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) THelix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      THelix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THelix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THelix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THelix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THelix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_151_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THelix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef THelix G__TTHelix;
static int G__G__G3D_151_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (THelix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((THelix*) (soff+(sizeof(THelix)*i)))->~G__TTHelix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (THelix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((THelix*) (soff))->~G__TTHelix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* THYPE */
static int G__G__G3D_152_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THYPE* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THYPE[n];
     } else {
       p = new((void*) gvp) THYPE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THYPE;
     } else {
       p = new((void*) gvp) THYPE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_THYPE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THYPE* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new THYPE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) THYPE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_THYPE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const THYPE*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) THYPE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THYPE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) THYPE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      THYPE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THYPE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THYPE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THYPE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THYPE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_152_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THYPE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_152_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   THYPE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new THYPE(*(THYPE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_THYPE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef THYPE G__TTHYPE;
static int G__G__G3D_152_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (THYPE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((THYPE*) (soff+(sizeof(THYPE)*i)))->~G__TTHYPE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (THYPE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((THYPE*) (soff))->~G__TTHYPE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMarker3DBox */
static int G__G__G3D_154_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMarker3DBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMarker3DBox[n];
     } else {
       p = new((void*) gvp) TMarker3DBox[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMarker3DBox;
     } else {
       p = new((void*) gvp) TMarker3DBox;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMarker3DBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMarker3DBox(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) TMarker3DBox(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMarker3DBox*) G__getstructoffset())->GetRefObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMarker3DBox*) G__getstructoffset())->GetDirection(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMarker3DBox*) G__getstructoffset())->GetPosition(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMarker3DBox*) G__getstructoffset())->GetSize(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMarker3DBox::PaintH3((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMarker3DBox*) G__getstructoffset())->SetPoints((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMarker3DBox*) G__getstructoffset())->SetDirection((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMarker3DBox*) G__getstructoffset())->SetPosition((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMarker3DBox*) G__getstructoffset())->SetSize((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMarker3DBox*) G__getstructoffset())->SetRefObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMarker3DBox*) G__getstructoffset())->SetRefObject();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMarker3DBox::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMarker3DBox::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMarker3DBox::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMarker3DBox::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMarker3DBox*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMarker3DBox::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMarker3DBox::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMarker3DBox::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_154_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMarker3DBox::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMarker3DBox G__TTMarker3DBox;
static int G__G__G3D_154_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMarker3DBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMarker3DBox*) (soff+(sizeof(TMarker3DBox)*i)))->~G__TTMarker3DBox();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMarker3DBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMarker3DBox*) (soff))->~G__TTMarker3DBox();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMixture */
static int G__G__G3D_156_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMixture* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMixture[n];
     } else {
       p = new((void*) gvp) TMixture[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMixture;
     } else {
       p = new((void*) gvp) TMixture;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMixture));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMixture* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMixture(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TMixture(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMixture));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMixture*) G__getstructoffset())->DefineElement((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMixture*) G__getstructoffset())->GetNmixt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TMixture*) G__getstructoffset())->GetAmixt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TMixture*) G__getstructoffset())->GetZmixt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TMixture*) G__getstructoffset())->GetWmixt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMixture::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMixture::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMixture::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMixture::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMixture*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMixture::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMixture::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMixture::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_156_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMixture::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_156_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMixture* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMixture(*(TMixture*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TMixture));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMixture G__TTMixture;
static int G__G__G3D_156_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMixture*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMixture*) (soff+(sizeof(TMixture)*i)))->~G__TTMixture();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMixture*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMixture*) (soff))->~G__TTMixture();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_156_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMixture* dest = (TMixture*) G__getstructoffset();
   *dest = *(TMixture*) libp->para[0].ref;
   const TMixture& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TNodeDiv */
static int G__G__G3D_158_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TNodeDiv* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNodeDiv[n];
     } else {
       p = new((void*) gvp) TNodeDiv[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNodeDiv;
     } else {
       p = new((void*) gvp) TNodeDiv;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TNodeDiv* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNodeDiv(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Option_t*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TNodeDiv(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Option_t*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNodeDiv(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TNodeDiv(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TNodeDiv* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNodeDiv(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Option_t*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TNodeDiv(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Option_t*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TNodeDiv(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TNodeDiv(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (TShape*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TNodeDiv::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNodeDiv::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TNodeDiv::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TNodeDiv::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNodeDiv*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNodeDiv::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TNodeDiv::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNodeDiv::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_158_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TNodeDiv::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_158_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TNodeDiv* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TNodeDiv(*(TNodeDiv*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TNodeDiv G__TTNodeDiv;
static int G__G__G3D_158_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TNodeDiv*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TNodeDiv*) (soff+(sizeof(TNodeDiv)*i)))->~G__TTNodeDiv();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TNodeDiv*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TNodeDiv*) (soff))->~G__TTNodeDiv();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPARA */
static int G__G__G3D_159_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPARA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPARA[n];
     } else {
       p = new((void*) gvp) TPARA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPARA;
     } else {
       p = new((void*) gvp) TPARA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPARA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPARA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPARA(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]));
   } else {
     p = new((void*) gvp) TPARA(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPARA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TPARA*) G__getstructoffset())->GetAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TPARA*) G__getstructoffset())->GetTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TPARA*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPARA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPARA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPARA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPARA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPARA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPARA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPARA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPARA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_159_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPARA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_159_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TPARA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TPARA(*(TPARA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPARA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPARA G__TTPARA;
static int G__G__G3D_159_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPARA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPARA*) (soff+(sizeof(TPARA)*i)))->~G__TTPARA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPARA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPARA*) (soff))->~G__TTPARA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_159_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPARA* dest = (TPARA*) G__getstructoffset();
   *dest = *(TPARA*) libp->para[0].ref;
   const TPARA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPCON */
static int G__G__G3D_160_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPCON* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPCON[n];
     } else {
       p = new((void*) gvp) TPCON[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPCON;
     } else {
       p = new((void*) gvp) TPCON;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPCON));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPCON* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPCON(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) TPCON(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPCON));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPCON*) G__getstructoffset())->DefineSection((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPCON*) G__getstructoffset())->GetNumberOfDivisions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TPCON*) G__getstructoffset())->GetPhi1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TPCON*) G__getstructoffset())->GetDhi1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPCON*) G__getstructoffset())->GetNz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TPCON*) G__getstructoffset())->GetRmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TPCON*) G__getstructoffset())->GetRmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TPCON*) G__getstructoffset())->GetDz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPCON*) G__getstructoffset())->GetNdiv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPCON*) G__getstructoffset())->SetNumberOfDivisions((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPCON::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPCON::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPCON::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPCON::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPCON*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPCON::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPCON::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPCON::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_160_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPCON::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPCON G__TTPCON;
static int G__G__G3D_160_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPCON*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPCON*) (soff+(sizeof(TPCON)*i)))->~G__TTPCON();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPCON*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPCON*) (soff))->~G__TTPCON();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPGON */
static int G__G__G3D_161_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPGON* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPGON[n];
     } else {
       p = new((void*) gvp) TPGON[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPGON;
     } else {
       p = new((void*) gvp) TPGON;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPGON));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPGON* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPGON(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) TPGON(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPGON));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPGON::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPGON::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPGON::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPGON::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPGON*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPGON::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPGON::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPGON::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_161_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPGON::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_161_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TPGON* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TPGON(*(TPGON*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPGON));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPGON G__TTPGON;
static int G__G__G3D_161_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPGON*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPGON*) (soff+(sizeof(TPGON)*i)))->~G__TTPGON();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPGON*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPGON*) (soff))->~G__TTPGON();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPoints3DABC */
static int G__G__G3D_162_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 105, (long) TPoints3DABC::DistancetoLine(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) TPoints3DABC::DistancetoLine((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPoints3DABC*) G__getstructoffset())->Add((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPoints3DABC*) G__getstructoffset())->AddLast((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPoints3DABC*) G__getstructoffset())->GetLastPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPoints3DABC*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TPoints3DABC*) G__getstructoffset())->GetP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TPoints3DABC*) G__getstructoffset())->GetX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TPoints3DABC*) G__getstructoffset())->GetY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TPoints3DABC*) G__getstructoffset())->GetZ((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 70, (long) ((const TPoints3DABC*) G__getstructoffset())->GetXYZ((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 70, (long) ((const TPoints3DABC*) G__getstructoffset())->GetXYZ((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((TPoints3DABC*) G__getstructoffset())->GetXYZ((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TPoints3DABC*) G__getstructoffset())->PaintPoints((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TPoints3DABC*) G__getstructoffset())->PaintPoints((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPoints3DABC*) G__getstructoffset())->SetLastPosition((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPoints3DABC*) G__getstructoffset())->SetNextPoint((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TPoints3DABC*) G__getstructoffset())->SetOption((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TPoints3DABC*) G__getstructoffset())->SetOption();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPoints3DABC*) G__getstructoffset())->SetPoint((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((TPoints3DABC*) G__getstructoffset())->SetPoints((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TPoints3DABC*) G__getstructoffset())->SetPoints((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((TPoints3DABC*) G__getstructoffset())->SetPoints((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPoints3DABC*) G__getstructoffset())->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPoints3DABC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPoints3DABC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPoints3DABC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPoints3DABC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPoints3DABC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPoints3DABC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPoints3DABC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPoints3DABC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_162_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPoints3DABC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPoints3DABC G__TTPoints3DABC;
static int G__G__G3D_162_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPoints3DABC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPoints3DABC*) (soff+(sizeof(TPoints3DABC)*i)))->~G__TTPoints3DABC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPoints3DABC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPoints3DABC*) (soff))->~G__TTPoints3DABC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_162_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPoints3DABC* dest = (TPoints3DABC*) G__getstructoffset();
   *dest = *(TPoints3DABC*) libp->para[0].ref;
   const TPoints3DABC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPolyMarker3D */
static int G__G__G3D_165_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyMarker3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D[n];
     } else {
       p = new((void*) gvp) TPolyMarker3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D;
     } else {
       p = new((void*) gvp) TPolyMarker3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyMarker3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Marker_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Marker_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D((Int_t) G__int(libp->para[0]), (Marker_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPolyMarker3D((Int_t) G__int(libp->para[0]), (Marker_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TPolyMarker3D((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyMarker3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPolyMarker3D((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyMarker3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TPolyMarker3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPolyMarker3D((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPolyMarker3D((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPolyMarker3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPolyMarker3D(*(TPolyMarker3D*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TPolyMarker3D(*(TPolyMarker3D*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TPolyMarker3D*) G__getstructoffset())->DrawPolyMarker((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TPolyMarker3D*) G__getstructoffset())->DrawPolyMarker((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPolyMarker3D*) G__getstructoffset())->GetLastPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPolyMarker3D*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TPolyMarker3D*) G__getstructoffset())->GetP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TPolyMarker3D*) G__getstructoffset())->GetPoint((Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TPolyMarker3D*) G__getstructoffset())->GetPoint((Int_t) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPolyMarker3D*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPolyMarker3D*) G__getstructoffset())->SetName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPolyMarker3D*) G__getstructoffset())->SetPoint((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TPolyMarker3D*) G__getstructoffset())->SetPolyMarker((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TPolyMarker3D*) G__getstructoffset())->SetPolyMarker((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TPolyMarker3D*) G__getstructoffset())->SetPolyMarker((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TPolyMarker3D*) G__getstructoffset())->SetPolyMarker((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TPolyMarker3D*) G__getstructoffset())->SetNextPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TPolyMarker3D*) G__getstructoffset())->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPolyMarker3D::PaintH3((TH1*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPolyMarker3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPolyMarker3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPolyMarker3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPolyMarker3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPolyMarker3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPolyMarker3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPolyMarker3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPolyMarker3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_165_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPolyMarker3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPolyMarker3D G__TTPolyMarker3D;
static int G__G__G3D_165_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPolyMarker3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPolyMarker3D*) (soff+(sizeof(TPolyMarker3D)*i)))->~G__TTPolyMarker3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPolyMarker3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPolyMarker3D*) (soff))->~G__TTPolyMarker3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPointSet3D */
static int G__G__G3D_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPointSet3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D[n];
     } else {
       p = new((void*) gvp) TPointSet3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D;
     } else {
       p = new((void*) gvp) TPointSet3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPointSet3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D(
(Int_t) G__int(libp->para[0]), (Marker_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TPointSet3D(
(Int_t) G__int(libp->para[0]), (Marker_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D((Int_t) G__int(libp->para[0]), (Marker_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPointSet3D((Int_t) G__int(libp->para[0]), (Marker_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TPointSet3D((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPointSet3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TPointSet3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TPointSet3D(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPointSet3D((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPointSet3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TPointSet3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TPointSet3D(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Marker_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPointSet3D((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TPointSet3D((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPointSet3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPointSet3D(*(TPointSet3D*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TPointSet3D(*(TPointSet3D*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TPointSet3D& obj = ((TPointSet3D*) G__getstructoffset())->operator=(*(TPointSet3D*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPointSet3D*) G__getstructoffset())->SetPointId((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPointSet3D*) G__getstructoffset())->SetPointId((Int_t) G__int(libp->para[0]), (TObject*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TPointSet3D*) G__getstructoffset())->GetPointId((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPointSet3D*) G__getstructoffset())->ClearIds();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TPointSet3D*) G__getstructoffset())->GetOwnIds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPointSet3D*) G__getstructoffset())->SetOwnIds((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPointSet3D*) G__getstructoffset())->PointSelected((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPointSet3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPointSet3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPointSet3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPointSet3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPointSet3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPointSet3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPointSet3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPointSet3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_172_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPointSet3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPointSet3D G__TTPointSet3D;
static int G__G__G3D_172_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPointSet3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPointSet3D*) (soff+(sizeof(TPointSet3D)*i)))->~G__TTPointSet3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPointSet3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPointSet3D*) (soff))->~G__TTPointSet3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSPHE */
static int G__G__G3D_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSPHE* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSPHE[n];
     } else {
       p = new((void*) gvp) TSPHE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSPHE;
     } else {
       p = new((void*) gvp) TSPHE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TSPHE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSPHE* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSPHE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]));
   } else {
     p = new((void*) gvp) TSPHE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TSPHE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSPHE* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSPHE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TSPHE(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TSPHE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSPHE*) G__getstructoffset())->GetRmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSPHE*) G__getstructoffset())->GetRmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSPHE*) G__getstructoffset())->GetThemin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSPHE*) G__getstructoffset())->GetThemax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSPHE*) G__getstructoffset())->GetPhimin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSPHE*) G__getstructoffset())->GetPhimax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TSPHE*) G__getstructoffset())->GetAspectRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSPHE*) G__getstructoffset())->GetNumberOfDivisions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TSPHE*) G__getstructoffset())->SetAspectRatio((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSPHE*) G__getstructoffset())->SetAspectRatio();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSPHE*) G__getstructoffset())->SetEllipse((const Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSPHE*) G__getstructoffset())->SetNumberOfDivisions((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSPHE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSPHE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSPHE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSPHE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSPHE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSPHE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSPHE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSPHE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_173_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSPHE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_173_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSPHE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSPHE(*(TSPHE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TSPHE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSPHE G__TTSPHE;
static int G__G__G3D_173_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSPHE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSPHE*) (soff+(sizeof(TSPHE)*i)))->~G__TTSPHE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSPHE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSPHE*) (soff))->~G__TTSPHE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_173_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSPHE* dest = (TSPHE*) G__getstructoffset();
   *dest = *(TSPHE*) libp->para[0].ref;
   const TSPHE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TTRAP */
static int G__G__G3D_174_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRAP* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTRAP[n];
     } else {
       p = new((void*) gvp) TTRAP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTRAP;
     } else {
       p = new((void*) gvp) TTRAP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRAP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRAP* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 14
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTRAP(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13]));
   } else {
     p = new((void*) gvp) TTRAP(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRAP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRAP*) G__getstructoffset())->GetH1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRAP*) G__getstructoffset())->GetBl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRAP*) G__getstructoffset())->GetTl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRAP*) G__getstructoffset())->GetAlpha1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRAP*) G__getstructoffset())->GetH2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRAP*) G__getstructoffset())->GetBl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRAP*) G__getstructoffset())->GetTl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRAP*) G__getstructoffset())->GetAlpha2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TTRAP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRAP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TTRAP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTRAP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTRAP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRAP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTRAP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRAP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_174_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTRAP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_174_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TTRAP* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TTRAP(*(TTRAP*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRAP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TTRAP G__TTTRAP;
static int G__G__G3D_174_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TTRAP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TTRAP*) (soff+(sizeof(TTRAP)*i)))->~G__TTTRAP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TTRAP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TTRAP*) (soff))->~G__TTTRAP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_174_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRAP* dest = (TTRAP*) G__getstructoffset();
   *dest = *(TTRAP*) libp->para[0].ref;
   const TTRAP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TTRD1 */
static int G__G__G3D_175_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRD1* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTRD1[n];
     } else {
       p = new((void*) gvp) TTRD1[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTRD1;
     } else {
       p = new((void*) gvp) TTRD1;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRD1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRD1* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTRD1(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) TTRD1(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRD1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRD1*) G__getstructoffset())->GetDx2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TTRD1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRD1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TTRD1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTRD1::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTRD1*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRD1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTRD1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRD1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTRD1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_175_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TTRD1* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TTRD1(*(TTRD1*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRD1));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TTRD1 G__TTTRD1;
static int G__G__G3D_175_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TTRD1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TTRD1*) (soff+(sizeof(TTRD1)*i)))->~G__TTTRD1();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TTRD1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TTRD1*) (soff))->~G__TTTRD1();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRD1* dest = (TTRD1*) G__getstructoffset();
   *dest = *(TTRD1*) libp->para[0].ref;
   const TTRD1& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TTRD2 */
static int G__G__G3D_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRD2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTRD2[n];
     } else {
       p = new((void*) gvp) TTRD2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTRD2;
     } else {
       p = new((void*) gvp) TTRD2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRD2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRD2* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTRD2(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) TTRD2(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRD2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRD2*) G__getstructoffset())->GetDx2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TTRD2*) G__getstructoffset())->GetDy2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TTRD2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRD2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TTRD2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTRD2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTRD2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRD2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTRD2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTRD2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_176_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTRD2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__G3D_176_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TTRD2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TTRD2(*(TTRD2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TTRD2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TTRD2 G__TTTRD2;
static int G__G__G3D_176_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TTRD2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TTRD2*) (soff+(sizeof(TTRD2)*i)))->~G__TTTRD2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TTRD2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TTRD2*) (soff))->~G__TTTRD2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__G3D_176_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTRD2* dest = (TTRD2*) G__getstructoffset();
   *dest = *(TTRD2*) libp->para[0].ref;
   const TTRD2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TView3D */
static int G__G__G3D_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TView3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TView3D[n];
     } else {
       p = new((void*) gvp) TView3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TView3D;
     } else {
       p = new((void*) gvp) TView3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TView3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TView3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TView3D(
(Int_t) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])
, (const Double_t*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TView3D(
(Int_t) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])
, (const Double_t*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TView3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TView3D::AdjustPad((TVirtualPad*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TView3D::AdjustPad();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TView3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TView3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TView3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TView3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TView3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TView3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TView3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TView3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_177_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TView3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TView3D G__TTView3D;
static int G__G__G3D_177_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TView3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TView3D*) (soff+(sizeof(TView3D)*i)))->~G__TTView3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TView3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TView3D*) (soff))->~G__TTView3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXTRU */
static int G__G__G3D_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXTRU* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXTRU[n];
     } else {
       p = new((void*) gvp) TXTRU[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXTRU;
     } else {
       p = new((void*) gvp) TXTRU;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TXTRU));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXTRU* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TXTRU(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) TXTRU(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TXTRU));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXTRU* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TXTRU(*(TXTRU*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TXTRU(*(TXTRU*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__G3DLN_TXTRU));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TXTRU& obj = ((TXTRU*) G__getstructoffset())->operator=(*(TXTRU*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((TXTRU*) G__getstructoffset())->DefineSection((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TXTRU*) G__getstructoffset())->DefineSection((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TXTRU*) G__getstructoffset())->DefineSection((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TXTRU*) G__getstructoffset())->DefineSection((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXTRU*) G__getstructoffset())->DefineVertex((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TXTRU*) G__getstructoffset())->GetNxy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TXTRU*) G__getstructoffset())->GetNz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TXTRU*) G__getstructoffset())->GetOutlinePointX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TXTRU*) G__getstructoffset())->GetOutlinePointY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TXTRU*) G__getstructoffset())->GetSectionX0((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TXTRU*) G__getstructoffset())->GetSectionY0((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TXTRU*) G__getstructoffset())->GetSectionScale((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TXTRU*) G__getstructoffset())->GetSectionZ((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TXTRU*) G__getstructoffset())->GetXvtx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TXTRU*) G__getstructoffset())->GetYvtx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TXTRU*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TXTRU*) G__getstructoffset())->GetScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TXTRU*) G__getstructoffset())->GetX0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TXTRU*) G__getstructoffset())->GetY0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TXTRU*) G__getstructoffset())->SplitConcavePolygon((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TXTRU*) G__getstructoffset())->SplitConcavePolygon();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXTRU*) G__getstructoffset())->TruncateNxy((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXTRU*) G__getstructoffset())->TruncateNz((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TXTRU::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXTRU::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TXTRU::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TXTRU::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXTRU*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXTRU::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXTRU::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXTRU::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__G3D_179_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXTRU::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXTRU G__TTXTRU;
static int G__G__G3D_179_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TXTRU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TXTRU*) (soff+(sizeof(TXTRU)*i)))->~G__TTXTRU();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TXTRU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TXTRU*) (soff))->~G__TTXTRU();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TAxis3D */

/* TMaterial */

/* TNode */

/* TShape */

/* TBRIK */

/* TTUBE */

/* TCONE */

/* TTUBS */

/* TCONS */

/* TCTUB */

/* TELTU */

/* TRotMatrix */

/* TGeometry */

/* TGTRA */

/* TPolyLine3D */

/* THelix */

/* THYPE */

/* TMarker3DBox */

/* TMixture */

/* TNodeDiv */

/* TPARA */

/* TPCON */

/* TPGON */

/* TPoints3DABC */

/* TPolyMarker3D */

/* TPointSet3D */

/* TSPHE */

/* TTRAP */

/* TTRD1 */

/* TTRD2 */

/* TView3D */

/* TXTRU */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__G3D {
 public:
  G__Sizep2memfuncG__G3D(): p(&G__Sizep2memfuncG__G3D::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__G3D::*p)();
};

size_t G__get_sizep2memfuncG__G3D()
{
  G__Sizep2memfuncG__G3D a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__G3D() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TAxis3D))) {
     TAxis3D *G__Lderived;
     G__Lderived=(TAxis3D*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TAxis3D),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TAxis3D),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TMaterial))) {
     TMaterial *G__Lderived;
     G__Lderived=(TMaterial*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMaterial),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMaterial),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMaterial),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TNode))) {
     TNode *G__Lderived;
     G__Lderived=(TNode*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNode),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNode),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNode),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNode),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNode),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TShape))) {
     TShape *G__Lderived;
     G__Lderived=(TShape*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TShape),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TShape),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TShape),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TShape),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TShape),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TBRIK))) {
     TBRIK *G__Lderived;
     G__Lderived=(TBRIK*)0x1000;
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TTUBE))) {
     TTUBE *G__Lderived;
     G__Lderived=(TTUBE*)0x1000;
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TCONE))) {
     TCONE *G__Lderived;
     G__Lderived=(TCONE*)0x1000;
     {
       TTUBE *G__Lpbase=(TTUBE*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE),G__get_linked_tagnum(&G__G__G3DLN_TTUBE),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TTUBS))) {
     TTUBS *G__Lderived;
     G__Lderived=(TTUBS*)0x1000;
     {
       TTUBE *G__Lpbase=(TTUBE*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS),G__get_linked_tagnum(&G__G__G3DLN_TTUBE),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TCONS))) {
     TCONS *G__Lderived;
     G__Lderived=(TCONS*)0x1000;
     {
       TTUBS *G__Lpbase=(TTUBS*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),G__get_linked_tagnum(&G__G__G3DLN_TTUBS),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTUBE *G__Lpbase=(TTUBE*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),G__get_linked_tagnum(&G__G__G3DLN_TTUBE),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TCTUB))) {
     TCTUB *G__Lderived;
     G__Lderived=(TCTUB*)0x1000;
     {
       TTUBS *G__Lpbase=(TTUBS*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),G__get_linked_tagnum(&G__G__G3DLN_TTUBS),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTUBE *G__Lpbase=(TTUBE*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),G__get_linked_tagnum(&G__G__G3DLN_TTUBE),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TELTU))) {
     TELTU *G__Lderived;
     G__Lderived=(TELTU*)0x1000;
     {
       TTUBE *G__Lpbase=(TTUBE*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU),G__get_linked_tagnum(&G__G__G3DLN_TTUBE),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix))) {
     TRotMatrix *G__Lderived;
     G__Lderived=(TRotMatrix*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TGeometry))) {
     TGeometry *G__Lderived;
     G__Lderived=(TGeometry*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGeometry),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGeometry),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TGTRA))) {
     TGTRA *G__Lderived;
     G__Lderived=(TGTRA*)0x1000;
     {
       TBRIK *G__Lpbase=(TBRIK*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA),G__get_linked_tagnum(&G__G__G3DLN_TBRIK),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D))) {
     TPolyLine3D *G__Lderived;
     G__Lderived=(TPolyLine3D*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_THelix))) {
     THelix *G__Lderived;
     G__Lderived=(THelix*)0x1000;
     {
       TPolyLine3D *G__Lpbase=(TPolyLine3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THelix),G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THelix),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THelix),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THelix),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_THYPE))) {
     THYPE *G__Lderived;
     G__Lderived=(THYPE*)0x1000;
     {
       TTUBE *G__Lpbase=(TTUBE*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE),G__get_linked_tagnum(&G__G__G3DLN_TTUBE),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox))) {
     TMarker3DBox *G__Lderived;
     G__Lderived=(TMarker3DBox*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TMixture))) {
     TMixture *G__Lderived;
     G__Lderived=(TMixture*)0x1000;
     {
       TMaterial *G__Lpbase=(TMaterial*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMixture),G__get_linked_tagnum(&G__G__G3DLN_TMaterial),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMixture),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMixture),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TMixture),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv))) {
     TNodeDiv *G__Lderived;
     G__Lderived=(TNodeDiv*)0x1000;
     {
       TNode *G__Lpbase=(TNode*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv),G__get_linked_tagnum(&G__G__G3DLN_TNode),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TPARA))) {
     TPARA *G__Lderived;
     G__Lderived=(TPARA*)0x1000;
     {
       TBRIK *G__Lpbase=(TBRIK*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA),G__get_linked_tagnum(&G__G__G3DLN_TBRIK),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TPCON))) {
     TPCON *G__Lderived;
     G__Lderived=(TPCON*)0x1000;
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TPGON))) {
     TPGON *G__Lderived;
     G__Lderived=(TPGON*)0x1000;
     {
       TPCON *G__Lpbase=(TPCON*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON),G__get_linked_tagnum(&G__G__G3DLN_TPCON),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TPoints3DABC))) {
     TPoints3DABC *G__Lderived;
     G__Lderived=(TPoints3DABC*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPoints3DABC),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D))) {
     TPolyMarker3D *G__Lderived;
     G__Lderived=(TPolyMarker3D*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D),G__get_linked_tagnum(&G__G__G3DLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D))) {
     TPointSet3D *G__Lderived;
     G__Lderived=(TPointSet3D*)0x1000;
     {
       TPolyMarker3D *G__Lpbase=(TPolyMarker3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D),G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D),G__get_linked_tagnum(&G__G__G3DLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttBBox *G__Lpbase=(TAttBBox*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D),G__get_linked_tagnum(&G__G__G3DLN_TAttBBox),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TSPHE))) {
     TSPHE *G__Lderived;
     G__Lderived=(TSPHE*)0x1000;
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TTRAP))) {
     TTRAP *G__Lderived;
     G__Lderived=(TTRAP*)0x1000;
     {
       TBRIK *G__Lpbase=(TBRIK*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP),G__get_linked_tagnum(&G__G__G3DLN_TBRIK),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TTRD1))) {
     TTRD1 *G__Lderived;
     G__Lderived=(TTRD1*)0x1000;
     {
       TBRIK *G__Lpbase=(TBRIK*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1),G__get_linked_tagnum(&G__G__G3DLN_TBRIK),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TTRD2))) {
     TTRD2 *G__Lderived;
     G__Lderived=(TTRD2*)0x1000;
     {
       TBRIK *G__Lpbase=(TBRIK*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2),G__get_linked_tagnum(&G__G__G3DLN_TBRIK),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TView3D))) {
     TView3D *G__Lderived;
     G__Lderived=(TView3D*)0x1000;
     {
       TView *G__Lpbase=(TView*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TView3D),G__get_linked_tagnum(&G__G__G3DLN_TView),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TView3D),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TView3D),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__G3DLN_TXTRU))) {
     TXTRU *G__Lderived;
     G__Lderived=(TXTRU*)0x1000;
     {
       TShape *G__Lpbase=(TShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU),G__get_linked_tagnum(&G__G__G3DLN_TShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU),G__get_linked_tagnum(&G__G__G3DLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU),G__get_linked_tagnum(&G__G__G3DLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU),G__get_linked_tagnum(&G__G__G3DLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU),G__get_linked_tagnum(&G__G__G3DLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU),G__get_linked_tagnum(&G__G__G3DLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__G3D() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Axis_t",100,-1,0,-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("Style_t",115,-1,0,-1);
   G__setnewtype(-1,"Style number (short)",0);
   G__search_typename2("Marker_t",115,-1,0,-1);
   G__setnewtype(-1,"Marker number (short)",0);
   G__search_typename2("Color_t",115,-1,0,-1);
   G__setnewtype(-1,"Color number (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__G3DLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__G3DLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__G3DLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__G3DLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__G3DLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__G3DLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__G3DLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__G3DLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__G3DLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__G3DLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TAxis3D */
static void G__setup_memvarTAxis3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TAxis3D));
   { TAxis3D *p; p=(TAxis3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__G3DLN_TAxis),-1,-1,2,"fAxis[3]=",0,"X/Y/Z axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__G3DLN_TString),-1,-1,2,"fOption=",0,"Options (is not use yet)");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,2,"fgRulerName=",0,"The default object name");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TAxis),-1,-1,2,"fSelected=",0,"!  The selected axis to play with");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fZoomMode=",0,"Zoom mode for the entire parent TPad");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fStickyZoom=",0,"StickyZoom mode:  zoom will not be disabled    after zooming attempt if true");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMaterial */
static void G__setup_memvarTMaterial(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TMaterial));
   { TMaterial *p; p=(TMaterial*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumber=",0,"Material matrix number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA=",0,"A of Material");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ=",0,"Z of Material");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDensity=",0,"Material density in gr/cm3");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRadLength=",0,"Material radiation length");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fInterLength=",0,"Material interaction length");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TNode */
static void G__setup_memvarTNode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TNode));
   { TNode *p; p=(TNode*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TNodecLcLdA),-1,-2,1,"kSonsInvisible=131072",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX=",0,"X offset with respect to parent object");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY=",0,"Y offset with respect to parent object");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZ=",0,"Z offset with respect to parent object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix),-1,-1,2,"fMatrix=",0,"Pointer to rotation matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TShape),-1,-1,2,"fShape=",0,"Pointer to shape definition");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TNode),-1,-1,2,"fParent=",0,"Pointer to parent positioned volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TList),-1,-1,2,"fNodes=",0,"List of son nodes (if any)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__G3DLN_TString),-1,-1,2,"fOption=",0,"List of options if any");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVisibility=",0,"Visibility flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TShape */
static void G__setup_memvarTShape(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TShape));
   { TShape *p; p=(TShape*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumber=",0,"Shape number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVisibility=",0,"Visibility flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TMaterial),-1,-1,2,"fMaterial=",0,"Pointer to material");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TBRIK */
static void G__setup_memvarTBRIK(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK));
   { TBRIK *p; p=(TBRIK*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDx=",0,"half length in x");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDy=",0,"half length in y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDz=",0,"half length in z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TTUBE */
static void G__setup_memvarTTUBE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE));
   { TTUBE *p; p=(TTUBE*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmin=",0,"ellipse  semi-axis   in  X inside");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmax=",0,"ellipse  semi-axis   in  X outside");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDz=",0,"half length in z");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNdiv=",0,"number of segments (precision)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAspectRatio=",0,"defines  (the ellipse semi-axis in Y)/(the ellipse semi-axis in X)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSiTab=",0,"! Table of sin(fPhi1) .... sin(fPhil+fDphi1)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCoTab=",0,"! Table of cos(fPhi1) .... cos(fPhil+fDphi1)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCONE */
static void G__setup_memvarTCONE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE));
   { TCONE *p; p=(TCONE*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmin2=",0,"inside radius at the high z limit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmax2=",0,"outside radius at the high z limit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TTUBS */
static void G__setup_memvarTTUBS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS));
   { TTUBS *p; p=(TTUBS*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi1=",0,"first phi limit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi2=",0,"second phi limit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCONS */
static void G__setup_memvarTCONS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS));
   { TCONS *p; p=(TCONS*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmin2=",0,"inside radius at the high z limit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmax2=",0,"outside radius at the high z limit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCTUB */
static void G__setup_memvarTCTUB(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB));
   { TCTUB *p; p=(TCTUB*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCosLow[3]=",0,"dir cosinus of surface cutting tube at low z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCosHigh[3]=",0,"dir cosinus of surface cutting tube at high z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TELTU */
static void G__setup_memvarTELTU(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU));
   { TELTU *p; p=(TELTU*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRotMatrix */
static void G__setup_memvarTRotMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix));
   { TRotMatrix *p; p=(TRotMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumber=",0,"Rotation matrix number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fType=",0,"Type of matrix (0=identity, 1=reflexion, 2=otherwise)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTheta=",0,"theta angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhi=",0,"phi angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPsi=",0,"psi angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMatrix[9]=",0,"Rotation matrix");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrixcLcLdA),-1,-2,1,"kReflection=8388608",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeometry */
static void G__setup_memvarTGeometry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TGeometry));
   { TGeometry *p; p=(TGeometry*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_THashList),-1,-1,4,"fMaterials=",0,"->Collection of materials");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_THashList),-1,-1,4,"fMatrices=",0,"->Collection of rotation matrices");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_THashList),-1,-1,4,"fShapes=",0,"->Collection of shapes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TList),-1,-1,4,"fNodes=",0,"->Collection of nodes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix),-1,-1,4,"fMatrix=",0,"!Pointers to current rotation matrices");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TNode),-1,-1,4,"fCurrentNode=",0,"!Pointer to current node");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__G3DLN_TMaterial),-1,-1,4,"fMaterialPointer=",0,"!Pointers to materials");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix),-1,-1,4,"fMatrixPointer=",0,"!Pointers to rotation matrices");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__G3DLN_TShape),-1,-1,4,"fShapePointer=",0,"!Pointers to shapes");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBomb=",0,"Bomb factor for exploded geometry");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeomLevel=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,"! The global translation of the current node");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZ=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTranslation[20][3]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRotMatrix[20][9]=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsReflection[20]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGTRA */
static void G__setup_memvarTGTRA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA));
   { TGTRA *p; p=(TGTRA*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTwist=",0,"twisting parameter");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fH1=",0,"half length in y at low z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBl1=",0,"half length in x at low z and y low edge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTl1=",0,"half length in x at low z and y high edge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAlpha1=",0,"angle w.r.t. the y axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fH2=",0,"half length in y at high z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBl2=",0,"half length in x at high z and y low edge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTl2=",0,"half length in x at high z and y high edge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAlpha2=",0,"angle w.r.t. the y axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPolyLine3D */
static void G__setup_memvarTPolyLine3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   { TPolyLine3D *p; p=(TPolyLine3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fN=",0,"Number of points");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fP=",0,"[3*fN] Array of 3-D coordinates  (x,y,z)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__G3DLN_TString),-1,-1,2,"fOption=",0,"options");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLastPoint=",0,"The index of the last filled point");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* THelix */
static void G__setup_memvarTHelix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_THelix));
   { THelix *p; p=(THelix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX0=",0,"Pivot's x position (see parametrization in class doc)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY0=",0,"Pivot's y position (see parametrization in class doc)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZ0=",0,"Pivot's z position (see parametrization in class doc)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVt=",0,"Transverse velocity (constant of motion)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhi0=",0,"Initial phase, so vx0 = fVt*cos(fPhi0)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVz=",0,"Z velocity (constant of motion)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fW=",0,"Angular frequency");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAxis[3]=",0,"Direction unit vector of the helix axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix),-1,-1,2,"fRotMat=",0,"Rotation matrix: axis // z  -->  axis // fAxis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRange[2]=",0,"Range of helix parameter t");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fgMinNSeg=",0,"minimal number of segments in polyline");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* THYPE */
static void G__setup_memvarTHYPE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE));
   { THYPE *p; p=(THYPE*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi=",0,"stereo angle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMarker3DBox */
static void G__setup_memvarTMarker3DBox(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox));
   { TMarker3DBox *p; p=(TMarker3DBox*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX=",0,"X coordinate of center of box");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY=",0,"Y coordinate of center of box");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ=",0,"Z coordinate of center of box");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDx=",0,"half length in x");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDy=",0,"half length in y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDz=",0,"half length in z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTheta=",0,"Angle of box z axis with respect to main Z axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi=",0,"Angle of box x axis with respect to main Xaxis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TObject),-1,-1,2,"fRefObject=",0,"Pointer to an object");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBoxcLcLdA),-1,-2,1,"kTemporary=8388608",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMixture */
static void G__setup_memvarTMixture(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TMixture));
   { TMixture *p; p=(TMixture*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNmixt=",0,"Number of elements in mixture");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAmixt=",0,"[fNmixt] Array of A of mixtures");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZmixt=",0,"[fNmixt] Array of Z of mixtures");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fWmixt=",0,"[fNmixt] Array of relative weights");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TNodeDiv */
static void G__setup_memvarTNodeDiv(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv));
   { TNodeDiv *p; p=(TNodeDiv*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNdiv=",0,"Number of divisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAxis=",0,"Axis number where object is divided");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPARA */
static void G__setup_memvarTPARA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA));
   { TPARA *p; p=(TPARA*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAlpha=",0,"angle w.r.t. the y axis from the centre of the low y to the high y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTheta=",0,"polar angle from the centre of the low z to the high z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi=",0,"polar angle from the centre of the low z to the high z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPCON */
static void G__setup_memvarTPCON(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON));
   { TPCON *p; p=(TPCON*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSiTab=",0,"! Table of sin(fPhi1) .... sin(fPhil+fDphi1)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCoTab=",0,"! Table of cos(fPhi1) .... cos(fPhil+fDphi1)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi1=",0,"lower phi limit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDphi1=",0,"range in phi");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNdiv=",0,"number of divisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNz=",0,"number of z segments");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmin=",0,"[fNz] pointer to array of inside radiuses");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmax=",0,"[fNz] pointer to array of outside radiuses");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDz=",0,"[fNz] pointer to array of half lengths in z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPGON */
static void G__setup_memvarTPGON(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON));
   { TPGON *p; p=(TPGON*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPoints3DABC */
static void G__setup_memvarTPoints3DABC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TPoints3DABC));
   { TPoints3DABC *p; p=(TPoints3DABC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPolyMarker3D */
static void G__setup_memvarTPolyMarker3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D));
   { TPolyMarker3D *p; p=(TPolyMarker3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fN=",0,"number of points");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fP=",0,"[3*fN] Array of X,Y,Z coordinates");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__G3DLN_TString),-1,-1,2,"fOption=",0,"options");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLastPoint=",0,"The index of the last filled point");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__G3DLN_TString),-1,-1,2,"fName=",0,"name of polymarker");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPointSet3D */
static void G__setup_memvarTPointSet3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D));
   { TPointSet3D *p; p=(TPointSet3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOwnIds=",0,"Flag specifying id-objects are owned by the point-set");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__G3DLN_TRefArray),-1,-1,2,"fIds=",0,"User-provided point identifications");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSPHE */
static void G__setup_memvarTSPHE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE));
   { TSPHE *p; p=(TSPHE*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSiTab=",0,"! Table of sin(fPhimin) .... sin(Phi)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCoTab=",0,"! Table of cos(fPhimin) .... cos(Phi)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCoThetaTab=",0,"! Table of sin(gThemin) .... cos(Theta)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNdiv=",0,"number of divisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNz=",0,"! number of sections");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAspectRatio=",0,"Relation between asumth and grid size (by default 1.0)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmin=",0,"minimum radius");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmax=",0,"maximum radius");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fThemin=",0,"minimum theta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fThemax=",0,"maximum theta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhimin=",0,"minimum phi");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhimax=",0,"maximum phi");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"faX=",0,"Coeff along Ox");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"faY=",0,"Coeff along Oy");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"faZ=",0,"Coeff along Oz");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TTRAP */
static void G__setup_memvarTTRAP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP));
   { TTRAP *p; p=(TTRAP*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fH1=",0,"half length in y at low z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBl1=",0,"half length in x at low z and y low edge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTl1=",0,"half length in x at low z and y high edge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAlpha1=",0,"angle w.r.t. the y axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fH2=",0,"half length in y at high z");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBl2=",0,"half length in x at high z and y low edge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTl2=",0,"half length in x at high z and y high edge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAlpha2=",0,"angle w.r.t. the y axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TTRD1 */
static void G__setup_memvarTTRD1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1));
   { TTRD1 *p; p=(TTRD1*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDx2=",0,"half length in x at the high z surface");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TTRD2 */
static void G__setup_memvarTTRD2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2));
   { TTRD2 *p; p=(TTRD2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDx2=",0,"half length in x at the high z surface");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDy2=",0,"half length in y at the high z surface");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TView3D */
static void G__setup_memvarTView3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TView3D));
   { TView3D *p; p=(TView3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLatitude=",0,"View angle latitude");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLongitude=",0,"View angle longitude");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPsi=",0,"View angle psi");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDview=",0,"Distance from COP to COV");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDproj=",0,"Distance from COP to projection plane");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUpix=",0,"pad X size in pixels");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVpix=",0,"pad Y size in pixels");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTN[16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTB[16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRmax[3]=",0,"Upper limits of object");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRmin[3]=",0,"Lower limits of object");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUVcoord[4]=",0,"Viewing window limits");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTnorm[16]=",0,"Transformation matrix");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTback[16]=",0,"Back transformation matrix");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX1[3]=",0,"First coordinate of X axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX2[3]=",0,"Second coordinate of X axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY1[3]=",0,"First coordinate of Y axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY2[3]=",0,"Second coordinate of Y axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZ1[3]=",0,"First coordinate of Z axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZ2[3]=",0,"Second coordinate of Z axis");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSystem=",0,"Coordinate system");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TSeqCollection),-1,-1,2,"fOutline=",0,"Collection of outline's objects");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDefaultOutline=",0,"Set to TRUE if outline is default cube");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fAutoRange=",0,"Set to TRUE if range computed automatically");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fChanged=",0,"! Set to TRUE after ExecuteRotateView");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TView3DcLcLdA),-1,-2,1,"kPerspective=64",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXTRU */
static void G__setup_memvarTXTRU(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU));
   { TXTRU *p; p=(TXTRU*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNxy=",0,"number of x-y points in the cross section");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNxyAlloc=",0,"number of x-y points allocated");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNz=",0,"number of z planes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNzAlloc=",0,"number of z planes allocated");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fXvtx=",0,"[fNxyAlloc] array of x positions");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fYvtx=",0,"[fNxyAlloc] array of y positions");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ=",0,"[fNzAlloc] array of z planes");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fScale=",0,"[fNzAlloc] array of scale factors (for each z)");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX0=",0,"[fNzAlloc] array of x offsets (for each z)");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY0=",0,"[fNzAlloc] array of y offsets (for each z)");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEXYChecked),-1,-2,1,"kUncheckedXY=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEXYChecked),-1,-2,1,"kMalformedXY=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEXYChecked),-1,-2,1,"kConvexCCW=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEXYChecked),-1,-2,1,"kConvexCW=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEXYChecked),-1,-2,1,"kConcaveCCW=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEXYChecked),-1,-2,1,"kConcaveCW=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEZChecked),-1,-2,1,"kUncheckedZ=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEZChecked),-1,-2,1,"kMalformedZ=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEZChecked),-1,-2,1,"kConvexIncZ=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEZChecked),-1,-2,1,"kConvexDecZ=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEZChecked),-1,-2,1,"kConcaveIncZ=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEZChecked),-1,-2,1,"kConcaveDecZ=5",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEXYChecked),-1,-1,2,"fPolygonShape=",0,"CCW vs. CW, convex vs. concave");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__G3DLN_TXTRUcLcLEZChecked),-1,-1,2,"fZOrdering=",0,"increasing or decreasing");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSplitConcave=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__G3D() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTAxis3D(void) {
   /* TAxis3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TAxis3D));
   G__memfunc_setup("AxisChoice",992,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "C - 'Option_t' 10 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Build",496,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'TObject' - 1 - hnew", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitSet",704,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SwitchZoom",1047,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAxis3D",608,G__G__G3D_116_0_6, 105, G__get_linked_tagnum(&G__G__G3DLN_TAxis3D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAxis3D",608,G__G__G3D_116_0_7, 105, G__get_linked_tagnum(&G__G__G3DLN_TAxis3D), -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TAxis3D",608,G__G__G3D_116_0_8, 105, G__get_linked_tagnum(&G__G__G3DLN_TAxis3D), -1, 0, 1, 1, 1, 0, "u 'TAxis3D' - 11 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StickyZoom",1052,G__G__G3D_116_0_12, 103, -1, G__defined_typename("Bool_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zoom",421,G__G__G3D_116_0_13, 103, -1, G__defined_typename("Bool_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNdivisions",1350,G__G__G3D_116_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"X\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAxisColor",1204,G__G__G3D_116_0_15, 115, -1, G__defined_typename("Color_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"X\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabelColor",1279,G__G__G3D_116_0_16, 115, -1, G__defined_typename("Color_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"X\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabelFont",1175,G__G__G3D_116_0_17, 115, -1, G__defined_typename("Style_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"X\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabelOffset",1383,G__G__G3D_116_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"X\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabelSize",1179,G__G__G3D_116_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"X\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPadAxis",970,G__G__G3D_116_0_20, 85, G__get_linked_tagnum(&G__G__G3DLN_TAxis3D), -1, 0, 1, 3, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) G__func2void( (TAxis3D* (*)(TVirtualPad*))(&TAxis3D::GetPadAxis) ), 0);
   G__memfunc_setup("GetTitleOffset",1417,G__G__G3D_116_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"X\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTickLength",1293,G__G__G3D_116_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"X\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCenter",897,G__G__G3D_116_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Axis_t' 0 - center", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLowEdge",967,G__G__G3D_116_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Axis_t' 0 - edge", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetObjectInfo",1283,(G__InterfaceMethod) NULL,67, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOption",921,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXaxis",813,G__G__G3D_116_0_27, 85, G__get_linked_tagnum(&G__G__G3DLN_TAxis), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetYaxis",814,G__G__G3D_116_0_28, 85, G__get_linked_tagnum(&G__G__G3DLN_TAxis), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZaxis",815,G__G__G3D_116_0_29, 85, G__get_linked_tagnum(&G__G__G3DLN_TAxis), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintAxis",913,G__G__G3D_116_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGaxis' - 0 - axis f - 'Float_t' 0 - ang", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PixeltoXYZ",1008,G__G__G3D_116_0_33, 68, -1, G__defined_typename("Double_t"), 0, 4, 3, 1, 0, 
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"D - 'Double_t' 0 - point3D U 'TView' - 0 '0' view", (char*)NULL, (void*) G__func2void( (Double_t* (*)(Double_t, Double_t, Double_t*, TView*))(&TAxis3D::PixeltoXYZ) ), 0);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAxisColor",1216,G__G__G3D_116_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Color_t' 0 '1' color C - 'Option_t' 10 '\"*\"' axis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetAxisRange",1198,G__G__G3D_116_0_36, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - xmin d - 'Double_t' 0 - xmax "
"C - 'Option_t' 10 '\"*\"' axis", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabelColor",1291,G__G__G3D_116_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Color_t' 0 '1' color C - 'Option_t' 10 '\"*\"' axis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetLabelFont",1187,G__G__G3D_116_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Style_t' 0 '62' font C - 'Option_t' 10 '\"*\"' axis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetLabelOffset",1395,G__G__G3D_116_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 '0.005' offset C - 'Option_t' 10 '\"*\"' axis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetLabelSize",1191,G__G__G3D_116_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 '0.02' size C - 'Option_t' 10 '\"*\"' axis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetNdivisions",1362,G__G__G3D_116_0_41, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '510' n C - 'Option_t' 10 '\"*\"' axis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetOption",933,G__G__G3D_116_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\" \"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTickLength",1305,G__G__G3D_116_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 '0.02' length C - 'Option_t' 10 '\"*\"' axis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetTitleOffset",1429,G__G__G3D_116_0_44, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 '1' offset C - 'Option_t' 10 '\"*\"' axis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetXTitle",902,G__G__G3D_116_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetYTitle",903,G__G__G3D_116_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetZTitle",904,G__G__G3D_116_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ToggleRulers",1247,G__G__G3D_116_0_48, 85, G__get_linked_tagnum(&G__G__G3DLN_TAxis3D), -1, 0, 1, 3, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) G__func2void( (TAxis3D* (*)(TVirtualPad*))(&TAxis3D::ToggleRulers) ), 0);
   G__memfunc_setup("ToggleZoom",1031,G__G__G3D_116_0_49, 85, G__get_linked_tagnum(&G__G__G3DLN_TAxis3D), -1, 0, 1, 3, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) G__func2void( (TAxis3D* (*)(TVirtualPad*))(&TAxis3D::ToggleZoom) ), 0);
   G__memfunc_setup("UseCurrentStyle",1569,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_116_0_51, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TAxis3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_116_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAxis3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_116_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TAxis3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_116_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TAxis3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_116_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_116_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAxis3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_116_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAxis3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_116_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TAxis3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_116_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TAxis3D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TAxis3D", 734, G__G__G3D_116_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMaterial(void) {
   /* TMaterial */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TMaterial));
   G__memfunc_setup("TMaterial",899,G__G__G3D_118_0_1, 105, G__get_linked_tagnum(&G__G__G3DLN_TMaterial), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMaterial",899,G__G__G3D_118_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TMaterial), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"f - 'Float_t' 0 - a f - 'Float_t' 0 - z "
"f - 'Float_t' 0 - density", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMaterial",899,G__G__G3D_118_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TMaterial), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"f - 'Float_t' 0 - a f - 'Float_t' 0 - z "
"f - 'Float_t' 0 - density f - 'Float_t' 0 - radl "
"f - 'Float_t' 0 - inter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumber",905,G__G__G3D_118_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetA",353,G__G__G3D_118_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,G__G__G3D_118_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDensity",1024,G__G__G3D_118_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRadLength",1177,G__G__G3D_118_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInterLength",1412,G__G__G3D_118_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_118_0_10, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMaterial::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_118_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMaterial::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_118_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMaterial::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_118_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMaterial::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_118_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_118_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMaterial::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_118_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMaterial::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_118_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMaterial::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_118_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMaterial::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TMaterial", 899, G__G__G3D_118_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TMaterial), -1, 0, 1, 1, 1, 0, "u 'TMaterial' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMaterial", 1025, G__G__G3D_118_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_118_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TMaterial), -1, 1, 1, 1, 1, 0, "u 'TMaterial' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTNode(void) {
   /* TNode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TNode));
   G__memfunc_setup("TNode",474,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 0, 1, 1, 2, 0, "u 'TNode' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 1, 1, 1, 2, 0, "u 'TNode' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TNode",474,G__G__G3D_125_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TNode",474,G__G__G3D_125_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - shapename d - 'Double_t' 0 '0' x "
"d - 'Double_t' 0 '0' y d - 'Double_t' 0 '0' z "
"C - - 10 '\"\"' matrixname C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TNode",474,G__G__G3D_125_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"U 'TShape' - 0 - shape d - 'Double_t' 0 '0' x "
"d - 'Double_t' 0 '0' y d - 'Double_t' 0 '0' z "
"U 'TRotMatrix' - 0 '0' matrix C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BuildListOfNodes",1594,G__G__G3D_125_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cd",199,G__G__G3D_125_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' path", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("DrawOnly",816,G__G__G3D_125_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetListOfNodes",1386,G__G__G3D_125_0_13, 85, G__get_linked_tagnum(&G__G__G3DLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatrix",917,G__G__G3D_125_0_14, 85, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNode",678,G__G__G3D_125_0_15, 85, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetObjectInfo",1283,(G__InterfaceMethod) NULL,67, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOption",921,G__G__G3D_125_0_17, 67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParent",906,G__G__G3D_125_0_18, 85, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetShape",785,G__G__G3D_125_0_19, 85, G__get_linked_tagnum(&G__G__G3DLN_TShape), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVisibility",1352,G__G__G3D_125_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__G3D_125_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY",377,G__G__G3D_125_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,G__G__G3D_125_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ImportShapeAttributes",2195,G__G__G3D_125_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Local2Master",1161,G__G__G3D_125_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - local D - 'Double_t' 0 - master", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Local2Master",1161,G__G__G3D_125_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - local F - 'Float_t' 0 - master", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"2\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Master2Local",1161,G__G__G3D_125_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - master D - 'Double_t' 0 - local", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Master2Local",1161,G__G__G3D_125_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - master F - 'Float_t' 0 - local", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RecursiveRemove",1574,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMatrix",929,G__G__G3D_125_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRotMatrix' - 0 '0' matrix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParent",918,G__G__G3D_125_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TNode' - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNameTitle",1199,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__G3D_125_0_37, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '0' x d - 'Double_t' 0 '0' y "
"d - 'Double_t' 0 '0' z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVisibility",1364,G__G__G3D_125_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' vis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Sizeof3D",743,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateMatrix",1240,G__G__G3D_125_0_40, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateTempMatrix",1646,G__G__G3D_125_0_41, 121, -1, -1, 0, 8, 1, 1, 0, 
"D - 'Double_t' 10 - dx1 D - 'Double_t' 10 - rmat1 "
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z D - 'Double_t' 0 - matrix "
"D - 'Double_t' 0 - dxnew D - 'Double_t' 0 - rmatnew", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_125_0_42, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TNode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_125_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TNode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_125_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TNode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_125_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TNode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_125_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_125_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TNode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_125_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TNode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_125_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TNode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_125_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TNode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TNode", 600, G__G__G3D_125_0_54, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTShape(void) {
   /* TShape */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TShape));
   G__memfunc_setup("FillBuffer3D",1112,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 8, 
"u 'TBuffer3D' - 1 - buffer i - 'Int_t' 0 - reqSections", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBasicColor",1281,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShapeDistancetoPrimitive",2488,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - numPoints i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TShape",581,G__G__G3D_126_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TShape), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TShape",581,G__G__G3D_126_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TShape), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TShape",581,G__G__G3D_126_0_6, 105, G__get_linked_tagnum(&G__G__G3DLN_TShape), -1, 0, 1, 1, 1, 0, "u 'TShape' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__G3D_126_0_7, 117, G__get_linked_tagnum(&G__G__G3DLN_TShape), -1, 1, 1, 1, 1, 0, "u 'TShape' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBuffer3D",1009,G__G__G3D_126_0_8, 117, G__get_linked_tagnum(&G__G__G3DLN_TBuffer3D), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - reqSections", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMaterial",1103,G__G__G3D_126_0_9, 85, G__get_linked_tagnum(&G__G__G3DLN_TMaterial), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumber",905,G__G__G3D_126_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVisibility",1352,G__G__G3D_126_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPoints",937,G__G__G3D_126_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVisibility",1364,G__G__G3D_126_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vis", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("TransformPoints",1593,G__G__G3D_126_0_16, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - points h - 'UInt_t' 0 - NbPnts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_126_0_17, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TShape::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_126_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TShape::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_126_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TShape::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_126_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TShape::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_126_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_126_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TShape::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_126_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TShape::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_126_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TShape::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_126_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TShape::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TShape", 707, G__G__G3D_126_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTBRIK(void) {
   /* TBRIK */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TBRIK",380,G__G__G3D_127_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TBRIK), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBRIK",380,G__G__G3D_127_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TBRIK), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy f - 'Float_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBuffer3D",1009,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__G3DLN_TBuffer3D), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - reqSections", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDx",476,G__G__G3D_127_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDy",477,G__G__G3D_127_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDz",478,G__G__G3D_127_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sizeof3D",743,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_127_0_10, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TBRIK::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_127_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBRIK::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_127_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TBRIK::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_127_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TBRIK::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_127_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_127_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBRIK::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_127_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBRIK::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_127_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBRIK::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_127_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBRIK::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TBRIK", 380, G__G__G3D_127_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TBRIK), -1, 0, 1, 1, 1, 0, "u 'TBRIK' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TBRIK", 506, G__G__G3D_127_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_127_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TBRIK), -1, 1, 1, 1, 1, 0, "u 'TBRIK' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTTUBE(void) {
   /* TTUBE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE));
   G__memfunc_setup("TTUBE",388,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__G3DLN_TTUBE), -1, 0, 1, 1, 2, 0, "u 'TTUBE' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__G3DLN_TTUBE), -1, 1, 1, 1, 2, 0, "u 'TTUBE' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTableOfCoSin",1527,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", "Create the table of the fSiTab; fCoTab", (void*) NULL, 1);
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSegsAndPols",1391,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'TBuffer3D' - 1 - buffer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TTUBE",388,G__G__G3D_128_0_6, 105, G__get_linked_tagnum(&G__G__G3DLN_TTUBE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTUBE",388,G__G__G3D_128_0_7, 105, G__get_linked_tagnum(&G__G__G3DLN_TTUBE), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmin "
"f - 'Float_t' 0 - rmax f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 '1' aspect", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTUBE",388,G__G__G3D_128_0_8, 105, G__get_linked_tagnum(&G__G__G3DLN_TTUBE), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmax "
"f - 'Float_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBuffer3D",1009,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__G3DLN_TBuffer3D), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - reqSections", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmin",694,G__G__G3D_128_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmax",696,G__G__G3D_128_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDz",478,G__G__G3D_128_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNdiv",689,G__G__G3D_128_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAspectRatio",1407,G__G__G3D_128_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfDivisions",2038,G__G__G3D_128_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumberOfDivisions",2050,G__G__G3D_128_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ndiv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAspectRatio",1419,G__G__G3D_128_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1' factor", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sizeof3D",743,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_128_0_20, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TTUBE::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_128_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTUBE::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_128_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TTUBE::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_128_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTUBE::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_128_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_128_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTUBE::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_128_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTUBE::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_128_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTUBE::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_128_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTUBE::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TTUBE", 514, G__G__G3D_128_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCONE(void) {
   /* TCONE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TCONE",377,G__G__G3D_129_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TCONE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCONE",377,G__G__G3D_129_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TCONE), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - rmin1 f - 'Float_t' 0 - rmax1 "
"f - 'Float_t' 0 - rmin2 f - 'Float_t' 0 - rmax2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCONE",377,G__G__G3D_129_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TCONE), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - rmax1 f - 'Float_t' 0 '0' rmax2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmin2",744,G__G__G3D_129_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmax2",746,G__G__G3D_129_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_129_0_7, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCONE::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_129_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCONE::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_129_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCONE::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_129_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCONE::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_129_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_129_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCONE::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_129_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCONE::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_129_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCONE::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_129_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCONE::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TCONE", 377, G__G__G3D_129_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TCONE), -1, 0, 1, 1, 1, 0, "u 'TCONE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TCONE", 503, G__G__G3D_129_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTTUBS(void) {
   /* TTUBS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS));
   G__memfunc_setup("MakeTableOfCoSin",1527,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", "Create the table of the fSiTab; fCoTab", (void*) NULL, 1);
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TTUBS",402,G__G__G3D_130_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TTUBS), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTUBS",402,G__G__G3D_130_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TTUBS), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmin "
"f - 'Float_t' 0 - rmax f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - phi1 f - 'Float_t' 0 - phi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTUBS",402,G__G__G3D_130_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TTUBS), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmax "
"f - 'Float_t' 0 - dz f - 'Float_t' 0 - phi1 "
"f - 'Float_t' 0 - phi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBuffer3D",1009,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__G3DLN_TBuffer3D), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - reqSections", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi1",626,G__G__G3D_130_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi2",627,G__G__G3D_130_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sizeof3D",743,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_130_0_11, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TTUBS::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_130_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTUBS::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_130_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TTUBS::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_130_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTUBS::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_130_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_130_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTUBS::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_130_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTUBS::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_130_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTUBS::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_130_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTUBS::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TTUBS", 402, G__G__G3D_130_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TTUBS), -1, 0, 1, 1, 1, 0, "u 'TTUBS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TTUBS", 528, G__G__G3D_130_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCONS(void) {
   /* TCONS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TCONS",391,G__G__G3D_131_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TCONS), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCONS",391,G__G__G3D_131_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TCONS), -1, 0, 10, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - rmin1 f - 'Float_t' 0 - rmax1 "
"f - 'Float_t' 0 - rmin2 f - 'Float_t' 0 - rmax2 "
"f - 'Float_t' 0 - phi1 f - 'Float_t' 0 - phi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCONS",391,G__G__G3D_131_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TCONS), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmax1 "
"f - 'Float_t' 0 - dz f - 'Float_t' 0 - phi1 "
"f - 'Float_t' 0 - phi2 f - 'Float_t' 0 '0' rmax2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmin2",744,G__G__G3D_131_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmax2",746,G__G__G3D_131_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_131_0_7, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCONS::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_131_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCONS::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_131_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCONS::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_131_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCONS::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_131_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_131_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCONS::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_131_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCONS::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_131_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCONS::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_131_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCONS::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TCONS", 391, G__G__G3D_131_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TCONS), -1, 0, 1, 1, 1, 0, "u 'TCONS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TCONS", 517, G__G__G3D_131_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCTUB(void) {
   /* TCTUB */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TCTUB",386,G__G__G3D_132_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TCTUB), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCTUB",386,G__G__G3D_132_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TCTUB), -1, 0, 14, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmin "
"f - 'Float_t' 0 - rmax f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - phi1 f - 'Float_t' 0 - phi2 "
"f - 'Float_t' 0 - coslx f - 'Float_t' 0 - cosly "
"f - 'Float_t' 0 - coslz f - 'Float_t' 0 - coshx "
"f - 'Float_t' 0 - coshy f - 'Float_t' 0 - coshz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCTUB",386,G__G__G3D_132_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TCTUB), -1, 0, 10, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmin "
"f - 'Float_t' 0 - rmax f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - phi1 f - 'Float_t' 0 - phi2 "
"F - 'Float_t' 0 - lowNormal F - 'Float_t' 0 - highNormal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_132_0_5, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCTUB::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_132_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCTUB::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_132_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCTUB::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_132_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCTUB::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_132_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_132_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCTUB::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_132_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCTUB::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_132_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCTUB::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_132_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCTUB::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TCTUB", 386, G__G__G3D_132_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TCTUB), -1, 0, 1, 1, 1, 0, "u 'TCTUB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TCTUB", 512, G__G__G3D_132_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTELTU(void) {
   /* TELTU */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU));
   G__memfunc_setup("TELTU",398,G__G__G3D_133_0_1, 105, G__get_linked_tagnum(&G__G__G3DLN_TELTU), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TELTU",398,G__G__G3D_133_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TELTU), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rx "
"f - 'Float_t' 0 - ry f - 'Float_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_133_0_3, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TELTU::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_133_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TELTU::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_133_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TELTU::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_133_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TELTU::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_133_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_133_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TELTU::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_133_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TELTU::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_133_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TELTU::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_133_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TELTU::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TELTU", 398, G__G__G3D_133_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TELTU), -1, 0, 1, 1, 1, 0, "u 'TELTU' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TELTU", 524, G__G__G3D_133_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRotMatrix(void) {
   /* TRotMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix));
   G__memfunc_setup("SetReflection",1335,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "Set the \"reflection\" flag if det < 0", (void*) NULL, 1);
   G__memfunc_setup("TRotMatrix",1022,G__G__G3D_145_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TRotMatrix",1022,G__G__G3D_145_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"D - 'Double_t' 0 - matrix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TRotMatrix",1022,G__G__G3D_145_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"d - 'Double_t' 0 - theta d - 'Double_t' 0 - phi "
"d - 'Double_t' 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TRotMatrix",1022,G__G__G3D_145_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"d - 'Double_t' 0 - theta1 d - 'Double_t' 0 - phi1 "
"d - 'Double_t' 0 - theta2 d - 'Double_t' 0 - phi2 "
"d - 'Double_t' 0 - theta3 d - 'Double_t' 0 - phi3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Determinant",1147,G__G__G3D_145_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "returns the determinant of this matrix", (void*) NULL, 1);
   G__memfunc_setup("GetMatrix",917,G__G__G3D_145_0_7, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumber",905,G__G__G3D_145_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,G__G__G3D_145_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTheta",790,G__G__G3D_145_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi",577,G__G__G3D_145_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPsi",588,G__G__G3D_145_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGLMatrix",1064,G__G__G3D_145_0_13, 68, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - rGLMatrix", "Convert this matrix to the OpenGL [4x4]", (void*) NULL, 1);
   G__memfunc_setup("IsReflection",1223,G__G__G3D_145_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "Return kTRUE if this matrix defines the reflection", (void*) NULL, 1);
   G__memfunc_setup("SetAngles",902,G__G__G3D_145_0_15, 68, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 1, 
"d - 'Double_t' 0 - theta1 d - 'Double_t' 0 - phi1 "
"d - 'Double_t' 0 - theta2 d - 'Double_t' 0 - phi2 "
"d - 'Double_t' 0 - theta3 d - 'Double_t' 0 - phi3", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMatrix",929,G__G__G3D_145_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - matrix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_145_0_18, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TRotMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_145_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRotMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_145_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TRotMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_145_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TRotMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_145_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_145_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRotMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_145_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRotMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_145_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TRotMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_145_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TRotMatrix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TRotMatrix", 1022, G__G__G3D_145_0_30, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 1, 1, 1, 0, "u 'TRotMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TRotMatrix", 1148, G__G__G3D_145_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_145_0_32, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 1, 1, 1, 1, 0, "u 'TRotMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeometry(void) {
   /* TGeometry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TGeometry));
   G__memfunc_setup("TGeometry",928,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__G3DLN_TGeometry), -1, 0, 1, 1, 2, 0, "u 'TGeometry' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__G3DLN_TGeometry), -1, 1, 1, 1, 2, 0, "u 'TGeometry' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeometry",928,G__G__G3D_146_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TGeometry), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGeometry",928,G__G__G3D_146_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TGeometry), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cd",199,G__G__G3D_146_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TObject), -1, 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBomb",672,G__G__G3D_146_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeomLevel",896,G__G__G3D_146_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfShapes",1493,G__G__G3D_146_0_12, 85, G__get_linked_tagnum(&G__G__G3DLN_THashList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfNodes",1386,G__G__G3D_146_0_13, 85, G__get_linked_tagnum(&G__G__G3DLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfMaterials",1811,G__G__G3D_146_0_14, 85, G__get_linked_tagnum(&G__G__G3DLN_THashList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfMatrices",1705,G__G__G3D_146_0_15, 85, G__get_linked_tagnum(&G__G__G3DLN_THashList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentNode",1417,G__G__G3D_146_0_16, 85, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaterial",1103,G__G__G3D_146_0_17, 85, G__get_linked_tagnum(&G__G__G3DLN_TMaterial), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaterialByNumber",1907,G__G__G3D_146_0_18, 85, G__get_linked_tagnum(&G__G__G3DLN_TMaterial), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNode",678,G__G__G3D_146_0_19, 85, G__get_linked_tagnum(&G__G__G3DLN_TNode), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShape",785,G__G__G3D_146_0_20, 85, G__get_linked_tagnum(&G__G__G3DLN_TShape), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShapeByNumber",1589,G__G__G3D_146_0_21, 85, G__get_linked_tagnum(&G__G__G3DLN_TShape), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRotMatrix",1226,G__G__G3D_146_0_22, 85, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRotMatrixByNumber",2030,G__G__G3D_146_0_23, 85, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentMatrix",1656,G__G__G3D_146_0_24, 85, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentPosition",1880,G__G__G3D_146_0_25, 85, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 3, 1, 1, 8, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - y "
"D - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentPosition",1880,G__G__G3D_146_0_26, 85, G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix), -1, 0, 3, 1, 1, 8, 
"F - 'Float_t' 0 - x F - 'Float_t' 0 - y "
"F - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentReflection",2062,G__G__G3D_146_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Local2Master",1161,G__G__G3D_146_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - local D - 'Double_t' 0 - master", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Local2Master",1161,G__G__G3D_146_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - local F - 'Float_t' 0 - master", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"rsn2\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Master2Local",1161,G__G__G3D_146_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - master D - 'Double_t' 0 - local", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Master2Local",1161,G__G__G3D_146_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - master F - 'Float_t' 0 - local", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Node",390,G__G__G3D_146_0_34, 121, -1, -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - shapename d - 'Double_t' 0 '0' x "
"d - 'Double_t' 0 '0' y d - 'Double_t' 0 '0' z "
"C - - 10 '\"\"' matrixname C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PushLevel",920,G__G__G3D_146_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PopLevel",807,G__G__G3D_146_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RecursiveRemove",1574,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBomb",684,G__G__G3D_146_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.4' bomb", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCurrentNode",1429,G__G__G3D_146_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TNode' - 0 - node", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGeomLevel",1196,G__G__G3D_146_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMatrix",929,G__G__G3D_146_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRotMatrix' - 0 '0' matrix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__G3D_146_0_42, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TRotMatrix' - 0 - matrix d - 'Double_t' 0 '0' x "
"d - 'Double_t' 0 '0' y d - 'Double_t' 0 '0' z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__G3D_146_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TRotMatrix' - 0 - matrix f - 'Float_t' 0 - x "
"f - 'Float_t' 0 - y f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__G3D_146_0_44, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__G3D_146_0_45, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateMatrix",1240,G__G__G3D_146_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TNode' - 0 - node", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateTempMatrix",1646,G__G__G3D_146_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 '0' x d - 'Double_t' 0 '0' y "
"d - 'Double_t' 0 '0' z U 'TRotMatrix' - 0 '0' matrix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateTempMatrix",1646,G__G__G3D_146_0_48, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z D - 'Double_t' 0 - matrix "
"g - 'Bool_t' 0 'kFALSE' isReflection", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Get",288,G__G__G3D_146_0_49, 85, G__get_linked_tagnum(&G__G__G3DLN_TObjArray), -1, 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(const char*))(&TGeometry::Get) ), 0);
   G__memfunc_setup("UpdateTempMatrix",1646,G__G__G3D_146_0_50, 121, -1, -1, 0, 8, 3, 1, 0, 
"D - 'Double_t' 0 - dx1 D - 'Double_t' 0 - rmat1 "
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z D - 'Double_t' 0 - matrix "
"D - 'Double_t' 0 - dxnew D - 'Double_t' 0 - rmatnew", (char*)NULL, (void*) G__func2void( (void (*)(Double_t*, Double_t*, Double_t, Double_t, Double_t, Double_t*, Double_t*, Double_t*))(&TGeometry::UpdateTempMatrix) ), 0);
   G__memfunc_setup("Class",502,G__G__G3D_146_0_51, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGeometry::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_146_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeometry::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_146_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGeometry::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_146_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGeometry::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_146_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_146_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeometry::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_146_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeometry::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_146_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGeometry::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_146_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGeometry::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGeometry", 1054, G__G__G3D_146_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGTRA(void) {
   /* TGTRA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TGTRA",386,G__G__G3D_147_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TGTRA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGTRA",386,G__G__G3D_147_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TGTRA), -1, 0, 15, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi "
"f - 'Float_t' 0 - twist f - 'Float_t' 0 - h1 "
"f - 'Float_t' 0 - bl1 f - 'Float_t' 0 - tl1 "
"f - 'Float_t' 0 - alpha1 f - 'Float_t' 0 - h2 "
"f - 'Float_t' 0 - bl2 f - 'Float_t' 0 - tl2 "
"f - 'Float_t' 0 - alpha2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTwist",827,G__G__G3D_147_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetH1",409,G__G__G3D_147_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBl1",511,G__G__G3D_147_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTl1",529,G__G__G3D_147_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlpha1",823,G__G__G3D_147_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetH2",410,G__G__G3D_147_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBl2",512,G__G__G3D_147_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTl2",530,G__G__G3D_147_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlpha2",824,G__G__G3D_147_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_147_0_13, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGTRA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_147_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGTRA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_147_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGTRA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_147_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGTRA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_147_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_147_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGTRA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_147_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGTRA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_147_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGTRA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_147_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGTRA::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGTRA", 386, G__G__G3D_147_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TGTRA), -1, 0, 1, 1, 1, 0, "u 'TGTRA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGTRA", 512, G__G__G3D_147_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_147_0_27, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TGTRA), -1, 1, 1, 1, 1, 0, "u 'TGTRA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPolyLine3D(void) {
   /* TPolyLine3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D));
   G__memfunc_setup("TPolyLine3D",1015,G__G__G3D_148_0_1, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyLine3D",1015,G__G__G3D_148_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyLine3D",1015,G__G__G3D_148_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - p "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyLine3D",1015,G__G__G3D_148_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - p "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyLine3D",1015,G__G__G3D_148_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - x "
"F - 'Float_t' 0 - y F - 'Float_t' 0 - z "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyLine3D",1015,G__G__G3D_148_0_6, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - x "
"D - 'Double_t' 0 - y D - 'Double_t' 0 - z "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyLine3D",1015,G__G__G3D_148_0_7, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D), -1, 0, 1, 1, 1, 0, "u 'TPolyLine3D' - 11 - polylin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__G3D_148_0_8, 117, G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D), -1, 1, 1, 1, 1, 0, "u 'TPolyLine3D' - 11 - polylin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - polyline", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPolyLine",1210,G__G__G3D_148_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - p "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLastPoint",1214,G__G__G3D_148_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__G__G3D_148_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetP",368,G__G__G3D_148_0_16, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOption",921,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Merge",496,G__G__G3D_148_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - list", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNextPoint",1237,G__G__G3D_148_0_23, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetOption",933,G__G__G3D_148_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPoint",822,G__G__G3D_148_0_25, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - point d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y d - 'Double_t' 0 - z", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetPolyLine",1112,G__G__G3D_148_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPolyLine",1112,G__G__G3D_148_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - p "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPolyLine",1112,G__G__G3D_148_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - p "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Size",411,G__G__G3D_148_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawOutlineCube",1517,G__G__G3D_148_0_30, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'TList' - 0 - outline D - 'Double_t' 0 - rmin "
"D - 'Double_t' 0 - rmax", (char*)NULL, (void*) G__func2void( (void (*)(TList*, Double_t*, Double_t*))(&TPolyLine3D::DrawOutlineCube) ), 0);
   G__memfunc_setup("Class",502,G__G__G3D_148_0_31, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPolyLine3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_148_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPolyLine3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_148_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPolyLine3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_148_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPolyLine3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_148_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_148_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPolyLine3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_148_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPolyLine3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_148_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPolyLine3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_148_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPolyLine3D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TPolyLine3D", 1141, G__G__G3D_148_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTHelix(void) {
   /* THelix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_THelix));
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__G3DLN_THelix), -1, 1, 1, 1, 2, 0, "u 'THelix' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRotMatrix",1238,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "Set rotation matrix", (void*) NULL, 0);
   G__memfunc_setup("FindClosestPhase",1615,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - phi0 d - 'Double_t' 0 - cosine", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("THelix",590,G__G__G3D_151_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_THelix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("THelix",590,G__G__G3D_151_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_THelix), -1, 0, 7, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z d - 'Double_t' 0 - vx "
"d - 'Double_t' 0 - vy d - 'Double_t' 0 - vz "
"d - 'Double_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("THelix",590,G__G__G3D_151_0_6, 105, G__get_linked_tagnum(&G__G__G3DLN_THelix), -1, 0, 6, 1, 1, 0, 
"D - 'Double_t' 0 - xyz D - 'Double_t' 0 - v "
"d - 'Double_t' 0 - w D - 'Double_t' 0 '0' range "
"i 'EHelixRangeType' - 0 'kHelixZ' rtype D - 'Double_t' 0 '0' axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("THelix",590,G__G__G3D_151_0_7, 105, G__get_linked_tagnum(&G__G__G3DLN_THelix), -1, 0, 1, 1, 1, 0, "u 'THelix' - 11 - helix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - helix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOption",921,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOption",933,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAxis",705,G__G__G3D_151_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - axis", "Define new axis", (void*) NULL, 1);
   G__memfunc_setup("SetAxis",705,G__G__G3D_151_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRange",793,G__G__G3D_151_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - range i 'EHelixRangeType' - 0 'kHelixZ' rtype", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRange",793,G__G__G3D_151_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - r1 d - 'Double_t' 0 - r2 "
"i 'EHelixRangeType' - 0 'kHelixZ' rtype", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHelix",806,G__G__G3D_151_0_18, 121, -1, -1, 0, 6, 1, 1, 0, 
"D - 'Double_t' 0 - xyz D - 'Double_t' 0 - v "
"d - 'Double_t' 0 - w D - 'Double_t' 0 '0' range "
"i 'EHelixRangeType' - 0 'kUnchanged' type D - 'Double_t' 0 '0' axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_151_0_19, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&THelix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_151_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THelix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_151_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&THelix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_151_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&THelix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_151_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_151_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THelix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_151_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THelix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_151_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THelix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_151_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THelix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~THelix", 716, G__G__G3D_151_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTHYPE(void) {
   /* THYPE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE));
   G__memfunc_setup("THYPE",394,G__G__G3D_152_0_1, 105, G__get_linked_tagnum(&G__G__G3DLN_THYPE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("THYPE",394,G__G__G3D_152_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_THYPE), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmin "
"f - 'Float_t' 0 - rmax f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__G__G3D_152_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_152_0_4, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&THYPE::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_152_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THYPE::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_152_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&THYPE::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_152_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&THYPE::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_152_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_152_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THYPE::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_152_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THYPE::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_152_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THYPE::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_152_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THYPE::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("THYPE", 394, G__G__G3D_152_0_16, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_THYPE), -1, 0, 1, 1, 1, 0, "u 'THYPE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~THYPE", 520, G__G__G3D_152_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMarker3DBox(void) {
   /* TMarker3DBox */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox));
   G__memfunc_setup("TMarker3DBox",1110,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox), -1, 0, 1, 1, 2, 0, "u 'TMarker3DBox' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox), -1, 1, 1, 1, 2, 0, "u 'TMarker3DBox' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMarker3DBox",1110,G__G__G3D_154_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMarker3DBox",1110,G__G__G3D_154_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox), -1, 0, 8, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRefObject",1172,G__G__G3D_154_0_7, 85, G__get_linked_tagnum(&G__G__G3DLN_TObject), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDirection",1217,G__G__G3D_154_0_8, 121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - theta f - 'Float_t' 1 - phi", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPosition",1141,G__G__G3D_154_0_9, 121, -1, -1, 0, 3, 1, 1, 8, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSize",699,G__G__G3D_154_0_10, 121, -1, -1, 0, 3, 1, 1, 8, 
"f - 'Float_t' 1 - dx f - 'Float_t' 1 - dy "
"f - 'Float_t' 1 - dz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintH3",631,G__G__G3D_154_0_12, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - h C - 'Option_t' 10 - option", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, Option_t*))(&TMarker3DBox::PaintH3) ), 0);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPoints",937,G__G__G3D_154_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - buff", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDirection",1229,G__G__G3D_154_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__G3D_154_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSize",711,G__G__G3D_154_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - dx f - 'Float_t' 0 - dy "
"f - 'Float_t' 0 - dz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRefObject",1184,G__G__G3D_154_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 '0' obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_154_0_19, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMarker3DBox::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_154_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMarker3DBox::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_154_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMarker3DBox::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_154_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMarker3DBox::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_154_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_154_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMarker3DBox::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_154_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMarker3DBox::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_154_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMarker3DBox::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_154_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMarker3DBox::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TMarker3DBox", 1236, G__G__G3D_154_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMixture(void) {
   /* TMixture */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TMixture));
   G__memfunc_setup("TMixture",834,G__G__G3D_156_0_1, 105, G__get_linked_tagnum(&G__G__G3DLN_TMixture), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMixture",834,G__G__G3D_156_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TMixture), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - 'Int_t' 0 - nmixt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineElement",1301,G__G__G3D_156_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n f - 'Float_t' 0 - a "
"f - 'Float_t' 0 - z f - 'Float_t' 0 - w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNmixt",816,G__G__G3D_156_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmixt",803,G__G__G3D_156_0_5, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmixt",828,G__G__G3D_156_0_6, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWmixt",825,G__G__G3D_156_0_7, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_156_0_8, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMixture::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_156_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMixture::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_156_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMixture::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_156_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMixture::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_156_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_156_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMixture::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_156_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMixture::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_156_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMixture::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_156_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMixture::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TMixture", 834, G__G__G3D_156_0_20, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TMixture), -1, 0, 1, 1, 1, 0, "u 'TMixture' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMixture", 960, G__G__G3D_156_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_156_0_22, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TMixture), -1, 1, 1, 1, 1, 0, "u 'TMixture' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTNodeDiv(void) {
   /* TNodeDiv */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv));
   G__memfunc_setup("TNodeDiv",765,G__G__G3D_158_0_1, 105, G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TNodeDiv",765,G__G__G3D_158_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - shapename i - 'Int_t' 0 - ndiv "
"i - 'Int_t' 0 - axis C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TNodeDiv",765,G__G__G3D_158_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"U 'TShape' - 0 - shape i - 'Int_t' 0 - ndiv "
"i - 'Int_t' 0 - axis C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_158_0_6, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TNodeDiv::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_158_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TNodeDiv::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_158_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TNodeDiv::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_158_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TNodeDiv::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_158_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_158_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TNodeDiv::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_158_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TNodeDiv::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_158_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TNodeDiv::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_158_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TNodeDiv::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TNodeDiv", 765, G__G__G3D_158_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv), -1, 0, 1, 1, 1, 0, "u 'TNodeDiv' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TNodeDiv", 891, G__G__G3D_158_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPARA(void) {
   /* TPARA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TPARA",376,G__G__G3D_159_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TPARA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPARA",376,G__G__G3D_159_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TPARA), -1, 0, 9, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - alpha f - 'Float_t' 0 - theta "
"f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlpha",774,G__G__G3D_159_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTheta",790,G__G__G3D_159_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi",577,G__G__G3D_159_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_159_0_7, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPARA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_159_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPARA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_159_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPARA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_159_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPARA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_159_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_159_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPARA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_159_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPARA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_159_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPARA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_159_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPARA::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPARA", 376, G__G__G3D_159_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TPARA), -1, 0, 1, 1, 1, 0, "u 'TPARA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPARA", 502, G__G__G3D_159_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_159_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TPARA), -1, 1, 1, 1, 1, 0, "u 'TPARA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPCON(void) {
   /* TPCON */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON));
   G__memfunc_setup("TPCON",388,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__G3DLN_TPCON), -1, 0, 1, 1, 2, 0, "u 'TPCON' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__G3DLN_TPCON), -1, 1, 1, 1, 2, 0, "u 'TPCON' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTableOfCoSin",1527,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", "Create the table of the fSiTab; fCoTab", (void*) NULL, 1);
   G__memfunc_setup("FillTableOfCoSin",1536,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"d - 'Double_t' 0 - phi d - 'Double_t' 0 - angstep "
"i - 'Int_t' 0 - n", "Fill the table of cosin", (void*) NULL, 1);
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSegsAndPols",1391,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "u 'TBuffer3D' - 1 - buffer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TPCON",388,G__G__G3D_160_0_7, 105, G__get_linked_tagnum(&G__G__G3DLN_TPCON), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPCON",388,G__G__G3D_160_0_8, 105, G__get_linked_tagnum(&G__G__G3DLN_TPCON), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - phi1 "
"f - 'Float_t' 0 - dphi1 i - 'Int_t' 0 - nz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineSection",1312,G__G__G3D_160_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - secNum f - 'Float_t' 0 - z "
"f - 'Float_t' 0 - rmin f - 'Float_t' 0 - rmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBuffer3D",1009,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__G3DLN_TBuffer3D), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - reqSections", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfDivisions",2038,G__G__G3D_160_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi1",626,G__G__G3D_160_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDhi1",614,G__G__G3D_160_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNz",488,G__G__G3D_160_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmin",694,G__G__G3D_160_0_16, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmax",696,G__G__G3D_160_0_17, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDz",478,G__G__G3D_160_0_18, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNdiv",689,G__G__G3D_160_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumberOfDivisions",2050,G__G__G3D_160_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sizeof3D",743,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_160_0_22, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPCON::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_160_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPCON::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_160_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPCON::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_160_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPCON::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_160_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_160_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPCON::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_160_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPCON::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_160_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPCON::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_160_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPCON::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TPCON", 514, G__G__G3D_160_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPGON(void) {
   /* TPGON */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON));
   G__memfunc_setup("FillTableOfCoSin",1536,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"d - 'Double_t' 0 - phi d - 'Double_t' 0 - angstep "
"i - 'Int_t' 0 - n", "Fill the table of cosin", (void*) NULL, 1);
   G__memfunc_setup("TPGON",392,G__G__G3D_161_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TPGON), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPGON",392,G__G__G3D_161_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TPGON), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - phi1 "
"f - 'Float_t' 0 - dphi1 i - 'Int_t' 0 - npdv "
"i - 'Int_t' 0 - nz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_161_0_4, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPGON::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_161_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPGON::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_161_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPGON::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_161_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPGON::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_161_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_161_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPGON::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_161_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPGON::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_161_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPGON::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_161_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPGON::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPGON", 392, G__G__G3D_161_0_16, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TPGON), -1, 0, 1, 1, 1, 0, "u 'TPGON' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPGON", 518, G__G__G3D_161_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPoints3DABC(void) {
   /* TPoints3DABC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TPoints3DABC));
   G__memfunc_setup("DistancetoLine",1430,G__G__G3D_162_0_2, 105, -1, G__defined_typename("Int_t"), 0, 7, 3, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py "
"f - 'Float_t' 0 - x1 f - 'Float_t' 0 - y1 "
"f - 'Float_t' 0 - x2 f - 'Float_t' 0 - y2 "
"i - 'Int_t' 0 '1' lineWidth", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t, Float_t, Float_t, Float_t, Float_t, Int_t))(&TPoints3DABC::DistancetoLine) ), 0);
   G__memfunc_setup("Add",265,G__G__G3D_162_0_3, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddLast",669,G__G__G3D_162_0_4, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLastPosition",1545,G__G__G3D_162_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetN",366,G__G__G3D_162_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetP",368,G__G__G3D_162_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX",376,G__G__G3D_162_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetY",377,G__G__G3D_162_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZ",378,G__G__G3D_162_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetXYZ",555,G__G__G3D_162_0_12, 70, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"F - 'Float_t' 0 - xyz i - 'Int_t' 0 - idx "
"i - 'Int_t' 0 '1' num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXYZ",555,G__G__G3D_162_0_13, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetOption",921,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PaintPoints",1145,G__G__G3D_162_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - p "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetLastPosition",1557,G__G__G3D_162_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetNextPoint",1237,G__G__G3D_162_0_17, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOption",933,G__G__G3D_162_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetPoint",822,G__G__G3D_162_0_19, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - point f - 'Float_t' 0 - x "
"f - 'Float_t' 0 - y f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetPoints",937,G__G__G3D_162_0_20, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 '0' p "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Size",411,G__G__G3D_162_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__G3D_162_0_22, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPoints3DABC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_162_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPoints3DABC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_162_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPoints3DABC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_162_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPoints3DABC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_162_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_162_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPoints3DABC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_162_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPoints3DABC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_162_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPoints3DABC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_162_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPoints3DABC::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TPoints3DABC", 1164, G__G__G3D_162_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_162_0_35, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TPoints3DABC), -1, 1, 1, 1, 1, 0, "u 'TPoints3DABC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPolyMarker3D(void) {
   /* TPolyMarker3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D));
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D), -1, 1, 1, 1, 2, 0, "u 'TPolyMarker3D' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyMarker3D",1233,G__G__G3D_165_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyMarker3D",1233,G__G__G3D_165_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n s - 'Marker_t' 0 '1' marker "
"C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyMarker3D",1233,G__G__G3D_165_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - p "
"s - 'Marker_t' 0 '1' marker C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyMarker3D",1233,G__G__G3D_165_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - p "
"s - 'Marker_t' 0 '1' marker C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPolyMarker3D",1233,G__G__G3D_165_0_6, 105, G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D), -1, 0, 1, 1, 1, 0, "u 'TPolyMarker3D' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - polymarker", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPolyMarker",1428,G__G__G3D_165_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - p "
"s - 'Marker_t' 0 - marker C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLastPoint",1214,G__G__G3D_165_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetN",366,G__G__G3D_165_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetP",368,G__G__G3D_165_0_15, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPoint",810,G__G__G3D_165_0_16, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - n f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPoint",810,G__G__G3D_165_0_17, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - n d - 'Double_t' 1 - x "
"d - 'Double_t' 1 - y d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOption",921,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Merge",496,G__G__G3D_165_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - list", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetName",685,G__G__G3D_165_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetPoint",822,G__G__G3D_165_0_25, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y d - 'Double_t' 0 - z", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetPolyMarker",1330,G__G__G3D_165_0_26, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - p "
"s - 'Marker_t' 0 - marker C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPolyMarker",1330,G__G__G3D_165_0_27, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - p "
"s - 'Marker_t' 0 - marker C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNextPoint",1237,G__G__G3D_165_0_28, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Size",411,G__G__G3D_165_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintH3",631,G__G__G3D_165_0_30, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - h C - 'Option_t' 10 - option", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, Option_t*))(&TPolyMarker3D::PaintH3) ), 0);
   G__memfunc_setup("Class",502,G__G__G3D_165_0_31, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPolyMarker3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_165_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPolyMarker3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_165_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPolyMarker3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_165_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPolyMarker3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_165_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_165_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPolyMarker3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_165_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPolyMarker3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_165_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPolyMarker3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_165_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPolyMarker3D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TPolyMarker3D", 1359, G__G__G3D_165_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPointSet3D(void) {
   /* TPointSet3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D));
   G__memfunc_setup("CopyIds",699,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'TPointSet3D' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPointSet3D",1025,G__G__G3D_172_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPointSet3D",1025,G__G__G3D_172_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n s - 'Marker_t' 0 '1' m "
"C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPointSet3D",1025,G__G__G3D_172_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - p "
"s - 'Marker_t' 0 '1' m C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPointSet3D",1025,G__G__G3D_172_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - p "
"s - 'Marker_t' 0 '1' m C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPointSet3D",1025,G__G__G3D_172_0_6, 105, G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D), -1, 0, 1, 1, 1, 0, "u 'TPointSet3D' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__G3D_172_0_7, 117, G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D), -1, 1, 1, 1, 1, 0, "u 'TPointSet3D' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeBBox",1096,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPointId",995,G__G__G3D_172_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPointId",995,G__G__G3D_172_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n U 'TObject' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPointId",983,G__G__G3D_172_0_11, 85, G__get_linked_tagnum(&G__G__G3DLN_TObject), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearIds",775,G__G__G3D_172_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOwnIds",884,G__G__G3D_172_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwnIds",896,G__G__G3D_172_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PointSelected",1331,G__G__G3D_172_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_172_0_16, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPointSet3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_172_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPointSet3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_172_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPointSet3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_172_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPointSet3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_172_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_172_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPointSet3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_172_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPointSet3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_172_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPointSet3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_172_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPointSet3D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TPointSet3D", 1151, G__G__G3D_172_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSPHE(void) {
   /* TSPHE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE));
   G__memfunc_setup("MakeTableOfCoSin",1527,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", "Create the table of the fSiTab; fCoTab", (void*) NULL, 1);
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TSPHE",388,G__G__G3D_173_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TSPHE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSPHE",388,G__G__G3D_173_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TSPHE), -1, 0, 9, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmin "
"f - 'Float_t' 0 - rmax f - 'Float_t' 0 - themin "
"f - 'Float_t' 0 - themax f - 'Float_t' 0 - phimin "
"f - 'Float_t' 0 - phimax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSPHE",388,G__G__G3D_173_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TSPHE), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - rmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBuffer3D",1009,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__G3DLN_TBuffer3D), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - reqSections", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmin",694,G__G__G3D_173_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmax",696,G__G__G3D_173_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetThemin",901,G__G__G3D_173_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetThemax",903,G__G__G3D_173_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhimin",901,G__G__G3D_173_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhimax",903,G__G__G3D_173_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAspectRatio",1407,G__G__G3D_173_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfDivisions",2038,G__G__G3D_173_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAspectRatio",1419,G__G__G3D_173_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.0' factor", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEllipse",1018,G__G__G3D_173_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - factors", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumberOfDivisions",2050,G__G__G3D_173_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sizeof3D",743,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_173_0_20, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSPHE::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_173_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSPHE::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_173_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSPHE::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_173_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSPHE::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_173_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_173_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSPHE::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_173_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSPHE::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_173_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSPHE::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_173_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSPHE::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSPHE", 388, G__G__G3D_173_0_32, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TSPHE), -1, 0, 1, 1, 1, 0, "u 'TSPHE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSPHE", 514, G__G__G3D_173_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_173_0_34, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TSPHE), -1, 1, 1, 1, 1, 0, "u 'TSPHE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTTRAP(void) {
   /* TTRAP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TTRAP",395,G__G__G3D_174_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TTRAP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTRAP",395,G__G__G3D_174_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TTRAP), -1, 0, 14, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dz "
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi "
"f - 'Float_t' 0 - h1 f - 'Float_t' 0 - bl1 "
"f - 'Float_t' 0 - tl1 f - 'Float_t' 0 - alpha1 "
"f - 'Float_t' 0 - h2 f - 'Float_t' 0 - bl2 "
"f - 'Float_t' 0 - tl2 f - 'Float_t' 0 - alpha2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetH1",409,G__G__G3D_174_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBl1",511,G__G__G3D_174_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTl1",529,G__G__G3D_174_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAlpha1",823,G__G__G3D_174_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetH2",410,G__G__G3D_174_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBl2",512,G__G__G3D_174_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTl2",530,G__G__G3D_174_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAlpha2",824,G__G__G3D_174_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_174_0_12, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TTRAP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_174_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRAP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_174_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TTRAP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_174_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTRAP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_174_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_174_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRAP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_174_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTRAP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_174_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRAP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_174_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTRAP::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TTRAP", 395, G__G__G3D_174_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TTRAP), -1, 0, 1, 1, 1, 0, "u 'TTRAP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TTRAP", 521, G__G__G3D_174_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_174_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TTRAP), -1, 1, 1, 1, 1, 0, "u 'TTRAP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTTRD1(void) {
   /* TTRD1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TTRD1",367,G__G__G3D_175_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TTRD1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTRD1",367,G__G__G3D_175_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TTRD1), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dx1 "
"f - 'Float_t' 0 - dx2 f - 'Float_t' 0 - dy "
"f - 'Float_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDx2",526,G__G__G3D_175_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__G3D_175_0_5, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TTRD1::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_175_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRD1::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_175_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TTRD1::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_175_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTRD1::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_175_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_175_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRD1::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_175_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTRD1::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_175_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRD1::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_175_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTRD1::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TTRD1", 367, G__G__G3D_175_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TTRD1), -1, 0, 1, 1, 1, 0, "u 'TTRD1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TTRD1", 493, G__G__G3D_175_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_175_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TTRD1), -1, 1, 1, 1, 1, 0, "u 'TTRD1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTTRD2(void) {
   /* TTRD2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2));
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TTRD2",368,G__G__G3D_176_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TTRD2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTRD2",368,G__G__G3D_176_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TTRD2), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material f - 'Float_t' 0 - dx1 "
"f - 'Float_t' 0 - dx2 f - 'Float_t' 0 - dy1 "
"f - 'Float_t' 0 - dy2 f - 'Float_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDx2",526,G__G__G3D_176_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDy2",527,G__G__G3D_176_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_176_0_6, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TTRD2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_176_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRD2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_176_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TTRD2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_176_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTRD2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_176_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_176_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRD2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_176_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTRD2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_176_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTRD2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_176_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTRD2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TTRD2", 368, G__G__G3D_176_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__G3DLN_TTRD2), -1, 0, 1, 1, 1, 0, "u 'TTRD2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TTRD2", 494, G__G__G3D_176_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__G3D_176_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__G3DLN_TTRD2), -1, 1, 1, 1, 1, 0, "u 'TTRD2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTView3D(void) {
   /* TView3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TView3D));
   G__memfunc_setup("TView3D",614,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__G3DLN_TView3D), -1, 0, 1, 1, 2, 0, "u 'TView3D' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__G3DLN_TView3D), -1, 1, 1, 1, 2, 0, "u 'TView3D' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("ResetView",926,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - longitude d - 'Double_t' 0 - latitude "
"d - 'Double_t' 0 - psi i - 'Int_t' 1 - irep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TView3D",614,G__G__G3D_177_0_4, 105, G__get_linked_tagnum(&G__G__G3DLN_TView3D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TView3D",614,G__G__G3D_177_0_5, 105, G__get_linked_tagnum(&G__G__G3DLN_TView3D), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - system D - 'Double_t' 10 - rmin "
"D - 'Double_t' 10 - rmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AxisVertex",1043,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 0, 
"d - 'Double_t' 0 - ang D - 'Double_t' 0 - av "
"i - 'Int_t' 1 - ix1 i - 'Int_t' 1 - ix2 "
"i - 'Int_t' 1 - iy1 i - 'Int_t' 1 - iy2 "
"i - 'Int_t' 1 - iz1 i - 'Int_t' 1 - iz2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefinePerspectiveView",2160,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineViewDirection",1927,(G__InterfaceMethod) NULL,121, -1, -1, 0, 10, 1, 1, 0, 
"D - 'Double_t' 10 - s D - 'Double_t' 10 - c "
"d - 'Double_t' 0 - cosphi d - 'Double_t' 0 - sinphi "
"d - 'Double_t' 0 - costhe d - 'Double_t' 0 - sinthe "
"d - 'Double_t' 0 - cospsi d - 'Double_t' 0 - sinpsi "
"D - 'Double_t' 0 - tnorm D - 'Double_t' 0 - tback", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawOutlineCube",1517,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TList' - 0 - outline D - 'Double_t' 0 - rmin "
"D - 'Double_t' 0 - rmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteRotateView",1757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindScope",891,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - scale D - 'Double_t' 0 - center "
"i - 'Int_t' 1 - irep", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDistancetoAxis",1731,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - axis i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py d - 'Double_t' 1 - ratio", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDview",799,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDproj",799,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetExtent",920,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAutoRange",1190,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLatitude",1116,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLongitude",1227,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPsi",588,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRange",781,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - min F - 'Float_t' 0 - max", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRange",781,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - min D - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmax",696,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRmin",694,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutline",1024,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TSeqCollection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTback",773,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTN",450,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTnorm",816,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSystem",933,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWindow",920,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - u0 d - 'Double_t' 1 - v0 "
"d - 'Double_t' 1 - du d - 'Double_t' 1 - dv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWindowWidth",1432,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWindowHeight",1521,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNormal",1002,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z d - 'Double_t' 1 - zn", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPhiSectors",1413,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - iopt i - 'Int_t' 1 - kphi "
"D - 'Double_t' 0 - aphi i - 'Int_t' 1 - iphi1 "
"i - 'Int_t' 1 - iphi2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindThetaSectors",1626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - iopt d - 'Double_t' 0 - phi "
"i - 'Int_t' 1 - kth D - 'Double_t' 0 - ath "
"i - 'Int_t' 1 - ith1 i - 'Int_t' 1 - ith2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsClippedNDC",1106,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPerspective",1350,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsViewChanged",1281,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NDCtoWC",594,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - pn F - 'Float_t' 0 - pw", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NDCtoWC",594,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - pn D - 'Double_t' 0 - pw", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NormalWCtoNDC",1211,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - pw F - 'Float_t' 0 - pn", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NormalWCtoNDC",1211,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - pw D - 'Double_t' 0 - pn", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PadRange",770,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - rback", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResizePad",903,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAutoRange",1202,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' autorange", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAxisNDC",918,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"D - 'Double_t' 10 - x1 D - 'Double_t' 10 - x2 "
"D - 'Double_t' 10 - y1 D - 'Double_t' 10 - y2 "
"D - 'Double_t' 10 - z1 D - 'Double_t' 10 - z2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDefaultWindow",1641,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDview",811,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dview", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDproj",811,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dproj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLatitude",1128,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - latitude", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLongitude",1239,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - longitude", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPsi",600,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - psi", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOutlineToCube",1614,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParallel",1113,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetPerspective",1462,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetRange",793,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - min D - 'Double_t' 10 - max", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRange",793,(G__InterfaceMethod) NULL,121, -1, -1, 0, 7, 1, 1, 0, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - y0 "
"d - 'Double_t' 0 - z0 d - 'Double_t' 0 - x1 "
"d - 'Double_t' 0 - y1 d - 'Double_t' 0 - z1 "
"i - 'Int_t' 0 '0' flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSystem",945,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - system", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetView",711,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - longitude d - 'Double_t' 0 - latitude "
"d - 'Double_t' 0 - psi i - 'Int_t' 1 - irep", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetViewChanged",1393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetWindow",932,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - u0 d - 'Double_t' 0 - v0 "
"d - 'Double_t' 0 - du d - 'Double_t' 0 - dv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WCtoNDC",594,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - pw F - 'Float_t' 0 - pn", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WCtoNDC",594,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - pw D - 'Double_t' 0 - pn", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveFocus",919,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 0, 
"D - 'Double_t' 0 - center d - 'Double_t' 0 - dx "
"d - 'Double_t' 0 - dy d - 'Double_t' 0 - dz "
"i - 'Int_t' 0 '10' nsteps d - 'Double_t' 0 '0' dlong "
"d - 'Double_t' 0 '0' dlat d - 'Double_t' 0 '0' dpsi", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveViewCommand",1521,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"c - 'Char_t' 0 - chCode i - 'Int_t' 0 '1' count", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveWindow",1039,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AdjustScales",1222,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 '0' pad", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Centered3DImages",1527,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Centered",810,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("FrontView",932,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Front",521,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ZoomIn",604,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ZoomOut",733,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ZoomView",832,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TVirtualPad' - 0 '0' pad d - 'Double_t' 0 '1.25' zoomFactor", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnzoomView",1059,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TVirtualPad' - 0 '0' pad d - 'Double_t' 0 '1.25' unZoomFactor", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RotateView",1034,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - phi d - 'Double_t' 0 - theta "
"U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SideView",800,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Side",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("TopView",718,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Top",307,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ToggleRulers",1247,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowAxis",822,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ToggleZoom",1031,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ZoomMove",828,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Zoom",421,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("UnZoom",616,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("AdjustPad",896,G__G__G3D_177_0_87, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) G__func2void( (void (*)(TVirtualPad*))(&TView3D::AdjustPad) ), 0);
   G__memfunc_setup("Class",502,G__G__G3D_177_0_88, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TView3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_177_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TView3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_177_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TView3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_177_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TView3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_177_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_177_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TView3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_177_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TView3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_177_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TView3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_177_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TView3D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TView3D", 740, G__G__G3D_177_0_100, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXTRU(void) {
   /* TXTRU */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU));
   G__memfunc_setup("TXTRU",423,G__G__G3D_179_0_1, 105, G__get_linked_tagnum(&G__G__G3DLN_TXTRU), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXTRU",423,G__G__G3D_179_0_2, 105, G__get_linked_tagnum(&G__G__G3DLN_TXTRU), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - material i - 'Int_t' 0 - nyx "
"i - 'Int_t' 0 - nz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXTRU",423,G__G__G3D_179_0_3, 105, G__get_linked_tagnum(&G__G__G3DLN_TXTRU), -1, 0, 1, 1, 1, 0, "u 'TXTRU' - 11 - xtru", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__G3D_179_0_4, 117, G__get_linked_tagnum(&G__G__G3DLN_TXTRU), -1, 1, 1, 1, 1, 0, "u 'TXTRU' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - xtru", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineSection",1312,G__G__G3D_179_0_6, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - secNum f - 'Float_t' 0 - z "
"f - 'Float_t' 0 '1.' scale f - 'Float_t' 0 '0.' x0 "
"f - 'Float_t' 0 '0.' y0", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVertex",1225,G__G__G3D_179_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - pointNum f - 'Float_t' 0 - x "
"f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBuffer3D",1009,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__G3DLN_TBuffer3D), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNxy",607,G__G__G3D_179_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNz",488,G__G__G3D_179_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutlinePointX",1634,G__G__G3D_179_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pointNum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutlinePointY",1635,G__G__G3D_179_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pointNum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSectionX0",1149,G__G__G3D_179_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - secNum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSectionY0",1150,G__G__G3D_179_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - secNum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSectionScale",1501,G__G__G3D_179_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - secNum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSectionZ",1103,G__G__G3D_179_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - secNum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXvtx",730,G__G__G3D_179_0_18, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetYvtx",731,G__G__G3D_179_0_19, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,G__G__G3D_179_0_20, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetScale",776,G__G__G3D_179_0_21, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX0",424,G__G__G3D_179_0_22, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY0",425,G__G__G3D_179_0_23, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sizeof3D",743,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SplitConcavePolygon",1971,G__G__G3D_179_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' split", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TruncateNxy",1157,G__G__G3D_179_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - npts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TruncateNz",1038,G__G__G3D_179_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - npts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckOrdering",1304,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPoints",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "D - 'Double_t' 0 - points", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpPoints",1043,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"i - - 0 - npoints F - - 0 - pointbuff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpSegments",1244,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"i - - 0 - nsegments I - - 0 - segbuff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpPolygons",1265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"i - - 0 - npolygons I - - 0 - polybuff "
"i - - 0 - buffsize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__G3D_179_0_34, 85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TXTRU::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__G3D_179_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXTRU::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__G3D_179_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TXTRU::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__G3D_179_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TXTRU::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__G3DLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__G3D_179_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__G3D_179_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXTRU::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__G3D_179_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXTRU::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__G3D_179_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXTRU::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__G3D_179_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXTRU::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TXTRU", 549, G__G__G3D_179_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__G3D() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)(&gGeometry),85,0,0,G__get_linked_tagnum(&G__G__G3DLN_TGeometry),-1,-1,1,"gGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),-1,-1,1,"kHelixT=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),-1,-1,1,"kHelixX=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),-1,-1,1,"kHelixY=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),-1,-1,1,"kHelixZ=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),-1,-1,1,"kLabX=4",0,(char*)NULL);
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),-1,-1,1,"kLabY=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),-1,-1,1,"kLabZ=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),-1,-1,1,"kUnchanged=7",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__G3D() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__G3D() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__G3DLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_THashList = { "THashList" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TAxis = { "TAxis" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TGaxis = { "TGaxis" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TVirtualPad = { "TVirtualPad" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TView = { "TView" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TAxis3D = { "TAxis3D" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TMaterial = { "TMaterial" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TAtt3D = { "TAtt3D" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TBuffer3D = { "TBuffer3D" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TNode = { "TNode" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TShape = { "TShape" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TBRIK = { "TBRIK" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TTUBE = { "TTUBE" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TCONE = { "TCONE" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TTUBS = { "TTUBS" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TCONS = { "TCONS" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TCTUB = { "TCTUB" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TELTU = { "TELTU" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TSeqCollection = { "TSeqCollection" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__G3DLN_TRotMatrix = { "TRotMatrix" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TGeometry = { "TGeometry" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TGTRA = { "TGTRA" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TPolyLine3D = { "TPolyLine3D" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TRotMatrixcLcLdA = { "TRotMatrix::$" , 101 , -1 };
G__linked_taginfo G__G__G3DLN_EHelixRangeType = { "EHelixRangeType" , 101 , -1 };
G__linked_taginfo G__G__G3DLN_THelix = { "THelix" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_THYPE = { "THYPE" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TMarker3DBox = { "TMarker3DBox" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TMarker3DBoxcLcLdA = { "TMarker3DBox::$" , 101 , -1 };
G__linked_taginfo G__G__G3DLN_TMixture = { "TMixture" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TNodecLcLdA = { "TNode::$" , 101 , -1 };
G__linked_taginfo G__G__G3DLN_TNodeDiv = { "TNodeDiv" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TPARA = { "TPARA" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TPCON = { "TPCON" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TPGON = { "TPGON" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TPoints3DABC = { "TPoints3DABC" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TPolyMarker3D = { "TPolyMarker3D" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TAttBBox = { "TAttBBox" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TPointSet3D = { "TPointSet3D" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TSPHE = { "TSPHE" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TTRAP = { "TTRAP" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TTRD1 = { "TTRD1" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TTRD2 = { "TTRD2" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TView3D = { "TView3D" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TView3DcLcLdA = { "TView3D::$" , 101 , -1 };
G__linked_taginfo G__G__G3DLN_TXTRU = { "TXTRU" , 99 , -1 };
G__linked_taginfo G__G__G3DLN_TXTRUcLcLEXYChecked = { "TXTRU::EXYChecked" , 101 , -1 };
G__linked_taginfo G__G__G3DLN_TXTRUcLcLEZChecked = { "TXTRU::EZChecked" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__G3D() {
  G__G__G3DLN_TClass.tagnum = -1 ;
  G__G__G3DLN_TBuffer.tagnum = -1 ;
  G__G__G3DLN_TMemberInspector.tagnum = -1 ;
  G__G__G3DLN_TObject.tagnum = -1 ;
  G__G__G3DLN_TNamed.tagnum = -1 ;
  G__G__G3DLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__G3DLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__G3DLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__G3DLN_TList.tagnum = -1 ;
  G__G__G3DLN_TBrowser.tagnum = -1 ;
  G__G__G3DLN_TObjArray.tagnum = -1 ;
  G__G__G3DLN_TString.tagnum = -1 ;
  G__G__G3DLN_THashList.tagnum = -1 ;
  G__G__G3DLN_TAxis.tagnum = -1 ;
  G__G__G3DLN_TGaxis.tagnum = -1 ;
  G__G__G3DLN_TVirtualPad.tagnum = -1 ;
  G__G__G3DLN_TView.tagnum = -1 ;
  G__G__G3DLN_TAxis3D.tagnum = -1 ;
  G__G__G3DLN_TAttFill.tagnum = -1 ;
  G__G__G3DLN_TMaterial.tagnum = -1 ;
  G__G__G3DLN_TAttLine.tagnum = -1 ;
  G__G__G3DLN_TAtt3D.tagnum = -1 ;
  G__G__G3DLN_TBuffer3D.tagnum = -1 ;
  G__G__G3DLN_TNode.tagnum = -1 ;
  G__G__G3DLN_TShape.tagnum = -1 ;
  G__G__G3DLN_TBRIK.tagnum = -1 ;
  G__G__G3DLN_TTUBE.tagnum = -1 ;
  G__G__G3DLN_TCONE.tagnum = -1 ;
  G__G__G3DLN_TTUBS.tagnum = -1 ;
  G__G__G3DLN_TCONS.tagnum = -1 ;
  G__G__G3DLN_TCTUB.tagnum = -1 ;
  G__G__G3DLN_TELTU.tagnum = -1 ;
  G__G__G3DLN_TCollection.tagnum = -1 ;
  G__G__G3DLN_TSeqCollection.tagnum = -1 ;
  G__G__G3DLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__G3DLN_TRotMatrix.tagnum = -1 ;
  G__G__G3DLN_TGeometry.tagnum = -1 ;
  G__G__G3DLN_TGTRA.tagnum = -1 ;
  G__G__G3DLN_TPolyLine3D.tagnum = -1 ;
  G__G__G3DLN_TRotMatrixcLcLdA.tagnum = -1 ;
  G__G__G3DLN_EHelixRangeType.tagnum = -1 ;
  G__G__G3DLN_THelix.tagnum = -1 ;
  G__G__G3DLN_THYPE.tagnum = -1 ;
  G__G__G3DLN_TH1.tagnum = -1 ;
  G__G__G3DLN_TMarker3DBox.tagnum = -1 ;
  G__G__G3DLN_TMarker3DBoxcLcLdA.tagnum = -1 ;
  G__G__G3DLN_TMixture.tagnum = -1 ;
  G__G__G3DLN_TNodecLcLdA.tagnum = -1 ;
  G__G__G3DLN_TNodeDiv.tagnum = -1 ;
  G__G__G3DLN_TPARA.tagnum = -1 ;
  G__G__G3DLN_TPCON.tagnum = -1 ;
  G__G__G3DLN_TPGON.tagnum = -1 ;
  G__G__G3DLN_TPoints3DABC.tagnum = -1 ;
  G__G__G3DLN_TAttMarker.tagnum = -1 ;
  G__G__G3DLN_TPolyMarker3D.tagnum = -1 ;
  G__G__G3DLN_TAttBBox.tagnum = -1 ;
  G__G__G3DLN_TRefArray.tagnum = -1 ;
  G__G__G3DLN_TPointSet3D.tagnum = -1 ;
  G__G__G3DLN_TSPHE.tagnum = -1 ;
  G__G__G3DLN_TTRAP.tagnum = -1 ;
  G__G__G3DLN_TTRD1.tagnum = -1 ;
  G__G__G3DLN_TTRD2.tagnum = -1 ;
  G__G__G3DLN_TView3D.tagnum = -1 ;
  G__G__G3DLN_TView3DcLcLdA.tagnum = -1 ;
  G__G__G3DLN_TXTRU.tagnum = -1 ;
  G__G__G3DLN_TXTRUcLcLEXYChecked.tagnum = -1 ;
  G__G__G3DLN_TXTRUcLcLEZChecked.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__G3D() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TList);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TString);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_THashList);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TAxis);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TGaxis);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TVirtualPad);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TView);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TAxis3D),sizeof(TAxis3D),-1,325376,"3-D ruler painting class",G__setup_memvarTAxis3D,G__setup_memfuncTAxis3D);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TAttFill);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TMaterial),sizeof(TMaterial),-1,128256,"Materials used in the Geometry Shapes",G__setup_memvarTMaterial,G__setup_memfuncTMaterial);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TAtt3D);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TBuffer3D);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TNode),sizeof(TNode),-1,130816,"Description of parameters to position a 3-D geometry object",G__setup_memvarTNode,G__setup_memfuncTNode);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TShape),sizeof(TShape),-1,130816,"Basic shape",G__setup_memvarTShape,G__setup_memfuncTShape);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TBRIK),sizeof(TBRIK),-1,324864,"TBRIK shape",G__setup_memvarTBRIK,G__setup_memfuncTBRIK);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBE),sizeof(TTUBE),-1,130816,"TUBE shape",G__setup_memvarTTUBE,G__setup_memfuncTTUBE);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONE),sizeof(TCONE),-1,324864,"CONE shape",G__setup_memvarTCONE,G__setup_memfuncTCONE);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TTUBS),sizeof(TTUBS),-1,324864,"TUBS shape",G__setup_memvarTTUBS,G__setup_memfuncTTUBS);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TCONS),sizeof(TCONS),-1,324864,"CONS shape",G__setup_memvarTCONS,G__setup_memfuncTCONS);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TCTUB),sizeof(TCTUB),-1,128256,"The Cut Tube shape",G__setup_memvarTCTUB,G__setup_memfuncTCTUB);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TELTU),sizeof(TELTU),-1,324864,"ELTU shape",G__setup_memvarTELTU,G__setup_memfuncTELTU);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TCollection);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TSeqCollection);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TRotMatrix),sizeof(TRotMatrix),-1,128256,"Rotation Matrix for 3-D geometry objects",G__setup_memvarTRotMatrix,G__setup_memfuncTRotMatrix);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TGeometry),sizeof(TGeometry),-1,130816,"Structure for Matrices, Shapes and Nodes",G__setup_memvarTGeometry,G__setup_memfuncTGeometry);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TGTRA),sizeof(TGTRA),-1,324864,"GTRA shape",G__setup_memvarTGTRA,G__setup_memfuncTGTRA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyLine3D),sizeof(TPolyLine3D),-1,130816,"A 3-D polyline",G__setup_memvarTPolyLine3D,G__setup_memfuncTPolyLine3D);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TRotMatrixcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_EHelixRangeType),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_THelix),sizeof(THelix),-1,130816,"A Helix drawn as a PolyLine3D",G__setup_memvarTHelix,G__setup_memfuncTHelix);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_THYPE),sizeof(THYPE),-1,324864,"HYPE shape",G__setup_memvarTHYPE,G__setup_memfuncTHYPE);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TH1);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TMarker3DBox),sizeof(TMarker3DBox),-1,130816,"A special 3-D marker designed for event display",G__setup_memvarTMarker3DBox,G__setup_memfuncTMarker3DBox);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TMarker3DBoxcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TMixture),sizeof(TMixture),-1,128256,"Mixtures used in the Geometry Shapes",G__setup_memvarTMixture,G__setup_memfuncTMixture);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TNodecLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TNodeDiv),sizeof(TNodeDiv),-1,324864,"Description of parameters to divide a 3-D geometry object",G__setup_memvarTNodeDiv,G__setup_memfuncTNodeDiv);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TPARA),sizeof(TPARA),-1,324864,"PARA shape",G__setup_memvarTPARA,G__setup_memfuncTPARA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TPCON),sizeof(TPCON),-1,130816,"PCON shape",G__setup_memvarTPCON,G__setup_memfuncTPCON);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TPGON),sizeof(TPGON),-1,324864,"PGON shape",G__setup_memvarTPGON,G__setup_memfuncTPGON);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TPoints3DABC),sizeof(TPoints3DABC),-1,29965,"A 3-D Points",G__setup_memvarTPoints3DABC,G__setup_memfuncTPoints3DABC);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TAttMarker);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TPolyMarker3D),sizeof(TPolyMarker3D),-1,130816,"An array of 3-D points with the same marker",G__setup_memvarTPolyMarker3D,G__setup_memfuncTPolyMarker3D);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TAttBBox);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TRefArray);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TPointSet3D),sizeof(TPointSet3D),-1,130816,"TPolyMarker3D with direct OpenGL rendering.",G__setup_memvarTPointSet3D,G__setup_memfuncTPointSet3D);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TSPHE),sizeof(TSPHE),-1,128256,"SPHE shape",G__setup_memvarTSPHE,G__setup_memfuncTSPHE);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRAP),sizeof(TTRAP),-1,324864,"TRAP shape",G__setup_memvarTTRAP,G__setup_memfuncTTRAP);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD1),sizeof(TTRD1),-1,324864,"TRD1 shape",G__setup_memvarTTRD1,G__setup_memfuncTTRD1);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TTRD2),sizeof(TTRD2),-1,324864,"TRD2 shape",G__setup_memvarTTRD2,G__setup_memfuncTTRD2);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TView3D),sizeof(TView3D),-1,130816,"3-D View",G__setup_memvarTView3D,G__setup_memfuncTView3D);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TView3DcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__G3DLN_TXTRU),sizeof(TXTRU),-1,327424,"TXTRU shape",G__setup_memvarTXTRU,G__setup_memfuncTXTRU);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TXTRUcLcLEXYChecked);
   G__get_linked_tagnum_fwd(&G__G__G3DLN_TXTRUcLcLEZChecked);
}
extern "C" void G__cpp_setupG__G3D(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__G3D()");
  G__set_cpp_environmentG__G3D();
  G__cpp_setup_tagtableG__G3D();

  G__cpp_setup_inheritanceG__G3D();

  G__cpp_setup_typetableG__G3D();

  G__cpp_setup_memvarG__G3D();

  G__cpp_setup_memfuncG__G3D();
  G__cpp_setup_globalG__G3D();
  G__cpp_setup_funcG__G3D();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__G3D();
  return;
}
class G__cpp_setup_initG__G3D {
  public:
    G__cpp_setup_initG__G3D() { G__add_setup_func("G__G3D",(G__incsetup)(&G__cpp_setupG__G3D)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__G3D() { G__remove_setup_func("G__G3D"); }
};
G__cpp_setup_initG__G3D G__cpp_setup_initializerG__G3D;

