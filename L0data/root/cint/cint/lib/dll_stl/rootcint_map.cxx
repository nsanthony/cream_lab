//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:39:29 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "rootcint_map.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void maplEcharmUcOcharmUgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEcharmUcOcharmUgR_Dictionary();
   static void *new_maplEcharmUcOcharmUgR(void *p = 0);
   static void *newArray_maplEcharmUcOcharmUgR(Long_t size, void *p);
   static void delete_maplEcharmUcOcharmUgR(void *p);
   static void deleteArray_maplEcharmUcOcharmUgR(void *p);
   static void destruct_maplEcharmUcOcharmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<char*,char*>*)
   {
      map<char*,char*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<char*,char*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<char*,char*>", -2, "prec_stl/map", 63,
                  typeid(map<char*,char*>), DefineBehavior(ptr, ptr),
                  0, &maplEcharmUcOcharmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<char*,char*>) );
      instance.SetNew(&new_maplEcharmUcOcharmUgR);
      instance.SetNewArray(&newArray_maplEcharmUcOcharmUgR);
      instance.SetDelete(&delete_maplEcharmUcOcharmUgR);
      instance.SetDeleteArray(&deleteArray_maplEcharmUcOcharmUgR);
      instance.SetDestructor(&destruct_maplEcharmUcOcharmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<char*,char*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<char*,char*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEcharmUcOcharmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<char*,char*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEcharmUcOcharmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,char*> : new map<char*,char*>;
   }
   static void *newArray_maplEcharmUcOcharmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,char*>[nElements] : new map<char*,char*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEcharmUcOcharmUgR(void *p) {
      delete ((map<char*,char*>*)p);
   }
   static void deleteArray_maplEcharmUcOcharmUgR(void *p) {
      delete [] ((map<char*,char*>*)p);
   }
   static void destruct_maplEcharmUcOcharmUgR(void *p) {
      typedef map<char*,char*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<char*,char*>

namespace ROOT {
   void maplEcharmUcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEcharmUcOdoublegR_Dictionary();
   static void *new_maplEcharmUcOdoublegR(void *p = 0);
   static void *newArray_maplEcharmUcOdoublegR(Long_t size, void *p);
   static void delete_maplEcharmUcOdoublegR(void *p);
   static void deleteArray_maplEcharmUcOdoublegR(void *p);
   static void destruct_maplEcharmUcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<char*,double>*)
   {
      map<char*,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<char*,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<char*,double>", -2, "prec_stl/map", 63,
                  typeid(map<char*,double>), DefineBehavior(ptr, ptr),
                  0, &maplEcharmUcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<char*,double>) );
      instance.SetNew(&new_maplEcharmUcOdoublegR);
      instance.SetNewArray(&newArray_maplEcharmUcOdoublegR);
      instance.SetDelete(&delete_maplEcharmUcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEcharmUcOdoublegR);
      instance.SetDestructor(&destruct_maplEcharmUcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<char*,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<char*,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEcharmUcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<char*,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEcharmUcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,double> : new map<char*,double>;
   }
   static void *newArray_maplEcharmUcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,double>[nElements] : new map<char*,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEcharmUcOdoublegR(void *p) {
      delete ((map<char*,double>*)p);
   }
   static void deleteArray_maplEcharmUcOdoublegR(void *p) {
      delete [] ((map<char*,double>*)p);
   }
   static void destruct_maplEcharmUcOdoublegR(void *p) {
      typedef map<char*,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<char*,double>

namespace ROOT {
   void maplEcharmUcOfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEcharmUcOfloatgR_Dictionary();
   static void *new_maplEcharmUcOfloatgR(void *p = 0);
   static void *newArray_maplEcharmUcOfloatgR(Long_t size, void *p);
   static void delete_maplEcharmUcOfloatgR(void *p);
   static void deleteArray_maplEcharmUcOfloatgR(void *p);
   static void destruct_maplEcharmUcOfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<char*,float>*)
   {
      map<char*,float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<char*,float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<char*,float>", -2, "prec_stl/map", 63,
                  typeid(map<char*,float>), DefineBehavior(ptr, ptr),
                  0, &maplEcharmUcOfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(map<char*,float>) );
      instance.SetNew(&new_maplEcharmUcOfloatgR);
      instance.SetNewArray(&newArray_maplEcharmUcOfloatgR);
      instance.SetDelete(&delete_maplEcharmUcOfloatgR);
      instance.SetDeleteArray(&deleteArray_maplEcharmUcOfloatgR);
      instance.SetDestructor(&destruct_maplEcharmUcOfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<char*,float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<char*,float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEcharmUcOfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<char*,float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEcharmUcOfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,float> : new map<char*,float>;
   }
   static void *newArray_maplEcharmUcOfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,float>[nElements] : new map<char*,float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEcharmUcOfloatgR(void *p) {
      delete ((map<char*,float>*)p);
   }
   static void deleteArray_maplEcharmUcOfloatgR(void *p) {
      delete [] ((map<char*,float>*)p);
   }
   static void destruct_maplEcharmUcOfloatgR(void *p) {
      typedef map<char*,float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<char*,float>

namespace ROOT {
   void maplEcharmUcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEcharmUcOintgR_Dictionary();
   static void *new_maplEcharmUcOintgR(void *p = 0);
   static void *newArray_maplEcharmUcOintgR(Long_t size, void *p);
   static void delete_maplEcharmUcOintgR(void *p);
   static void deleteArray_maplEcharmUcOintgR(void *p);
   static void destruct_maplEcharmUcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<char*,int>*)
   {
      map<char*,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<char*,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<char*,int>", -2, "prec_stl/map", 63,
                  typeid(map<char*,int>), DefineBehavior(ptr, ptr),
                  0, &maplEcharmUcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<char*,int>) );
      instance.SetNew(&new_maplEcharmUcOintgR);
      instance.SetNewArray(&newArray_maplEcharmUcOintgR);
      instance.SetDelete(&delete_maplEcharmUcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEcharmUcOintgR);
      instance.SetDestructor(&destruct_maplEcharmUcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<char*,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<char*,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEcharmUcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<char*,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEcharmUcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,int> : new map<char*,int>;
   }
   static void *newArray_maplEcharmUcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,int>[nElements] : new map<char*,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEcharmUcOintgR(void *p) {
      delete ((map<char*,int>*)p);
   }
   static void deleteArray_maplEcharmUcOintgR(void *p) {
      delete [] ((map<char*,int>*)p);
   }
   static void destruct_maplEcharmUcOintgR(void *p) {
      typedef map<char*,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<char*,int>

namespace ROOT {
   void maplEcharmUcOlonggR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEcharmUcOlonggR_Dictionary();
   static void *new_maplEcharmUcOlonggR(void *p = 0);
   static void *newArray_maplEcharmUcOlonggR(Long_t size, void *p);
   static void delete_maplEcharmUcOlonggR(void *p);
   static void deleteArray_maplEcharmUcOlonggR(void *p);
   static void destruct_maplEcharmUcOlonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<char*,long>*)
   {
      map<char*,long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<char*,long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<char*,long>", -2, "prec_stl/map", 63,
                  typeid(map<char*,long>), DefineBehavior(ptr, ptr),
                  0, &maplEcharmUcOlonggR_Dictionary, isa_proxy, 0,
                  sizeof(map<char*,long>) );
      instance.SetNew(&new_maplEcharmUcOlonggR);
      instance.SetNewArray(&newArray_maplEcharmUcOlonggR);
      instance.SetDelete(&delete_maplEcharmUcOlonggR);
      instance.SetDeleteArray(&deleteArray_maplEcharmUcOlonggR);
      instance.SetDestructor(&destruct_maplEcharmUcOlonggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<char*,long> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<char*,long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEcharmUcOlonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<char*,long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEcharmUcOlonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,long> : new map<char*,long>;
   }
   static void *newArray_maplEcharmUcOlonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,long>[nElements] : new map<char*,long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEcharmUcOlonggR(void *p) {
      delete ((map<char*,long>*)p);
   }
   static void deleteArray_maplEcharmUcOlonggR(void *p) {
      delete [] ((map<char*,long>*)p);
   }
   static void destruct_maplEcharmUcOlonggR(void *p) {
      typedef map<char*,long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<char*,long>

namespace ROOT {
   void maplEcharmUcOvoidmUgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEcharmUcOvoidmUgR_Dictionary();
   static void *new_maplEcharmUcOvoidmUgR(void *p = 0);
   static void *newArray_maplEcharmUcOvoidmUgR(Long_t size, void *p);
   static void delete_maplEcharmUcOvoidmUgR(void *p);
   static void deleteArray_maplEcharmUcOvoidmUgR(void *p);
   static void destruct_maplEcharmUcOvoidmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<char*,void*>*)
   {
      map<char*,void*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<char*,void*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<char*,void*>", -2, "prec_stl/map", 63,
                  typeid(map<char*,void*>), DefineBehavior(ptr, ptr),
                  0, &maplEcharmUcOvoidmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<char*,void*>) );
      instance.SetNew(&new_maplEcharmUcOvoidmUgR);
      instance.SetNewArray(&newArray_maplEcharmUcOvoidmUgR);
      instance.SetDelete(&delete_maplEcharmUcOvoidmUgR);
      instance.SetDeleteArray(&deleteArray_maplEcharmUcOvoidmUgR);
      instance.SetDestructor(&destruct_maplEcharmUcOvoidmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<char*,void*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<char*,void*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEcharmUcOvoidmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<char*,void*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEcharmUcOvoidmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,void*> : new map<char*,void*>;
   }
   static void *newArray_maplEcharmUcOvoidmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<char*,void*>[nElements] : new map<char*,void*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEcharmUcOvoidmUgR(void *p) {
      delete ((map<char*,void*>*)p);
   }
   static void deleteArray_maplEcharmUcOvoidmUgR(void *p) {
      delete [] ((map<char*,void*>*)p);
   }
   static void destruct_maplEcharmUcOvoidmUgR(void *p) {
      typedef map<char*,void*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<char*,void*>

namespace ROOT {
   void maplEstringcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOdoublegR_Dictionary();
   static void *new_maplEstringcOdoublegR(void *p = 0);
   static void *newArray_maplEstringcOdoublegR(Long_t size, void *p);
   static void delete_maplEstringcOdoublegR(void *p);
   static void deleteArray_maplEstringcOdoublegR(void *p);
   static void destruct_maplEstringcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,double>*)
   {
      map<string,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,double>", -2, "prec_stl/map", 63,
                  typeid(map<string,double>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,double>) );
      instance.SetNew(&new_maplEstringcOdoublegR);
      instance.SetNewArray(&newArray_maplEstringcOdoublegR);
      instance.SetDelete(&delete_maplEstringcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOdoublegR);
      instance.SetDestructor(&destruct_maplEstringcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double> : new map<string,double>;
   }
   static void *newArray_maplEstringcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double>[nElements] : new map<string,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOdoublegR(void *p) {
      delete ((map<string,double>*)p);
   }
   static void deleteArray_maplEstringcOdoublegR(void *p) {
      delete [] ((map<string,double>*)p);
   }
   static void destruct_maplEstringcOdoublegR(void *p) {
      typedef map<string,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,double>

namespace ROOT {
   void maplEstringcOfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOfloatgR_Dictionary();
   static void *new_maplEstringcOfloatgR(void *p = 0);
   static void *newArray_maplEstringcOfloatgR(Long_t size, void *p);
   static void delete_maplEstringcOfloatgR(void *p);
   static void deleteArray_maplEstringcOfloatgR(void *p);
   static void destruct_maplEstringcOfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,float>*)
   {
      map<string,float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,float>", -2, "prec_stl/map", 63,
                  typeid(map<string,float>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,float>) );
      instance.SetNew(&new_maplEstringcOfloatgR);
      instance.SetNewArray(&newArray_maplEstringcOfloatgR);
      instance.SetDelete(&delete_maplEstringcOfloatgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOfloatgR);
      instance.SetDestructor(&destruct_maplEstringcOfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float> : new map<string,float>;
   }
   static void *newArray_maplEstringcOfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float>[nElements] : new map<string,float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOfloatgR(void *p) {
      delete ((map<string,float>*)p);
   }
   static void deleteArray_maplEstringcOfloatgR(void *p) {
      delete [] ((map<string,float>*)p);
   }
   static void destruct_maplEstringcOfloatgR(void *p) {
      typedef map<string,float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,float>

namespace ROOT {
   void maplEstringcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOintgR_Dictionary();
   static void *new_maplEstringcOintgR(void *p = 0);
   static void *newArray_maplEstringcOintgR(Long_t size, void *p);
   static void delete_maplEstringcOintgR(void *p);
   static void deleteArray_maplEstringcOintgR(void *p);
   static void destruct_maplEstringcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,int>*)
   {
      map<string,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,int>", -2, "prec_stl/map", 63,
                  typeid(map<string,int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,int>) );
      instance.SetNew(&new_maplEstringcOintgR);
      instance.SetNewArray(&newArray_maplEstringcOintgR);
      instance.SetDelete(&delete_maplEstringcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOintgR);
      instance.SetDestructor(&destruct_maplEstringcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int> : new map<string,int>;
   }
   static void *newArray_maplEstringcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int>[nElements] : new map<string,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOintgR(void *p) {
      delete ((map<string,int>*)p);
   }
   static void deleteArray_maplEstringcOintgR(void *p) {
      delete [] ((map<string,int>*)p);
   }
   static void destruct_maplEstringcOintgR(void *p) {
      typedef map<string,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,int>

namespace ROOT {
   void maplEstringcOlonggR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOlonggR_Dictionary();
   static void *new_maplEstringcOlonggR(void *p = 0);
   static void *newArray_maplEstringcOlonggR(Long_t size, void *p);
   static void delete_maplEstringcOlonggR(void *p);
   static void deleteArray_maplEstringcOlonggR(void *p);
   static void destruct_maplEstringcOlonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,long>*)
   {
      map<string,long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,long>", -2, "prec_stl/map", 63,
                  typeid(map<string,long>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOlonggR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,long>) );
      instance.SetNew(&new_maplEstringcOlonggR);
      instance.SetNewArray(&newArray_maplEstringcOlonggR);
      instance.SetDelete(&delete_maplEstringcOlonggR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOlonggR);
      instance.SetDestructor(&destruct_maplEstringcOlonggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,long> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOlonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOlonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,long> : new map<string,long>;
   }
   static void *newArray_maplEstringcOlonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,long>[nElements] : new map<string,long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOlonggR(void *p) {
      delete ((map<string,long>*)p);
   }
   static void deleteArray_maplEstringcOlonggR(void *p) {
      delete [] ((map<string,long>*)p);
   }
   static void destruct_maplEstringcOlonggR(void *p) {
      typedef map<string,long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,long>

namespace ROOT {
   void maplEstringcOvoidmUgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOvoidmUgR_Dictionary();
   static void *new_maplEstringcOvoidmUgR(void *p = 0);
   static void *newArray_maplEstringcOvoidmUgR(Long_t size, void *p);
   static void delete_maplEstringcOvoidmUgR(void *p);
   static void deleteArray_maplEstringcOvoidmUgR(void *p);
   static void destruct_maplEstringcOvoidmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,void*>*)
   {
      map<string,void*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,void*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,void*>", -2, "prec_stl/map", 63,
                  typeid(map<string,void*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvoidmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,void*>) );
      instance.SetNew(&new_maplEstringcOvoidmUgR);
      instance.SetNewArray(&newArray_maplEstringcOvoidmUgR);
      instance.SetDelete(&delete_maplEstringcOvoidmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvoidmUgR);
      instance.SetDestructor(&destruct_maplEstringcOvoidmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,void*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,void*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvoidmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,void*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvoidmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,void*> : new map<string,void*>;
   }
   static void *newArray_maplEstringcOvoidmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,void*>[nElements] : new map<string,void*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvoidmUgR(void *p) {
      delete ((map<string,void*>*)p);
   }
   static void deleteArray_maplEstringcOvoidmUgR(void *p) {
      delete [] ((map<string,void*>*)p);
   }
   static void destruct_maplEstringcOvoidmUgR(void *p) {
      typedef map<string,void*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,void*>

/********************************************************
* cint/cint/lib/dll_stl/rootcint_map.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablerootcint_map();

extern "C" void G__set_cpp_environmentrootcint_map() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("map");
  G__cpp_reset_tagtablerootcint_map();
}
#include <new>
extern "C" int G__cpp_dllrevrootcint_map() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncrootcint_map {
 public:
  G__Sizep2memfuncrootcint_map(): p(&G__Sizep2memfuncrootcint_map::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncrootcint_map::*p)();
};

size_t G__get_sizep2memfuncrootcint_map()
{
  G__Sizep2memfuncrootcint_map a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancerootcint_map() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablerootcint_map() {

   /* Setting up typedef entry */
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__rootcint_mapLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootcint_mapLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootcint_mapLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootcint_mapLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootcint_mapLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__rootcint_mapLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */
extern "C" void G__cpp_setup_memvarrootcint_map() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/

/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncrootcint_map() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalrootcint_map() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcrootcint_map() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__rootcint_mapLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__rootcint_mapLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablerootcint_map() {
  G__rootcint_mapLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__rootcint_mapLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablerootcint_map() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__rootcint_mapLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__rootcint_mapLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setuprootcint_map(void) {
  G__check_setup_version(30051515,"G__cpp_setuprootcint_map()");
  G__set_cpp_environmentrootcint_map();
  G__cpp_setup_tagtablerootcint_map();

  G__cpp_setup_inheritancerootcint_map();

  G__cpp_setup_typetablerootcint_map();

  G__cpp_setup_memvarrootcint_map();

  G__cpp_setup_memfuncrootcint_map();
  G__cpp_setup_globalrootcint_map();
  G__cpp_setup_funcrootcint_map();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncrootcint_map();
  return;
}
class G__cpp_setup_initrootcint_map {
  public:
    G__cpp_setup_initrootcint_map() { G__add_setup_func("rootcint_map",(G__incsetup)(&G__cpp_setuprootcint_map)); G__call_setup_funcs(); }
   ~G__cpp_setup_initrootcint_map() { G__remove_setup_func("rootcint_map"); }
};
G__cpp_setup_initrootcint_map G__cpp_setup_initializerrootcint_map;

