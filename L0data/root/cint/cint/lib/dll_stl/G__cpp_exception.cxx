/********************************************************
* cint/cint/lib/dll_stl/G__cpp_exception.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/
#include "cint/cint/lib/dll_stl/G__cpp_exception.h" //newlink 3678 

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable();

extern "C" void G__set_cpp_environment() {
  G__add_compiledheader("cint/cint/lib/dll_stl/cinteh.h");
  G__add_compiledheader("cint/cint/inc/cintdictversion.h");
  G__cpp_reset_tagtable();
}
#include <new>
extern "C" int G__cpp_dllrev() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* exception */
static int G__exception_0_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   exception* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new exception[n];
     } else {
       p = new((void*) gvp) exception[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new exception;
     } else {
       p = new((void*) gvp) exception;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_exception));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_0_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   exception* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new exception(*(exception*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) exception(*(exception*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_exception));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_0_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const exception& obj = ((exception*) G__getstructoffset())->operator=(*(exception*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_0_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const exception*) G__getstructoffset())->what());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef exception G__Texception;
static int G__exception_0_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (exception*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((exception*) (soff+(sizeof(exception)*i)))->~G__Texception();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (exception*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((exception*) (soff))->~G__Texception();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* bad_exception */
static int G__exception_1_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   bad_exception* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new bad_exception[n];
     } else {
       p = new((void*) gvp) bad_exception[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new bad_exception;
     } else {
       p = new((void*) gvp) bad_exception;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_bad_exception));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_1_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   bad_exception* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new bad_exception(*(bad_exception*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) bad_exception(*(bad_exception*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_bad_exception));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_1_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const bad_exception& obj = ((bad_exception*) G__getstructoffset())->operator=(*(bad_exception*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef bad_exception G__Tbad_exception;
static int G__exception_1_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (bad_exception*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((bad_exception*) (soff+(sizeof(bad_exception)*i)))->~G__Tbad_exception();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (bad_exception*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((bad_exception*) (soff))->~G__Tbad_exception();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* G__exception */
static int G__exception_50_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   G__exception* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new G__exception[n];
     } else {
       p = new((void*) gvp) G__exception[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new G__exception;
     } else {
       p = new((void*) gvp) G__exception;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_G__exception));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_50_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   G__exception* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new G__exception(*(G__exception*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) G__exception(*(G__exception*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_G__exception));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_50_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   G__exception* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new G__exception((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) G__exception((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new G__exception((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) G__exception((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_G__exception));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_50_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   G__exception* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new G__exception(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) G__exception(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new G__exception(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) G__exception(*(string*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_G__exception));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_50_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const G__exception& obj = ((G__exception*) G__getstructoffset())->operator=(*(G__exception*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_50_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const G__exception*) G__getstructoffset())->what());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception_50_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const G__exception*) G__getstructoffset())->name());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef G__exception G__TG__exception;
static int G__exception_50_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (G__exception*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((G__exception*) (soff+(sizeof(G__exception)*i)))->~G__TG__exception();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (G__exception*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((G__exception*) (soff))->~G__TG__exception();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__exception__0_0(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) set_unexpected((unexpected_handler) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception__0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      unexpected();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception__0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) set_terminate((terminate_handler) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception__0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      terminate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__exception__0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) uncaught_exception());
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* exception */

/* bad_exception */

/* G__exception */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc {
 public:
  G__Sizep2memfunc(): p(&G__Sizep2memfunc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc::*p)();
};

size_t G__get_sizep2memfunc()
{
  G__Sizep2memfunc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_bad_exception))) {
     bad_exception *G__Lderived;
     G__Lderived=(bad_exception*)0x1000;
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_bad_exception),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_G__exception))) {
     G__exception *G__Lderived;
     G__Lderived=(G__exception*)0x1000;
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_G__exception),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable() {

   /* Setting up typedef entry */
   G__search_typename2("unexpected_handler",89,-1,0,-1);
   G__setnewtype(-1,"void (*unexpected_handler)();",0);
   G__search_typename2("terminate_handler",89,-1,0,-1);
   G__setnewtype(-1,"void (*terminate_handler)();",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* exception */
static void G__setup_memvarexception(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_exception));
   { exception *p; p=(exception*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* bad_exception */
static void G__setup_memvarbad_exception(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_bad_exception));
   { bad_exception *p; p=(bad_exception*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* G__exception */
static void G__setup_memvarG__exception(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_G__exception));
   { G__exception *p; p=(G__exception*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncexception(void) {
   /* exception */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_exception));
   G__memfunc_setup("exception",975,G__exception_0_0_1, 105, G__get_linked_tagnum(&G__LN_exception), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("exception",975,G__exception_0_0_2, 105, G__get_linked_tagnum(&G__LN_exception), -1, 0, 1, 1, 1, 0, "u 'exception' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__exception_0_0_3, 117, G__get_linked_tagnum(&G__LN_exception), -1, 1, 1, 1, 1, 0, "u 'exception' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("what",436,G__exception_0_0_4, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~exception", 1101, G__exception_0_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbad_exception(void) {
   /* bad_exception */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_bad_exception));
   G__memfunc_setup("bad_exception",1365,G__exception_1_0_1, 105, G__get_linked_tagnum(&G__LN_bad_exception), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bad_exception",1365,G__exception_1_0_2, 105, G__get_linked_tagnum(&G__LN_bad_exception), -1, 0, 1, 1, 1, 0, "u 'bad_exception' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__exception_1_0_3, 117, G__get_linked_tagnum(&G__LN_bad_exception), -1, 1, 1, 1, 1, 0, "u 'bad_exception' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("what",436,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~bad_exception", 1491, G__exception_1_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncG__exception(void) {
   /* G__exception */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_G__exception));
   G__memfunc_setup("G__exception",1236,G__exception_50_0_1, 105, G__get_linked_tagnum(&G__LN_G__exception), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("G__exception",1236,G__exception_50_0_2, 105, G__get_linked_tagnum(&G__LN_G__exception), -1, 0, 1, 1, 1, 0, "u 'G__exception' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("G__exception",1236,G__exception_50_0_3, 105, G__get_linked_tagnum(&G__LN_G__exception), -1, 0, 2, 1, 1, 0, 
"C - - 10 - x C - - 10 '\"\"' cnm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("G__exception",1236,G__exception_50_0_4, 105, G__get_linked_tagnum(&G__LN_G__exception), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - x u 'string' - 11 '\"\"' cnm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__exception_50_0_5, 117, G__get_linked_tagnum(&G__LN_G__exception), -1, 1, 1, 1, 1, 0, "u 'G__exception' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("what",436,G__exception_50_0_6, 67, -1, -1, 0, 0, 1, 1, 41, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("name",417,G__exception_50_0_7, 67, -1, -1, 0, 0, 1, 1, 41, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~G__exception", 1362, G__exception_50_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC__=3",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC_MINOR__=4",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__EXCEPTION_DLL=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"INCLUDE_CINTDICTVERSION=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__CINTDICTVERSION=20090608",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global() {
  G__cpp_setup_global0();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

   G__memfunc_setup("set_unexpected", 1504, G__exception__0_0, 89, -1, G__defined_typename("unexpected_handler"), 0, 1, 1, 1, 0, "Y - 'unexpected_handler' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unexpected", 1077, G__exception__0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_terminate", 1396, G__exception__0_2, 89, -1, G__defined_typename("terminate_handler"), 0, 1, 1, 1, 0, "Y - 'terminate_handler' 0 - f", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("terminate", 969, G__exception__0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("uncaught_exception", 1933, G__exception__0_4, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func1() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LN_exception = { "exception" , 99 , -1 };
G__linked_taginfo G__LN_bad_exception = { "bad_exception" , 99 , -1 };
G__linked_taginfo G__LN_string = { "string" , 99 , -1 };
G__linked_taginfo G__LN_G__exception = { "G__exception" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable() {
  G__LN_exception.tagnum = -1 ;
  G__LN_bad_exception.tagnum = -1 ;
  G__LN_string.tagnum = -1 ;
  G__LN_G__exception.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_exception),sizeof(exception),-1,3840,(char*)NULL,G__setup_memvarexception,G__setup_memfuncexception);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_bad_exception),sizeof(bad_exception),-1,3840,(char*)NULL,G__setup_memvarbad_exception,G__setup_memfuncbad_exception);
   G__get_linked_tagnum_fwd(&G__LN_string);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_G__exception),sizeof(G__exception),-1,36608,(char*)NULL,G__setup_memvarG__exception,G__setup_memfuncG__exception);
}
extern "C" void G__cpp_setup(void) {
  G__check_setup_version(30051515,"G__cpp_setup()");
  G__set_cpp_environment();
  G__cpp_setup_tagtable();

  G__cpp_setup_inheritance();

  G__cpp_setup_typetable();

  G__cpp_setup_memvar();

  G__cpp_setup_memfunc();
  G__cpp_setup_global();
  G__cpp_setup_func();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc();
  return;
}
class G__cpp_setup_init {
  public:
    G__cpp_setup_init() { G__add_setup_func("G__Default",(G__incsetup)(&G__cpp_setup)); }
   ~G__cpp_setup_init() { G__remove_setup_func("G__Default"); }
};
G__cpp_setup_init G__cpp_setup_initializer;

