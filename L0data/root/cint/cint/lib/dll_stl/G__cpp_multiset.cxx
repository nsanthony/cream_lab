/********************************************************
* cint/cint/lib/dll_stl/G__cpp_multiset.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/
#include "cint/cint/lib/dll_stl/G__cpp_multiset.h" //newlink 3678 

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable();

extern "C" void G__set_cpp_environment() {
  G__add_compiledheader("cint/cint/lib/dll_stl/multst.h");
  G__add_compiledheader("cint/cint/inc/cintdictversion.h");
  G__cpp_reset_tagtable();
}
#include <new>
extern "C" int G__cpp_dllrev() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* less<int> */
static int G__multiset_48_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<int>*) G__getstructoffset())->operator()(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multiset_48_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<int> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<int>[n];
     } else {
       p = new((void*) gvp) less<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<int>;
     } else {
       p = new((void*) gvp) less<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_48_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<int>(*(less<int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<int> G__TlesslEintgR;
static int G__multiset_48_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<int>*) (soff+(sizeof(less<int>)*i)))->~G__TlesslEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<int>*) (soff))->~G__TlesslEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_48_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<int>* dest = (less<int>*) G__getstructoffset();
   const less<int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<int,int,bool> */
// automatic default constructor
static int G__multiset_49_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<int,int,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<int,int,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<int,int,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<int,int,bool>;
     } else {
       p = new((void*) gvp) binary_function<int,int,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_49_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<int,int,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<int,int,bool>(*(binary_function<int,int,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<int,int,bool> G__Tbinary_functionlEintcOintcOboolgR;
static int G__multiset_49_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<int,int,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<int,int,bool>*) (soff+(sizeof(binary_function<int,int,bool>)*i)))->~G__Tbinary_functionlEintcOintcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<int,int,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<int,int,bool>*) (soff))->~G__Tbinary_functionlEintcOintcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_49_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<int,int,bool>* dest = (binary_function<int,int,bool>*) G__getstructoffset();
   const binary_function<int,int,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<int> */
static int G__multiset_50_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<int>[n];
     } else {
       p = new((void*) gvp) allocator<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<int>;
     } else {
       p = new((void*) gvp) allocator<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_50_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<int>(*(allocator<int>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<int>(*(allocator<int>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_50_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const allocator<int>*) G__getstructoffset())->address(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_50_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const allocator<int>*) G__getstructoffset())->address(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_50_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 73, (long) ((allocator<int>*) G__getstructoffset())->allocate((allocator<int>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 73, (long) ((allocator<int>*) G__getstructoffset())->allocate((allocator<int>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_50_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->deallocate((allocator<int>::pointer) G__int(libp->para[0]), (allocator<int>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_50_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<int>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_50_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->construct((allocator<int>::pointer) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_50_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->destroy((allocator<int>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<int> G__TallocatorlEintgR;
static int G__multiset_50_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<int>*) (soff+(sizeof(allocator<int>)*i)))->~G__TallocatorlEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<int>*) (soff))->~G__TallocatorlEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_50_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* dest = (allocator<int>*) G__getstructoffset();
   const allocator<int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<int,less<int>,allocator<int> > */
static int G__multiset_51_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<int,less<int>,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<int,less<int>,allocator<int> >[n];
     } else {
       p = new((void*) gvp) multiset<int,less<int>,allocator<int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<int,less<int>,allocator<int> >;
     } else {
       p = new((void*) gvp) multiset<int,less<int>,allocator<int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<int,less<int>,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<int,less<int>,allocator<int> >(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<int,less<int>,allocator<int> >(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >& obj = ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->operator=(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::iterator* pobj;
         multiset<int,less<int>,allocator<int> >::iterator xobj = ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->begin();
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::iterator* pobj;
         multiset<int,less<int>,allocator<int> >::iterator xobj = ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->end();
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::reverse_iterator* pobj;
         multiset<int,less<int>,allocator<int> >::reverse_iterator xobj = ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->rbegin();
         pobj = new multiset<int,less<int>,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::reverse_iterator* pobj;
         multiset<int,less<int>,allocator<int> >::reverse_iterator xobj = ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->rend();
         pobj = new multiset<int,less<int>,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::iterator* pobj;
         multiset<int,less<int>,allocator<int> >::iterator xobj = ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->insert(*(int*) G__Intref(&libp->para[0]));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::iterator* pobj;
         multiset<int,less<int>,allocator<int> >::iterator xobj = ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->insert(*((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->erase(*((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->erase(*((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])), *((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->swap(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::iterator* pobj;
         const multiset<int,less<int>,allocator<int> >::iterator xobj = ((const multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->find(*(int*) G__Intref(&libp->para[0]));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->count(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::iterator* pobj;
         const multiset<int,less<int>,allocator<int> >::iterator xobj = ((const multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->lower_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_51_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::iterator* pobj;
         const multiset<int,less<int>,allocator<int> >::iterator xobj = ((const multiset<int,less<int>,allocator<int> >*) G__getstructoffset())->upper_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<int,less<int>,allocator<int> > G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgR;
static int G__multiset_51_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<int,less<int>,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<int,less<int>,allocator<int> >*) (soff+(sizeof(multiset<int,less<int>,allocator<int> >)*i)))->~G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<int,less<int>,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<int,less<int>,allocator<int> >*) (soff))->~G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<int,less<int>,allocator<int> >::iterator */
static int G__multiset_52_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<int,less<int>,allocator<int> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<int,less<int>,allocator<int> >::iterator[n];
     } else {
       p = new((void*) gvp) multiset<int,less<int>,allocator<int> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<int,less<int>,allocator<int> >::iterator;
     } else {
       p = new((void*) gvp) multiset<int,less<int>,allocator<int> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<int,less<int>,allocator<int> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<int,less<int>,allocator<int> >::iterator(*(multiset<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<int,less<int>,allocator<int> >::iterator(*(multiset<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::iterator& obj = ((multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator=(*(multiset<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::iterator& obj = ((multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::iterator* pobj;
         multiset<int,less<int>,allocator<int> >::iterator xobj = ((multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::iterator& obj = ((multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::iterator* pobj;
         multiset<int,less<int>,allocator<int> >::iterator xobj = ((multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator==(*(multiset<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_52_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator!=(*(multiset<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<int,less<int>,allocator<int> >::iterator G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator;
static int G__multiset_52_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<int,less<int>,allocator<int> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<int,less<int>,allocator<int> >::iterator*) (soff+(sizeof(multiset<int,less<int>,allocator<int> >::iterator)*i)))->~G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<int,less<int>,allocator<int> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<int,less<int>,allocator<int> >::iterator*) (soff))->~G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<int,less<int>,allocator<int> >::reverse_iterator */
static int G__multiset_53_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<int,less<int>,allocator<int> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<int,less<int>,allocator<int> >::reverse_iterator(*(multiset<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<int,less<int>,allocator<int> >::reverse_iterator(*(multiset<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_53_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::reverse_iterator& obj = ((multiset<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator=(*(multiset<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_53_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const multiset<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_53_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const multiset<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_53_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::reverse_iterator& obj = ((multiset<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_53_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::reverse_iterator* pobj;
         multiset<int,less<int>,allocator<int> >::reverse_iterator xobj = ((multiset<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<int,less<int>,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_53_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<int,less<int>,allocator<int> >::reverse_iterator& obj = ((multiset<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_53_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::reverse_iterator* pobj;
         multiset<int,less<int>,allocator<int> >::reverse_iterator xobj = ((multiset<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<int,less<int>,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<int,less<int>,allocator<int> >::reverse_iterator G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator;
static int G__multiset_53_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<int,less<int>,allocator<int> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<int,less<int>,allocator<int> >::reverse_iterator*) (soff+(sizeof(multiset<int,less<int>,allocator<int> >::reverse_iterator)*i)))->~G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<int,less<int>,allocator<int> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<int,less<int>,allocator<int> >::reverse_iterator*) (soff))->~G__TmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<long> */
static int G__multiset_54_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<long>*) G__getstructoffset())->operator()(*(long*) G__Longref(&libp->para[0]), *(long*) G__Longref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multiset_54_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<long> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<long>[n];
     } else {
       p = new((void*) gvp) less<long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<long>;
     } else {
       p = new((void*) gvp) less<long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_54_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<long>(*(less<long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<long> G__TlesslElonggR;
static int G__multiset_54_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<long>*) (soff+(sizeof(less<long>)*i)))->~G__TlesslElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<long>*) (soff))->~G__TlesslElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_54_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<long>* dest = (less<long>*) G__getstructoffset();
   const less<long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<long,long,bool> */
// automatic default constructor
static int G__multiset_55_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<long,long,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<long,long,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<long,long,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<long,long,bool>;
     } else {
       p = new((void*) gvp) binary_function<long,long,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_55_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<long,long,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<long,long,bool>(*(binary_function<long,long,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<long,long,bool> G__Tbinary_functionlElongcOlongcOboolgR;
static int G__multiset_55_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<long,long,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<long,long,bool>*) (soff+(sizeof(binary_function<long,long,bool>)*i)))->~G__Tbinary_functionlElongcOlongcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<long,long,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<long,long,bool>*) (soff))->~G__Tbinary_functionlElongcOlongcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_55_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<long,long,bool>* dest = (binary_function<long,long,bool>*) G__getstructoffset();
   const binary_function<long,long,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<long> */
static int G__multiset_56_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<long>[n];
     } else {
       p = new((void*) gvp) allocator<long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<long>;
     } else {
       p = new((void*) gvp) allocator<long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_56_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<long>(*(allocator<long>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<long>(*(allocator<long>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_56_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const allocator<long>*) G__getstructoffset())->address(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_56_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const allocator<long>*) G__getstructoffset())->address(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_56_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 76, (long) ((allocator<long>*) G__getstructoffset())->allocate((allocator<long>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 76, (long) ((allocator<long>*) G__getstructoffset())->allocate((allocator<long>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_56_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->deallocate((allocator<long>::pointer) G__int(libp->para[0]), (allocator<long>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_56_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<long>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_56_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->construct((allocator<long>::pointer) G__int(libp->para[0]), *(long*) G__Longref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_56_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->destroy((allocator<long>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<long> G__TallocatorlElonggR;
static int G__multiset_56_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<long>*) (soff+(sizeof(allocator<long>)*i)))->~G__TallocatorlElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<long>*) (soff))->~G__TallocatorlElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_56_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* dest = (allocator<long>*) G__getstructoffset();
   const allocator<long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<long,less<long>,allocator<long> > */
static int G__multiset_57_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<long,less<long>,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<long,less<long>,allocator<long> >[n];
     } else {
       p = new((void*) gvp) multiset<long,less<long>,allocator<long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<long,less<long>,allocator<long> >;
     } else {
       p = new((void*) gvp) multiset<long,less<long>,allocator<long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<long,less<long>,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<long,less<long>,allocator<long> >(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<long,less<long>,allocator<long> >(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >& obj = ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->operator=(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::iterator* pobj;
         multiset<long,less<long>,allocator<long> >::iterator xobj = ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->begin();
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::iterator* pobj;
         multiset<long,less<long>,allocator<long> >::iterator xobj = ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->end();
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::reverse_iterator* pobj;
         multiset<long,less<long>,allocator<long> >::reverse_iterator xobj = ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->rbegin();
         pobj = new multiset<long,less<long>,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::reverse_iterator* pobj;
         multiset<long,less<long>,allocator<long> >::reverse_iterator xobj = ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->rend();
         pobj = new multiset<long,less<long>,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::iterator* pobj;
         multiset<long,less<long>,allocator<long> >::iterator xobj = ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->insert(*(long*) G__Longref(&libp->para[0]));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::iterator* pobj;
         multiset<long,less<long>,allocator<long> >::iterator xobj = ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->insert(*((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])), *(long*) G__Longref(&libp->para[1]));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->erase(*((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->erase(*((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])), *((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->swap(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::iterator* pobj;
         const multiset<long,less<long>,allocator<long> >::iterator xobj = ((const multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::iterator* pobj;
         const multiset<long,less<long>,allocator<long> >::iterator xobj = ((const multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_57_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::iterator* pobj;
         const multiset<long,less<long>,allocator<long> >::iterator xobj = ((const multiset<long,less<long>,allocator<long> >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<long,less<long>,allocator<long> > G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgR;
static int G__multiset_57_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<long,less<long>,allocator<long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<long,less<long>,allocator<long> >*) (soff+(sizeof(multiset<long,less<long>,allocator<long> >)*i)))->~G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<long,less<long>,allocator<long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<long,less<long>,allocator<long> >*) (soff))->~G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<long,less<long>,allocator<long> >::iterator */
static int G__multiset_58_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<long,less<long>,allocator<long> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<long,less<long>,allocator<long> >::iterator[n];
     } else {
       p = new((void*) gvp) multiset<long,less<long>,allocator<long> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<long,less<long>,allocator<long> >::iterator;
     } else {
       p = new((void*) gvp) multiset<long,less<long>,allocator<long> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<long,less<long>,allocator<long> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<long,less<long>,allocator<long> >::iterator(*(multiset<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<long,less<long>,allocator<long> >::iterator(*(multiset<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::iterator& obj = ((multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator=(*(multiset<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::iterator& obj = ((multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::iterator* pobj;
         multiset<long,less<long>,allocator<long> >::iterator xobj = ((multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::iterator& obj = ((multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::iterator* pobj;
         multiset<long,less<long>,allocator<long> >::iterator xobj = ((multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator==(*(multiset<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_58_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator!=(*(multiset<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<long,less<long>,allocator<long> >::iterator G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator;
static int G__multiset_58_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<long,less<long>,allocator<long> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<long,less<long>,allocator<long> >::iterator*) (soff+(sizeof(multiset<long,less<long>,allocator<long> >::iterator)*i)))->~G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<long,less<long>,allocator<long> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<long,less<long>,allocator<long> >::iterator*) (soff))->~G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<long,less<long>,allocator<long> >::reverse_iterator */
static int G__multiset_59_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<long,less<long>,allocator<long> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<long,less<long>,allocator<long> >::reverse_iterator(*(multiset<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<long,less<long>,allocator<long> >::reverse_iterator(*(multiset<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_59_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::reverse_iterator& obj = ((multiset<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator=(*(multiset<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_59_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const multiset<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_59_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const multiset<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_59_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::reverse_iterator& obj = ((multiset<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_59_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::reverse_iterator* pobj;
         multiset<long,less<long>,allocator<long> >::reverse_iterator xobj = ((multiset<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<long,less<long>,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_59_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<long,less<long>,allocator<long> >::reverse_iterator& obj = ((multiset<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_59_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::reverse_iterator* pobj;
         multiset<long,less<long>,allocator<long> >::reverse_iterator xobj = ((multiset<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<long,less<long>,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<long,less<long>,allocator<long> >::reverse_iterator G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator;
static int G__multiset_59_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<long,less<long>,allocator<long> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<long,less<long>,allocator<long> >::reverse_iterator*) (soff+(sizeof(multiset<long,less<long>,allocator<long> >::reverse_iterator)*i)))->~G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<long,less<long>,allocator<long> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<long,less<long>,allocator<long> >::reverse_iterator*) (soff))->~G__TmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<float> */
static int G__multiset_60_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<float>*) G__getstructoffset())->operator()(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multiset_60_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<float> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<float>[n];
     } else {
       p = new((void*) gvp) less<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<float>;
     } else {
       p = new((void*) gvp) less<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_60_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<float>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<float>(*(less<float>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<float> G__TlesslEfloatgR;
static int G__multiset_60_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<float>*) (soff+(sizeof(less<float>)*i)))->~G__TlesslEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<float>*) (soff))->~G__TlesslEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_60_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<float>* dest = (less<float>*) G__getstructoffset();
   const less<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<float,float,bool> */
// automatic default constructor
static int G__multiset_61_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<float,float,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<float,float,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<float,float,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<float,float,bool>;
     } else {
       p = new((void*) gvp) binary_function<float,float,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_61_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<float,float,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<float,float,bool>(*(binary_function<float,float,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<float,float,bool> G__Tbinary_functionlEfloatcOfloatcOboolgR;
static int G__multiset_61_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<float,float,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<float,float,bool>*) (soff+(sizeof(binary_function<float,float,bool>)*i)))->~G__Tbinary_functionlEfloatcOfloatcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<float,float,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<float,float,bool>*) (soff))->~G__Tbinary_functionlEfloatcOfloatcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_61_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<float,float,bool>* dest = (binary_function<float,float,bool>*) G__getstructoffset();
   const binary_function<float,float,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<float> */
static int G__multiset_62_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<float>[n];
     } else {
       p = new((void*) gvp) allocator<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<float>;
     } else {
       p = new((void*) gvp) allocator<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_62_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<float>(*(allocator<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<float>(*(allocator<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_62_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const allocator<float>*) G__getstructoffset())->address(*(float*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_62_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const allocator<float>*) G__getstructoffset())->address(*(float*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_62_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 70, (long) ((allocator<float>*) G__getstructoffset())->allocate((allocator<float>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 70, (long) ((allocator<float>*) G__getstructoffset())->allocate((allocator<float>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_62_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->deallocate((allocator<float>::pointer) G__int(libp->para[0]), (allocator<float>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_62_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<float>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_62_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->construct((allocator<float>::pointer) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_62_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->destroy((allocator<float>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<float> G__TallocatorlEfloatgR;
static int G__multiset_62_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<float>*) (soff+(sizeof(allocator<float>)*i)))->~G__TallocatorlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<float>*) (soff))->~G__TallocatorlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_62_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* dest = (allocator<float>*) G__getstructoffset();
   const allocator<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<float,less<float>,allocator<float> > */
static int G__multiset_63_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<float,less<float>,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<float,less<float>,allocator<float> >[n];
     } else {
       p = new((void*) gvp) multiset<float,less<float>,allocator<float> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<float,less<float>,allocator<float> >;
     } else {
       p = new((void*) gvp) multiset<float,less<float>,allocator<float> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<float,less<float>,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<float,less<float>,allocator<float> >(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<float,less<float>,allocator<float> >(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >& obj = ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->operator=(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::iterator* pobj;
         multiset<float,less<float>,allocator<float> >::iterator xobj = ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->begin();
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::iterator* pobj;
         multiset<float,less<float>,allocator<float> >::iterator xobj = ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->end();
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::reverse_iterator* pobj;
         multiset<float,less<float>,allocator<float> >::reverse_iterator xobj = ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->rbegin();
         pobj = new multiset<float,less<float>,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::reverse_iterator* pobj;
         multiset<float,less<float>,allocator<float> >::reverse_iterator xobj = ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->rend();
         pobj = new multiset<float,less<float>,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::iterator* pobj;
         multiset<float,less<float>,allocator<float> >::iterator xobj = ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->insert(*(float*) G__Floatref(&libp->para[0]));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::iterator* pobj;
         multiset<float,less<float>,allocator<float> >::iterator xobj = ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->insert(*((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])), *(float*) G__Floatref(&libp->para[1]));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->erase(*((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->erase(*((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])), *((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->swap(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::iterator* pobj;
         const multiset<float,less<float>,allocator<float> >::iterator xobj = ((const multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->find(*(float*) G__Floatref(&libp->para[0]));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->count(*(float*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::iterator* pobj;
         const multiset<float,less<float>,allocator<float> >::iterator xobj = ((const multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->lower_bound(*(float*) G__Floatref(&libp->para[0]));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_63_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::iterator* pobj;
         const multiset<float,less<float>,allocator<float> >::iterator xobj = ((const multiset<float,less<float>,allocator<float> >*) G__getstructoffset())->upper_bound(*(float*) G__Floatref(&libp->para[0]));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<float,less<float>,allocator<float> > G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR;
static int G__multiset_63_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<float,less<float>,allocator<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<float,less<float>,allocator<float> >*) (soff+(sizeof(multiset<float,less<float>,allocator<float> >)*i)))->~G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<float,less<float>,allocator<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<float,less<float>,allocator<float> >*) (soff))->~G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<float,less<float>,allocator<float> >::iterator */
static int G__multiset_64_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<float,less<float>,allocator<float> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<float,less<float>,allocator<float> >::iterator[n];
     } else {
       p = new((void*) gvp) multiset<float,less<float>,allocator<float> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<float,less<float>,allocator<float> >::iterator;
     } else {
       p = new((void*) gvp) multiset<float,less<float>,allocator<float> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<float,less<float>,allocator<float> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<float,less<float>,allocator<float> >::iterator(*(multiset<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<float,less<float>,allocator<float> >::iterator(*(multiset<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::iterator& obj = ((multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator=(*(multiset<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::iterator& obj = ((multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::iterator* pobj;
         multiset<float,less<float>,allocator<float> >::iterator xobj = ((multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::iterator& obj = ((multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::iterator* pobj;
         multiset<float,less<float>,allocator<float> >::iterator xobj = ((multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator==(*(multiset<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_64_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator!=(*(multiset<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<float,less<float>,allocator<float> >::iterator G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator;
static int G__multiset_64_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<float,less<float>,allocator<float> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<float,less<float>,allocator<float> >::iterator*) (soff+(sizeof(multiset<float,less<float>,allocator<float> >::iterator)*i)))->~G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<float,less<float>,allocator<float> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<float,less<float>,allocator<float> >::iterator*) (soff))->~G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<float,less<float>,allocator<float> >::reverse_iterator */
static int G__multiset_65_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<float,less<float>,allocator<float> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<float,less<float>,allocator<float> >::reverse_iterator(*(multiset<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<float,less<float>,allocator<float> >::reverse_iterator(*(multiset<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_65_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::reverse_iterator& obj = ((multiset<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator=(*(multiset<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_65_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const multiset<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_65_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const multiset<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_65_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::reverse_iterator& obj = ((multiset<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_65_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::reverse_iterator* pobj;
         multiset<float,less<float>,allocator<float> >::reverse_iterator xobj = ((multiset<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<float,less<float>,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_65_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<float,less<float>,allocator<float> >::reverse_iterator& obj = ((multiset<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_65_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::reverse_iterator* pobj;
         multiset<float,less<float>,allocator<float> >::reverse_iterator xobj = ((multiset<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<float,less<float>,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<float,less<float>,allocator<float> >::reverse_iterator G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator;
static int G__multiset_65_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<float,less<float>,allocator<float> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<float,less<float>,allocator<float> >::reverse_iterator*) (soff+(sizeof(multiset<float,less<float>,allocator<float> >::reverse_iterator)*i)))->~G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<float,less<float>,allocator<float> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<float,less<float>,allocator<float> >::reverse_iterator*) (soff))->~G__TmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<double> */
static int G__multiset_66_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<double>*) G__getstructoffset())->operator()(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multiset_66_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<double> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<double>[n];
     } else {
       p = new((void*) gvp) less<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<double>;
     } else {
       p = new((void*) gvp) less<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_66_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<double>(*(less<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<double> G__TlesslEdoublegR;
static int G__multiset_66_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<double>*) (soff+(sizeof(less<double>)*i)))->~G__TlesslEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<double>*) (soff))->~G__TlesslEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_66_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<double>* dest = (less<double>*) G__getstructoffset();
   const less<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<double,double,bool> */
// automatic default constructor
static int G__multiset_67_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<double,double,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<double,double,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<double,double,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<double,double,bool>;
     } else {
       p = new((void*) gvp) binary_function<double,double,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_67_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<double,double,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<double,double,bool>(*(binary_function<double,double,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<double,double,bool> G__Tbinary_functionlEdoublecOdoublecOboolgR;
static int G__multiset_67_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<double,double,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<double,double,bool>*) (soff+(sizeof(binary_function<double,double,bool>)*i)))->~G__Tbinary_functionlEdoublecOdoublecOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<double,double,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<double,double,bool>*) (soff))->~G__Tbinary_functionlEdoublecOdoublecOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_67_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<double,double,bool>* dest = (binary_function<double,double,bool>*) G__getstructoffset();
   const binary_function<double,double,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<double> */
static int G__multiset_68_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<double>[n];
     } else {
       p = new((void*) gvp) allocator<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<double>;
     } else {
       p = new((void*) gvp) allocator<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_68_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<double>(*(allocator<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<double>(*(allocator<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_68_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const allocator<double>*) G__getstructoffset())->address(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_68_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const allocator<double>*) G__getstructoffset())->address(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_68_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 68, (long) ((allocator<double>*) G__getstructoffset())->allocate((allocator<double>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 68, (long) ((allocator<double>*) G__getstructoffset())->allocate((allocator<double>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_68_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->deallocate((allocator<double>::pointer) G__int(libp->para[0]), (allocator<double>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_68_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<double>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_68_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->construct((allocator<double>::pointer) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_68_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->destroy((allocator<double>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<double> G__TallocatorlEdoublegR;
static int G__multiset_68_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<double>*) (soff+(sizeof(allocator<double>)*i)))->~G__TallocatorlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<double>*) (soff))->~G__TallocatorlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_68_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* dest = (allocator<double>*) G__getstructoffset();
   const allocator<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<double,less<double>,allocator<double> > */
static int G__multiset_69_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<double,less<double>,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<double,less<double>,allocator<double> >[n];
     } else {
       p = new((void*) gvp) multiset<double,less<double>,allocator<double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<double,less<double>,allocator<double> >;
     } else {
       p = new((void*) gvp) multiset<double,less<double>,allocator<double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<double,less<double>,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<double,less<double>,allocator<double> >(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<double,less<double>,allocator<double> >(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >& obj = ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->operator=(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::iterator* pobj;
         multiset<double,less<double>,allocator<double> >::iterator xobj = ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->begin();
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::iterator* pobj;
         multiset<double,less<double>,allocator<double> >::iterator xobj = ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->end();
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::reverse_iterator* pobj;
         multiset<double,less<double>,allocator<double> >::reverse_iterator xobj = ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->rbegin();
         pobj = new multiset<double,less<double>,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::reverse_iterator* pobj;
         multiset<double,less<double>,allocator<double> >::reverse_iterator xobj = ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->rend();
         pobj = new multiset<double,less<double>,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::iterator* pobj;
         multiset<double,less<double>,allocator<double> >::iterator xobj = ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->insert(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::iterator* pobj;
         multiset<double,less<double>,allocator<double> >::iterator xobj = ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->insert(*((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])), *(double*) G__Doubleref(&libp->para[1]));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->erase(*((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->erase(*((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])), *((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->swap(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::iterator* pobj;
         const multiset<double,less<double>,allocator<double> >::iterator xobj = ((const multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::iterator* pobj;
         const multiset<double,less<double>,allocator<double> >::iterator xobj = ((const multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_69_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::iterator* pobj;
         const multiset<double,less<double>,allocator<double> >::iterator xobj = ((const multiset<double,less<double>,allocator<double> >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<double,less<double>,allocator<double> > G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR;
static int G__multiset_69_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<double,less<double>,allocator<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<double,less<double>,allocator<double> >*) (soff+(sizeof(multiset<double,less<double>,allocator<double> >)*i)))->~G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<double,less<double>,allocator<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<double,less<double>,allocator<double> >*) (soff))->~G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<double,less<double>,allocator<double> >::iterator */
static int G__multiset_70_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<double,less<double>,allocator<double> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<double,less<double>,allocator<double> >::iterator[n];
     } else {
       p = new((void*) gvp) multiset<double,less<double>,allocator<double> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<double,less<double>,allocator<double> >::iterator;
     } else {
       p = new((void*) gvp) multiset<double,less<double>,allocator<double> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<double,less<double>,allocator<double> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<double,less<double>,allocator<double> >::iterator(*(multiset<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<double,less<double>,allocator<double> >::iterator(*(multiset<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::iterator& obj = ((multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator=(*(multiset<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::iterator& obj = ((multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::iterator* pobj;
         multiset<double,less<double>,allocator<double> >::iterator xobj = ((multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::iterator& obj = ((multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::iterator* pobj;
         multiset<double,less<double>,allocator<double> >::iterator xobj = ((multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator==(*(multiset<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_70_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator!=(*(multiset<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<double,less<double>,allocator<double> >::iterator G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator;
static int G__multiset_70_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<double,less<double>,allocator<double> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<double,less<double>,allocator<double> >::iterator*) (soff+(sizeof(multiset<double,less<double>,allocator<double> >::iterator)*i)))->~G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<double,less<double>,allocator<double> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<double,less<double>,allocator<double> >::iterator*) (soff))->~G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<double,less<double>,allocator<double> >::reverse_iterator */
static int G__multiset_71_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<double,less<double>,allocator<double> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<double,less<double>,allocator<double> >::reverse_iterator(*(multiset<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<double,less<double>,allocator<double> >::reverse_iterator(*(multiset<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_71_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::reverse_iterator& obj = ((multiset<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator=(*(multiset<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_71_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const multiset<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_71_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const multiset<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_71_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::reverse_iterator& obj = ((multiset<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_71_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::reverse_iterator* pobj;
         multiset<double,less<double>,allocator<double> >::reverse_iterator xobj = ((multiset<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<double,less<double>,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_71_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<double,less<double>,allocator<double> >::reverse_iterator& obj = ((multiset<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_71_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::reverse_iterator* pobj;
         multiset<double,less<double>,allocator<double> >::reverse_iterator xobj = ((multiset<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<double,less<double>,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<double,less<double>,allocator<double> >::reverse_iterator G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator;
static int G__multiset_71_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<double,less<double>,allocator<double> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<double,less<double>,allocator<double> >::reverse_iterator*) (soff+(sizeof(multiset<double,less<double>,allocator<double> >::reverse_iterator)*i)))->~G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<double,less<double>,allocator<double> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<double,less<double>,allocator<double> >::reverse_iterator*) (soff))->~G__TmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<void*> */
static int G__multiset_72_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<void*>*) G__getstructoffset())->operator()(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multiset_72_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<void*> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<void*>[n];
     } else {
       p = new((void*) gvp) less<void*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<void*>;
     } else {
       p = new((void*) gvp) less<void*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_72_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<void*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<void*>(*(less<void*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<void*> G__TlesslEvoidmUgR;
static int G__multiset_72_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<void*>*) (soff+(sizeof(less<void*>)*i)))->~G__TlesslEvoidmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<void*>*) (soff))->~G__TlesslEvoidmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_72_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<void*>* dest = (less<void*>*) G__getstructoffset();
   const less<void*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<void*,void*,bool> */
// automatic default constructor
static int G__multiset_73_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<void*,void*,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<void*,void*,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<void*,void*,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<void*,void*,bool>;
     } else {
       p = new((void*) gvp) binary_function<void*,void*,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_73_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<void*,void*,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<void*,void*,bool>(*(binary_function<void*,void*,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<void*,void*,bool> G__Tbinary_functionlEvoidmUcOvoidmUcOboolgR;
static int G__multiset_73_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<void*,void*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<void*,void*,bool>*) (soff+(sizeof(binary_function<void*,void*,bool>)*i)))->~G__Tbinary_functionlEvoidmUcOvoidmUcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<void*,void*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<void*,void*,bool>*) (soff))->~G__Tbinary_functionlEvoidmUcOvoidmUcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_73_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<void*,void*,bool>* dest = (binary_function<void*,void*,bool>*) G__getstructoffset();
   const binary_function<void*,void*,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<void*> */
static int G__multiset_74_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<void*>[n];
     } else {
       p = new((void*) gvp) allocator<void*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<void*>;
     } else {
       p = new((void*) gvp) allocator<void*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_74_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<void*>(*(allocator<void*>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<void*>(*(allocator<void*>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_74_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const allocator<void*>*) G__getstructoffset())->address(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_74_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const allocator<void*>*) G__getstructoffset())->address(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_74_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 89, (long) ((allocator<void*>*) G__getstructoffset())->allocate((allocator<void*>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 89, (long) ((allocator<void*>*) G__getstructoffset())->allocate((allocator<void*>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_74_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->deallocate((allocator<void*>::pointer) G__int(libp->para[0]), (allocator<void*>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_74_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<void*>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_74_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->construct((allocator<void*>::pointer) G__int(libp->para[0]), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_74_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->destroy((allocator<void*>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<void*> G__TallocatorlEvoidmUgR;
static int G__multiset_74_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<void*>*) (soff+(sizeof(allocator<void*>)*i)))->~G__TallocatorlEvoidmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<void*>*) (soff))->~G__TallocatorlEvoidmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_74_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* dest = (allocator<void*>*) G__getstructoffset();
   const allocator<void*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<void*,less<void*>,allocator<void*> > */
static int G__multiset_75_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<void*,less<void*>,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<void*,less<void*>,allocator<void*> >[n];
     } else {
       p = new((void*) gvp) multiset<void*,less<void*>,allocator<void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<void*,less<void*>,allocator<void*> >;
     } else {
       p = new((void*) gvp) multiset<void*,less<void*>,allocator<void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<void*,less<void*>,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<void*,less<void*>,allocator<void*> >(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<void*,less<void*>,allocator<void*> >(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >& obj = ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->operator=(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->begin();
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->end();
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::reverse_iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::reverse_iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->rbegin();
         pobj = new multiset<void*,less<void*>,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::reverse_iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::reverse_iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->rend();
         pobj = new multiset<void*,less<void*>,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->insert(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->insert(*((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->erase(*((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->erase(*((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])), *((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->swap(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         const multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((const multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->find(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->count(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         const multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((const multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_75_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         const multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((const multiset<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<void*,less<void*>,allocator<void*> > G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR;
static int G__multiset_75_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<void*,less<void*>,allocator<void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<void*,less<void*>,allocator<void*> >*) (soff+(sizeof(multiset<void*,less<void*>,allocator<void*> >)*i)))->~G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<void*,less<void*>,allocator<void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<void*,less<void*>,allocator<void*> >*) (soff))->~G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<void*,less<void*>,allocator<void*> >::iterator */
static int G__multiset_76_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<void*,less<void*>,allocator<void*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<void*,less<void*>,allocator<void*> >::iterator[n];
     } else {
       p = new((void*) gvp) multiset<void*,less<void*>,allocator<void*> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<void*,less<void*>,allocator<void*> >::iterator;
     } else {
       p = new((void*) gvp) multiset<void*,less<void*>,allocator<void*> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<void*,less<void*>,allocator<void*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<void*,less<void*>,allocator<void*> >::iterator(*(multiset<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<void*,less<void*>,allocator<void*> >::iterator(*(multiset<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::iterator& obj = ((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator=(*(multiset<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::iterator& obj = ((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::iterator& obj = ((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator==(*(multiset<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_76_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator!=(*(multiset<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<void*,less<void*>,allocator<void*> >::iterator G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator;
static int G__multiset_76_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<void*,less<void*>,allocator<void*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<void*,less<void*>,allocator<void*> >::iterator*) (soff+(sizeof(multiset<void*,less<void*>,allocator<void*> >::iterator)*i)))->~G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<void*,less<void*>,allocator<void*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<void*,less<void*>,allocator<void*> >::iterator*) (soff))->~G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<void*,less<void*>,allocator<void*> >::reverse_iterator */
static int G__multiset_77_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<void*,less<void*>,allocator<void*> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<void*,less<void*>,allocator<void*> >::reverse_iterator(*(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<void*,less<void*>,allocator<void*> >::reverse_iterator(*(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_77_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::reverse_iterator& obj = ((multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator=(*(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_77_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_77_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_77_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::reverse_iterator& obj = ((multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_77_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::reverse_iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::reverse_iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_77_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<void*,less<void*>,allocator<void*> >::reverse_iterator& obj = ((multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_77_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::reverse_iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::reverse_iterator xobj = ((multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<void*,less<void*>,allocator<void*> >::reverse_iterator G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator;
static int G__multiset_77_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) (soff+(sizeof(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator)*i)))->~G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) (soff))->~G__TmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<char*> */
static int G__multiset_78_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<char*>*) G__getstructoffset())->operator()(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multiset_78_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<char*> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<char*>[n];
     } else {
       p = new((void*) gvp) less<char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<char*>;
     } else {
       p = new((void*) gvp) less<char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_78_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<char*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<char*>(*(less<char*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<char*> G__TlesslEcharmUgR;
static int G__multiset_78_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<char*>*) (soff+(sizeof(less<char*>)*i)))->~G__TlesslEcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<char*>*) (soff))->~G__TlesslEcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_78_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<char*>* dest = (less<char*>*) G__getstructoffset();
   const less<char*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<char*,char*,bool> */
// automatic default constructor
static int G__multiset_79_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<char*,char*,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<char*,char*,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<char*,char*,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<char*,char*,bool>;
     } else {
       p = new((void*) gvp) binary_function<char*,char*,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_79_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<char*,char*,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<char*,char*,bool>(*(binary_function<char*,char*,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<char*,char*,bool> G__Tbinary_functionlEcharmUcOcharmUcOboolgR;
static int G__multiset_79_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<char*,char*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<char*,char*,bool>*) (soff+(sizeof(binary_function<char*,char*,bool>)*i)))->~G__Tbinary_functionlEcharmUcOcharmUcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<char*,char*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<char*,char*,bool>*) (soff))->~G__Tbinary_functionlEcharmUcOcharmUcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_79_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<char*,char*,bool>* dest = (binary_function<char*,char*,bool>*) G__getstructoffset();
   const binary_function<char*,char*,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<char*> */
static int G__multiset_80_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<char*>[n];
     } else {
       p = new((void*) gvp) allocator<char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<char*>;
     } else {
       p = new((void*) gvp) allocator<char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_80_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<char*>(*(allocator<char*>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<char*>(*(allocator<char*>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_80_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const allocator<char*>*) G__getstructoffset())->address(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_80_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const allocator<char*>*) G__getstructoffset())->address(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_80_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 67, (long) ((allocator<char*>*) G__getstructoffset())->allocate((allocator<char*>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((allocator<char*>*) G__getstructoffset())->allocate((allocator<char*>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_80_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->deallocate((allocator<char*>::pointer) G__int(libp->para[0]), (allocator<char*>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_80_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<char*>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_80_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->construct((allocator<char*>::pointer) G__int(libp->para[0]), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_80_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->destroy((allocator<char*>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<char*> G__TallocatorlEcharmUgR;
static int G__multiset_80_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<char*>*) (soff+(sizeof(allocator<char*>)*i)))->~G__TallocatorlEcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<char*>*) (soff))->~G__TallocatorlEcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_80_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* dest = (allocator<char*>*) G__getstructoffset();
   const allocator<char*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<char*,less<char*>,allocator<char*> > */
static int G__multiset_81_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<char*,less<char*>,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<char*,less<char*>,allocator<char*> >[n];
     } else {
       p = new((void*) gvp) multiset<char*,less<char*>,allocator<char*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<char*,less<char*>,allocator<char*> >;
     } else {
       p = new((void*) gvp) multiset<char*,less<char*>,allocator<char*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<char*,less<char*>,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<char*,less<char*>,allocator<char*> >(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<char*,less<char*>,allocator<char*> >(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >& obj = ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->operator=(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->begin();
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->end();
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::reverse_iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::reverse_iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->rbegin();
         pobj = new multiset<char*,less<char*>,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::reverse_iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::reverse_iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->rend();
         pobj = new multiset<char*,less<char*>,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->insert(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->insert(*((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->erase(*((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->erase(*((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])), *((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->swap(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         const multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((const multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->find(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->count(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         const multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((const multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_81_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         const multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((const multiset<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<char*,less<char*>,allocator<char*> > G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR;
static int G__multiset_81_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<char*,less<char*>,allocator<char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<char*,less<char*>,allocator<char*> >*) (soff+(sizeof(multiset<char*,less<char*>,allocator<char*> >)*i)))->~G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<char*,less<char*>,allocator<char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<char*,less<char*>,allocator<char*> >*) (soff))->~G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<char*,less<char*>,allocator<char*> >::iterator */
static int G__multiset_82_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<char*,less<char*>,allocator<char*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<char*,less<char*>,allocator<char*> >::iterator[n];
     } else {
       p = new((void*) gvp) multiset<char*,less<char*>,allocator<char*> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<char*,less<char*>,allocator<char*> >::iterator;
     } else {
       p = new((void*) gvp) multiset<char*,less<char*>,allocator<char*> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<char*,less<char*>,allocator<char*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<char*,less<char*>,allocator<char*> >::iterator(*(multiset<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<char*,less<char*>,allocator<char*> >::iterator(*(multiset<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::iterator& obj = ((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator=(*(multiset<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::iterator& obj = ((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::iterator& obj = ((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator==(*(multiset<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_82_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator!=(*(multiset<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<char*,less<char*>,allocator<char*> >::iterator G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator;
static int G__multiset_82_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<char*,less<char*>,allocator<char*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<char*,less<char*>,allocator<char*> >::iterator*) (soff+(sizeof(multiset<char*,less<char*>,allocator<char*> >::iterator)*i)))->~G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<char*,less<char*>,allocator<char*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<char*,less<char*>,allocator<char*> >::iterator*) (soff))->~G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<char*,less<char*>,allocator<char*> >::reverse_iterator */
static int G__multiset_83_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<char*,less<char*>,allocator<char*> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<char*,less<char*>,allocator<char*> >::reverse_iterator(*(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<char*,less<char*>,allocator<char*> >::reverse_iterator(*(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_83_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::reverse_iterator& obj = ((multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator=(*(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_83_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_83_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_83_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::reverse_iterator& obj = ((multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_83_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::reverse_iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::reverse_iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_83_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<char*,less<char*>,allocator<char*> >::reverse_iterator& obj = ((multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_83_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::reverse_iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::reverse_iterator xobj = ((multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<char*,less<char*>,allocator<char*> >::reverse_iterator G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator;
static int G__multiset_83_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) (soff+(sizeof(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator)*i)))->~G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) (soff))->~G__TmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<string> */
static int G__multiset_84_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<string>*) G__getstructoffset())->operator()(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multiset_84_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<string> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<string>[n];
     } else {
       p = new((void*) gvp) less<string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<string>;
     } else {
       p = new((void*) gvp) less<string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_84_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<string>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<string>(*(less<string>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<string> G__TlesslEstringgR;
static int G__multiset_84_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<string>*) (soff+(sizeof(less<string>)*i)))->~G__TlesslEstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<string>*) (soff))->~G__TlesslEstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_84_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<string>* dest = (less<string>*) G__getstructoffset();
   const less<string>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<string,string,bool> */
// automatic default constructor
static int G__multiset_85_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<string,string,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<string,string,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<string,string,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<string,string,bool>;
     } else {
       p = new((void*) gvp) binary_function<string,string,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multiset_85_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<string,string,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<string,string,bool>(*(binary_function<string,string,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<string,string,bool> G__Tbinary_functionlEstringcOstringcOboolgR;
static int G__multiset_85_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<string,string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<string,string,bool>*) (soff+(sizeof(binary_function<string,string,bool>)*i)))->~G__Tbinary_functionlEstringcOstringcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<string,string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<string,string,bool>*) (soff))->~G__Tbinary_functionlEstringcOstringcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_85_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<string,string,bool>* dest = (binary_function<string,string,bool>*) G__getstructoffset();
   const binary_function<string,string,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<string> */
static int G__multiset_86_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<string>[n];
     } else {
       p = new((void*) gvp) allocator<string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<string>;
     } else {
       p = new((void*) gvp) allocator<string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_86_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<string>(*(allocator<string>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<string>(*(allocator<string>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_86_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<string>*) G__getstructoffset())->address(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_86_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<string>*) G__getstructoffset())->address(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_86_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<string>*) G__getstructoffset())->allocate((allocator<string>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<string>*) G__getstructoffset())->allocate((allocator<string>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_86_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->deallocate((allocator<string>::pointer) G__int(libp->para[0]), (allocator<string>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_86_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<string>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_86_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->construct((allocator<string>::pointer) G__int(libp->para[0]), *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_86_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->destroy((allocator<string>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<string> G__TallocatorlEstringgR;
static int G__multiset_86_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<string>*) (soff+(sizeof(allocator<string>)*i)))->~G__TallocatorlEstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<string>*) (soff))->~G__TallocatorlEstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multiset_86_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* dest = (allocator<string>*) G__getstructoffset();
   const allocator<string>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<string,less<string>,allocator<string> > */
static int G__multiset_87_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<string,less<string>,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<string,less<string>,allocator<string> >[n];
     } else {
       p = new((void*) gvp) multiset<string,less<string>,allocator<string> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<string,less<string>,allocator<string> >;
     } else {
       p = new((void*) gvp) multiset<string,less<string>,allocator<string> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<string,less<string>,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<string,less<string>,allocator<string> >(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<string,less<string>,allocator<string> >(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >& obj = ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->operator=(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::iterator* pobj;
         multiset<string,less<string>,allocator<string> >::iterator xobj = ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->begin();
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::iterator* pobj;
         multiset<string,less<string>,allocator<string> >::iterator xobj = ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->end();
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::reverse_iterator* pobj;
         multiset<string,less<string>,allocator<string> >::reverse_iterator xobj = ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->rbegin();
         pobj = new multiset<string,less<string>,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::reverse_iterator* pobj;
         multiset<string,less<string>,allocator<string> >::reverse_iterator xobj = ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->rend();
         pobj = new multiset<string,less<string>,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::iterator* pobj;
         multiset<string,less<string>,allocator<string> >::iterator xobj = ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->insert(*(string*) libp->para[0].ref);
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::iterator* pobj;
         multiset<string,less<string>,allocator<string> >::iterator xobj = ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->insert(*((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])), *(string*) libp->para[1].ref);
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->erase(*((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->erase(*((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])), *((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->swap(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::iterator* pobj;
         const multiset<string,less<string>,allocator<string> >::iterator xobj = ((const multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::iterator* pobj;
         const multiset<string,less<string>,allocator<string> >::iterator xobj = ((const multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_87_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::iterator* pobj;
         const multiset<string,less<string>,allocator<string> >::iterator xobj = ((const multiset<string,less<string>,allocator<string> >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<string,less<string>,allocator<string> > G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR;
static int G__multiset_87_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<string,less<string>,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<string,less<string>,allocator<string> >*) (soff+(sizeof(multiset<string,less<string>,allocator<string> >)*i)))->~G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<string,less<string>,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<string,less<string>,allocator<string> >*) (soff))->~G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<string,less<string>,allocator<string> >::iterator */
static int G__multiset_88_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<string,less<string>,allocator<string> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<string,less<string>,allocator<string> >::iterator[n];
     } else {
       p = new((void*) gvp) multiset<string,less<string>,allocator<string> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multiset<string,less<string>,allocator<string> >::iterator;
     } else {
       p = new((void*) gvp) multiset<string,less<string>,allocator<string> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<string,less<string>,allocator<string> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<string,less<string>,allocator<string> >::iterator(*(multiset<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<string,less<string>,allocator<string> >::iterator(*(multiset<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::iterator& obj = ((multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator=(*(multiset<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::value_type* pobj;
         const multiset<string,less<string>,allocator<string> >::value_type xobj = ((const multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator*();
         pobj = new multiset<string,less<string>,allocator<string> >::value_type(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::iterator& obj = ((multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::iterator* pobj;
         multiset<string,less<string>,allocator<string> >::iterator xobj = ((multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::iterator& obj = ((multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::iterator* pobj;
         multiset<string,less<string>,allocator<string> >::iterator xobj = ((multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator==(*(multiset<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_88_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multiset<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator!=(*(multiset<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<string,less<string>,allocator<string> >::iterator G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator;
static int G__multiset_88_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<string,less<string>,allocator<string> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<string,less<string>,allocator<string> >::iterator*) (soff+(sizeof(multiset<string,less<string>,allocator<string> >::iterator)*i)))->~G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<string,less<string>,allocator<string> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<string,less<string>,allocator<string> >::iterator*) (soff))->~G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multiset<string,less<string>,allocator<string> >::reverse_iterator */
static int G__multiset_89_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multiset<string,less<string>,allocator<string> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multiset<string,less<string>,allocator<string> >::reverse_iterator(*(multiset<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multiset<string,less<string>,allocator<string> >::reverse_iterator(*(multiset<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_89_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::reverse_iterator& obj = ((multiset<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator=(*(multiset<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_89_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::value_type* pobj;
         const multiset<string,less<string>,allocator<string> >::value_type xobj = ((const multiset<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator*();
         pobj = new multiset<string,less<string>,allocator<string> >::value_type(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_89_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const multiset<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_89_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::reverse_iterator& obj = ((multiset<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_89_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::reverse_iterator* pobj;
         multiset<string,less<string>,allocator<string> >::reverse_iterator xobj = ((multiset<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multiset<string,less<string>,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_89_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multiset<string,less<string>,allocator<string> >::reverse_iterator& obj = ((multiset<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset_89_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::reverse_iterator* pobj;
         multiset<string,less<string>,allocator<string> >::reverse_iterator xobj = ((multiset<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multiset<string,less<string>,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multiset<string,less<string>,allocator<string> >::reverse_iterator G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator;
static int G__multiset_89_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multiset<string,less<string>,allocator<string> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multiset<string,less<string>,allocator<string> >::reverse_iterator*) (soff+(sizeof(multiset<string,less<string>,allocator<string> >::reverse_iterator)*i)))->~G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multiset<string,less<string>,allocator<string> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multiset<string,less<string>,allocator<string> >::reverse_iterator*) (soff))->~G__TmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__multiset__0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref, *(multiset<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref, *(multiset<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref, *(multiset<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref, *(multiset<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref, *(multiset<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref, *(multiset<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref, *(multiset<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multiset<int,less<int>,allocator<int> >*) libp->para[0].ref, *(multiset<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::iterator* pobj;
         multiset<int,less<int>,allocator<int> >::iterator xobj = find(*((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])), *((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2]));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<int,less<int>,allocator<int> >::iterator* pobj;
         multiset<int,less<int>,allocator<int> >::iterator xobj = search(*((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])), *((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[2])), *((multiset<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[3])));
         pobj = new multiset<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref, *(multiset<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref, *(multiset<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref, *(multiset<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref, *(multiset<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref, *(multiset<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref, *(multiset<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref, *(multiset<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multiset<long,less<long>,allocator<long> >*) libp->para[0].ref, *(multiset<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::iterator* pobj;
         multiset<long,less<long>,allocator<long> >::iterator xobj = find(*((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])), *((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2]));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<long,less<long>,allocator<long> >::iterator* pobj;
         multiset<long,less<long>,allocator<long> >::iterator xobj = search(*((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])), *((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[2])), *((multiset<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[3])));
         pobj = new multiset<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref, *(multiset<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref, *(multiset<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref, *(multiset<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref, *(multiset<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref, *(multiset<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref, *(multiset<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref, *(multiset<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multiset<float,less<float>,allocator<float> >*) libp->para[0].ref, *(multiset<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::iterator* pobj;
         multiset<float,less<float>,allocator<float> >::iterator xobj = find(*((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])), *((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2]));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<float,less<float>,allocator<float> >::iterator* pobj;
         multiset<float,less<float>,allocator<float> >::iterator xobj = search(*((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])), *((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[2])), *((multiset<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[3])));
         pobj = new multiset<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref, *(multiset<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref, *(multiset<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref, *(multiset<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref, *(multiset<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref, *(multiset<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref, *(multiset<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref, *(multiset<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multiset<double,less<double>,allocator<double> >*) libp->para[0].ref, *(multiset<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::iterator* pobj;
         multiset<double,less<double>,allocator<double> >::iterator xobj = find(*((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])), *((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2]));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<double,less<double>,allocator<double> >::iterator* pobj;
         multiset<double,less<double>,allocator<double> >::iterator xobj = search(*((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])), *((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[2])), *((multiset<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[3])));
         pobj = new multiset<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref, *(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref, *(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(multiset<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(multiset<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(multiset<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(multiset<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(multiset<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multiset<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(multiset<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::iterator xobj = find(*((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])), *((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<void*,less<void*>,allocator<void*> >::iterator* pobj;
         multiset<void*,less<void*>,allocator<void*> >::iterator xobj = search(*((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])), *((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[2])), *((multiset<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[3])));
         pobj = new multiset<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref, *(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref, *(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(multiset<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(multiset<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(multiset<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_167(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(multiset<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(multiset<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multiset<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(multiset<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::iterator xobj = find(*((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])), *((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<char*,less<char*>,allocator<char*> >::iterator* pobj;
         multiset<char*,less<char*>,allocator<char*> >::iterator xobj = search(*((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])), *((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[2])), *((multiset<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[3])));
         pobj = new multiset<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref, *(multiset<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref, *(multiset<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref, *(multiset<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref, *(multiset<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref, *(multiset<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref, *(multiset<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_178(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref, *(multiset<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_179(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multiset<string,less<string>,allocator<string> >*) libp->para[0].ref, *(multiset<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_180(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::iterator* pobj;
         multiset<string,less<string>,allocator<string> >::iterator xobj = find(*((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])), *((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref);
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multiset__0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multiset<string,less<string>,allocator<string> >::iterator* pobj;
         multiset<string,less<string>,allocator<string> >::iterator xobj = search(*((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])), *((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[2])), *((multiset<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[3])));
         pobj = new multiset<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* less<int> */

/* binary_function<int,int,bool> */

/* allocator<int> */

/* multiset<int,less<int>,allocator<int> > */

/* multiset<int,less<int>,allocator<int> >::iterator */

/* multiset<int,less<int>,allocator<int> >::reverse_iterator */

/* less<long> */

/* binary_function<long,long,bool> */

/* allocator<long> */

/* multiset<long,less<long>,allocator<long> > */

/* multiset<long,less<long>,allocator<long> >::iterator */

/* multiset<long,less<long>,allocator<long> >::reverse_iterator */

/* less<float> */

/* binary_function<float,float,bool> */

/* allocator<float> */

/* multiset<float,less<float>,allocator<float> > */

/* multiset<float,less<float>,allocator<float> >::iterator */

/* multiset<float,less<float>,allocator<float> >::reverse_iterator */

/* less<double> */

/* binary_function<double,double,bool> */

/* allocator<double> */

/* multiset<double,less<double>,allocator<double> > */

/* multiset<double,less<double>,allocator<double> >::iterator */

/* multiset<double,less<double>,allocator<double> >::reverse_iterator */

/* less<void*> */

/* binary_function<void*,void*,bool> */

/* allocator<void*> */

/* multiset<void*,less<void*>,allocator<void*> > */

/* multiset<void*,less<void*>,allocator<void*> >::iterator */

/* multiset<void*,less<void*>,allocator<void*> >::reverse_iterator */

/* less<char*> */

/* binary_function<char*,char*,bool> */

/* allocator<char*> */

/* multiset<char*,less<char*>,allocator<char*> > */

/* multiset<char*,less<char*>,allocator<char*> >::iterator */

/* multiset<char*,less<char*>,allocator<char*> >::reverse_iterator */

/* less<string> */

/* binary_function<string,string,bool> */

/* allocator<string> */

/* multiset<string,less<string>,allocator<string> > */

/* multiset<string,less<string>,allocator<string> >::iterator */

/* multiset<string,less<string>,allocator<string> >::reverse_iterator */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc {
 public:
  G__Sizep2memfunc(): p(&G__Sizep2memfunc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc::*p)();
};

size_t G__get_sizep2memfunc()
{
  G__Sizep2memfunc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEintgR))) {
     less<int> *G__Lderived;
     G__Lderived=(less<int>*)0x1000;
     {
       binary_function<int,int,bool> *G__Lpbase=(binary_function<int,int,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEintgR),G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslElonggR))) {
     less<long> *G__Lderived;
     G__Lderived=(less<long>*)0x1000;
     {
       binary_function<long,long,bool> *G__Lpbase=(binary_function<long,long,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslElonggR),G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEfloatgR))) {
     less<float> *G__Lderived;
     G__Lderived=(less<float>*)0x1000;
     {
       binary_function<float,float,bool> *G__Lpbase=(binary_function<float,float,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEfloatgR),G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEdoublegR))) {
     less<double> *G__Lderived;
     G__Lderived=(less<double>*)0x1000;
     {
       binary_function<double,double,bool> *G__Lpbase=(binary_function<double,double,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR),G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR))) {
     less<void*> *G__Lderived;
     G__Lderived=(less<void*>*)0x1000;
     {
       binary_function<void*,void*,bool> *G__Lpbase=(binary_function<void*,void*,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR),G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEcharmUgR))) {
     less<char*> *G__Lderived;
     G__Lderived=(less<char*>*)0x1000;
     {
       binary_function<char*,char*,bool> *G__Lpbase=(binary_function<char*,char*,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR),G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEstringgR))) {
     less<string> *G__Lderived;
     G__Lderived=(less<string>*)0x1000;
     {
       binary_function<string,string,bool> *G__Lpbase=(binary_function<string,string,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR),G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable() {

   /* Setting up typedef entry */
   G__search_typename2("first_argument_type",105,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",105,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<int>",117,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",105,-1,0,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEintgR),0,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEintgR),0,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEintgR),0,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<int,less<int> >",117,G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",108,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",108,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",76,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",76,-1,256,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",108,-1,1,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",108,-1,257,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<long>",117,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlElonggR),0,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",76,-1,0,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",76,-1,256,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",108,-1,1,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",108,-1,257,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<long,less<long> >",117,G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",102,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",102,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",102,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<float>",117,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",102,-1,0,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",102,-1,0,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEfloatgR),0,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEfloatgR),0,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR),0,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,256,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,1,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,257,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<float,less<float> >",117,G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",100,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",100,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",68,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",68,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",100,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",100,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",100,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<double>",117,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",100,-1,0,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR),0,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",68,-1,0,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",68,-1,256,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",100,-1,1,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",100,-1,257,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<double,less<double> >",117,G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",89,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",89,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",89,-1,2,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",89,-1,258,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",89,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",89,-1,1025,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",89,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<void*>",117,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",89,-1,0,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",89,-1,0,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEvoidmUgR),0,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEvoidmUgR),0,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR),0,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",89,-1,2,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",89,-1,1026,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",89,-1,1,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",89,-1,1025,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<void*,less<void*> >",117,G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",67,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",67,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",67,-1,2,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",67,-1,258,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",67,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",67,-1,1025,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",67,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<char*>",117,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",67,-1,0,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",67,-1,0,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR),0,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",67,-1,2,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",67,-1,1026,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",67,-1,1,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",67,-1,1025,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<char*,less<char*> >",117,G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_string),256,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_string),1,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_string),257,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<string>",117,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEstringgR),0,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_string),256,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_string),1,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_string),257,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multiset<string,less<string> >",117,G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* less<int> */
static void G__setup_memvarlesslEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEintgR));
   { less<int> *p; p=(less<int>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<int,int,bool> */
static void G__setup_memvarbinary_functionlEintcOintcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   { binary_function<int,int,bool> *p; p=(binary_function<int,int,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<int> */
static void G__setup_memvarallocatorlEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   { allocator<int> *p; p=(allocator<int>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<int,less<int>,allocator<int> > */
static void G__setup_memvarmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   { multiset<int,less<int>,allocator<int> > *p; p=(multiset<int,less<int>,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<int,less<int>,allocator<int> >::iterator */
static void G__setup_memvarmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator));
   { multiset<int,less<int>,allocator<int> >::iterator *p; p=(multiset<int,less<int>,allocator<int> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<int,less<int>,allocator<int> >::reverse_iterator */
static void G__setup_memvarmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator));
   { multiset<int,less<int>,allocator<int> >::reverse_iterator *p; p=(multiset<int,less<int>,allocator<int> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* less<long> */
static void G__setup_memvarlesslElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslElonggR));
   { less<long> *p; p=(less<long>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<long,long,bool> */
static void G__setup_memvarbinary_functionlElongcOlongcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   { binary_function<long,long,bool> *p; p=(binary_function<long,long,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<long> */
static void G__setup_memvarallocatorlElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   { allocator<long> *p; p=(allocator<long>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<long,less<long>,allocator<long> > */
static void G__setup_memvarmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   { multiset<long,less<long>,allocator<long> > *p; p=(multiset<long,less<long>,allocator<long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<long,less<long>,allocator<long> >::iterator */
static void G__setup_memvarmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator));
   { multiset<long,less<long>,allocator<long> >::iterator *p; p=(multiset<long,less<long>,allocator<long> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<long,less<long>,allocator<long> >::reverse_iterator */
static void G__setup_memvarmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator));
   { multiset<long,less<long>,allocator<long> >::reverse_iterator *p; p=(multiset<long,less<long>,allocator<long> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* less<float> */
static void G__setup_memvarlesslEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEfloatgR));
   { less<float> *p; p=(less<float>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<float,float,bool> */
static void G__setup_memvarbinary_functionlEfloatcOfloatcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   { binary_function<float,float,bool> *p; p=(binary_function<float,float,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<float> */
static void G__setup_memvarallocatorlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   { allocator<float> *p; p=(allocator<float>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<float,less<float>,allocator<float> > */
static void G__setup_memvarmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   { multiset<float,less<float>,allocator<float> > *p; p=(multiset<float,less<float>,allocator<float> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<float,less<float>,allocator<float> >::iterator */
static void G__setup_memvarmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator));
   { multiset<float,less<float>,allocator<float> >::iterator *p; p=(multiset<float,less<float>,allocator<float> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<float,less<float>,allocator<float> >::reverse_iterator */
static void G__setup_memvarmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   { multiset<float,less<float>,allocator<float> >::reverse_iterator *p; p=(multiset<float,less<float>,allocator<float> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* less<double> */
static void G__setup_memvarlesslEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   { less<double> *p; p=(less<double>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<double,double,bool> */
static void G__setup_memvarbinary_functionlEdoublecOdoublecOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   { binary_function<double,double,bool> *p; p=(binary_function<double,double,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<double> */
static void G__setup_memvarallocatorlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   { allocator<double> *p; p=(allocator<double>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<double,less<double>,allocator<double> > */
static void G__setup_memvarmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   { multiset<double,less<double>,allocator<double> > *p; p=(multiset<double,less<double>,allocator<double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<double,less<double>,allocator<double> >::iterator */
static void G__setup_memvarmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator));
   { multiset<double,less<double>,allocator<double> >::iterator *p; p=(multiset<double,less<double>,allocator<double> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<double,less<double>,allocator<double> >::reverse_iterator */
static void G__setup_memvarmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   { multiset<double,less<double>,allocator<double> >::reverse_iterator *p; p=(multiset<double,less<double>,allocator<double> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* less<void*> */
static void G__setup_memvarlesslEvoidmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR));
   { less<void*> *p; p=(less<void*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<void*,void*,bool> */
static void G__setup_memvarbinary_functionlEvoidmUcOvoidmUcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   { binary_function<void*,void*,bool> *p; p=(binary_function<void*,void*,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<void*> */
static void G__setup_memvarallocatorlEvoidmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   { allocator<void*> *p; p=(allocator<void*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<void*,less<void*>,allocator<void*> > */
static void G__setup_memvarmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   { multiset<void*,less<void*>,allocator<void*> > *p; p=(multiset<void*,less<void*>,allocator<void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<void*,less<void*>,allocator<void*> >::iterator */
static void G__setup_memvarmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator));
   { multiset<void*,less<void*>,allocator<void*> >::iterator *p; p=(multiset<void*,less<void*>,allocator<void*> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<void*,less<void*>,allocator<void*> >::reverse_iterator */
static void G__setup_memvarmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   { multiset<void*,less<void*>,allocator<void*> >::reverse_iterator *p; p=(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* less<char*> */
static void G__setup_memvarlesslEcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   { less<char*> *p; p=(less<char*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<char*,char*,bool> */
static void G__setup_memvarbinary_functionlEcharmUcOcharmUcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   { binary_function<char*,char*,bool> *p; p=(binary_function<char*,char*,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<char*> */
static void G__setup_memvarallocatorlEcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   { allocator<char*> *p; p=(allocator<char*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<char*,less<char*>,allocator<char*> > */
static void G__setup_memvarmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   { multiset<char*,less<char*>,allocator<char*> > *p; p=(multiset<char*,less<char*>,allocator<char*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<char*,less<char*>,allocator<char*> >::iterator */
static void G__setup_memvarmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator));
   { multiset<char*,less<char*>,allocator<char*> >::iterator *p; p=(multiset<char*,less<char*>,allocator<char*> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<char*,less<char*>,allocator<char*> >::reverse_iterator */
static void G__setup_memvarmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   { multiset<char*,less<char*>,allocator<char*> >::reverse_iterator *p; p=(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* less<string> */
static void G__setup_memvarlesslEstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR));
   { less<string> *p; p=(less<string>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<string,string,bool> */
static void G__setup_memvarbinary_functionlEstringcOstringcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   { binary_function<string,string,bool> *p; p=(binary_function<string,string,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<string> */
static void G__setup_memvarallocatorlEstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   { allocator<string> *p; p=(allocator<string>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<string,less<string>,allocator<string> > */
static void G__setup_memvarmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   { multiset<string,less<string>,allocator<string> > *p; p=(multiset<string,less<string>,allocator<string> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<string,less<string>,allocator<string> >::iterator */
static void G__setup_memvarmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator));
   { multiset<string,less<string>,allocator<string> >::iterator *p; p=(multiset<string,less<string>,allocator<string> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multiset<string,less<string>,allocator<string> >::reverse_iterator */
static void G__setup_memvarmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   { multiset<string,less<string>,allocator<string> >::reverse_iterator *p; p=(multiset<string,less<string>,allocator<string> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunclesslEintgR(void) {
   /* less<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEintgR));
   G__memfunc_setup("operator()",957,G__multiset_48_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 11 - x i - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<int>", 892, G__multiset_48_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<int>", 892, G__multiset_48_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 0, 1, 1, 1, 0, "u 'less<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<int>", 1018, G__multiset_48_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_48_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 1, 1, 1, 1, 0, "u 'less<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEintcOintcOboolgR(void) {
   /* binary_function<int,int,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<int,int,bool>", 2910, G__multiset_49_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<int,int,bool>", 2910, G__multiset_49_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<int,int,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<int,int,bool>", 3036, G__multiset_49_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_49_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<int,int,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEintgR(void) {
   /* allocator<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__memfunc_setup("allocator<int>",1414,G__multiset_50_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<int>",1414,G__multiset_50_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 0, 1, 1, 1, 0, "u 'allocator<int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_50_0_3, 73, -1, G__defined_typename("allocator<int>::pointer"), 0, 1, 1, 1, 8, "i - 'allocator<int>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_50_0_4, 73, -1, G__defined_typename("allocator<int>::const_pointer"), 0, 1, 1, 1, 8, "i - 'allocator<int>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multiset_50_0_5, 73, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<int>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multiset_50_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'allocator<int>::pointer' 0 - __p h - 'allocator<int>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_50_0_7, 104, -1, G__defined_typename("allocator<int>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multiset_50_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'allocator<int>::pointer' 0 - __p i - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multiset_50_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'allocator<int>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<int>", 1540, G__multiset_50_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_50_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 1, 1, 1, 1, 0, "u 'allocator<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgR(void) {
   /* multiset<int,less<int>,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__memfunc_setup("multiset<int,less<int>,allocator<int> >",3766,G__multiset_51_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiset<int,less<int>,allocator<int> >",3766,G__multiset_51_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_51_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multiset_51_0_4, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multiset_51_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multiset_51_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multiset_51_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multiset_51_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multiset_51_0_9, 104, -1, G__defined_typename("multiset<int,less<int>,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_51_0_10, 104, -1, G__defined_typename("multiset<int,less<int>,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_51_0_11, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_51_0_12, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - position i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_51_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_51_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - first u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multiset_51_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multiset_51_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multiset_51_0_17, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multiset_51_0_18, 104, -1, G__defined_typename("multiset<int,less<int>,allocator<int> >::size_type"), 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multiset_51_0_19, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multiset_51_0_20, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multiset<int,less<int>,allocator<int> >", 3892, G__multiset_51_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator(void) {
   /* multiset<int,less<int>,allocator<int> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multiset_52_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multiset_52_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_52_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_52_0_4, 105, -1, G__defined_typename("multiset<int,less<int>,allocator<int> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_52_0_5, 73, -1, G__defined_typename("multiset<int,less<int>,allocator<int> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_52_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_52_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_52_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_52_0_9, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multiset_52_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multiset_52_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multiset_52_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator(void) {
   /* multiset<int,less<int>,allocator<int> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multiset_53_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_53_0_2, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multiset<int,less<int>,allocator<int> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_53_0_3, 105, -1, G__defined_typename("multiset<int,less<int>,allocator<int> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_53_0_4, 73, -1, G__defined_typename("multiset<int,less<int>,allocator<int> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_53_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_53_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_53_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_53_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multiset_53_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslElonggR(void) {
   /* less<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslElonggR));
   G__memfunc_setup("operator()",957,G__multiset_54_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"l - - 11 - x l - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<long>", 993, G__multiset_54_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<long>", 993, G__multiset_54_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 0, 1, 1, 1, 0, "u 'less<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<long>", 1119, G__multiset_54_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_54_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 1, 1, 1, 1, 0, "u 'less<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlElongcOlongcOboolgR(void) {
   /* binary_function<long,long,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<long,long,bool>", 3112, G__multiset_55_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<long,long,bool>", 3112, G__multiset_55_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<long,long,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<long,long,bool>", 3238, G__multiset_55_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_55_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<long,long,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlElonggR(void) {
   /* allocator<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__memfunc_setup("allocator<long>",1515,G__multiset_56_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<long>",1515,G__multiset_56_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 0, 1, 1, 1, 0, "u 'allocator<long>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_56_0_3, 76, -1, G__defined_typename("allocator<long>::pointer"), 0, 1, 1, 1, 8, "l - 'allocator<long>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_56_0_4, 76, -1, G__defined_typename("allocator<long>::const_pointer"), 0, 1, 1, 1, 8, "l - 'allocator<long>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multiset_56_0_5, 76, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<long>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multiset_56_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - 'allocator<long>::pointer' 0 - __p h - 'allocator<long>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_56_0_7, 104, -1, G__defined_typename("allocator<long>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multiset_56_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - 'allocator<long>::pointer' 0 - __p l - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multiset_56_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "L - 'allocator<long>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<long>", 1641, G__multiset_56_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_56_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 1, 1, 1, 1, 0, "u 'allocator<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgR(void) {
   /* multiset<long,less<long>,allocator<long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__memfunc_setup("multiset<long,less<long>,allocator<long> >",4069,G__multiset_57_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiset<long,less<long>,allocator<long> >",4069,G__multiset_57_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_57_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multiset_57_0_4, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multiset_57_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multiset_57_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multiset_57_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multiset_57_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multiset_57_0_9, 104, -1, G__defined_typename("multiset<long,less<long>,allocator<long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_57_0_10, 104, -1, G__defined_typename("multiset<long,less<long>,allocator<long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_57_0_11, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_57_0_12, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - position l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_57_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_57_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - first u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multiset_57_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multiset_57_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multiset_57_0_17, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multiset_57_0_18, 104, -1, G__defined_typename("multiset<long,less<long>,allocator<long> >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multiset_57_0_19, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multiset_57_0_20, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multiset<long,less<long>,allocator<long> >", 4195, G__multiset_57_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator(void) {
   /* multiset<long,less<long>,allocator<long> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multiset_58_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multiset_58_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_58_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_58_0_4, 108, -1, G__defined_typename("multiset<long,less<long>,allocator<long> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_58_0_5, 76, -1, G__defined_typename("multiset<long,less<long>,allocator<long> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_58_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_58_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_58_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_58_0_9, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multiset_58_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multiset_58_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multiset_58_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator(void) {
   /* multiset<long,less<long>,allocator<long> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multiset_59_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_59_0_2, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multiset<long,less<long>,allocator<long> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_59_0_3, 108, -1, G__defined_typename("multiset<long,less<long>,allocator<long> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_59_0_4, 76, -1, G__defined_typename("multiset<long,less<long>,allocator<long> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_59_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_59_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_59_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_59_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multiset_59_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEfloatgR(void) {
   /* less<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEfloatgR));
   G__memfunc_setup("operator()",957,G__multiset_60_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"f - - 11 - x f - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<float>", 1095, G__multiset_60_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<float>", 1095, G__multiset_60_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEfloatgR), -1, 0, 1, 1, 1, 0, "u 'less<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<float>", 1221, G__multiset_60_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_60_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'less<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEfloatcOfloatcOboolgR(void) {
   /* binary_function<float,float,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<float,float,bool>", 3316, G__multiset_61_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<float,float,bool>", 3316, G__multiset_61_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<float,float,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<float,float,bool>", 3442, G__multiset_61_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_61_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<float,float,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEfloatgR(void) {
   /* allocator<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__memfunc_setup("allocator<float>",1617,G__multiset_62_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<float>",1617,G__multiset_62_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'allocator<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_62_0_3, 70, -1, G__defined_typename("allocator<float>::pointer"), 0, 1, 1, 1, 8, "f - 'allocator<float>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_62_0_4, 70, -1, G__defined_typename("allocator<float>::const_pointer"), 0, 1, 1, 1, 8, "f - 'allocator<float>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multiset_62_0_5, 70, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<float>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multiset_62_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'allocator<float>::pointer' 0 - __p h - 'allocator<float>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_62_0_7, 104, -1, G__defined_typename("allocator<float>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multiset_62_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'allocator<float>::pointer' 0 - __p f - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multiset_62_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'allocator<float>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<float>", 1743, G__multiset_62_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_62_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'allocator<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR(void) {
   /* multiset<float,less<float>,allocator<float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__memfunc_setup("multiset<float,less<float>,allocator<float> >",4375,G__multiset_63_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiset<float,less<float>,allocator<float> >",4375,G__multiset_63_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_63_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multiset_63_0_4, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multiset_63_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multiset_63_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multiset_63_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multiset_63_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multiset_63_0_9, 104, -1, G__defined_typename("multiset<float,less<float>,allocator<float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_63_0_10, 104, -1, G__defined_typename("multiset<float,less<float>,allocator<float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_63_0_11, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_63_0_12, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - position f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_63_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_63_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - first u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multiset_63_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multiset_63_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multiset_63_0_17, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multiset_63_0_18, 104, -1, G__defined_typename("multiset<float,less<float>,allocator<float> >::size_type"), 0, 1, 1, 1, 8, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multiset_63_0_19, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multiset_63_0_20, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multiset<float,less<float>,allocator<float> >", 4501, G__multiset_63_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator(void) {
   /* multiset<float,less<float>,allocator<float> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multiset_64_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multiset_64_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_64_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_64_0_4, 102, -1, G__defined_typename("multiset<float,less<float>,allocator<float> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_64_0_5, 70, -1, G__defined_typename("multiset<float,less<float>,allocator<float> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_64_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_64_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_64_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_64_0_9, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multiset_64_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multiset_64_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multiset_64_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator(void) {
   /* multiset<float,less<float>,allocator<float> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multiset_65_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_65_0_2, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multiset<float,less<float>,allocator<float> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_65_0_3, 102, -1, G__defined_typename("multiset<float,less<float>,allocator<float> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_65_0_4, 70, -1, G__defined_typename("multiset<float,less<float>,allocator<float> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_65_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_65_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_65_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_65_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multiset_65_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEdoublegR(void) {
   /* less<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   G__memfunc_setup("operator()",957,G__multiset_66_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"d - - 11 - x d - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<double>", 1196, G__multiset_66_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<double>", 1196, G__multiset_66_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'less<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<double>", 1322, G__multiset_66_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_66_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'less<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEdoublecOdoublecOboolgR(void) {
   /* binary_function<double,double,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<double,double,bool>", 3518, G__multiset_67_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<double,double,bool>", 3518, G__multiset_67_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<double,double,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<double,double,bool>", 3644, G__multiset_67_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_67_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<double,double,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEdoublegR(void) {
   /* allocator<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__memfunc_setup("allocator<double>",1718,G__multiset_68_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<double>",1718,G__multiset_68_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'allocator<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_68_0_3, 68, -1, G__defined_typename("allocator<double>::pointer"), 0, 1, 1, 1, 8, "d - 'allocator<double>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_68_0_4, 68, -1, G__defined_typename("allocator<double>::const_pointer"), 0, 1, 1, 1, 8, "d - 'allocator<double>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multiset_68_0_5, 68, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<double>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multiset_68_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'allocator<double>::pointer' 0 - __p h - 'allocator<double>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_68_0_7, 104, -1, G__defined_typename("allocator<double>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multiset_68_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'allocator<double>::pointer' 0 - __p d - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multiset_68_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'allocator<double>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<double>", 1844, G__multiset_68_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_68_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'allocator<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR(void) {
   /* multiset<double,less<double>,allocator<double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__memfunc_setup("multiset<double,less<double>,allocator<double> >",4678,G__multiset_69_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiset<double,less<double>,allocator<double> >",4678,G__multiset_69_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_69_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multiset_69_0_4, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multiset_69_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multiset_69_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multiset_69_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multiset_69_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multiset_69_0_9, 104, -1, G__defined_typename("multiset<double,less<double>,allocator<double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_69_0_10, 104, -1, G__defined_typename("multiset<double,less<double>,allocator<double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_69_0_11, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_69_0_12, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - position d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_69_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_69_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - first u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multiset_69_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multiset_69_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multiset_69_0_17, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multiset_69_0_18, 104, -1, G__defined_typename("multiset<double,less<double>,allocator<double> >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multiset_69_0_19, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multiset_69_0_20, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multiset<double,less<double>,allocator<double> >", 4804, G__multiset_69_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator(void) {
   /* multiset<double,less<double>,allocator<double> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multiset_70_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multiset_70_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_70_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_70_0_4, 100, -1, G__defined_typename("multiset<double,less<double>,allocator<double> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_70_0_5, 68, -1, G__defined_typename("multiset<double,less<double>,allocator<double> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_70_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_70_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_70_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_70_0_9, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multiset_70_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multiset_70_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multiset_70_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator(void) {
   /* multiset<double,less<double>,allocator<double> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multiset_71_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_71_0_2, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multiset<double,less<double>,allocator<double> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_71_0_3, 100, -1, G__defined_typename("multiset<double,less<double>,allocator<double> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_71_0_4, 68, -1, G__defined_typename("multiset<double,less<double>,allocator<double> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_71_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_71_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_71_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_71_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multiset_71_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEvoidmUgR(void) {
   /* less<void*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR));
   G__memfunc_setup("operator()",957,G__multiset_72_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"Y - - 41 - x Y - - 41 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<void*>", 1037, G__multiset_72_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEvoidmUgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<void*>", 1037, G__multiset_72_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEvoidmUgR), -1, 0, 1, 1, 1, 0, "u 'less<void*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<void*>", 1163, G__multiset_72_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_72_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEvoidmUgR), -1, 1, 1, 1, 1, 0, "u 'less<void*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEvoidmUcOvoidmUcOboolgR(void) {
   /* binary_function<void*,void*,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<void*,void*,bool>", 3200, G__multiset_73_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<void*,void*,bool>", 3200, G__multiset_73_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<void*,void*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<void*,void*,bool>", 3326, G__multiset_73_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_73_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<void*,void*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEvoidmUgR(void) {
   /* allocator<void*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__memfunc_setup("allocator<void*>",1559,G__multiset_74_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<void*>",1559,G__multiset_74_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 0, 1, 1, 1, 0, "u 'allocator<void*>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_74_0_3, 89, -1, G__defined_typename("allocator<void*>::pointer"), 2, 1, 1, 1, 8, "Y - 'allocator<void*>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_74_0_4, 89, -1, G__defined_typename("allocator<void*>::const_pointer"), 2, 1, 1, 1, 8, "Y - 'allocator<void*>::const_reference' 40 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multiset_74_0_5, 89, -1, -1, 2, 2, 1, 1, 0, 
"h - 'allocator<void*>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multiset_74_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"Y - 'allocator<void*>::pointer' 2 - __p h - 'allocator<void*>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_74_0_7, 104, -1, G__defined_typename("allocator<void*>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multiset_74_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"Y - 'allocator<void*>::pointer' 2 - __p Y - - 41 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multiset_74_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "Y - 'allocator<void*>::pointer' 2 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<void*>", 1685, G__multiset_74_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_74_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 1, 1, 1, 1, 0, "u 'allocator<void*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR(void) {
   /* multiset<void*,less<void*>,allocator<void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__memfunc_setup("multiset<void*,less<void*>,allocator<void*> >",4201,G__multiset_75_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiset<void*,less<void*>,allocator<void*> >",4201,G__multiset_75_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_75_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multiset_75_0_4, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multiset_75_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multiset_75_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multiset_75_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multiset_75_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multiset_75_0_9, 104, -1, G__defined_typename("multiset<void*,less<void*>,allocator<void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_75_0_10, 104, -1, G__defined_typename("multiset<void*,less<void*>,allocator<void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_75_0_11, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_75_0_12, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - position Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_75_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_75_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - first u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multiset_75_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multiset_75_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multiset_75_0_17, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multiset_75_0_18, 104, -1, G__defined_typename("multiset<void*,less<void*>,allocator<void*> >::size_type"), 0, 1, 1, 1, 8, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multiset_75_0_19, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multiset_75_0_20, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multiset<void*,less<void*>,allocator<void*> >", 4327, G__multiset_75_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator(void) {
   /* multiset<void*,less<void*>,allocator<void*> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multiset_76_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multiset_76_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_76_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_76_0_4, 89, -1, G__defined_typename("multiset<void*,less<void*>,allocator<void*> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_76_0_5, 89, -1, G__defined_typename("multiset<void*,less<void*>,allocator<void*> >::value_type"), 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_76_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_76_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_76_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_76_0_9, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multiset_76_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multiset_76_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multiset_76_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator(void) {
   /* multiset<void*,less<void*>,allocator<void*> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multiset_77_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_77_0_2, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multiset<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_77_0_3, 89, -1, G__defined_typename("multiset<void*,less<void*>,allocator<void*> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_77_0_4, 89, -1, G__defined_typename("multiset<void*,less<void*>,allocator<void*> >::value_type"), 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_77_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_77_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_77_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_77_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multiset_77_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEcharmUgR(void) {
   /* less<char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   G__memfunc_setup("operator()",957,G__multiset_78_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"C - - 41 - x C - - 41 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<char*>", 1017, G__multiset_78_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<char*>", 1017, G__multiset_78_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 0, 1, 1, 1, 0, "u 'less<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<char*>", 1143, G__multiset_78_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_78_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 1, 1, 1, 1, 0, "u 'less<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEcharmUcOcharmUcOboolgR(void) {
   /* binary_function<char*,char*,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<char*,char*,bool>", 3160, G__multiset_79_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<char*,char*,bool>", 3160, G__multiset_79_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<char*,char*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<char*,char*,bool>", 3286, G__multiset_79_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_79_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<char*,char*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEcharmUgR(void) {
   /* allocator<char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__memfunc_setup("allocator<char*>",1539,G__multiset_80_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<char*>",1539,G__multiset_80_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 0, 1, 1, 1, 0, "u 'allocator<char*>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_80_0_3, 67, -1, G__defined_typename("allocator<char*>::pointer"), 2, 1, 1, 1, 8, "C - 'allocator<char*>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_80_0_4, 67, -1, G__defined_typename("allocator<char*>::const_pointer"), 2, 1, 1, 1, 8, "C - 'allocator<char*>::const_reference' 40 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multiset_80_0_5, 67, -1, -1, 2, 2, 1, 1, 0, 
"h - 'allocator<char*>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multiset_80_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'allocator<char*>::pointer' 2 - __p h - 'allocator<char*>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_80_0_7, 104, -1, G__defined_typename("allocator<char*>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multiset_80_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'allocator<char*>::pointer' 2 - __p C - - 41 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multiset_80_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'allocator<char*>::pointer' 2 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<char*>", 1665, G__multiset_80_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_80_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 1, 1, 1, 1, 0, "u 'allocator<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR(void) {
   /* multiset<char*,less<char*>,allocator<char*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__memfunc_setup("multiset<char*,less<char*>,allocator<char*> >",4141,G__multiset_81_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiset<char*,less<char*>,allocator<char*> >",4141,G__multiset_81_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_81_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multiset_81_0_4, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multiset_81_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multiset_81_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multiset_81_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multiset_81_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multiset_81_0_9, 104, -1, G__defined_typename("multiset<char*,less<char*>,allocator<char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_81_0_10, 104, -1, G__defined_typename("multiset<char*,less<char*>,allocator<char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_81_0_11, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_81_0_12, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - position C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_81_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_81_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - first u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multiset_81_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multiset_81_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multiset_81_0_17, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multiset_81_0_18, 104, -1, G__defined_typename("multiset<char*,less<char*>,allocator<char*> >::size_type"), 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multiset_81_0_19, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multiset_81_0_20, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multiset<char*,less<char*>,allocator<char*> >", 4267, G__multiset_81_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator(void) {
   /* multiset<char*,less<char*>,allocator<char*> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multiset_82_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multiset_82_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_82_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_82_0_4, 67, -1, G__defined_typename("multiset<char*,less<char*>,allocator<char*> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_82_0_5, 67, -1, G__defined_typename("multiset<char*,less<char*>,allocator<char*> >::value_type"), 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_82_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_82_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_82_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_82_0_9, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multiset_82_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multiset_82_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multiset_82_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator(void) {
   /* multiset<char*,less<char*>,allocator<char*> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multiset_83_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_83_0_2, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multiset<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_83_0_3, 67, -1, G__defined_typename("multiset<char*,less<char*>,allocator<char*> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_83_0_4, 67, -1, G__defined_typename("multiset<char*,less<char*>,allocator<char*> >::value_type"), 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_83_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_83_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_83_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_83_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multiset_83_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEstringgR(void) {
   /* less<string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR));
   G__memfunc_setup("operator()",957,G__multiset_84_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' - 11 - x u 'string' - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<string>", 1224, G__multiset_84_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<string>", 1224, G__multiset_84_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 0, 1, 1, 1, 0, "u 'less<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<string>", 1350, G__multiset_84_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_84_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 1, 1, 1, 1, 0, "u 'less<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEstringcOstringcOboolgR(void) {
   /* binary_function<string,string,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<string,string,bool>", 3574, G__multiset_85_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<string,string,bool>", 3574, G__multiset_85_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<string,string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<string,string,bool>", 3700, G__multiset_85_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_85_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<string,string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEstringgR(void) {
   /* allocator<string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__memfunc_setup("allocator<string>",1746,G__multiset_86_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<string>",1746,G__multiset_86_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 0, 1, 1, 1, 0, "u 'allocator<string>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_86_0_3, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("allocator<string>::pointer"), 0, 1, 1, 1, 8, "u 'string' 'allocator<string>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multiset_86_0_4, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("allocator<string>::const_pointer"), 0, 1, 1, 1, 8, "u 'string' 'allocator<string>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multiset_86_0_5, 85, G__get_linked_tagnum(&G__LN_string), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<string>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multiset_86_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'string' 'allocator<string>::pointer' 0 - __p h - 'allocator<string>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_86_0_7, 104, -1, G__defined_typename("allocator<string>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multiset_86_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'string' 'allocator<string>::pointer' 0 - __p u 'string' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multiset_86_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'string' 'allocator<string>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<string>", 1872, G__multiset_86_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multiset_86_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 1, 1, 1, 1, 0, "u 'allocator<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR(void) {
   /* multiset<string,less<string>,allocator<string> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__memfunc_setup("multiset<string,less<string>,allocator<string> >",4762,G__multiset_87_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiset<string,less<string>,allocator<string> >",4762,G__multiset_87_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_87_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multiset_87_0_4, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multiset_87_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multiset_87_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multiset_87_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multiset_87_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multiset_87_0_9, 104, -1, G__defined_typename("multiset<string,less<string>,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multiset_87_0_10, 104, -1, G__defined_typename("multiset<string,less<string>,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_87_0_11, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multiset_87_0_12, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - position u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_87_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multiset_87_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - first u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multiset_87_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multiset_87_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multiset_87_0_17, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multiset_87_0_18, 104, -1, G__defined_typename("multiset<string,less<string>,allocator<string> >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multiset_87_0_19, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multiset_87_0_20, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multiset<string,less<string>,allocator<string> >", 4888, G__multiset_87_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator(void) {
   /* multiset<string,less<string>,allocator<string> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multiset_88_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multiset_88_0_2, 105, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_88_0_3, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_88_0_4, 117, G__get_linked_tagnum(&G__LN_string), G__defined_typename("multiset<string,less<string>,allocator<string> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_88_0_5, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("multiset<string,less<string>,allocator<string> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_88_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_88_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_88_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_88_0_9, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multiset_88_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multiset_88_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multiset_88_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator(void) {
   /* multiset<string,less<string>,allocator<string> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multiset_89_0_1, 105, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multiset_89_0_2, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multiset<string,less<string>,allocator<string> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multiset_89_0_3, 117, G__get_linked_tagnum(&G__LN_string), G__defined_typename("multiset<string,less<string>,allocator<string> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multiset_89_0_4, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("multiset<string,less<string>,allocator<string> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_89_0_5, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multiset_89_0_6, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_89_0_7, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multiset_89_0_8, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multiset_89_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC__=3",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC_MINOR__=4",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__MULTISET_DLL=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"INCLUDE_CINTDICTVERSION=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__CINTDICTVERSION=20090608",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global() {
  G__cpp_setup_global0();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
   G__memfunc_setup("operator==", 998, G__multiset__0_112, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<int,less<int>,allocator<int> >::reverse_iterator' - 11 - x u 'multiset<int,less<int>,allocator<int> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_113, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<int,less<int>,allocator<int> >::reverse_iterator' - 11 - x u 'multiset<int,less<int>,allocator<int> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_114, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >' - 11 - x u 'multiset<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multiset__0_115, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >' - 11 - x u 'multiset<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_116, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >' - 11 - x u 'multiset<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multiset__0_117, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >' - 11 - x u 'multiset<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multiset__0_118, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >' - 11 - x u 'multiset<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multiset__0_119, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >' - 11 - x u 'multiset<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__multiset__0_120, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - first u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multiset__0_121, 117, G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - first1 u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - last1 "
"u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - first2 u 'multiset<int,less<int>,allocator<int> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_122, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<long,less<long>,allocator<long> >::reverse_iterator' - 11 - x u 'multiset<long,less<long>,allocator<long> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_123, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<long,less<long>,allocator<long> >::reverse_iterator' - 11 - x u 'multiset<long,less<long>,allocator<long> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_124, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >' - 11 - x u 'multiset<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multiset__0_125, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >' - 11 - x u 'multiset<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_126, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >' - 11 - x u 'multiset<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multiset__0_127, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >' - 11 - x u 'multiset<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multiset__0_128, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >' - 11 - x u 'multiset<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multiset__0_129, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >' - 11 - x u 'multiset<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__multiset__0_130, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - first u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multiset__0_131, 117, G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - first1 u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - last1 "
"u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - first2 u 'multiset<long,less<long>,allocator<long> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_132, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<float,less<float>,allocator<float> >::reverse_iterator' - 11 - x u 'multiset<float,less<float>,allocator<float> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_133, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<float,less<float>,allocator<float> >::reverse_iterator' - 11 - x u 'multiset<float,less<float>,allocator<float> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_134, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >' - 11 - x u 'multiset<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multiset__0_135, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >' - 11 - x u 'multiset<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_136, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >' - 11 - x u 'multiset<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multiset__0_137, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >' - 11 - x u 'multiset<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multiset__0_138, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >' - 11 - x u 'multiset<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multiset__0_139, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >' - 11 - x u 'multiset<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__multiset__0_140, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - first u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multiset__0_141, 117, G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - first1 u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - last1 "
"u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - first2 u 'multiset<float,less<float>,allocator<float> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_142, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<double,less<double>,allocator<double> >::reverse_iterator' - 11 - x u 'multiset<double,less<double>,allocator<double> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_143, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<double,less<double>,allocator<double> >::reverse_iterator' - 11 - x u 'multiset<double,less<double>,allocator<double> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_144, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >' - 11 - x u 'multiset<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multiset__0_145, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >' - 11 - x u 'multiset<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_146, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >' - 11 - x u 'multiset<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multiset__0_147, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >' - 11 - x u 'multiset<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multiset__0_148, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >' - 11 - x u 'multiset<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multiset__0_149, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >' - 11 - x u 'multiset<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__multiset__0_150, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - first u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multiset__0_151, 117, G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - first1 u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - last1 "
"u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - first2 u 'multiset<double,less<double>,allocator<double> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_152, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - x u 'multiset<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_153, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - x u 'multiset<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_154, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - x u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multiset__0_155, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - x u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_156, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - x u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multiset__0_157, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - x u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multiset__0_158, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - x u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multiset__0_159, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - x u 'multiset<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__multiset__0_160, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - first u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multiset__0_161, 117, G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - first1 u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - last1 "
"u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - first2 u 'multiset<void*,less<void*>,allocator<void*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_162, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - x u 'multiset<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_163, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - x u 'multiset<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_164, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - x u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multiset__0_165, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - x u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_166, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - x u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multiset__0_167, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - x u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multiset__0_168, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - x u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multiset__0_169, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - x u 'multiset<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__multiset__0_170, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - first u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multiset__0_171, 117, G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - first1 u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - last1 "
"u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - first2 u 'multiset<char*,less<char*>,allocator<char*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_172, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<string,less<string>,allocator<string> >::reverse_iterator' - 11 - x u 'multiset<string,less<string>,allocator<string> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_173, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multiset<string,less<string>,allocator<string> >::reverse_iterator' - 11 - x u 'multiset<string,less<string>,allocator<string> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multiset__0_174, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >' - 11 - x u 'multiset<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multiset__0_175, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >' - 11 - x u 'multiset<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multiset__0_176, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >' - 11 - x u 'multiset<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multiset__0_177, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >' - 11 - x u 'multiset<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multiset__0_178, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >' - 11 - x u 'multiset<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multiset__0_179, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >' - 11 - x u 'multiset<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__multiset__0_180, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - first u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multiset__0_181, 117, G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - first1 u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - last1 "
"u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - first2 u 'multiset<string,less<string>,allocator<string> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LN_string = { "string" , 99 , -1 };
G__linked_taginfo G__LN_lesslEintgR = { "less<int>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEintcOintcOboolgR = { "binary_function<int,int,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEintgR = { "allocator<int>" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR = { "multiset<int,less<int>,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator = { "multiset<int,less<int>,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator = { "multiset<int,less<int>,allocator<int> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_lesslElonggR = { "less<long>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlElongcOlongcOboolgR = { "binary_function<long,long,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlElonggR = { "allocator<long>" , 99 , -1 };
G__linked_taginfo G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR = { "multiset<long,less<long>,allocator<long> >" , 99 , -1 };
G__linked_taginfo G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator = { "multiset<long,less<long>,allocator<long> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator = { "multiset<long,less<long>,allocator<long> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_lesslEfloatgR = { "less<float>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEfloatcOfloatcOboolgR = { "binary_function<float,float,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEfloatgR = { "allocator<float>" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR = { "multiset<float,less<float>,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator = { "multiset<float,less<float>,allocator<float> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator = { "multiset<float,less<float>,allocator<float> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_lesslEdoublegR = { "less<double>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEdoublecOdoublecOboolgR = { "binary_function<double,double,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEdoublegR = { "allocator<double>" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR = { "multiset<double,less<double>,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator = { "multiset<double,less<double>,allocator<double> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator = { "multiset<double,less<double>,allocator<double> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_lesslEvoidmUgR = { "less<void*>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR = { "binary_function<void*,void*,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEvoidmUgR = { "allocator<void*>" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR = { "multiset<void*,less<void*>,allocator<void*> >" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator = { "multiset<void*,less<void*>,allocator<void*> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator = { "multiset<void*,less<void*>,allocator<void*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_lesslEcharmUgR = { "less<char*>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEcharmUcOcharmUcOboolgR = { "binary_function<char*,char*,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEcharmUgR = { "allocator<char*>" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR = { "multiset<char*,less<char*>,allocator<char*> >" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator = { "multiset<char*,less<char*>,allocator<char*> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator = { "multiset<char*,less<char*>,allocator<char*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_lesslEstringgR = { "less<string>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEstringcOstringcOboolgR = { "binary_function<string,string,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEstringgR = { "allocator<string>" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR = { "multiset<string,less<string>,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator = { "multiset<string,less<string>,allocator<string> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator = { "multiset<string,less<string>,allocator<string> >::reverse_iterator" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable() {
  G__LN_string.tagnum = -1 ;
  G__LN_lesslEintgR.tagnum = -1 ;
  G__LN_binary_functionlEintcOintcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEintgR.tagnum = -1 ;
  G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_lesslElonggR.tagnum = -1 ;
  G__LN_binary_functionlElongcOlongcOboolgR.tagnum = -1 ;
  G__LN_allocatorlElonggR.tagnum = -1 ;
  G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR.tagnum = -1 ;
  G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_lesslEfloatgR.tagnum = -1 ;
  G__LN_binary_functionlEfloatcOfloatcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEfloatgR.tagnum = -1 ;
  G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_lesslEdoublegR.tagnum = -1 ;
  G__LN_binary_functionlEdoublecOdoublecOboolgR.tagnum = -1 ;
  G__LN_allocatorlEdoublegR.tagnum = -1 ;
  G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_lesslEvoidmUgR.tagnum = -1 ;
  G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEvoidmUgR.tagnum = -1 ;
  G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR.tagnum = -1 ;
  G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_lesslEcharmUgR.tagnum = -1 ;
  G__LN_binary_functionlEcharmUcOcharmUcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEcharmUgR.tagnum = -1 ;
  G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR.tagnum = -1 ;
  G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_lesslEstringgR.tagnum = -1 ;
  G__LN_binary_functionlEstringcOstringcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEstringgR.tagnum = -1 ;
  G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__LN_string);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEintgR),sizeof(less<int>),-1,0,(char*)NULL,G__setup_memvarlesslEintgR,G__setup_memfunclesslEintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR),sizeof(binary_function<int,int,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEintcOintcOboolgR,G__setup_memfuncbinary_functionlEintcOintcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR),sizeof(allocator<int>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEintgR,G__setup_memfuncallocatorlEintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgR),sizeof(multiset<int,less<int>,allocator<int> >),-1,3840,(char*)NULL,G__setup_memvarmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgR,G__setup_memfuncmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator),sizeof(multiset<int,less<int>,allocator<int> >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator,G__setup_memfuncmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator),sizeof(multiset<int,less<int>,allocator<int> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator,G__setup_memfuncmultisetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslElonggR),sizeof(less<long>),-1,0,(char*)NULL,G__setup_memvarlesslElonggR,G__setup_memfunclesslElonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR),sizeof(binary_function<long,long,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlElongcOlongcOboolgR,G__setup_memfuncbinary_functionlElongcOlongcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR),sizeof(allocator<long>),-1,1792,(char*)NULL,G__setup_memvarallocatorlElonggR,G__setup_memfuncallocatorlElonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgR),sizeof(multiset<long,less<long>,allocator<long> >),-1,3840,(char*)NULL,G__setup_memvarmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgR,G__setup_memfuncmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator),sizeof(multiset<long,less<long>,allocator<long> >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator,G__setup_memfuncmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator),sizeof(multiset<long,less<long>,allocator<long> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator,G__setup_memfuncmultisetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEfloatgR),sizeof(less<float>),-1,0,(char*)NULL,G__setup_memvarlesslEfloatgR,G__setup_memfunclesslEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR),sizeof(binary_function<float,float,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEfloatcOfloatcOboolgR,G__setup_memfuncbinary_functionlEfloatcOfloatcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR),sizeof(allocator<float>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEfloatgR,G__setup_memfuncallocatorlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR),sizeof(multiset<float,less<float>,allocator<float> >),-1,3840,(char*)NULL,G__setup_memvarmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR,G__setup_memfuncmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator),sizeof(multiset<float,less<float>,allocator<float> >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator,G__setup_memfuncmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator),sizeof(multiset<float,less<float>,allocator<float> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator,G__setup_memfuncmultisetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR),sizeof(less<double>),-1,0,(char*)NULL,G__setup_memvarlesslEdoublegR,G__setup_memfunclesslEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR),sizeof(binary_function<double,double,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEdoublecOdoublecOboolgR,G__setup_memfuncbinary_functionlEdoublecOdoublecOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR),sizeof(allocator<double>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEdoublegR,G__setup_memfuncallocatorlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR),sizeof(multiset<double,less<double>,allocator<double> >),-1,3840,(char*)NULL,G__setup_memvarmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR,G__setup_memfuncmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator),sizeof(multiset<double,less<double>,allocator<double> >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator,G__setup_memfuncmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator),sizeof(multiset<double,less<double>,allocator<double> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator,G__setup_memfuncmultisetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR),sizeof(less<void*>),-1,0,(char*)NULL,G__setup_memvarlesslEvoidmUgR,G__setup_memfunclesslEvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR),sizeof(binary_function<void*,void*,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEvoidmUcOvoidmUcOboolgR,G__setup_memfuncbinary_functionlEvoidmUcOvoidmUcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR),sizeof(allocator<void*>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEvoidmUgR,G__setup_memfuncallocatorlEvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR),sizeof(multiset<void*,less<void*>,allocator<void*> >),-1,3840,(char*)NULL,G__setup_memvarmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR,G__setup_memfuncmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator),sizeof(multiset<void*,less<void*>,allocator<void*> >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator,G__setup_memfuncmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator),sizeof(multiset<void*,less<void*>,allocator<void*> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator,G__setup_memfuncmultisetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR),sizeof(less<char*>),-1,0,(char*)NULL,G__setup_memvarlesslEcharmUgR,G__setup_memfunclesslEcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR),sizeof(binary_function<char*,char*,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEcharmUcOcharmUcOboolgR,G__setup_memfuncbinary_functionlEcharmUcOcharmUcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR),sizeof(allocator<char*>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEcharmUgR,G__setup_memfuncallocatorlEcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR),sizeof(multiset<char*,less<char*>,allocator<char*> >),-1,3840,(char*)NULL,G__setup_memvarmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR,G__setup_memfuncmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator),sizeof(multiset<char*,less<char*>,allocator<char*> >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator,G__setup_memfuncmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator),sizeof(multiset<char*,less<char*>,allocator<char*> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator,G__setup_memfuncmultisetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR),sizeof(less<string>),-1,0,(char*)NULL,G__setup_memvarlesslEstringgR,G__setup_memfunclesslEstringgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR),sizeof(binary_function<string,string,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEstringcOstringcOboolgR,G__setup_memfuncbinary_functionlEstringcOstringcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR),sizeof(allocator<string>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEstringgR,G__setup_memfuncallocatorlEstringgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),sizeof(multiset<string,less<string>,allocator<string> >),-1,3840,(char*)NULL,G__setup_memvarmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR,G__setup_memfuncmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator),sizeof(multiset<string,less<string>,allocator<string> >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator,G__setup_memfuncmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator),sizeof(multiset<string,less<string>,allocator<string> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator,G__setup_memfuncmultisetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator);
}
extern "C" void G__cpp_setup(void) {
  G__check_setup_version(30051515,"G__cpp_setup()");
  G__set_cpp_environment();
  G__cpp_setup_tagtable();

  G__cpp_setup_inheritance();

  G__cpp_setup_typetable();

  G__cpp_setup_memvar();

  G__cpp_setup_memfunc();
  G__cpp_setup_global();
  G__cpp_setup_func();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc();
  return;
}
class G__cpp_setup_init {
  public:
    G__cpp_setup_init() { G__add_setup_func("G__Default",(G__incsetup)(&G__cpp_setup)); }
   ~G__cpp_setup_init() { G__remove_setup_func("G__Default"); }
};
G__cpp_setup_init G__cpp_setup_initializer;

