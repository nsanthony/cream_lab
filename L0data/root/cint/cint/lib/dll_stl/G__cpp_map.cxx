/********************************************************
* cint/cint/lib/dll_stl/G__cpp_map.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/
#include "cint/cint/lib/dll_stl/G__cpp_map.h" //newlink 3678 

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable();

extern "C" void G__set_cpp_environment() {
  G__add_compiledheader("cint/cint/lib/dll_stl/mp.h");
  G__add_compiledheader("cint/cint/inc/cintdictversion.h");
  G__cpp_reset_tagtable();
}
#include <new>
extern "C" int G__cpp_dllrev() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* less<char*> */
static int G__map_48_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<char*>*) G__getstructoffset())->operator()(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__map_48_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<char*> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<char*>[n];
     } else {
       p = new((void*) gvp) less<char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<char*>;
     } else {
       p = new((void*) gvp) less<char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_48_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<char*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<char*>(*(less<char*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<char*> G__TlesslEcharmUgR;
static int G__map_48_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<char*>*) (soff+(sizeof(less<char*>)*i)))->~G__TlesslEcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<char*>*) (soff))->~G__TlesslEcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_48_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<char*>* dest = (less<char*>*) G__getstructoffset();
   const less<char*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<char*,char*,bool> */
// automatic default constructor
static int G__map_49_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<char*,char*,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<char*,char*,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<char*,char*,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<char*,char*,bool>;
     } else {
       p = new((void*) gvp) binary_function<char*,char*,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_49_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<char*,char*,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<char*,char*,bool>(*(binary_function<char*,char*,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<char*,char*,bool> G__Tbinary_functionlEcharmUcOcharmUcOboolgR;
static int G__map_49_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<char*,char*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<char*,char*,bool>*) (soff+(sizeof(binary_function<char*,char*,bool>)*i)))->~G__Tbinary_functionlEcharmUcOcharmUcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<char*,char*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<char*,char*,bool>*) (soff))->~G__Tbinary_functionlEcharmUcOcharmUcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_49_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<char*,char*,bool>* dest = (binary_function<char*,char*,bool>*) G__getstructoffset();
   const binary_function<char*,char*,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<char* const,int> */
static int G__map_50_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,int>[n];
     } else {
       p = new((void*) gvp) pair<char* const,int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,int>;
     } else {
       p = new((void*) gvp) pair<char* const,int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_50_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<char* const,int>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<char* const,int>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_50_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<char* const,int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<char* const,int>(*(pair<char* const,int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<char* const,int> G__TpairlEcharmUsPconstcOintgR;
static int G__map_50_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<char* const,int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<char* const,int>*) (soff+(sizeof(pair<char* const,int>)*i)))->~G__TpairlEcharmUsPconstcOintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<char* const,int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<char* const,int>*) (soff))->~G__TpairlEcharmUsPconstcOintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<char* const,int> > */
static int G__map_51_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,int> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<char* const,int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,int> >;
     } else {
       p = new((void*) gvp) allocator<pair<char* const,int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_51_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<char* const,int> >(*(allocator<pair<char* const,int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<char* const,int> >(*(allocator<pair<char* const,int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_51_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<char* const,int> >*) G__getstructoffset())->address(*(pair<char* const,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_51_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,int> >*) G__getstructoffset())->allocate((allocator<pair<char* const,int> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,int> >*) G__getstructoffset())->allocate((allocator<pair<char* const,int> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_51_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,int> >*) G__getstructoffset())->deallocate((allocator<pair<char* const,int> >::pointer) G__int(libp->para[0]), (allocator<pair<char* const,int> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_51_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<char* const,int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_51_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,int> >*) G__getstructoffset())->construct((allocator<pair<char* const,int> >::pointer) G__int(libp->para[0]), *(pair<char* const,int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_51_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,int> >*) G__getstructoffset())->destroy((allocator<pair<char* const,int> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<char* const,int> > G__TallocatorlEpairlEcharmUsPconstcOintgRsPgR;
static int G__map_51_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<char* const,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<char* const,int> >*) (soff+(sizeof(allocator<pair<char* const,int> >)*i)))->~G__TallocatorlEpairlEcharmUsPconstcOintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<char* const,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<char* const,int> >*) (soff))->~G__TallocatorlEpairlEcharmUsPconstcOintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_51_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,int> >* dest = (allocator<pair<char* const,int> >*) G__getstructoffset();
   const allocator<pair<char* const,int> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,int,less<char*>,allocator<pair<char* const,int> > > */
static int G__map_52_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,int,less<char*>,allocator<pair<char* const,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >[n];
     } else {
       p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >;
     } else {
       p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,int,less<char*>,allocator<pair<char* const,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[0])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[0])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,int,less<char*>,allocator<pair<char* const,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,int,less<char*>,allocator<pair<char* const,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->operator=(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->begin();
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->end();
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->rbegin();
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->rend();
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->operator[](libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>* pobj;
         pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool> xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->insert(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->insert(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[0])), *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type*) libp->para[1].ref);
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->insert(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[0])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->insert(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->erase(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->erase(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->erase(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[0])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->swap(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->find(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->count(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_52_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,int,less<char*>,allocator<pair<char* const,int> > > G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR;
static int G__map_52_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) (soff+(sizeof(map<char*,int,less<char*>,allocator<pair<char* const,int> > >)*i)))->~G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) (soff))->~G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator */
static int G__map_54_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator;
     } else {
       p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator=(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator==(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_54_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__getstructoffset())->operator!=(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator;
static int G__map_54_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) (soff+(sizeof(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator)*i)))->~G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) (soff))->~G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator */
static int G__map_55_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_55_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_55_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_55_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_55_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_55_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_55_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator& obj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_55_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator xobj = ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator;
static int G__map_55_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) (soff+(sizeof(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator)*i)))->~G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*) (soff))->~G__TmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool> */
static int G__map_56_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_56_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_56_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>(*(pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool> G__TpairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_56_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>*) (soff+(sizeof(pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>)*i)))->~G__TpairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<char* const,long> */
static int G__map_57_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,long>[n];
     } else {
       p = new((void*) gvp) pair<char* const,long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,long>;
     } else {
       p = new((void*) gvp) pair<char* const,long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_57_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<char* const,long>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), *(long*) G__Longref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<char* const,long>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), *(long*) G__Longref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_57_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<char* const,long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<char* const,long>(*(pair<char* const,long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<char* const,long> G__TpairlEcharmUsPconstcOlonggR;
static int G__map_57_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<char* const,long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<char* const,long>*) (soff+(sizeof(pair<char* const,long>)*i)))->~G__TpairlEcharmUsPconstcOlonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<char* const,long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<char* const,long>*) (soff))->~G__TpairlEcharmUsPconstcOlonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<char* const,long> > */
static int G__map_58_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,long> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<char* const,long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,long> >;
     } else {
       p = new((void*) gvp) allocator<pair<char* const,long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_58_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<char* const,long> >(*(allocator<pair<char* const,long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<char* const,long> >(*(allocator<pair<char* const,long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_58_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<char* const,long> >*) G__getstructoffset())->address(*(pair<char* const,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_58_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,long> >*) G__getstructoffset())->allocate((allocator<pair<char* const,long> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,long> >*) G__getstructoffset())->allocate((allocator<pair<char* const,long> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_58_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,long> >*) G__getstructoffset())->deallocate((allocator<pair<char* const,long> >::pointer) G__int(libp->para[0]), (allocator<pair<char* const,long> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_58_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<char* const,long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_58_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,long> >*) G__getstructoffset())->construct((allocator<pair<char* const,long> >::pointer) G__int(libp->para[0]), *(pair<char* const,long>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_58_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,long> >*) G__getstructoffset())->destroy((allocator<pair<char* const,long> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<char* const,long> > G__TallocatorlEpairlEcharmUsPconstcOlonggRsPgR;
static int G__map_58_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<char* const,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<char* const,long> >*) (soff+(sizeof(allocator<pair<char* const,long> >)*i)))->~G__TallocatorlEpairlEcharmUsPconstcOlonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<char* const,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<char* const,long> >*) (soff))->~G__TallocatorlEpairlEcharmUsPconstcOlonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_58_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,long> >* dest = (allocator<pair<char* const,long> >*) G__getstructoffset();
   const allocator<pair<char* const,long> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,long,less<char*>,allocator<pair<char* const,long> > > */
static int G__map_59_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,long,less<char*>,allocator<pair<char* const,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >[n];
     } else {
       p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >;
     } else {
       p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,long,less<char*>,allocator<pair<char* const,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[0])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[0])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,long,less<char*>,allocator<pair<char* const,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,long,less<char*>,allocator<pair<char* const,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->operator=(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->begin();
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->end();
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->rbegin();
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->rend();
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->operator[](libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>* pobj;
         pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool> xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->insert(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->insert(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[0])), *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type*) libp->para[1].ref);
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->insert(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[0])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->insert(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->erase(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->erase(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->erase(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[0])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->swap(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->find(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->count(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_59_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,long,less<char*>,allocator<pair<char* const,long> > > G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR;
static int G__map_59_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) (soff+(sizeof(map<char*,long,less<char*>,allocator<pair<char* const,long> > >)*i)))->~G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) (soff))->~G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator */
static int G__map_61_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator;
     } else {
       p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator=(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator==(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_61_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__getstructoffset())->operator!=(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator;
static int G__map_61_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) (soff+(sizeof(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator)*i)))->~G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) (soff))->~G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator */
static int G__map_62_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_62_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_62_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_62_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_62_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_62_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_62_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator& obj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_62_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator xobj = ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator;
static int G__map_62_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) (soff+(sizeof(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator)*i)))->~G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*) (soff))->~G__TmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool> */
static int G__map_63_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_63_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_63_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>(*(pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool> G__TpairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_63_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>*) (soff+(sizeof(pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>)*i)))->~G__TpairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<char* const,float> */
static int G__map_64_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,float>[n];
     } else {
       p = new((void*) gvp) pair<char* const,float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,float>;
     } else {
       p = new((void*) gvp) pair<char* const,float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_64_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<char* const,float>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), *(float*) G__Floatref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<char* const,float>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), *(float*) G__Floatref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_64_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<char* const,float>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<char* const,float>(*(pair<char* const,float>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<char* const,float> G__TpairlEcharmUsPconstcOfloatgR;
static int G__map_64_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<char* const,float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<char* const,float>*) (soff+(sizeof(pair<char* const,float>)*i)))->~G__TpairlEcharmUsPconstcOfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<char* const,float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<char* const,float>*) (soff))->~G__TpairlEcharmUsPconstcOfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<char* const,float> > */
static int G__map_65_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,float> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<char* const,float> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,float> >;
     } else {
       p = new((void*) gvp) allocator<pair<char* const,float> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_65_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<char* const,float> >(*(allocator<pair<char* const,float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<char* const,float> >(*(allocator<pair<char* const,float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_65_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<char* const,float> >*) G__getstructoffset())->address(*(pair<char* const,float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_65_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,float> >*) G__getstructoffset())->allocate((allocator<pair<char* const,float> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,float> >*) G__getstructoffset())->allocate((allocator<pair<char* const,float> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_65_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,float> >*) G__getstructoffset())->deallocate((allocator<pair<char* const,float> >::pointer) G__int(libp->para[0]), (allocator<pair<char* const,float> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_65_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<char* const,float> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_65_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,float> >*) G__getstructoffset())->construct((allocator<pair<char* const,float> >::pointer) G__int(libp->para[0]), *(pair<char* const,float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_65_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,float> >*) G__getstructoffset())->destroy((allocator<pair<char* const,float> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<char* const,float> > G__TallocatorlEpairlEcharmUsPconstcOfloatgRsPgR;
static int G__map_65_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<char* const,float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<char* const,float> >*) (soff+(sizeof(allocator<pair<char* const,float> >)*i)))->~G__TallocatorlEpairlEcharmUsPconstcOfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<char* const,float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<char* const,float> >*) (soff))->~G__TallocatorlEpairlEcharmUsPconstcOfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_65_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,float> >* dest = (allocator<pair<char* const,float> >*) G__getstructoffset();
   const allocator<pair<char* const,float> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,float,less<char*>,allocator<pair<char* const,float> > > */
static int G__map_66_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,float,less<char*>,allocator<pair<char* const,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >[n];
     } else {
       p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >;
     } else {
       p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,float,less<char*>,allocator<pair<char* const,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[0])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[0])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,float,less<char*>,allocator<pair<char* const,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,float,less<char*>,allocator<pair<char* const,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->operator=(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->begin();
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->end();
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->rbegin();
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->rend();
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->operator[](libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>* pobj;
         pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool> xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->insert(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->insert(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[0])), *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type*) libp->para[1].ref);
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->insert(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[0])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->insert(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->erase(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->erase(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->erase(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[0])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->swap(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->find(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->count(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_66_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,float,less<char*>,allocator<pair<char* const,float> > > G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR;
static int G__map_66_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) (soff+(sizeof(map<char*,float,less<char*>,allocator<pair<char* const,float> > >)*i)))->~G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) (soff))->~G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator */
static int G__map_68_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator;
     } else {
       p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator=(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator==(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_68_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__getstructoffset())->operator!=(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator;
static int G__map_68_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) (soff+(sizeof(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator)*i)))->~G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) (soff))->~G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator */
static int G__map_69_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_69_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_69_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_69_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_69_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_69_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_69_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator& obj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_69_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator xobj = ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator;
static int G__map_69_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) (soff+(sizeof(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator)*i)))->~G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*) (soff))->~G__TmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool> */
static int G__map_70_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_70_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_70_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>(*(pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool> G__TpairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_70_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>*) (soff+(sizeof(pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>)*i)))->~G__TpairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<char* const,double> */
static int G__map_71_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,double>[n];
     } else {
       p = new((void*) gvp) pair<char* const,double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,double>;
     } else {
       p = new((void*) gvp) pair<char* const,double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_71_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<char* const,double>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), *(double*) G__Doubleref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<char* const,double>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), *(double*) G__Doubleref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_71_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<char* const,double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<char* const,double>(*(pair<char* const,double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<char* const,double> G__TpairlEcharmUsPconstcOdoublegR;
static int G__map_71_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<char* const,double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<char* const,double>*) (soff+(sizeof(pair<char* const,double>)*i)))->~G__TpairlEcharmUsPconstcOdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<char* const,double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<char* const,double>*) (soff))->~G__TpairlEcharmUsPconstcOdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<char* const,double> > */
static int G__map_72_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,double> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<char* const,double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,double> >;
     } else {
       p = new((void*) gvp) allocator<pair<char* const,double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_72_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<char* const,double> >(*(allocator<pair<char* const,double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<char* const,double> >(*(allocator<pair<char* const,double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_72_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<char* const,double> >*) G__getstructoffset())->address(*(pair<char* const,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_72_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,double> >*) G__getstructoffset())->allocate((allocator<pair<char* const,double> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,double> >*) G__getstructoffset())->allocate((allocator<pair<char* const,double> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_72_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,double> >*) G__getstructoffset())->deallocate((allocator<pair<char* const,double> >::pointer) G__int(libp->para[0]), (allocator<pair<char* const,double> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_72_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<char* const,double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_72_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,double> >*) G__getstructoffset())->construct((allocator<pair<char* const,double> >::pointer) G__int(libp->para[0]), *(pair<char* const,double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_72_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,double> >*) G__getstructoffset())->destroy((allocator<pair<char* const,double> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<char* const,double> > G__TallocatorlEpairlEcharmUsPconstcOdoublegRsPgR;
static int G__map_72_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<char* const,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<char* const,double> >*) (soff+(sizeof(allocator<pair<char* const,double> >)*i)))->~G__TallocatorlEpairlEcharmUsPconstcOdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<char* const,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<char* const,double> >*) (soff))->~G__TallocatorlEpairlEcharmUsPconstcOdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_72_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,double> >* dest = (allocator<pair<char* const,double> >*) G__getstructoffset();
   const allocator<pair<char* const,double> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,double,less<char*>,allocator<pair<char* const,double> > > */
static int G__map_73_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,double,less<char*>,allocator<pair<char* const,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >[n];
     } else {
       p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >;
     } else {
       p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,double,less<char*>,allocator<pair<char* const,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[0])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[0])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,double,less<char*>,allocator<pair<char* const,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,double,less<char*>,allocator<pair<char* const,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->operator=(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->begin();
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->end();
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->rbegin();
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->rend();
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->operator[](libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>* pobj;
         pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool> xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->insert(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->insert(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[0])), *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type*) libp->para[1].ref);
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->insert(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[0])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->insert(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->erase(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->erase(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->erase(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[0])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->swap(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->find(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->count(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_73_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,double,less<char*>,allocator<pair<char* const,double> > > G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR;
static int G__map_73_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) (soff+(sizeof(map<char*,double,less<char*>,allocator<pair<char* const,double> > >)*i)))->~G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) (soff))->~G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator */
static int G__map_75_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator;
     } else {
       p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator=(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator==(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_75_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__getstructoffset())->operator!=(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator;
static int G__map_75_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) (soff+(sizeof(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator)*i)))->~G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) (soff))->~G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator */
static int G__map_76_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_76_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_76_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_76_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_76_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_76_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_76_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator& obj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_76_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator xobj = ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator;
static int G__map_76_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) (soff+(sizeof(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator)*i)))->~G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*) (soff))->~G__TmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool> */
static int G__map_77_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_77_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_77_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>(*(pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool> G__TpairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_77_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>*) (soff+(sizeof(pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>)*i)))->~G__TpairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<char* const,void*> */
static int G__map_78_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,void*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,void*>[n];
     } else {
       p = new((void*) gvp) pair<char* const,void*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,void*>;
     } else {
       p = new((void*) gvp) pair<char* const,void*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_78_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,void*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<char* const,void*>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
   } else {
     p = new((void*) gvp) pair<char* const,void*>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_78_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<char* const,void*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<char* const,void*>(*(pair<char* const,void*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<char* const,void*> G__TpairlEcharmUsPconstcOvoidmUgR;
static int G__map_78_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<char* const,void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<char* const,void*>*) (soff+(sizeof(pair<char* const,void*>)*i)))->~G__TpairlEcharmUsPconstcOvoidmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<char* const,void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<char* const,void*>*) (soff))->~G__TpairlEcharmUsPconstcOvoidmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<char* const,void*> > */
static int G__map_79_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,void*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<char* const,void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,void*> >;
     } else {
       p = new((void*) gvp) allocator<pair<char* const,void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_79_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<char* const,void*> >(*(allocator<pair<char* const,void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<char* const,void*> >(*(allocator<pair<char* const,void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_79_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<char* const,void*> >*) G__getstructoffset())->address(*(pair<char* const,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_79_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,void*> >*) G__getstructoffset())->allocate((allocator<pair<char* const,void*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,void*> >*) G__getstructoffset())->allocate((allocator<pair<char* const,void*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_79_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,void*> >*) G__getstructoffset())->deallocate((allocator<pair<char* const,void*> >::pointer) G__int(libp->para[0]), (allocator<pair<char* const,void*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_79_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<char* const,void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_79_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,void*> >*) G__getstructoffset())->construct((allocator<pair<char* const,void*> >::pointer) G__int(libp->para[0]), *(pair<char* const,void*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_79_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,void*> >*) G__getstructoffset())->destroy((allocator<pair<char* const,void*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<char* const,void*> > G__TallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR;
static int G__map_79_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<char* const,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<char* const,void*> >*) (soff+(sizeof(allocator<pair<char* const,void*> >)*i)))->~G__TallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<char* const,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<char* const,void*> >*) (soff))->~G__TallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_79_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,void*> >* dest = (allocator<pair<char* const,void*> >*) G__getstructoffset();
   const allocator<pair<char* const,void*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > > */
static int G__map_80_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >[n];
     } else {
       p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >;
     } else {
       p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[0])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[0])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->operator=(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->begin();
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->end();
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->rbegin();
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->rend();
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void*& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->operator[](libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>* pobj;
         pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool> xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->insert(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->insert(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[0])), *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type*) libp->para[1].ref);
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->insert(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[0])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->insert(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->erase(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->erase(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->erase(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[0])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->swap(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->find(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->count(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_80_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,void*,less<char*>,allocator<pair<char* const,void*> > > G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR;
static int G__map_80_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) (soff+(sizeof(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >)*i)))->~G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) (soff))->~G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator */
static int G__map_82_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator;
     } else {
       p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator=(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator==(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_82_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__getstructoffset())->operator!=(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator;
static int G__map_82_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) (soff+(sizeof(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator)*i)))->~G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) (soff))->~G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator */
static int G__map_83_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_83_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_83_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_83_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_83_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_83_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_83_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator& obj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_83_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator xobj = ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator;
static int G__map_83_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) (soff+(sizeof(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator)*i)))->~G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*) (soff))->~G__TmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool> */
static int G__map_84_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_84_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_84_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>(*(pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool> G__TpairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_84_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>*) (soff+(sizeof(pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>)*i)))->~G__TpairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<char* const,char*> */
static int G__map_85_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,char*>[n];
     } else {
       p = new((void*) gvp) pair<char* const,char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<char* const,char*>;
     } else {
       p = new((void*) gvp) pair<char* const,char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_85_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<char* const,char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<char* const,char*>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
   } else {
     p = new((void*) gvp) pair<char* const,char*>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_85_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<char* const,char*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<char* const,char*>(*(pair<char* const,char*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<char* const,char*> G__TpairlEcharmUsPconstcOcharmUgR;
static int G__map_85_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<char* const,char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<char* const,char*>*) (soff+(sizeof(pair<char* const,char*>)*i)))->~G__TpairlEcharmUsPconstcOcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<char* const,char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<char* const,char*>*) (soff))->~G__TpairlEcharmUsPconstcOcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<char* const,char*> > */
static int G__map_86_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,char*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<char* const,char*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<char* const,char*> >;
     } else {
       p = new((void*) gvp) allocator<pair<char* const,char*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_86_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<char* const,char*> >(*(allocator<pair<char* const,char*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<char* const,char*> >(*(allocator<pair<char* const,char*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_86_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<char* const,char*> >*) G__getstructoffset())->address(*(pair<char* const,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_86_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,char*> >*) G__getstructoffset())->allocate((allocator<pair<char* const,char*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<char* const,char*> >*) G__getstructoffset())->allocate((allocator<pair<char* const,char*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_86_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,char*> >*) G__getstructoffset())->deallocate((allocator<pair<char* const,char*> >::pointer) G__int(libp->para[0]), (allocator<pair<char* const,char*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_86_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<char* const,char*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_86_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,char*> >*) G__getstructoffset())->construct((allocator<pair<char* const,char*> >::pointer) G__int(libp->para[0]), *(pair<char* const,char*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_86_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<char* const,char*> >*) G__getstructoffset())->destroy((allocator<pair<char* const,char*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<char* const,char*> > G__TallocatorlEpairlEcharmUsPconstcOcharmUgRsPgR;
static int G__map_86_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<char* const,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<char* const,char*> >*) (soff+(sizeof(allocator<pair<char* const,char*> >)*i)))->~G__TallocatorlEpairlEcharmUsPconstcOcharmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<char* const,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<char* const,char*> >*) (soff))->~G__TallocatorlEpairlEcharmUsPconstcOcharmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_86_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<char* const,char*> >* dest = (allocator<pair<char* const,char*> >*) G__getstructoffset();
   const allocator<pair<char* const,char*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > > */
static int G__map_87_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >[n];
     } else {
       p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >;
     } else {
       p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[0])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[0])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->operator=(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->begin();
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->end();
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->rbegin();
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->rend();
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->operator[](libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>* pobj;
         pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool> xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->insert(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->insert(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[0])), *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type*) libp->para[1].ref);
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->insert(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[0])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->insert(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->erase(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->erase(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->erase(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[0])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->swap(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->find(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->count(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_87_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,char*,less<char*>,allocator<pair<char* const,char*> > > G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR;
static int G__map_87_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) (soff+(sizeof(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >)*i)))->~G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) (soff))->~G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator */
static int G__map_89_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator;
     } else {
       p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator=(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator==(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_89_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__getstructoffset())->operator!=(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator;
static int G__map_89_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) (soff+(sizeof(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator)*i)))->~G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) (soff))->~G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator */
static int G__map_90_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_90_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_90_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_90_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_90_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_90_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_90_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator& obj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_90_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator xobj = ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator;
static int G__map_90_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) (soff+(sizeof(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator)*i)))->~G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*) (soff))->~G__TmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool> */
static int G__map_91_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_91_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_91_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>(*(pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool> G__TpairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_91_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>*) (soff+(sizeof(pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>)*i)))->~G__TpairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<string> */
static int G__map_92_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<string>*) G__getstructoffset())->operator()(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__map_92_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<string> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<string>[n];
     } else {
       p = new((void*) gvp) less<string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<string>;
     } else {
       p = new((void*) gvp) less<string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_92_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<string>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<string>(*(less<string>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<string> G__TlesslEstringgR;
static int G__map_92_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<string>*) (soff+(sizeof(less<string>)*i)))->~G__TlesslEstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<string>*) (soff))->~G__TlesslEstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_92_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<string>* dest = (less<string>*) G__getstructoffset();
   const less<string>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<string,string,bool> */
// automatic default constructor
static int G__map_93_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<string,string,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<string,string,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<string,string,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<string,string,bool>;
     } else {
       p = new((void*) gvp) binary_function<string,string,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_93_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<string,string,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<string,string,bool>(*(binary_function<string,string,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<string,string,bool> G__Tbinary_functionlEstringcOstringcOboolgR;
static int G__map_93_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<string,string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<string,string,bool>*) (soff+(sizeof(binary_function<string,string,bool>)*i)))->~G__Tbinary_functionlEstringcOstringcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<string,string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<string,string,bool>*) (soff))->~G__Tbinary_functionlEstringcOstringcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_93_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<string,string,bool>* dest = (binary_function<string,string,bool>*) G__getstructoffset();
   const binary_function<string,string,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const string,int> > */
static int G__map_95_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,int> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const string,int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,int> >;
     } else {
       p = new((void*) gvp) allocator<pair<const string,int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_95_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const string,int> >(*(allocator<pair<const string,int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const string,int> >(*(allocator<pair<const string,int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_95_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,int> >*) G__getstructoffset())->address(*(pair<const string,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_95_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,int> >*) G__getstructoffset())->address(*(pair<const string,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_95_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const string,int> >*) G__getstructoffset())->allocate((allocator<pair<const string,int> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const string,int> >*) G__getstructoffset())->allocate((allocator<pair<const string,int> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_95_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,int> >*) G__getstructoffset())->deallocate((allocator<pair<const string,int> >::pointer) G__int(libp->para[0]), (allocator<pair<const string,int> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_95_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const string,int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_95_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,int> >*) G__getstructoffset())->construct((allocator<pair<const string,int> >::pointer) G__int(libp->para[0]), *(pair<const string,int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_95_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,int> >*) G__getstructoffset())->destroy((allocator<pair<const string,int> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const string,int> > G__TallocatorlEpairlEconstsPstringcOintgRsPgR;
static int G__map_95_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const string,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const string,int> >*) (soff+(sizeof(allocator<pair<const string,int> >)*i)))->~G__TallocatorlEpairlEconstsPstringcOintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const string,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const string,int> >*) (soff))->~G__TallocatorlEpairlEconstsPstringcOintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_95_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,int> >* dest = (allocator<pair<const string,int> >*) G__getstructoffset();
   const allocator<pair<const string,int> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,int,less<string>,allocator<pair<const string,int> > > */
static int G__map_96_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,int,less<string>,allocator<pair<const string,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,int,less<string>,allocator<pair<const string,int> > >[n];
     } else {
       p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,int,less<string>,allocator<pair<const string,int> > >;
     } else {
       p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,int,less<string>,allocator<pair<const string,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,int,less<string>,allocator<pair<const string,int> > >(*((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[0])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >(*((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[0])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,int,less<string>,allocator<pair<const string,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,int,less<string>,allocator<pair<const string,int> > >(*((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >(*((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,int,less<string>,allocator<pair<const string,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,int,less<string>,allocator<pair<const string,int> > >(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->operator=(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->begin();
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->end();
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->rend();
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>* pobj;
         pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool> xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->insert(*(map<string,int,less<string>,allocator<pair<const string,int> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->insert(*((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[0])), *(map<string,int,less<string>,allocator<pair<const string,int> > >::value_type*) libp->para[1].ref);
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->insert(*((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[0])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->insert(*((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->erase(*((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->erase(*((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[0])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->swap(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_96_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,int,less<string>,allocator<pair<const string,int> > > G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR;
static int G__map_96_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,int,less<string>,allocator<pair<const string,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,int,less<string>,allocator<pair<const string,int> > >*) (soff+(sizeof(map<string,int,less<string>,allocator<pair<const string,int> > >)*i)))->~G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,int,less<string>,allocator<pair<const string,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,int,less<string>,allocator<pair<const string,int> > >*) (soff))->~G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,int,less<string>,allocator<pair<const string,int> > >::iterator */
static int G__map_98_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator;
     } else {
       p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(*(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(*(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >::iterator& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator=(*(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >::value_type& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >::iterator& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >::iterator& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator==(*(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_98_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__getstructoffset())->operator!=(*(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,int,less<string>,allocator<pair<const string,int> > >::iterator G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator;
static int G__map_98_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) (soff+(sizeof(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator)*i)))->~G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) (soff))->~G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator */
static int G__map_99_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator(*(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator(*(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_99_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_99_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >::value_type& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_99_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_99_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_99_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_99_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator& obj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_99_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator xobj = ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator;
static int G__map_99_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) (soff+(sizeof(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator)*i)))->~G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) (soff))->~G__TmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool> */
static int G__map_100_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_100_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>(*(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>(*(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_100_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>(*(pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool> G__TpairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_100_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>*) (soff+(sizeof(pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>)*i)))->~G__TpairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const string,long> > */
static int G__map_102_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,long> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const string,long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,long> >;
     } else {
       p = new((void*) gvp) allocator<pair<const string,long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_102_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const string,long> >(*(allocator<pair<const string,long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const string,long> >(*(allocator<pair<const string,long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_102_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,long> >*) G__getstructoffset())->address(*(pair<const string,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_102_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,long> >*) G__getstructoffset())->address(*(pair<const string,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_102_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const string,long> >*) G__getstructoffset())->allocate((allocator<pair<const string,long> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const string,long> >*) G__getstructoffset())->allocate((allocator<pair<const string,long> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_102_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,long> >*) G__getstructoffset())->deallocate((allocator<pair<const string,long> >::pointer) G__int(libp->para[0]), (allocator<pair<const string,long> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_102_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const string,long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_102_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,long> >*) G__getstructoffset())->construct((allocator<pair<const string,long> >::pointer) G__int(libp->para[0]), *(pair<const string,long>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_102_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,long> >*) G__getstructoffset())->destroy((allocator<pair<const string,long> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const string,long> > G__TallocatorlEpairlEconstsPstringcOlonggRsPgR;
static int G__map_102_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const string,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const string,long> >*) (soff+(sizeof(allocator<pair<const string,long> >)*i)))->~G__TallocatorlEpairlEconstsPstringcOlonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const string,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const string,long> >*) (soff))->~G__TallocatorlEpairlEconstsPstringcOlonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_102_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,long> >* dest = (allocator<pair<const string,long> >*) G__getstructoffset();
   const allocator<pair<const string,long> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,long,less<string>,allocator<pair<const string,long> > > */
static int G__map_103_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,long,less<string>,allocator<pair<const string,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,long,less<string>,allocator<pair<const string,long> > >[n];
     } else {
       p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,long,less<string>,allocator<pair<const string,long> > >;
     } else {
       p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,long,less<string>,allocator<pair<const string,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,long,less<string>,allocator<pair<const string,long> > >(*((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[0])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >(*((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[0])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,long,less<string>,allocator<pair<const string,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,long,less<string>,allocator<pair<const string,long> > >(*((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >(*((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,long,less<string>,allocator<pair<const string,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,long,less<string>,allocator<pair<const string,long> > >(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->operator=(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->begin();
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->end();
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->rend();
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>* pobj;
         pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool> xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->insert(*(map<string,long,less<string>,allocator<pair<const string,long> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->insert(*((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[0])), *(map<string,long,less<string>,allocator<pair<const string,long> > >::value_type*) libp->para[1].ref);
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->insert(*((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[0])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->insert(*((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->erase(*((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->erase(*((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[0])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->swap(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_103_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,long,less<string>,allocator<pair<const string,long> > > G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR;
static int G__map_103_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,long,less<string>,allocator<pair<const string,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,long,less<string>,allocator<pair<const string,long> > >*) (soff+(sizeof(map<string,long,less<string>,allocator<pair<const string,long> > >)*i)))->~G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,long,less<string>,allocator<pair<const string,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,long,less<string>,allocator<pair<const string,long> > >*) (soff))->~G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,long,less<string>,allocator<pair<const string,long> > >::iterator */
static int G__map_105_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator;
     } else {
       p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(*(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(*(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >::iterator& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator=(*(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >::value_type& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >::iterator& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >::iterator& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator==(*(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_105_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__getstructoffset())->operator!=(*(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,long,less<string>,allocator<pair<const string,long> > >::iterator G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator;
static int G__map_105_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) (soff+(sizeof(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator)*i)))->~G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) (soff))->~G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator */
static int G__map_106_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator(*(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator(*(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_106_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_106_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >::value_type& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_106_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_106_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_106_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_106_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator& obj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_106_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator xobj = ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator;
static int G__map_106_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) (soff+(sizeof(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator)*i)))->~G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) (soff))->~G__TmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool> */
static int G__map_107_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_107_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>(*(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>(*(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_107_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>(*(pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool> G__TpairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_107_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>*) (soff+(sizeof(pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>)*i)))->~G__TpairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const string,float> > */
static int G__map_109_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,float> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const string,float> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,float> >;
     } else {
       p = new((void*) gvp) allocator<pair<const string,float> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_109_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const string,float> >(*(allocator<pair<const string,float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const string,float> >(*(allocator<pair<const string,float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_109_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,float> >*) G__getstructoffset())->address(*(pair<const string,float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_109_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,float> >*) G__getstructoffset())->address(*(pair<const string,float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_109_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const string,float> >*) G__getstructoffset())->allocate((allocator<pair<const string,float> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const string,float> >*) G__getstructoffset())->allocate((allocator<pair<const string,float> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_109_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,float> >*) G__getstructoffset())->deallocate((allocator<pair<const string,float> >::pointer) G__int(libp->para[0]), (allocator<pair<const string,float> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_109_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const string,float> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_109_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,float> >*) G__getstructoffset())->construct((allocator<pair<const string,float> >::pointer) G__int(libp->para[0]), *(pair<const string,float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_109_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,float> >*) G__getstructoffset())->destroy((allocator<pair<const string,float> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const string,float> > G__TallocatorlEpairlEconstsPstringcOfloatgRsPgR;
static int G__map_109_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const string,float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const string,float> >*) (soff+(sizeof(allocator<pair<const string,float> >)*i)))->~G__TallocatorlEpairlEconstsPstringcOfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const string,float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const string,float> >*) (soff))->~G__TallocatorlEpairlEconstsPstringcOfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_109_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,float> >* dest = (allocator<pair<const string,float> >*) G__getstructoffset();
   const allocator<pair<const string,float> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,float,less<string>,allocator<pair<const string,float> > > */
static int G__map_110_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,float,less<string>,allocator<pair<const string,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,float,less<string>,allocator<pair<const string,float> > >[n];
     } else {
       p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,float,less<string>,allocator<pair<const string,float> > >;
     } else {
       p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,float,less<string>,allocator<pair<const string,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,float,less<string>,allocator<pair<const string,float> > >(*((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[0])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >(*((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[0])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,float,less<string>,allocator<pair<const string,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,float,less<string>,allocator<pair<const string,float> > >(*((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >(*((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,float,less<string>,allocator<pair<const string,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,float,less<string>,allocator<pair<const string,float> > >(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->operator=(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->begin();
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->end();
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->rend();
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>* pobj;
         pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool> xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->insert(*(map<string,float,less<string>,allocator<pair<const string,float> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->insert(*((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[0])), *(map<string,float,less<string>,allocator<pair<const string,float> > >::value_type*) libp->para[1].ref);
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->insert(*((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[0])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->insert(*((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->erase(*((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->erase(*((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[0])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->swap(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_110_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,float,less<string>,allocator<pair<const string,float> > > G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR;
static int G__map_110_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,float,less<string>,allocator<pair<const string,float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,float,less<string>,allocator<pair<const string,float> > >*) (soff+(sizeof(map<string,float,less<string>,allocator<pair<const string,float> > >)*i)))->~G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,float,less<string>,allocator<pair<const string,float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,float,less<string>,allocator<pair<const string,float> > >*) (soff))->~G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,float,less<string>,allocator<pair<const string,float> > >::iterator */
static int G__map_112_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator;
     } else {
       p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(*(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(*(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >::iterator& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator=(*(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >::value_type& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >::iterator& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >::iterator& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator==(*(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_112_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__getstructoffset())->operator!=(*(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,float,less<string>,allocator<pair<const string,float> > >::iterator G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator;
static int G__map_112_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) (soff+(sizeof(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator)*i)))->~G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) (soff))->~G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator */
static int G__map_113_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator(*(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator(*(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_113_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_113_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >::value_type& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_113_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_113_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_113_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_113_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator& obj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_113_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator xobj = ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator;
static int G__map_113_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) (soff+(sizeof(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator)*i)))->~G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) (soff))->~G__TmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool> */
static int G__map_114_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_114_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>(*(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>(*(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_114_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>(*(pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool> G__TpairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_114_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>*) (soff+(sizeof(pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>)*i)))->~G__TpairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const string,double> > */
static int G__map_116_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,double> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const string,double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,double> >;
     } else {
       p = new((void*) gvp) allocator<pair<const string,double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_116_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const string,double> >(*(allocator<pair<const string,double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const string,double> >(*(allocator<pair<const string,double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_116_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,double> >*) G__getstructoffset())->address(*(pair<const string,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_116_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,double> >*) G__getstructoffset())->address(*(pair<const string,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_116_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const string,double> >*) G__getstructoffset())->allocate((allocator<pair<const string,double> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const string,double> >*) G__getstructoffset())->allocate((allocator<pair<const string,double> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_116_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,double> >*) G__getstructoffset())->deallocate((allocator<pair<const string,double> >::pointer) G__int(libp->para[0]), (allocator<pair<const string,double> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_116_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const string,double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_116_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,double> >*) G__getstructoffset())->construct((allocator<pair<const string,double> >::pointer) G__int(libp->para[0]), *(pair<const string,double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_116_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,double> >*) G__getstructoffset())->destroy((allocator<pair<const string,double> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const string,double> > G__TallocatorlEpairlEconstsPstringcOdoublegRsPgR;
static int G__map_116_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const string,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const string,double> >*) (soff+(sizeof(allocator<pair<const string,double> >)*i)))->~G__TallocatorlEpairlEconstsPstringcOdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const string,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const string,double> >*) (soff))->~G__TallocatorlEpairlEconstsPstringcOdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_116_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,double> >* dest = (allocator<pair<const string,double> >*) G__getstructoffset();
   const allocator<pair<const string,double> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,double,less<string>,allocator<pair<const string,double> > > */
static int G__map_117_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,double,less<string>,allocator<pair<const string,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,double,less<string>,allocator<pair<const string,double> > >[n];
     } else {
       p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,double,less<string>,allocator<pair<const string,double> > >;
     } else {
       p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,double,less<string>,allocator<pair<const string,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,double,less<string>,allocator<pair<const string,double> > >(*((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[0])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >(*((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[0])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,double,less<string>,allocator<pair<const string,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,double,less<string>,allocator<pair<const string,double> > >(*((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >(*((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,double,less<string>,allocator<pair<const string,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,double,less<string>,allocator<pair<const string,double> > >(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->operator=(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->begin();
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->end();
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->rend();
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>* pobj;
         pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool> xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->insert(*(map<string,double,less<string>,allocator<pair<const string,double> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->insert(*((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[0])), *(map<string,double,less<string>,allocator<pair<const string,double> > >::value_type*) libp->para[1].ref);
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->insert(*((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[0])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->insert(*((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->erase(*((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->erase(*((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[0])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->swap(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_117_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,double,less<string>,allocator<pair<const string,double> > > G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR;
static int G__map_117_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,double,less<string>,allocator<pair<const string,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,double,less<string>,allocator<pair<const string,double> > >*) (soff+(sizeof(map<string,double,less<string>,allocator<pair<const string,double> > >)*i)))->~G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,double,less<string>,allocator<pair<const string,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,double,less<string>,allocator<pair<const string,double> > >*) (soff))->~G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,double,less<string>,allocator<pair<const string,double> > >::iterator */
static int G__map_119_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator;
     } else {
       p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(*(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(*(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >::iterator& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator=(*(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >::value_type& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >::iterator& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >::iterator& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator==(*(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_119_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__getstructoffset())->operator!=(*(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,double,less<string>,allocator<pair<const string,double> > >::iterator G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator;
static int G__map_119_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) (soff+(sizeof(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator)*i)))->~G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) (soff))->~G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator */
static int G__map_120_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator(*(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator(*(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_120_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_120_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >::value_type& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_120_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_120_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_120_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_120_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator& obj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_120_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator xobj = ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator;
static int G__map_120_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) (soff+(sizeof(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator)*i)))->~G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) (soff))->~G__TmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool> */
static int G__map_121_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_121_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>(*(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>(*(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_121_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>(*(pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool> G__TpairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_121_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>*) (soff+(sizeof(pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>)*i)))->~G__TpairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const string,void*> > */
static int G__map_123_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,void*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const string,void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const string,void*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const string,void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_123_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const string,void*> >(*(allocator<pair<const string,void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const string,void*> >(*(allocator<pair<const string,void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_123_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,void*> >*) G__getstructoffset())->address(*(pair<const string,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_123_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const string,void*> >*) G__getstructoffset())->address(*(pair<const string,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_123_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const string,void*> >*) G__getstructoffset())->allocate((allocator<pair<const string,void*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const string,void*> >*) G__getstructoffset())->allocate((allocator<pair<const string,void*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_123_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,void*> >*) G__getstructoffset())->deallocate((allocator<pair<const string,void*> >::pointer) G__int(libp->para[0]), (allocator<pair<const string,void*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_123_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const string,void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_123_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,void*> >*) G__getstructoffset())->construct((allocator<pair<const string,void*> >::pointer) G__int(libp->para[0]), *(pair<const string,void*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_123_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const string,void*> >*) G__getstructoffset())->destroy((allocator<pair<const string,void*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const string,void*> > G__TallocatorlEpairlEconstsPstringcOvoidmUgRsPgR;
static int G__map_123_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const string,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const string,void*> >*) (soff+(sizeof(allocator<pair<const string,void*> >)*i)))->~G__TallocatorlEpairlEconstsPstringcOvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const string,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const string,void*> >*) (soff))->~G__TallocatorlEpairlEconstsPstringcOvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map_123_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const string,void*> >* dest = (allocator<pair<const string,void*> >*) G__getstructoffset();
   const allocator<pair<const string,void*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,void*,less<string>,allocator<pair<const string,void*> > > */
static int G__map_124_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,void*,less<string>,allocator<pair<const string,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >[n];
     } else {
       p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >;
     } else {
       p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,void*,less<string>,allocator<pair<const string,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[0])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[0])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,void*,less<string>,allocator<pair<const string,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,void*,less<string>,allocator<pair<const string,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->operator=(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->begin();
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->end();
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->rend();
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void*& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>* pobj;
         pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool> xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->insert(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->insert(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[0])), *(map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type*) libp->para[1].ref);
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->insert(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[0])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->insert(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->erase(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->erase(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[0])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->swap(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_124_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,void*,less<string>,allocator<pair<const string,void*> > > G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR;
static int G__map_124_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,void*,less<string>,allocator<pair<const string,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) (soff+(sizeof(map<string,void*,less<string>,allocator<pair<const string,void*> > >)*i)))->~G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,void*,less<string>,allocator<pair<const string,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,void*,less<string>,allocator<pair<const string,void*> > >*) (soff))->~G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator */
static int G__map_126_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator;
     } else {
       p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator=(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator==(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_126_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__getstructoffset())->operator!=(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator;
static int G__map_126_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) (soff+(sizeof(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator)*i)))->~G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) (soff))->~G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator */
static int G__map_127_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_127_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_127_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_127_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_127_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_127_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_127_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator& obj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_127_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator xobj = ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator;
static int G__map_127_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) (soff+(sizeof(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator)*i)))->~G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) (soff))->~G__TmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool> */
static int G__map_128_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map_128_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map_128_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>(*(pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool> G__TpairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map_128_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>*) (soff+(sizeof(pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>)*i)))->~G__TpairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__map__0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref, *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref, *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref, *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref, *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref, *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref, *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref, *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[0].ref, *(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator* pobj;
         map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator xobj = search(*((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[0])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[1]))
, *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[2])), *((map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref, *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref, *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref, *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref, *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref, *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref, *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref, *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[0].ref, *(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator* pobj;
         map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator xobj = search(*((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[0])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[1]))
, *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[2])), *((map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref, *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref, *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref, *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref, *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref, *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref, *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref, *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[0].ref, *(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator* pobj;
         map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator xobj = search(*((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[0])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[1]))
, *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[2])), *((map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref, *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref, *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref, *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref, *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref, *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref, *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref, *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[0].ref, *(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator* pobj;
         map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator xobj = search(*((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[0])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[1]))
, *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[2])), *((map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref, *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref, *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref, *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref, *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref, *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref, *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref, *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[0].ref, *(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator* pobj;
         map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator xobj = search(*((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[0])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[1]))
, *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[2])), *((map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref, *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref, *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref, *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref, *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref, *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref, *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref, *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[0].ref, *(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator* pobj;
         map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator xobj = search(*((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[0])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[1]))
, *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[2])), *((map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) libp->para[0].ref, *(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_167(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) libp->para[0].ref, *(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref, *(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref, *(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref, *(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref, *(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref, *(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[0].ref, *(map<string,int,less<string>,allocator<pair<const string,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator* pobj;
         map<string,int,less<string>,allocator<pair<const string,int> > >::iterator xobj = search(*((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[0])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[1]))
, *((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[2])), *((map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<string,int,less<string>,allocator<pair<const string,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) libp->para[0].ref, *(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) libp->para[0].ref, *(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref, *(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_178(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref, *(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_179(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref, *(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_180(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref, *(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref, *(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_182(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[0].ref, *(map<string,long,less<string>,allocator<pair<const string,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_183(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator* pobj;
         map<string,long,less<string>,allocator<pair<const string,long> > >::iterator xobj = search(*((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[0])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[1]))
, *((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[2])), *((map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<string,long,less<string>,allocator<pair<const string,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_184(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) libp->para[0].ref, *(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_185(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) libp->para[0].ref, *(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_186(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref, *(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_187(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref, *(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_188(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref, *(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_189(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref, *(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_190(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref, *(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_191(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[0].ref, *(map<string,float,less<string>,allocator<pair<const string,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_192(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator* pobj;
         map<string,float,less<string>,allocator<pair<const string,float> > >::iterator xobj = search(*((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[0])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[1]))
, *((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[2])), *((map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<string,float,less<string>,allocator<pair<const string,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_193(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) libp->para[0].ref, *(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_194(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) libp->para[0].ref, *(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_195(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref, *(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_196(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref, *(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_197(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref, *(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_198(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref, *(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_199(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref, *(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_200(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[0].ref, *(map<string,double,less<string>,allocator<pair<const string,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_201(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator* pobj;
         map<string,double,less<string>,allocator<pair<const string,double> > >::iterator xobj = search(*((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[0])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[1]))
, *((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[2])), *((map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<string,double,less<string>,allocator<pair<const string,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_202(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) libp->para[0].ref, *(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_203(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) libp->para[0].ref, *(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_204(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref, *(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_205(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref, *(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_206(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref, *(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_207(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref, *(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_208(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref, *(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_209(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[0].ref, *(map<string,void*,less<string>,allocator<pair<const string,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map__0_210(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator* pobj;
         map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator xobj = search(*((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[0])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[1]))
, *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[2])), *((map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* less<char*> */

/* binary_function<char*,char*,bool> */

/* pair<char* const,int> */

/* allocator<pair<char* const,int> > */

/* map<char*,int,less<char*>,allocator<pair<char* const,int> > > */

/* map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator */

/* map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator */

/* pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool> */

/* pair<char* const,long> */

/* allocator<pair<char* const,long> > */

/* map<char*,long,less<char*>,allocator<pair<char* const,long> > > */

/* map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator */

/* map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator */

/* pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool> */

/* pair<char* const,float> */

/* allocator<pair<char* const,float> > */

/* map<char*,float,less<char*>,allocator<pair<char* const,float> > > */

/* map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator */

/* map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator */

/* pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool> */

/* pair<char* const,double> */

/* allocator<pair<char* const,double> > */

/* map<char*,double,less<char*>,allocator<pair<char* const,double> > > */

/* map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator */

/* map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator */

/* pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool> */

/* pair<char* const,void*> */

/* allocator<pair<char* const,void*> > */

/* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > > */

/* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator */

/* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator */

/* pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool> */

/* pair<char* const,char*> */

/* allocator<pair<char* const,char*> > */

/* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > > */

/* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator */

/* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator */

/* pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool> */

/* less<string> */

/* binary_function<string,string,bool> */

/* allocator<pair<const string,int> > */

/* map<string,int,less<string>,allocator<pair<const string,int> > > */

/* map<string,int,less<string>,allocator<pair<const string,int> > >::iterator */

/* map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator */

/* pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool> */

/* allocator<pair<const string,long> > */

/* map<string,long,less<string>,allocator<pair<const string,long> > > */

/* map<string,long,less<string>,allocator<pair<const string,long> > >::iterator */

/* map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator */

/* pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool> */

/* allocator<pair<const string,float> > */

/* map<string,float,less<string>,allocator<pair<const string,float> > > */

/* map<string,float,less<string>,allocator<pair<const string,float> > >::iterator */

/* map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator */

/* pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool> */

/* allocator<pair<const string,double> > */

/* map<string,double,less<string>,allocator<pair<const string,double> > > */

/* map<string,double,less<string>,allocator<pair<const string,double> > >::iterator */

/* map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator */

/* pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool> */

/* allocator<pair<const string,void*> > */

/* map<string,void*,less<string>,allocator<pair<const string,void*> > > */

/* map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator */

/* map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator */

/* pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc {
 public:
  G__Sizep2memfunc(): p(&G__Sizep2memfunc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc::*p)();
};

size_t G__get_sizep2memfunc()
{
  G__Sizep2memfunc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEcharmUgR))) {
     less<char*> *G__Lderived;
     G__Lderived=(less<char*>*)0x1000;
     {
       binary_function<char*,char*,bool> *G__Lpbase=(binary_function<char*,char*,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR),G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEstringgR))) {
     less<string> *G__Lderived;
     G__Lderived=(less<string>*)0x1000;
     {
       binary_function<string,string,bool> *G__Lpbase=(binary_function<string,string,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR),G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable() {

   /* Setting up typedef entry */
   G__search_typename2("first_argument_type",67,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",67,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,int>",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",105,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUcOintgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,int,less<char*> >",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,long>",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUcOlonggR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,long,less<char*> >",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,float>",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",102,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUcOfloatgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,float,less<char*> >",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,double>",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUcOdoublegR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,double,less<char*> >",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,void*>",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",89,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,void*,less<char*> >",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,char*>",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEcharmUcOcharmUgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<char*,char*,less<char*> >",117,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOintgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOintgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOintgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",105,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEstringcOintgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int,less<string> >",117,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOlonggR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOlonggR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOlonggR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,long>",117,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEstringcOlonggR),0,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,long,less<string> >",117,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOfloatgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOfloatgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOfloatgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOfloatgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOfloatgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,float>",117,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",102,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEstringcOfloatgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,float,less<string> >",117,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOdoublegR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOdoublegR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOdoublegR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,double>",117,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEstringcOdoublegR),0,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,double,less<string> >",117,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOvoidmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOvoidmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOvoidmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,void*>",117,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",89,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEstringcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,void*,less<string> >",117,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* less<char*> */
static void G__setup_memvarlesslEcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   { less<char*> *p; p=(less<char*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<char*,char*,bool> */
static void G__setup_memvarbinary_functionlEcharmUcOcharmUcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   { binary_function<char*,char*,bool> *p; p=(binary_function<char*,char*,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<char* const,int> */
static void G__setup_memvarpairlEcharmUsPconstcOintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR));
   { pair<char* const,int> *p; p=(pair<char* const,int>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),67,0,4,-1,-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),105,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<char* const,int> > */
static void G__setup_memvarallocatorlEpairlEcharmUsPconstcOintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   { allocator<pair<char* const,int> > *p; p=(allocator<pair<char* const,int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,int,less<char*>,allocator<pair<char* const,int> > > */
static void G__setup_memvarmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   { map<char*,int,less<char*>,allocator<pair<char* const,int> > > *p; p=(map<char*,int,less<char*>,allocator<pair<char* const,int> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator */
static void G__setup_memvarmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator));
   { map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator *p; p=(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator */
static void G__setup_memvarmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator));
   { map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator *p; p=(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool> *p; p=(pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pair<char* const,long> */
static void G__setup_memvarpairlEcharmUsPconstcOlonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR));
   { pair<char* const,long> *p; p=(pair<char* const,long>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),67,0,4,-1,-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),108,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<char* const,long> > */
static void G__setup_memvarallocatorlEpairlEcharmUsPconstcOlonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   { allocator<pair<char* const,long> > *p; p=(allocator<pair<char* const,long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,long,less<char*>,allocator<pair<char* const,long> > > */
static void G__setup_memvarmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   { map<char*,long,less<char*>,allocator<pair<char* const,long> > > *p; p=(map<char*,long,less<char*>,allocator<pair<char* const,long> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator */
static void G__setup_memvarmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator));
   { map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator *p; p=(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator */
static void G__setup_memvarmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator));
   { map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator *p; p=(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool> *p; p=(pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pair<char* const,float> */
static void G__setup_memvarpairlEcharmUsPconstcOfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR));
   { pair<char* const,float> *p; p=(pair<char* const,float>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),67,0,4,-1,-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),102,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<char* const,float> > */
static void G__setup_memvarallocatorlEpairlEcharmUsPconstcOfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   { allocator<pair<char* const,float> > *p; p=(allocator<pair<char* const,float> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,float,less<char*>,allocator<pair<char* const,float> > > */
static void G__setup_memvarmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   { map<char*,float,less<char*>,allocator<pair<char* const,float> > > *p; p=(map<char*,float,less<char*>,allocator<pair<char* const,float> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator */
static void G__setup_memvarmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator));
   { map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator *p; p=(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator */
static void G__setup_memvarmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator));
   { map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator *p; p=(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool> *p; p=(pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pair<char* const,double> */
static void G__setup_memvarpairlEcharmUsPconstcOdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR));
   { pair<char* const,double> *p; p=(pair<char* const,double>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),67,0,4,-1,-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),100,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<char* const,double> > */
static void G__setup_memvarallocatorlEpairlEcharmUsPconstcOdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   { allocator<pair<char* const,double> > *p; p=(allocator<pair<char* const,double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,double,less<char*>,allocator<pair<char* const,double> > > */
static void G__setup_memvarmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   { map<char*,double,less<char*>,allocator<pair<char* const,double> > > *p; p=(map<char*,double,less<char*>,allocator<pair<char* const,double> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator */
static void G__setup_memvarmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator));
   { map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator *p; p=(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator */
static void G__setup_memvarmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator));
   { map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator *p; p=(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool> *p; p=(pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pair<char* const,void*> */
static void G__setup_memvarpairlEcharmUsPconstcOvoidmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR));
   { pair<char* const,void*> *p; p=(pair<char* const,void*>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),67,0,4,-1,-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),89,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<char* const,void*> > */
static void G__setup_memvarallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   { allocator<pair<char* const,void*> > *p; p=(allocator<pair<char* const,void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > > */
static void G__setup_memvarmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   { map<char*,void*,less<char*>,allocator<pair<char* const,void*> > > *p; p=(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator */
static void G__setup_memvarmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator));
   { map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator *p; p=(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator */
static void G__setup_memvarmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   { map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator *p; p=(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool> *p; p=(pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pair<char* const,char*> */
static void G__setup_memvarpairlEcharmUsPconstcOcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR));
   { pair<char* const,char*> *p; p=(pair<char* const,char*>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),67,0,4,-1,-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),67,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<char* const,char*> > */
static void G__setup_memvarallocatorlEpairlEcharmUsPconstcOcharmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   { allocator<pair<char* const,char*> > *p; p=(allocator<pair<char* const,char*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > > */
static void G__setup_memvarmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   { map<char*,char*,less<char*>,allocator<pair<char* const,char*> > > *p; p=(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator */
static void G__setup_memvarmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator));
   { map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator *p; p=(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator */
static void G__setup_memvarmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   { map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator *p; p=(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool> *p; p=(pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<string> */
static void G__setup_memvarlesslEstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR));
   { less<string> *p; p=(less<string>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<string,string,bool> */
static void G__setup_memvarbinary_functionlEstringcOstringcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   { binary_function<string,string,bool> *p; p=(binary_function<string,string,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const string,int> > */
static void G__setup_memvarallocatorlEpairlEconstsPstringcOintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   { allocator<pair<const string,int> > *p; p=(allocator<pair<const string,int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,int,less<string>,allocator<pair<const string,int> > > */
static void G__setup_memvarmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   { map<string,int,less<string>,allocator<pair<const string,int> > > *p; p=(map<string,int,less<string>,allocator<pair<const string,int> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,int,less<string>,allocator<pair<const string,int> > >::iterator */
static void G__setup_memvarmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator));
   { map<string,int,less<string>,allocator<pair<const string,int> > >::iterator *p; p=(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator */
static void G__setup_memvarmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator));
   { map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator *p; p=(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool> *p; p=(pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const string,long> > */
static void G__setup_memvarallocatorlEpairlEconstsPstringcOlonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   { allocator<pair<const string,long> > *p; p=(allocator<pair<const string,long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,long,less<string>,allocator<pair<const string,long> > > */
static void G__setup_memvarmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   { map<string,long,less<string>,allocator<pair<const string,long> > > *p; p=(map<string,long,less<string>,allocator<pair<const string,long> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,long,less<string>,allocator<pair<const string,long> > >::iterator */
static void G__setup_memvarmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator));
   { map<string,long,less<string>,allocator<pair<const string,long> > >::iterator *p; p=(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator */
static void G__setup_memvarmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator));
   { map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator *p; p=(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool> *p; p=(pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const string,float> > */
static void G__setup_memvarallocatorlEpairlEconstsPstringcOfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   { allocator<pair<const string,float> > *p; p=(allocator<pair<const string,float> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,float,less<string>,allocator<pair<const string,float> > > */
static void G__setup_memvarmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   { map<string,float,less<string>,allocator<pair<const string,float> > > *p; p=(map<string,float,less<string>,allocator<pair<const string,float> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,float,less<string>,allocator<pair<const string,float> > >::iterator */
static void G__setup_memvarmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator));
   { map<string,float,less<string>,allocator<pair<const string,float> > >::iterator *p; p=(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator */
static void G__setup_memvarmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator));
   { map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator *p; p=(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool> *p; p=(pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const string,double> > */
static void G__setup_memvarallocatorlEpairlEconstsPstringcOdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   { allocator<pair<const string,double> > *p; p=(allocator<pair<const string,double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,double,less<string>,allocator<pair<const string,double> > > */
static void G__setup_memvarmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   { map<string,double,less<string>,allocator<pair<const string,double> > > *p; p=(map<string,double,less<string>,allocator<pair<const string,double> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,double,less<string>,allocator<pair<const string,double> > >::iterator */
static void G__setup_memvarmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator));
   { map<string,double,less<string>,allocator<pair<const string,double> > >::iterator *p; p=(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator */
static void G__setup_memvarmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator));
   { map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator *p; p=(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool> *p; p=(pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const string,void*> > */
static void G__setup_memvarallocatorlEpairlEconstsPstringcOvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   { allocator<pair<const string,void*> > *p; p=(allocator<pair<const string,void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,void*,less<string>,allocator<pair<const string,void*> > > */
static void G__setup_memvarmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   { map<string,void*,less<string>,allocator<pair<const string,void*> > > *p; p=(map<string,void*,less<string>,allocator<pair<const string,void*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator */
static void G__setup_memvarmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator));
   { map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator *p; p=(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator */
static void G__setup_memvarmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   { map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator *p; p=(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool> *p; p=(pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunclesslEcharmUgR(void) {
   /* less<char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   G__memfunc_setup("operator()",957,G__map_48_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"C - - 41 - x C - - 41 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<char*>", 1017, G__map_48_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<char*>", 1017, G__map_48_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 0, 1, 1, 1, 0, "u 'less<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<char*>", 1143, G__map_48_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_48_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 1, 1, 1, 1, 0, "u 'less<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEcharmUcOcharmUcOboolgR(void) {
   /* binary_function<char*,char*,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<char*,char*,bool>", 3160, G__map_49_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<char*,char*,bool>", 3160, G__map_49_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<char*,char*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<char*,char*,bool>", 3286, G__map_49_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_49_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<char*,char*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEcharmUsPconstcOintgR(void) {
   /* pair<char* const,int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR));
   G__memfunc_setup("pair<char* const,int>",1964,G__map_50_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<char* const,int>",1964,G__map_50_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR), -1, 0, 2, 1, 1, 0, 
"C - - 41 - a i - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR), -1, 1, 1, 1, 4, 0, "u 'pair<char* const,int>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<char* const,int>", 1964, G__map_50_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR), -1, 0, 1, 1, 1, 0, "u 'pair<char* const,int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<char* const,int>", 2090, G__map_50_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEcharmUsPconstcOintgRsPgR(void) {
   /* allocator<pair<char* const,int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR));
   G__memfunc_setup("allocator<pair<char* const,int> >",3079,G__map_51_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<char* const,int> >",3079,G__map_51_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<char* const,int> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_51_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR), G__defined_typename("allocator<pair<char* const,int> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<char* const,int>' 'allocator<pair<char* const,int> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_51_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<char* const,int> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_51_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,int>' 'allocator<pair<char* const,int> >::pointer' 0 - __p h - 'allocator<pair<char* const,int> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_51_0_6, 104, -1, G__defined_typename("allocator<pair<char* const,int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_51_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,int>' 'allocator<pair<char* const,int> >::pointer' 0 - __p u 'pair<char* const,int>' - 1 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_51_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<char* const,int>' 'allocator<pair<char* const,int> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<char* const,int> >", 3205, G__map_51_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_51_0_10, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<char* const,int> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR(void) {
   /* map<char*,int,less<char*>,allocator<pair<char* const,int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR));
   G__memfunc_setup("map<char*,int,less<char*>,allocator<pair<char* const,int> > >",5487,G__map_52_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,int,less<char*>,allocator<pair<char* const,int> > >",5487,G__map_52_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - first u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,int,less<char*>,allocator<pair<char* const,int> > >",5487,G__map_52_0_3, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator' - 0 - first u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,int,less<char*>,allocator<pair<char* const,int> > >",5487,G__map_52_0_4, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_52_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_52_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_52_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_52_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_52_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_52_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_52_0_11, 104, -1, G__defined_typename("map<char*,int,less<char*>,allocator<pair<char* const,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_52_0_12, 104, -1, G__defined_typename("map<char*,int,less<char*>,allocator<pair<char* const,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_52_0_13, 105, -1, -1, 1, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_52_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<char*,int>' 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_52_0_15, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - position u 'pair<char*,int>' 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_52_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - first u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_52_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator' - 0 - first u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_52_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_52_0_19, 104, -1, G__defined_typename("map<char*,int,less<char*>,allocator<pair<char* const,int> > >::size_type"), 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_52_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - first u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_52_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_52_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_52_0_23, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_52_0_24, 104, -1, G__defined_typename("map<char*,int,less<char*>,allocator<pair<char* const,int> > >::size_type"), 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_52_0_25, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_52_0_26, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<char*,int,less<char*>,allocator<pair<char* const,int> > >", 5613, G__map_52_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator(void) {
   /* map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_54_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_54_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_54_0_3, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_54_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOintgR), G__defined_typename("map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_54_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOintgR), G__defined_typename("map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_54_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_54_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_54_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_54_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_54_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_54_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_54_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_55_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_55_0_2, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_55_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOintgR), G__defined_typename("map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_55_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOintgR), G__defined_typename("map<char*,int,less<char*>,allocator<pair<char* const,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_55_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_55_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_55_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_55_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_55_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>",7499,G__map_56_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>",7499,G__map_56_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 1 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>", 7499, G__map_56_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>", 7625, G__map_56_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEcharmUsPconstcOlonggR(void) {
   /* pair<char* const,long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR));
   G__memfunc_setup("pair<char* const,long>",2065,G__map_57_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<char* const,long>",2065,G__map_57_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR), -1, 0, 2, 1, 1, 0, 
"C - - 41 - a l - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR), -1, 1, 1, 1, 4, 0, "u 'pair<char* const,long>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<char* const,long>", 2065, G__map_57_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR), -1, 0, 1, 1, 1, 0, "u 'pair<char* const,long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<char* const,long>", 2191, G__map_57_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEcharmUsPconstcOlonggRsPgR(void) {
   /* allocator<pair<char* const,long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR));
   G__memfunc_setup("allocator<pair<char* const,long> >",3180,G__map_58_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<char* const,long> >",3180,G__map_58_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<char* const,long> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_58_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR), G__defined_typename("allocator<pair<char* const,long> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<char* const,long>' 'allocator<pair<char* const,long> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_58_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<char* const,long> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_58_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,long>' 'allocator<pair<char* const,long> >::pointer' 0 - __p h - 'allocator<pair<char* const,long> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_58_0_6, 104, -1, G__defined_typename("allocator<pair<char* const,long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_58_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,long>' 'allocator<pair<char* const,long> >::pointer' 0 - __p u 'pair<char* const,long>' - 1 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_58_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<char* const,long>' 'allocator<pair<char* const,long> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<char* const,long> >", 3306, G__map_58_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_58_0_10, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<char* const,long> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR(void) {
   /* map<char*,long,less<char*>,allocator<pair<char* const,long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR));
   G__memfunc_setup("map<char*,long,less<char*>,allocator<pair<char* const,long> > >",5689,G__map_59_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,long,less<char*>,allocator<pair<char* const,long> > >",5689,G__map_59_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - first u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,long,less<char*>,allocator<pair<char* const,long> > >",5689,G__map_59_0_3, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator' - 0 - first u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,long,less<char*>,allocator<pair<char* const,long> > >",5689,G__map_59_0_4, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_59_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_59_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_59_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_59_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_59_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_59_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_59_0_11, 104, -1, G__defined_typename("map<char*,long,less<char*>,allocator<pair<char* const,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_59_0_12, 104, -1, G__defined_typename("map<char*,long,less<char*>,allocator<pair<char* const,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_59_0_13, 108, -1, -1, 1, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_59_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<char*,long>' 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_59_0_15, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - position u 'pair<char*,long>' 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_59_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - first u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_59_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator' - 0 - first u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_59_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_59_0_19, 104, -1, G__defined_typename("map<char*,long,less<char*>,allocator<pair<char* const,long> > >::size_type"), 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_59_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - first u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_59_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_59_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_59_0_23, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_59_0_24, 104, -1, G__defined_typename("map<char*,long,less<char*>,allocator<pair<char* const,long> > >::size_type"), 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_59_0_25, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_59_0_26, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<char*,long,less<char*>,allocator<pair<char* const,long> > >", 5815, G__map_59_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator(void) {
   /* map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_61_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_61_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_61_0_3, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_61_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOlonggR), G__defined_typename("map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_61_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOlonggR), G__defined_typename("map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_61_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_61_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_61_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_61_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_61_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_61_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_61_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_62_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_62_0_2, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_62_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOlonggR), G__defined_typename("map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_62_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOlonggR), G__defined_typename("map<char*,long,less<char*>,allocator<pair<char* const,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_62_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_62_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_62_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_62_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_62_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>",7701,G__map_63_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>",7701,G__map_63_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 1 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>", 7701, G__map_63_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>", 7827, G__map_63_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEcharmUsPconstcOfloatgR(void) {
   /* pair<char* const,float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR));
   G__memfunc_setup("pair<char* const,float>",2167,G__map_64_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<char* const,float>",2167,G__map_64_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR), -1, 0, 2, 1, 1, 0, 
"C - - 41 - a f - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR), -1, 1, 1, 1, 4, 0, "u 'pair<char* const,float>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<char* const,float>", 2167, G__map_64_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR), -1, 0, 1, 1, 1, 0, "u 'pair<char* const,float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<char* const,float>", 2293, G__map_64_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEcharmUsPconstcOfloatgRsPgR(void) {
   /* allocator<pair<char* const,float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR));
   G__memfunc_setup("allocator<pair<char* const,float> >",3282,G__map_65_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<char* const,float> >",3282,G__map_65_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<char* const,float> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_65_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR), G__defined_typename("allocator<pair<char* const,float> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<char* const,float>' 'allocator<pair<char* const,float> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_65_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<char* const,float> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_65_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,float>' 'allocator<pair<char* const,float> >::pointer' 0 - __p h - 'allocator<pair<char* const,float> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_65_0_6, 104, -1, G__defined_typename("allocator<pair<char* const,float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_65_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,float>' 'allocator<pair<char* const,float> >::pointer' 0 - __p u 'pair<char* const,float>' - 1 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_65_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<char* const,float>' 'allocator<pair<char* const,float> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<char* const,float> >", 3408, G__map_65_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_65_0_10, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<char* const,float> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR(void) {
   /* map<char*,float,less<char*>,allocator<pair<char* const,float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR));
   G__memfunc_setup("map<char*,float,less<char*>,allocator<pair<char* const,float> > >",5893,G__map_66_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,float,less<char*>,allocator<pair<char* const,float> > >",5893,G__map_66_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - first u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,float,less<char*>,allocator<pair<char* const,float> > >",5893,G__map_66_0_3, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator' - 0 - first u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,float,less<char*>,allocator<pair<char* const,float> > >",5893,G__map_66_0_4, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_66_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_66_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_66_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_66_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_66_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_66_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_66_0_11, 104, -1, G__defined_typename("map<char*,float,less<char*>,allocator<pair<char* const,float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_66_0_12, 104, -1, G__defined_typename("map<char*,float,less<char*>,allocator<pair<char* const,float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_66_0_13, 102, -1, -1, 1, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_66_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<char*,float>' 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_66_0_15, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - position u 'pair<char*,float>' 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_66_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - first u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_66_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator' - 0 - first u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_66_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_66_0_19, 104, -1, G__defined_typename("map<char*,float,less<char*>,allocator<pair<char* const,float> > >::size_type"), 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_66_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - first u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_66_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_66_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_66_0_23, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_66_0_24, 104, -1, G__defined_typename("map<char*,float,less<char*>,allocator<pair<char* const,float> > >::size_type"), 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_66_0_25, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_66_0_26, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<char*,float,less<char*>,allocator<pair<char* const,float> > >", 6019, G__map_66_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator(void) {
   /* map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_68_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_68_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_68_0_3, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_68_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOfloatgR), G__defined_typename("map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_68_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOfloatgR), G__defined_typename("map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_68_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_68_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_68_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_68_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_68_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_68_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_68_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_69_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_69_0_2, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_69_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOfloatgR), G__defined_typename("map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_69_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOfloatgR), G__defined_typename("map<char*,float,less<char*>,allocator<pair<char* const,float> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_69_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_69_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_69_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_69_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_69_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>",7905,G__map_70_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>",7905,G__map_70_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 1 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>", 7905, G__map_70_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>", 8031, G__map_70_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEcharmUsPconstcOdoublegR(void) {
   /* pair<char* const,double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR));
   G__memfunc_setup("pair<char* const,double>",2268,G__map_71_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<char* const,double>",2268,G__map_71_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR), -1, 0, 2, 1, 1, 0, 
"C - - 41 - a d - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR), -1, 1, 1, 1, 4, 0, "u 'pair<char* const,double>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<char* const,double>", 2268, G__map_71_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR), -1, 0, 1, 1, 1, 0, "u 'pair<char* const,double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<char* const,double>", 2394, G__map_71_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEcharmUsPconstcOdoublegRsPgR(void) {
   /* allocator<pair<char* const,double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR));
   G__memfunc_setup("allocator<pair<char* const,double> >",3383,G__map_72_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<char* const,double> >",3383,G__map_72_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<char* const,double> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_72_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR), G__defined_typename("allocator<pair<char* const,double> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<char* const,double>' 'allocator<pair<char* const,double> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_72_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<char* const,double> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_72_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,double>' 'allocator<pair<char* const,double> >::pointer' 0 - __p h - 'allocator<pair<char* const,double> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_72_0_6, 104, -1, G__defined_typename("allocator<pair<char* const,double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_72_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,double>' 'allocator<pair<char* const,double> >::pointer' 0 - __p u 'pair<char* const,double>' - 1 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_72_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<char* const,double>' 'allocator<pair<char* const,double> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<char* const,double> >", 3509, G__map_72_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_72_0_10, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<char* const,double> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR(void) {
   /* map<char*,double,less<char*>,allocator<pair<char* const,double> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR));
   G__memfunc_setup("map<char*,double,less<char*>,allocator<pair<char* const,double> > >",6095,G__map_73_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,double,less<char*>,allocator<pair<char* const,double> > >",6095,G__map_73_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - first u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,double,less<char*>,allocator<pair<char* const,double> > >",6095,G__map_73_0_3, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator' - 0 - first u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,double,less<char*>,allocator<pair<char* const,double> > >",6095,G__map_73_0_4, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_73_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_73_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_73_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_73_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_73_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_73_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_73_0_11, 104, -1, G__defined_typename("map<char*,double,less<char*>,allocator<pair<char* const,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_73_0_12, 104, -1, G__defined_typename("map<char*,double,less<char*>,allocator<pair<char* const,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_73_0_13, 100, -1, -1, 1, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_73_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<char*,double>' 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_73_0_15, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - position u 'pair<char*,double>' 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_73_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - first u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_73_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator' - 0 - first u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_73_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_73_0_19, 104, -1, G__defined_typename("map<char*,double,less<char*>,allocator<pair<char* const,double> > >::size_type"), 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_73_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - first u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_73_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_73_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_73_0_23, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_73_0_24, 104, -1, G__defined_typename("map<char*,double,less<char*>,allocator<pair<char* const,double> > >::size_type"), 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_73_0_25, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_73_0_26, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<char*,double,less<char*>,allocator<pair<char* const,double> > >", 6221, G__map_73_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator(void) {
   /* map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_75_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_75_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_75_0_3, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_75_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOdoublegR), G__defined_typename("map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_75_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOdoublegR), G__defined_typename("map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_75_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_75_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_75_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_75_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_75_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_75_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_75_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_76_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_76_0_2, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_76_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOdoublegR), G__defined_typename("map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_76_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOdoublegR), G__defined_typename("map<char*,double,less<char*>,allocator<pair<char* const,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_76_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_76_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_76_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_76_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_76_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>",8107,G__map_77_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>",8107,G__map_77_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 1 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>", 8107, G__map_77_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>", 8233, G__map_77_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEcharmUsPconstcOvoidmUgR(void) {
   /* pair<char* const,void*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR));
   G__memfunc_setup("pair<char* const,void*>",2109,G__map_78_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<char* const,void*>",2109,G__map_78_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR), -1, 0, 2, 1, 1, 0, 
"C - - 41 - a Y - - 41 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR), -1, 1, 1, 1, 4, 0, "u 'pair<char* const,void*>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<char* const,void*>", 2109, G__map_78_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR), -1, 0, 1, 1, 1, 0, "u 'pair<char* const,void*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<char* const,void*>", 2235, G__map_78_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR(void) {
   /* allocator<pair<char* const,void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR));
   G__memfunc_setup("allocator<pair<char* const,void*> >",3224,G__map_79_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<char* const,void*> >",3224,G__map_79_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<char* const,void*> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_79_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR), G__defined_typename("allocator<pair<char* const,void*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<char* const,void*>' 'allocator<pair<char* const,void*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_79_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<char* const,void*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_79_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,void*>' 'allocator<pair<char* const,void*> >::pointer' 0 - __p h - 'allocator<pair<char* const,void*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_79_0_6, 104, -1, G__defined_typename("allocator<pair<char* const,void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_79_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,void*>' 'allocator<pair<char* const,void*> >::pointer' 0 - __p u 'pair<char* const,void*>' - 1 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_79_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<char* const,void*>' 'allocator<pair<char* const,void*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<char* const,void*> >", 3350, G__map_79_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_79_0_10, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<char* const,void*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR(void) {
   /* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR));
   G__memfunc_setup("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >",5777,G__map_80_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >",5777,G__map_80_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - first u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >",5777,G__map_80_0_3, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator' - 0 - first u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >",5777,G__map_80_0_4, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_80_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_80_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_80_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_80_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_80_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_80_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_80_0_11, 104, -1, G__defined_typename("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_80_0_12, 104, -1, G__defined_typename("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_80_0_13, 89, -1, -1, 1, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_80_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<char*,void*>' 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_80_0_15, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - position u 'pair<char*,void*>' 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_80_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - first u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_80_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator' - 0 - first u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_80_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_80_0_19, 104, -1, G__defined_typename("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::size_type"), 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_80_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - first u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_80_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_80_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_80_0_23, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_80_0_24, 104, -1, G__defined_typename("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::size_type"), 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_80_0_25, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_80_0_26, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >", 5903, G__map_80_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator(void) {
   /* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_82_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_82_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_82_0_3, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_82_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOvoidmUgR), G__defined_typename("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_82_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOvoidmUgR), G__defined_typename("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_82_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_82_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_82_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_82_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_82_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_82_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_82_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_83_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_83_0_2, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_83_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOvoidmUgR), G__defined_typename("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_83_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOvoidmUgR), G__defined_typename("map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_83_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_83_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_83_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_83_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_83_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>",7789,G__map_84_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>",7789,G__map_84_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 1 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>", 7789, G__map_84_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>", 7915, G__map_84_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEcharmUsPconstcOcharmUgR(void) {
   /* pair<char* const,char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR));
   G__memfunc_setup("pair<char* const,char*>",2089,G__map_85_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<char* const,char*>",2089,G__map_85_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR), -1, 0, 2, 1, 1, 0, 
"C - - 41 - a C - - 41 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR), -1, 1, 1, 1, 4, 0, "u 'pair<char* const,char*>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<char* const,char*>", 2089, G__map_85_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR), -1, 0, 1, 1, 1, 0, "u 'pair<char* const,char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<char* const,char*>", 2215, G__map_85_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEcharmUsPconstcOcharmUgRsPgR(void) {
   /* allocator<pair<char* const,char*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR));
   G__memfunc_setup("allocator<pair<char* const,char*> >",3204,G__map_86_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<char* const,char*> >",3204,G__map_86_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<char* const,char*> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_86_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR), G__defined_typename("allocator<pair<char* const,char*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<char* const,char*>' 'allocator<pair<char* const,char*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_86_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<char* const,char*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_86_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,char*>' 'allocator<pair<char* const,char*> >::pointer' 0 - __p h - 'allocator<pair<char* const,char*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_86_0_6, 104, -1, G__defined_typename("allocator<pair<char* const,char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_86_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<char* const,char*>' 'allocator<pair<char* const,char*> >::pointer' 0 - __p u 'pair<char* const,char*>' - 1 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_86_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<char* const,char*>' 'allocator<pair<char* const,char*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<char* const,char*> >", 3330, G__map_86_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_86_0_10, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<char* const,char*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR(void) {
   /* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR));
   G__memfunc_setup("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >",5737,G__map_87_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >",5737,G__map_87_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - first u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >",5737,G__map_87_0_3, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator' - 0 - first u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >",5737,G__map_87_0_4, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_87_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_87_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_87_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_87_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_87_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_87_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_87_0_11, 104, -1, G__defined_typename("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_87_0_12, 104, -1, G__defined_typename("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_87_0_13, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_87_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<char*,char*>' 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_87_0_15, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - position u 'pair<char*,char*>' 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_87_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - first u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_87_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator' - 0 - first u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_87_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_87_0_19, 104, -1, G__defined_typename("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::size_type"), 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_87_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - first u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_87_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_87_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_87_0_23, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_87_0_24, 104, -1, G__defined_typename("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::size_type"), 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_87_0_25, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_87_0_26, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >", 5863, G__map_87_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator(void) {
   /* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_89_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_89_0_2, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_89_0_3, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_89_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOcharmUgR), G__defined_typename("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_89_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOcharmUgR), G__defined_typename("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_89_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_89_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_89_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_89_0_9, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_89_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_89_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_89_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_90_0_1, 105, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_90_0_2, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_90_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEcharmUcOcharmUgR), G__defined_typename("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_90_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEcharmUcOcharmUgR), G__defined_typename("map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_90_0_5, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_90_0_6, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_90_0_7, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_90_0_8, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_90_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>",7749,G__map_91_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>",7749,G__map_91_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 1 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>' - 1 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>", 7749, G__map_91_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>", 7875, G__map_91_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEstringgR(void) {
   /* less<string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR));
   G__memfunc_setup("operator()",957,G__map_92_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' - 11 - x u 'string' - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<string>", 1224, G__map_92_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<string>", 1224, G__map_92_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 0, 1, 1, 1, 0, "u 'less<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<string>", 1350, G__map_92_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_92_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 1, 1, 1, 1, 0, "u 'less<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEstringcOstringcOboolgR(void) {
   /* binary_function<string,string,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<string,string,bool>", 3574, G__map_93_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<string,string,bool>", 3574, G__map_93_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<string,string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<string,string,bool>", 3700, G__map_93_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_93_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<string,string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPstringcOintgRsPgR(void) {
   /* allocator<pair<const string,int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR));
   G__memfunc_setup("allocator<pair<const string,int> >",3286,G__map_95_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const string,int> >",3286,G__map_95_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const string,int> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_95_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOintgR), G__defined_typename("allocator<pair<const string,int> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,int>' 'allocator<pair<const string,int> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_95_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOintgR), G__defined_typename("allocator<pair<const string,int> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,int>' 'allocator<pair<const string,int> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_95_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOintgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const string,int> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_95_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,int>' 'allocator<pair<const string,int> >::pointer' 0 - __p h - 'allocator<pair<const string,int> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_95_0_7, 104, -1, G__defined_typename("allocator<pair<const string,int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_95_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,int>' 'allocator<pair<const string,int> >::pointer' 0 - __p u 'pair<const string,int>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_95_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const string,int>' 'allocator<pair<const string,int> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const string,int> >", 3412, G__map_95_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_95_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const string,int> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR(void) {
   /* map<string,int,less<string>,allocator<pair<const string,int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__memfunc_setup("map<string,int,less<string>,allocator<pair<const string,int> > >",6108,G__map_96_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,int,less<string>,allocator<pair<const string,int> > >",6108,G__map_96_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - first u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,int,less<string>,allocator<pair<const string,int> > >",6108,G__map_96_0_3, 105, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 0 - first u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,int,less<string>,allocator<pair<const string,int> > >",6108,G__map_96_0_4, 105, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_96_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_96_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_96_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_96_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_96_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_96_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_96_0_11, 104, -1, G__defined_typename("map<string,int,less<string>,allocator<pair<const string,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_96_0_12, 104, -1, G__defined_typename("map<string,int,less<string>,allocator<pair<const string,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_96_0_13, 105, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_96_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,int>' 'map<string,int,less<string>,allocator<pair<const string,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_96_0_15, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - position u 'pair<string,int>' 'map<string,int,less<string>,allocator<pair<const string,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_96_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - first u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_96_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 0 - first u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_96_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_96_0_19, 104, -1, G__defined_typename("map<string,int,less<string>,allocator<pair<const string,int> > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_96_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - first u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_96_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_96_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_96_0_23, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_96_0_24, 104, -1, G__defined_typename("map<string,int,less<string>,allocator<pair<const string,int> > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_96_0_25, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_96_0_26, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,int,less<string>,allocator<pair<const string,int> > >", 6234, G__map_96_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator(void) {
   /* map<string,int,less<string>,allocator<pair<const string,int> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_98_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_98_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_98_0_3, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_98_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOintgR), G__defined_typename("map<string,int,less<string>,allocator<pair<const string,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_98_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOintgR), G__defined_typename("map<string,int,less<string>,allocator<pair<const string,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_98_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_98_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_98_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_98_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_98_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_98_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_98_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_99_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_99_0_2, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_99_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOintgR), G__defined_typename("map<string,int,less<string>,allocator<pair<const string,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_99_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOintgR), G__defined_typename("map<string,int,less<string>,allocator<pair<const string,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_99_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_99_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_99_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_99_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_99_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>",8120,G__map_100_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>",8120,G__map_100_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>", 8120, G__map_100_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>", 8246, G__map_100_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPstringcOlonggRsPgR(void) {
   /* allocator<pair<const string,long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR));
   G__memfunc_setup("allocator<pair<const string,long> >",3387,G__map_102_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const string,long> >",3387,G__map_102_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const string,long> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_102_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOlonggR), G__defined_typename("allocator<pair<const string,long> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,long>' 'allocator<pair<const string,long> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_102_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOlonggR), G__defined_typename("allocator<pair<const string,long> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,long>' 'allocator<pair<const string,long> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_102_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOlonggR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const string,long> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_102_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,long>' 'allocator<pair<const string,long> >::pointer' 0 - __p h - 'allocator<pair<const string,long> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_102_0_7, 104, -1, G__defined_typename("allocator<pair<const string,long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_102_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,long>' 'allocator<pair<const string,long> >::pointer' 0 - __p u 'pair<const string,long>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_102_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const string,long>' 'allocator<pair<const string,long> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const string,long> >", 3513, G__map_102_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_102_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const string,long> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR(void) {
   /* map<string,long,less<string>,allocator<pair<const string,long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR));
   G__memfunc_setup("map<string,long,less<string>,allocator<pair<const string,long> > >",6310,G__map_103_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,long,less<string>,allocator<pair<const string,long> > >",6310,G__map_103_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - first u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,long,less<string>,allocator<pair<const string,long> > >",6310,G__map_103_0_3, 105, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 0 - first u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,long,less<string>,allocator<pair<const string,long> > >",6310,G__map_103_0_4, 105, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_103_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_103_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_103_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_103_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_103_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_103_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_103_0_11, 104, -1, G__defined_typename("map<string,long,less<string>,allocator<pair<const string,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_103_0_12, 104, -1, G__defined_typename("map<string,long,less<string>,allocator<pair<const string,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_103_0_13, 108, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_103_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,long>' 'map<string,long,less<string>,allocator<pair<const string,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_103_0_15, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - position u 'pair<string,long>' 'map<string,long,less<string>,allocator<pair<const string,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_103_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - first u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_103_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 0 - first u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_103_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_103_0_19, 104, -1, G__defined_typename("map<string,long,less<string>,allocator<pair<const string,long> > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_103_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - first u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_103_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_103_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_103_0_23, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_103_0_24, 104, -1, G__defined_typename("map<string,long,less<string>,allocator<pair<const string,long> > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_103_0_25, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_103_0_26, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,long,less<string>,allocator<pair<const string,long> > >", 6436, G__map_103_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator(void) {
   /* map<string,long,less<string>,allocator<pair<const string,long> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_105_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_105_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_105_0_3, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_105_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOlonggR), G__defined_typename("map<string,long,less<string>,allocator<pair<const string,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_105_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOlonggR), G__defined_typename("map<string,long,less<string>,allocator<pair<const string,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_105_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_105_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_105_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_105_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_105_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_105_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_105_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_106_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_106_0_2, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_106_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOlonggR), G__defined_typename("map<string,long,less<string>,allocator<pair<const string,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_106_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOlonggR), G__defined_typename("map<string,long,less<string>,allocator<pair<const string,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_106_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_106_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_106_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_106_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_106_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>",8322,G__map_107_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>",8322,G__map_107_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>", 8322, G__map_107_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>", 8448, G__map_107_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPstringcOfloatgRsPgR(void) {
   /* allocator<pair<const string,float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR));
   G__memfunc_setup("allocator<pair<const string,float> >",3489,G__map_109_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const string,float> >",3489,G__map_109_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const string,float> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_109_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOfloatgR), G__defined_typename("allocator<pair<const string,float> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,float>' 'allocator<pair<const string,float> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_109_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOfloatgR), G__defined_typename("allocator<pair<const string,float> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,float>' 'allocator<pair<const string,float> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_109_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOfloatgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const string,float> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_109_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,float>' 'allocator<pair<const string,float> >::pointer' 0 - __p h - 'allocator<pair<const string,float> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_109_0_7, 104, -1, G__defined_typename("allocator<pair<const string,float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_109_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,float>' 'allocator<pair<const string,float> >::pointer' 0 - __p u 'pair<const string,float>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_109_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const string,float>' 'allocator<pair<const string,float> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const string,float> >", 3615, G__map_109_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_109_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const string,float> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR(void) {
   /* map<string,float,less<string>,allocator<pair<const string,float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR));
   G__memfunc_setup("map<string,float,less<string>,allocator<pair<const string,float> > >",6514,G__map_110_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,float,less<string>,allocator<pair<const string,float> > >",6514,G__map_110_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - first u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,float,less<string>,allocator<pair<const string,float> > >",6514,G__map_110_0_3, 105, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 0 - first u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,float,less<string>,allocator<pair<const string,float> > >",6514,G__map_110_0_4, 105, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_110_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_110_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_110_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_110_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_110_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_110_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_110_0_11, 104, -1, G__defined_typename("map<string,float,less<string>,allocator<pair<const string,float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_110_0_12, 104, -1, G__defined_typename("map<string,float,less<string>,allocator<pair<const string,float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_110_0_13, 102, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_110_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,float>' 'map<string,float,less<string>,allocator<pair<const string,float> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_110_0_15, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - position u 'pair<string,float>' 'map<string,float,less<string>,allocator<pair<const string,float> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_110_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - first u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_110_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 0 - first u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_110_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_110_0_19, 104, -1, G__defined_typename("map<string,float,less<string>,allocator<pair<const string,float> > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_110_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - first u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_110_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_110_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_110_0_23, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_110_0_24, 104, -1, G__defined_typename("map<string,float,less<string>,allocator<pair<const string,float> > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_110_0_25, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_110_0_26, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,float,less<string>,allocator<pair<const string,float> > >", 6640, G__map_110_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator(void) {
   /* map<string,float,less<string>,allocator<pair<const string,float> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_112_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_112_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_112_0_3, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_112_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOfloatgR), G__defined_typename("map<string,float,less<string>,allocator<pair<const string,float> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_112_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOfloatgR), G__defined_typename("map<string,float,less<string>,allocator<pair<const string,float> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_112_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_112_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_112_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_112_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_112_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_112_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_112_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_113_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_113_0_2, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_113_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOfloatgR), G__defined_typename("map<string,float,less<string>,allocator<pair<const string,float> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_113_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOfloatgR), G__defined_typename("map<string,float,less<string>,allocator<pair<const string,float> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_113_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_113_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_113_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_113_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_113_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>",8526,G__map_114_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>",8526,G__map_114_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>", 8526, G__map_114_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>", 8652, G__map_114_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPstringcOdoublegRsPgR(void) {
   /* allocator<pair<const string,double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR));
   G__memfunc_setup("allocator<pair<const string,double> >",3590,G__map_116_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const string,double> >",3590,G__map_116_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const string,double> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_116_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOdoublegR), G__defined_typename("allocator<pair<const string,double> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,double>' 'allocator<pair<const string,double> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_116_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOdoublegR), G__defined_typename("allocator<pair<const string,double> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,double>' 'allocator<pair<const string,double> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_116_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOdoublegR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const string,double> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_116_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,double>' 'allocator<pair<const string,double> >::pointer' 0 - __p h - 'allocator<pair<const string,double> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_116_0_7, 104, -1, G__defined_typename("allocator<pair<const string,double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_116_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,double>' 'allocator<pair<const string,double> >::pointer' 0 - __p u 'pair<const string,double>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_116_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const string,double>' 'allocator<pair<const string,double> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const string,double> >", 3716, G__map_116_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_116_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const string,double> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR(void) {
   /* map<string,double,less<string>,allocator<pair<const string,double> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR));
   G__memfunc_setup("map<string,double,less<string>,allocator<pair<const string,double> > >",6716,G__map_117_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,double,less<string>,allocator<pair<const string,double> > >",6716,G__map_117_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - first u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,double,less<string>,allocator<pair<const string,double> > >",6716,G__map_117_0_3, 105, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 0 - first u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,double,less<string>,allocator<pair<const string,double> > >",6716,G__map_117_0_4, 105, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_117_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_117_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_117_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_117_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_117_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_117_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_117_0_11, 104, -1, G__defined_typename("map<string,double,less<string>,allocator<pair<const string,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_117_0_12, 104, -1, G__defined_typename("map<string,double,less<string>,allocator<pair<const string,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_117_0_13, 100, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_117_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,double>' 'map<string,double,less<string>,allocator<pair<const string,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_117_0_15, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - position u 'pair<string,double>' 'map<string,double,less<string>,allocator<pair<const string,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_117_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - first u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_117_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 0 - first u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_117_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_117_0_19, 104, -1, G__defined_typename("map<string,double,less<string>,allocator<pair<const string,double> > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_117_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - first u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_117_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_117_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_117_0_23, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_117_0_24, 104, -1, G__defined_typename("map<string,double,less<string>,allocator<pair<const string,double> > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_117_0_25, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_117_0_26, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,double,less<string>,allocator<pair<const string,double> > >", 6842, G__map_117_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator(void) {
   /* map<string,double,less<string>,allocator<pair<const string,double> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_119_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_119_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_119_0_3, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_119_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOdoublegR), G__defined_typename("map<string,double,less<string>,allocator<pair<const string,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_119_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOdoublegR), G__defined_typename("map<string,double,less<string>,allocator<pair<const string,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_119_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_119_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_119_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_119_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_119_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_119_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_119_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_120_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_120_0_2, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_120_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOdoublegR), G__defined_typename("map<string,double,less<string>,allocator<pair<const string,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_120_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOdoublegR), G__defined_typename("map<string,double,less<string>,allocator<pair<const string,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_120_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_120_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_120_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_120_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_120_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>",8728,G__map_121_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>",8728,G__map_121_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>", 8728, G__map_121_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>", 8854, G__map_121_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPstringcOvoidmUgRsPgR(void) {
   /* allocator<pair<const string,void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR));
   G__memfunc_setup("allocator<pair<const string,void*> >",3431,G__map_123_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const string,void*> >",3431,G__map_123_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const string,void*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_123_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOvoidmUgR), G__defined_typename("allocator<pair<const string,void*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,void*>' 'allocator<pair<const string,void*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map_123_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOvoidmUgR), G__defined_typename("allocator<pair<const string,void*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const string,void*>' 'allocator<pair<const string,void*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map_123_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPstringcOvoidmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const string,void*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map_123_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,void*>' 'allocator<pair<const string,void*> >::pointer' 0 - __p h - 'allocator<pair<const string,void*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_123_0_7, 104, -1, G__defined_typename("allocator<pair<const string,void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map_123_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const string,void*>' 'allocator<pair<const string,void*> >::pointer' 0 - __p u 'pair<const string,void*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map_123_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const string,void*>' 'allocator<pair<const string,void*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const string,void*> >", 3557, G__map_123_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map_123_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const string,void*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR(void) {
   /* map<string,void*,less<string>,allocator<pair<const string,void*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR));
   G__memfunc_setup("map<string,void*,less<string>,allocator<pair<const string,void*> > >",6398,G__map_124_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,void*,less<string>,allocator<pair<const string,void*> > >",6398,G__map_124_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - first u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,void*,less<string>,allocator<pair<const string,void*> > >",6398,G__map_124_0_3, 105, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 0 - first u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,void*,less<string>,allocator<pair<const string,void*> > >",6398,G__map_124_0_4, 105, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_124_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map_124_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map_124_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map_124_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map_124_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map_124_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map_124_0_11, 104, -1, G__defined_typename("map<string,void*,less<string>,allocator<pair<const string,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map_124_0_12, 104, -1, G__defined_typename("map<string,void*,less<string>,allocator<pair<const string,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map_124_0_13, 89, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_124_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,void*>' 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_124_0_15, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - position u 'pair<string,void*>' 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_124_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - first u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map_124_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 0 - first u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_124_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_124_0_19, 104, -1, G__defined_typename("map<string,void*,less<string>,allocator<pair<const string,void*> > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map_124_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - first u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map_124_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map_124_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map_124_0_23, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map_124_0_24, 104, -1, G__defined_typename("map<string,void*,less<string>,allocator<pair<const string,void*> > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map_124_0_25, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map_124_0_26, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,void*,less<string>,allocator<pair<const string,void*> > >", 6524, G__map_124_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator(void) {
   /* map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map_126_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map_126_0_2, 105, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_126_0_3, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_126_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOvoidmUgR), G__defined_typename("map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_126_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOvoidmUgR), G__defined_typename("map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_126_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_126_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_126_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_126_0_9, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map_126_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map_126_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map_126_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map_127_0_1, 105, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map_127_0_2, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map_127_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEstringcOvoidmUgR), G__defined_typename("map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map_127_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEstringcOvoidmUgR), G__defined_typename("map<string,void*,less<string>,allocator<pair<const string,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_127_0_5, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map_127_0_6, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_127_0_7, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map_127_0_8, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map_127_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>",8410,G__map_128_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>",8410,G__map_128_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>", 8410, G__map_128_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>", 8536, G__map_128_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC__=3",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC_MINOR__=4",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__MAP_DLL=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"INCLUDE_CINTDICTVERSION=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__CINTDICTVERSION=20090608",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global() {
  G__cpp_setup_global0();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
   G__memfunc_setup("operator==", 998, G__map__0_112, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_113, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_114, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_115, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_116, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_117, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_118, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_119, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - x u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_120, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - first1 u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - last1 "
"u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - first2 u 'map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_121, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_122, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_123, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_124, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_125, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_126, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_127, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_128, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - x u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_129, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - first1 u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - last1 "
"u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - first2 u 'map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_130, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_131, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_132, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_133, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_134, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_135, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_136, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_137, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - x u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_138, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - first1 u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - last1 "
"u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - first2 u 'map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_139, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_140, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_141, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_142, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_143, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_144, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_145, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_146, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - x u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_147, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - first1 u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - last1 "
"u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - first2 u 'map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_148, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_149, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_150, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_151, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_152, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_153, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_154, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_155, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - x u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_156, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - first1 u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - last1 "
"u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - first2 u 'map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_157, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_158, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_159, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_160, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_161, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_162, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_163, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_164, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - x u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >' - 1 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_165, 117, G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - first1 u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - last1 "
"u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - first2 u 'map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_166, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 11 - x u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_167, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 11 - x u 'map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_168, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - x u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_169, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - x u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_170, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - x u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_171, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - x u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_172, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - x u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_173, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - x u 'map<string,int,less<string>,allocator<pair<const string,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_174, 117, G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - first1 u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - last1 "
"u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - first2 u 'map<string,int,less<string>,allocator<pair<const string,int> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_175, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 11 - x u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_176, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 11 - x u 'map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_177, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - x u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_178, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - x u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_179, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - x u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_180, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - x u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_181, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - x u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_182, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - x u 'map<string,long,less<string>,allocator<pair<const string,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_183, 117, G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - first1 u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - last1 "
"u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - first2 u 'map<string,long,less<string>,allocator<pair<const string,long> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_184, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 11 - x u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_185, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 11 - x u 'map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_186, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - x u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_187, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - x u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_188, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - x u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_189, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - x u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_190, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - x u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_191, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - x u 'map<string,float,less<string>,allocator<pair<const string,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_192, 117, G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - first1 u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - last1 "
"u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - first2 u 'map<string,float,less<string>,allocator<pair<const string,float> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_193, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 11 - x u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_194, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 11 - x u 'map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_195, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - x u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_196, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - x u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_197, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - x u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_198, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - x u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_199, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - x u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_200, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - x u 'map<string,double,less<string>,allocator<pair<const string,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_201, 117, G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - first1 u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - last1 "
"u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - first2 u 'map<string,double,less<string>,allocator<pair<const string,double> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_202, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 11 - x u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func2() {
   G__memfunc_setup("operator!=", 970, G__map__0_203, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 11 - x u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map__0_204, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - x u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map__0_205, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - x u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map__0_206, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - x u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map__0_207, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - x u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map__0_208, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - x u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map__0_209, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - x u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map__0_210, 117, G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - first1 u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - last1 "
"u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - first2 u 'map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LN_string = { "string" , 99 , -1 };
G__linked_taginfo G__LN_lesslEcharmUgR = { "less<char*>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEcharmUcOcharmUcOboolgR = { "binary_function<char*,char*,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEcharmUsPconstcOintgR = { "pair<char* const,int>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR = { "allocator<pair<char* const,int> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR = { "map<char*,int,less<char*>,allocator<pair<char* const,int> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEcharmUcOintgR = { "pair<char*,int>" , 115 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator = { "map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator = { "map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEcharmUsPconstcOlonggR = { "pair<char* const,long>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR = { "allocator<pair<char* const,long> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR = { "map<char*,long,less<char*>,allocator<pair<char* const,long> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEcharmUcOlonggR = { "pair<char*,long>" , 115 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator = { "map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator = { "map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEcharmUsPconstcOfloatgR = { "pair<char* const,float>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR = { "allocator<pair<char* const,float> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR = { "map<char*,float,less<char*>,allocator<pair<char* const,float> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEcharmUcOfloatgR = { "pair<char*,float>" , 115 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator = { "map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator = { "map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEcharmUsPconstcOdoublegR = { "pair<char* const,double>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR = { "allocator<pair<char* const,double> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR = { "map<char*,double,less<char*>,allocator<pair<char* const,double> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEcharmUcOdoublegR = { "pair<char*,double>" , 115 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator = { "map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator = { "map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEcharmUsPconstcOvoidmUgR = { "pair<char* const,void*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR = { "allocator<pair<char* const,void*> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR = { "map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEcharmUcOvoidmUgR = { "pair<char*,void*>" , 115 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator = { "map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator = { "map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEcharmUsPconstcOcharmUgR = { "pair<char* const,char*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR = { "allocator<pair<char* const,char*> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR = { "map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEcharmUcOcharmUgR = { "pair<char*,char*>" , 115 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator = { "map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator = { "map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslEstringgR = { "less<string>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEstringcOstringcOboolgR = { "binary_function<string,string,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPstringcOintgR = { "pair<const string,int>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR = { "allocator<pair<const string,int> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEstringcOintgR = { "pair<string,int>" , 115 , -1 };
G__linked_taginfo G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator = { "map<string,int,less<string>,allocator<pair<const string,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator = { "map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPstringcOlonggR = { "pair<const string,long>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR = { "allocator<pair<const string,long> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR = { "map<string,long,less<string>,allocator<pair<const string,long> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEstringcOlonggR = { "pair<string,long>" , 115 , -1 };
G__linked_taginfo G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator = { "map<string,long,less<string>,allocator<pair<const string,long> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator = { "map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPstringcOfloatgR = { "pair<const string,float>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR = { "allocator<pair<const string,float> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR = { "map<string,float,less<string>,allocator<pair<const string,float> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEstringcOfloatgR = { "pair<string,float>" , 115 , -1 };
G__linked_taginfo G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator = { "map<string,float,less<string>,allocator<pair<const string,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator = { "map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPstringcOdoublegR = { "pair<const string,double>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR = { "allocator<pair<const string,double> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEstringcOdoublegR = { "pair<string,double>" , 115 , -1 };
G__linked_taginfo G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator = { "map<string,double,less<string>,allocator<pair<const string,double> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator = { "map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPstringcOvoidmUgR = { "pair<const string,void*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR = { "allocator<pair<const string,void*> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR = { "map<string,void*,less<string>,allocator<pair<const string,void*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEstringcOvoidmUgR = { "pair<string,void*>" , 115 , -1 };
G__linked_taginfo G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator = { "map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator = { "map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>" , 115 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable() {
  G__LN_string.tagnum = -1 ;
  G__LN_lesslEcharmUgR.tagnum = -1 ;
  G__LN_binary_functionlEcharmUcOcharmUcOboolgR.tagnum = -1 ;
  G__LN_pairlEcharmUsPconstcOintgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR.tagnum = -1 ;
  G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEcharmUcOintgR.tagnum = -1 ;
  G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEcharmUsPconstcOlonggR.tagnum = -1 ;
  G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR.tagnum = -1 ;
  G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEcharmUcOlonggR.tagnum = -1 ;
  G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEcharmUsPconstcOfloatgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR.tagnum = -1 ;
  G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEcharmUcOfloatgR.tagnum = -1 ;
  G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEcharmUsPconstcOdoublegR.tagnum = -1 ;
  G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR.tagnum = -1 ;
  G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEcharmUcOdoublegR.tagnum = -1 ;
  G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEcharmUsPconstcOvoidmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR.tagnum = -1 ;
  G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEcharmUcOvoidmUgR.tagnum = -1 ;
  G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEcharmUsPconstcOcharmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR.tagnum = -1 ;
  G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEcharmUcOcharmUgR.tagnum = -1 ;
  G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslEstringgR.tagnum = -1 ;
  G__LN_binary_functionlEstringcOstringcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPstringcOintgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR.tagnum = -1 ;
  G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEstringcOintgR.tagnum = -1 ;
  G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPstringcOlonggR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR.tagnum = -1 ;
  G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEstringcOlonggR.tagnum = -1 ;
  G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPstringcOfloatgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR.tagnum = -1 ;
  G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEstringcOfloatgR.tagnum = -1 ;
  G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPstringcOdoublegR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR.tagnum = -1 ;
  G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEstringcOdoublegR.tagnum = -1 ;
  G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPstringcOvoidmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR.tagnum = -1 ;
  G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEstringcOvoidmUgR.tagnum = -1 ;
  G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__LN_string);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR),sizeof(less<char*>),-1,0,(char*)NULL,G__setup_memvarlesslEcharmUgR,G__setup_memfunclesslEcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR),sizeof(binary_function<char*,char*,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEcharmUcOcharmUcOboolgR,G__setup_memfuncbinary_functionlEcharmUcOcharmUcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOintgR),sizeof(pair<char* const,int>),-1,35072,(char*)NULL,G__setup_memvarpairlEcharmUsPconstcOintgR,G__setup_memfuncpairlEcharmUsPconstcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOintgRsPgR),sizeof(allocator<pair<char* const,int> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEcharmUsPconstcOintgRsPgR,G__setup_memfuncallocatorlEpairlEcharmUsPconstcOintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR),sizeof(map<char*,int,less<char*>,allocator<pair<char* const,int> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR,G__setup_memfuncmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEcharmUcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator),sizeof(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator),sizeof(map<char*,int,less<char*>,allocator<pair<char* const,int> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<char*,int,less<char*>,allocator<pair<char* const,int> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEcharmUcOintcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOintgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOlonggR),sizeof(pair<char* const,long>),-1,35072,(char*)NULL,G__setup_memvarpairlEcharmUsPconstcOlonggR,G__setup_memfuncpairlEcharmUsPconstcOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOlonggRsPgR),sizeof(allocator<pair<char* const,long> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEcharmUsPconstcOlonggRsPgR,G__setup_memfuncallocatorlEpairlEcharmUsPconstcOlonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR),sizeof(map<char*,long,less<char*>,allocator<pair<char* const,long> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR,G__setup_memfuncmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEcharmUcOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator),sizeof(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator),sizeof(map<char*,long,less<char*>,allocator<pair<char* const,long> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<char*,long,less<char*>,allocator<pair<char* const,long> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEcharmUcOlongcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOlonggRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOfloatgR),sizeof(pair<char* const,float>),-1,35072,(char*)NULL,G__setup_memvarpairlEcharmUsPconstcOfloatgR,G__setup_memfuncpairlEcharmUsPconstcOfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOfloatgRsPgR),sizeof(allocator<pair<char* const,float> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEcharmUsPconstcOfloatgRsPgR,G__setup_memfuncallocatorlEpairlEcharmUsPconstcOfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR),sizeof(map<char*,float,less<char*>,allocator<pair<char* const,float> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR,G__setup_memfuncmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEcharmUcOfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator),sizeof(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator),sizeof(map<char*,float,less<char*>,allocator<pair<char* const,float> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<char*,float,less<char*>,allocator<pair<char* const,float> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEcharmUcOfloatcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOfloatgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOdoublegR),sizeof(pair<char* const,double>),-1,35072,(char*)NULL,G__setup_memvarpairlEcharmUsPconstcOdoublegR,G__setup_memfuncpairlEcharmUsPconstcOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOdoublegRsPgR),sizeof(allocator<pair<char* const,double> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEcharmUsPconstcOdoublegRsPgR,G__setup_memfuncallocatorlEpairlEcharmUsPconstcOdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR),sizeof(map<char*,double,less<char*>,allocator<pair<char* const,double> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR,G__setup_memfuncmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEcharmUcOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator),sizeof(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator),sizeof(map<char*,double,less<char*>,allocator<pair<char* const,double> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<char*,double,less<char*>,allocator<pair<char* const,double> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEcharmUcOdoublecOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOdoublegRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOvoidmUgR),sizeof(pair<char* const,void*>),-1,35072,(char*)NULL,G__setup_memvarpairlEcharmUsPconstcOvoidmUgR,G__setup_memfuncpairlEcharmUsPconstcOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR),sizeof(allocator<pair<char* const,void*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR,G__setup_memfuncallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR),sizeof(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR,G__setup_memfuncmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEcharmUcOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator),sizeof(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator),sizeof(map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<char*,void*,less<char*>,allocator<pair<char* const,void*> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEcharmUcOvoidmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEcharmUsPconstcOcharmUgR),sizeof(pair<char* const,char*>),-1,35072,(char*)NULL,G__setup_memvarpairlEcharmUsPconstcOcharmUgR,G__setup_memfuncpairlEcharmUsPconstcOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEcharmUsPconstcOcharmUgRsPgR),sizeof(allocator<pair<char* const,char*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEcharmUsPconstcOcharmUgRsPgR,G__setup_memfuncallocatorlEpairlEcharmUsPconstcOcharmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR),sizeof(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR,G__setup_memfuncmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEcharmUcOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator),sizeof(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator),sizeof(map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<char*,char*,less<char*>,allocator<pair<char* const,char*> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEcharmUcOcharmUcOlesslEcharmUgRcOallocatorlEpairlEcharmUsPconstcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR),sizeof(less<string>),-1,0,(char*)NULL,G__setup_memvarlesslEstringgR,G__setup_memfunclesslEstringgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR),sizeof(binary_function<string,string,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEstringcOstringcOboolgR,G__setup_memfuncbinary_functionlEstringcOstringcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPstringcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOintgRsPgR),sizeof(allocator<pair<const string,int> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPstringcOintgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPstringcOintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),sizeof(map<string,int,less<string>,allocator<pair<const string,int> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR,G__setup_memfuncmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEstringcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator),sizeof(map<string,int,less<string>,allocator<pair<const string,int> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator),sizeof(map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<string,int,less<string>,allocator<pair<const string,int> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPstringcOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOlonggRsPgR),sizeof(allocator<pair<const string,long> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPstringcOlonggRsPgR,G__setup_memfuncallocatorlEpairlEconstsPstringcOlonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR),sizeof(map<string,long,less<string>,allocator<pair<const string,long> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR,G__setup_memfuncmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEstringcOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator),sizeof(map<string,long,less<string>,allocator<pair<const string,long> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator),sizeof(map<string,long,less<string>,allocator<pair<const string,long> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<string,long,less<string>,allocator<pair<const string,long> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEstringcOlongcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOlonggRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPstringcOfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOfloatgRsPgR),sizeof(allocator<pair<const string,float> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPstringcOfloatgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPstringcOfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),sizeof(map<string,float,less<string>,allocator<pair<const string,float> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR,G__setup_memfuncmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEstringcOfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator),sizeof(map<string,float,less<string>,allocator<pair<const string,float> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator),sizeof(map<string,float,less<string>,allocator<pair<const string,float> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<string,float,less<string>,allocator<pair<const string,float> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPstringcOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOdoublegRsPgR),sizeof(allocator<pair<const string,double> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPstringcOdoublegRsPgR,G__setup_memfuncallocatorlEpairlEconstsPstringcOdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),sizeof(map<string,double,less<string>,allocator<pair<const string,double> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR,G__setup_memfuncmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEstringcOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator),sizeof(map<string,double,less<string>,allocator<pair<const string,double> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator),sizeof(map<string,double,less<string>,allocator<pair<const string,double> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<string,double,less<string>,allocator<pair<const string,double> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPstringcOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPstringcOvoidmUgRsPgR),sizeof(allocator<pair<const string,void*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPstringcOvoidmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPstringcOvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),sizeof(map<string,void*,less<string>,allocator<pair<const string,void*> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR,G__setup_memfuncmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEstringcOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator),sizeof(map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator),sizeof(map<string,void*,less<string>,allocator<pair<const string,void*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<string,void*,less<string>,allocator<pair<const string,void*> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR);
}
extern "C" void G__cpp_setup(void) {
  G__check_setup_version(30051515,"G__cpp_setup()");
  G__set_cpp_environment();
  G__cpp_setup_tagtable();

  G__cpp_setup_inheritance();

  G__cpp_setup_typetable();

  G__cpp_setup_memvar();

  G__cpp_setup_memfunc();
  G__cpp_setup_global();
  G__cpp_setup_func();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc();
  return;
}
class G__cpp_setup_init {
  public:
    G__cpp_setup_init() { G__add_setup_func("G__Default",(G__incsetup)(&G__cpp_setup)); }
   ~G__cpp_setup_init() { G__remove_setup_func("G__Default"); }
};
G__cpp_setup_init G__cpp_setup_initializer;

