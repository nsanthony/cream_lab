/********************************************************
* cint/cint/lib/dll_stl/G__cpp_stdexcept.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/
#include "cint/cint/lib/dll_stl/G__cpp_stdexcept.h" //newlink 3678 

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable();

extern "C" void G__set_cpp_environment() {
  G__add_compiledheader("cint/cint/lib/dll_stl/se.h");
  G__add_compiledheader("cint/cint/inc/cintdictversion.h");
  G__cpp_reset_tagtable();
}
#include <new>
extern "C" int G__cpp_dllrev() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* logic_error */
static int G__stdexcept_50_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   logic_error* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new logic_error(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) logic_error(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_logic_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_50_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   logic_error* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new logic_error(*(logic_error*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_logic_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef logic_error G__Tlogic_error;
static int G__stdexcept_50_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (logic_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((logic_error*) (soff+(sizeof(logic_error)*i)))->~G__Tlogic_error();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (logic_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((logic_error*) (soff))->~G__Tlogic_error();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_50_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   logic_error* dest = (logic_error*) G__getstructoffset();
   *dest = *(logic_error*) libp->para[0].ref;
   const logic_error& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* domain_error */
static int G__stdexcept_51_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   domain_error* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new domain_error(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) domain_error(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_domain_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_51_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   domain_error* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new domain_error(*(domain_error*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_domain_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef domain_error G__Tdomain_error;
static int G__stdexcept_51_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (domain_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((domain_error*) (soff+(sizeof(domain_error)*i)))->~G__Tdomain_error();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (domain_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((domain_error*) (soff))->~G__Tdomain_error();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_51_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   domain_error* dest = (domain_error*) G__getstructoffset();
   *dest = *(domain_error*) libp->para[0].ref;
   const domain_error& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* invalid_argument */
static int G__stdexcept_52_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   invalid_argument* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new invalid_argument(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) invalid_argument(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_invalid_argument));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_52_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   invalid_argument* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new invalid_argument(*(invalid_argument*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_invalid_argument));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef invalid_argument G__Tinvalid_argument;
static int G__stdexcept_52_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (invalid_argument*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((invalid_argument*) (soff+(sizeof(invalid_argument)*i)))->~G__Tinvalid_argument();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (invalid_argument*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((invalid_argument*) (soff))->~G__Tinvalid_argument();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_52_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   invalid_argument* dest = (invalid_argument*) G__getstructoffset();
   *dest = *(invalid_argument*) libp->para[0].ref;
   const invalid_argument& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* length_error */
static int G__stdexcept_53_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   length_error* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new length_error(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) length_error(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_length_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_53_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   length_error* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new length_error(*(length_error*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_length_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef length_error G__Tlength_error;
static int G__stdexcept_53_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (length_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((length_error*) (soff+(sizeof(length_error)*i)))->~G__Tlength_error();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (length_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((length_error*) (soff))->~G__Tlength_error();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_53_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   length_error* dest = (length_error*) G__getstructoffset();
   *dest = *(length_error*) libp->para[0].ref;
   const length_error& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* out_of_range */
static int G__stdexcept_54_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   out_of_range* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new out_of_range(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) out_of_range(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_out_of_range));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_54_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   out_of_range* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new out_of_range(*(out_of_range*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_out_of_range));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef out_of_range G__Tout_of_range;
static int G__stdexcept_54_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (out_of_range*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((out_of_range*) (soff+(sizeof(out_of_range)*i)))->~G__Tout_of_range();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (out_of_range*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((out_of_range*) (soff))->~G__Tout_of_range();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_54_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   out_of_range* dest = (out_of_range*) G__getstructoffset();
   *dest = *(out_of_range*) libp->para[0].ref;
   const out_of_range& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* runtime_error */
static int G__stdexcept_55_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   runtime_error* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new runtime_error(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) runtime_error(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_runtime_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_55_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   runtime_error* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new runtime_error(*(runtime_error*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_runtime_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef runtime_error G__Truntime_error;
static int G__stdexcept_55_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (runtime_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((runtime_error*) (soff+(sizeof(runtime_error)*i)))->~G__Truntime_error();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (runtime_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((runtime_error*) (soff))->~G__Truntime_error();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_55_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   runtime_error* dest = (runtime_error*) G__getstructoffset();
   *dest = *(runtime_error*) libp->para[0].ref;
   const runtime_error& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* range_error */
static int G__stdexcept_56_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   range_error* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new range_error(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) range_error(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_range_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_56_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   range_error* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new range_error(*(range_error*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_range_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef range_error G__Trange_error;
static int G__stdexcept_56_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (range_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((range_error*) (soff+(sizeof(range_error)*i)))->~G__Trange_error();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (range_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((range_error*) (soff))->~G__Trange_error();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_56_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   range_error* dest = (range_error*) G__getstructoffset();
   *dest = *(range_error*) libp->para[0].ref;
   const range_error& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* overflow_error */
static int G__stdexcept_57_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   overflow_error* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new overflow_error(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) overflow_error(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_overflow_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_57_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   overflow_error* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new overflow_error(*(overflow_error*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_overflow_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef overflow_error G__Toverflow_error;
static int G__stdexcept_57_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (overflow_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((overflow_error*) (soff+(sizeof(overflow_error)*i)))->~G__Toverflow_error();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (overflow_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((overflow_error*) (soff))->~G__Toverflow_error();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_57_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   overflow_error* dest = (overflow_error*) G__getstructoffset();
   *dest = *(overflow_error*) libp->para[0].ref;
   const overflow_error& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* underflow_error */
static int G__stdexcept_58_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   underflow_error* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new underflow_error(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) underflow_error(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_underflow_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__stdexcept_58_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   underflow_error* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new underflow_error(*(underflow_error*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_underflow_error));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef underflow_error G__Tunderflow_error;
static int G__stdexcept_58_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (underflow_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((underflow_error*) (soff+(sizeof(underflow_error)*i)))->~G__Tunderflow_error();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (underflow_error*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((underflow_error*) (soff))->~G__Tunderflow_error();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__stdexcept_58_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   underflow_error* dest = (underflow_error*) G__getstructoffset();
   *dest = *(underflow_error*) libp->para[0].ref;
   const underflow_error& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* logic_error */

/* domain_error */

/* invalid_argument */

/* length_error */

/* out_of_range */

/* runtime_error */

/* range_error */

/* overflow_error */

/* underflow_error */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc {
 public:
  G__Sizep2memfunc(): p(&G__Sizep2memfunc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc::*p)();
};

size_t G__get_sizep2memfunc()
{
  G__Sizep2memfunc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_logic_error))) {
     logic_error *G__Lderived;
     G__Lderived=(logic_error*)0x1000;
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_logic_error),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_domain_error))) {
     domain_error *G__Lderived;
     G__Lderived=(domain_error*)0x1000;
     {
       logic_error *G__Lpbase=(logic_error*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_domain_error),G__get_linked_tagnum(&G__LN_logic_error),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_domain_error),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_invalid_argument))) {
     invalid_argument *G__Lderived;
     G__Lderived=(invalid_argument*)0x1000;
     {
       logic_error *G__Lpbase=(logic_error*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_invalid_argument),G__get_linked_tagnum(&G__LN_logic_error),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_invalid_argument),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_length_error))) {
     length_error *G__Lderived;
     G__Lderived=(length_error*)0x1000;
     {
       logic_error *G__Lpbase=(logic_error*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_length_error),G__get_linked_tagnum(&G__LN_logic_error),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_length_error),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_out_of_range))) {
     out_of_range *G__Lderived;
     G__Lderived=(out_of_range*)0x1000;
     {
       logic_error *G__Lpbase=(logic_error*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_out_of_range),G__get_linked_tagnum(&G__LN_logic_error),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_out_of_range),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_runtime_error))) {
     runtime_error *G__Lderived;
     G__Lderived=(runtime_error*)0x1000;
     {
       logic_error *G__Lpbase=(logic_error*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_runtime_error),G__get_linked_tagnum(&G__LN_logic_error),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_runtime_error),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_range_error))) {
     range_error *G__Lderived;
     G__Lderived=(range_error*)0x1000;
     {
       logic_error *G__Lpbase=(logic_error*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_range_error),G__get_linked_tagnum(&G__LN_logic_error),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_range_error),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_overflow_error))) {
     overflow_error *G__Lderived;
     G__Lderived=(overflow_error*)0x1000;
     {
       logic_error *G__Lpbase=(logic_error*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_overflow_error),G__get_linked_tagnum(&G__LN_logic_error),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_overflow_error),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_underflow_error))) {
     underflow_error *G__Lderived;
     G__Lderived=(underflow_error*)0x1000;
     {
       logic_error *G__Lpbase=(logic_error*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_underflow_error),G__get_linked_tagnum(&G__LN_logic_error),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_underflow_error),G__get_linked_tagnum(&G__LN_exception),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable() {

   /* Setting up typedef entry */
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* logic_error */
static void G__setup_memvarlogic_error(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_logic_error));
   { logic_error *p; p=(logic_error*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* domain_error */
static void G__setup_memvardomain_error(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_domain_error));
   { domain_error *p; p=(domain_error*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* invalid_argument */
static void G__setup_memvarinvalid_argument(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_invalid_argument));
   { invalid_argument *p; p=(invalid_argument*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* length_error */
static void G__setup_memvarlength_error(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_length_error));
   { length_error *p; p=(length_error*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* out_of_range */
static void G__setup_memvarout_of_range(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_out_of_range));
   { out_of_range *p; p=(out_of_range*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* runtime_error */
static void G__setup_memvarruntime_error(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_runtime_error));
   { runtime_error *p; p=(runtime_error*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* range_error */
static void G__setup_memvarrange_error(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_range_error));
   { range_error *p; p=(range_error*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* overflow_error */
static void G__setup_memvaroverflow_error(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_overflow_error));
   { overflow_error *p; p=(overflow_error*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* underflow_error */
static void G__setup_memvarunderflow_error(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_underflow_error));
   { underflow_error *p; p=(underflow_error*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunclogic_error(void) {
   /* logic_error */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_logic_error));
   G__memfunc_setup("logic_error",1175,G__stdexcept_50_0_1, 105, G__get_linked_tagnum(&G__LN_logic_error), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("logic_error", 1175, G__stdexcept_50_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_logic_error), -1, 0, 1, 1, 1, 0, "u 'logic_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~logic_error", 1301, G__stdexcept_50_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_50_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_logic_error), -1, 1, 1, 1, 1, 0, "u 'logic_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdomain_error(void) {
   /* domain_error */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_domain_error));
   G__memfunc_setup("domain_error",1281,G__stdexcept_51_0_1, 105, G__get_linked_tagnum(&G__LN_domain_error), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("domain_error", 1281, G__stdexcept_51_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_domain_error), -1, 0, 1, 1, 1, 0, "u 'domain_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~domain_error", 1407, G__stdexcept_51_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_51_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_domain_error), -1, 1, 1, 1, 1, 0, "u 'domain_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncinvalid_argument(void) {
   /* invalid_argument */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_invalid_argument));
   G__memfunc_setup("invalid_argument",1705,G__stdexcept_52_0_1, 105, G__get_linked_tagnum(&G__LN_invalid_argument), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("invalid_argument", 1705, G__stdexcept_52_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_invalid_argument), -1, 0, 1, 1, 1, 0, "u 'invalid_argument' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~invalid_argument", 1831, G__stdexcept_52_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_52_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_invalid_argument), -1, 1, 1, 1, 1, 0, "u 'invalid_argument' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclength_error(void) {
   /* length_error */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_length_error));
   G__memfunc_setup("length_error",1291,G__stdexcept_53_0_1, 105, G__get_linked_tagnum(&G__LN_length_error), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("length_error", 1291, G__stdexcept_53_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_length_error), -1, 0, 1, 1, 1, 0, "u 'length_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~length_error", 1417, G__stdexcept_53_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_53_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_length_error), -1, 1, 1, 1, 1, 0, "u 'length_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncout_of_range(void) {
   /* out_of_range */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_out_of_range));
   G__memfunc_setup("out_of_range",1272,G__stdexcept_54_0_1, 105, G__get_linked_tagnum(&G__LN_out_of_range), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("out_of_range", 1272, G__stdexcept_54_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_out_of_range), -1, 0, 1, 1, 1, 0, "u 'out_of_range' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~out_of_range", 1398, G__stdexcept_54_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_54_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_out_of_range), -1, 1, 1, 1, 1, 0, "u 'out_of_range' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncruntime_error(void) {
   /* runtime_error */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_runtime_error));
   G__memfunc_setup("runtime_error",1421,G__stdexcept_55_0_1, 105, G__get_linked_tagnum(&G__LN_runtime_error), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("runtime_error", 1421, G__stdexcept_55_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_runtime_error), -1, 0, 1, 1, 1, 0, "u 'runtime_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~runtime_error", 1547, G__stdexcept_55_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_55_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_runtime_error), -1, 1, 1, 1, 1, 0, "u 'runtime_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrange_error(void) {
   /* range_error */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_range_error));
   G__memfunc_setup("range_error",1174,G__stdexcept_56_0_1, 105, G__get_linked_tagnum(&G__LN_range_error), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("range_error", 1174, G__stdexcept_56_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_range_error), -1, 0, 1, 1, 1, 0, "u 'range_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~range_error", 1300, G__stdexcept_56_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_56_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_range_error), -1, 1, 1, 1, 1, 0, "u 'range_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncoverflow_error(void) {
   /* overflow_error */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_overflow_error));
   G__memfunc_setup("overflow_error",1533,G__stdexcept_57_0_1, 105, G__get_linked_tagnum(&G__LN_overflow_error), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("overflow_error", 1533, G__stdexcept_57_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_overflow_error), -1, 0, 1, 1, 1, 0, "u 'overflow_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~overflow_error", 1659, G__stdexcept_57_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_57_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_overflow_error), -1, 1, 1, 1, 1, 0, "u 'overflow_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncunderflow_error(void) {
   /* underflow_error */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_underflow_error));
   G__memfunc_setup("underflow_error",1631,G__stdexcept_58_0_1, 105, G__get_linked_tagnum(&G__LN_underflow_error), -1, 0, 1, 5, 1, 0, "u 'string' - 11 - what_arg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("underflow_error", 1631, G__stdexcept_58_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_underflow_error), -1, 0, 1, 1, 1, 0, "u 'underflow_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~underflow_error", 1757, G__stdexcept_58_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__stdexcept_58_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_underflow_error), -1, 1, 1, 1, 1, 0, "u 'underflow_error' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC__=3",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC_MINOR__=4",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__STDEXCEPT_DLL=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"INCLUDE_CINTDICTVERSION=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__CINTDICTVERSION=20090608",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global() {
  G__cpp_setup_global0();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LN_exception = { "exception" , 99 , -1 };
G__linked_taginfo G__LN_string = { "string" , 99 , -1 };
G__linked_taginfo G__LN_logic_error = { "logic_error" , 99 , -1 };
G__linked_taginfo G__LN_domain_error = { "domain_error" , 99 , -1 };
G__linked_taginfo G__LN_invalid_argument = { "invalid_argument" , 99 , -1 };
G__linked_taginfo G__LN_length_error = { "length_error" , 99 , -1 };
G__linked_taginfo G__LN_out_of_range = { "out_of_range" , 99 , -1 };
G__linked_taginfo G__LN_runtime_error = { "runtime_error" , 99 , -1 };
G__linked_taginfo G__LN_range_error = { "range_error" , 99 , -1 };
G__linked_taginfo G__LN_overflow_error = { "overflow_error" , 99 , -1 };
G__linked_taginfo G__LN_underflow_error = { "underflow_error" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable() {
  G__LN_exception.tagnum = -1 ;
  G__LN_string.tagnum = -1 ;
  G__LN_logic_error.tagnum = -1 ;
  G__LN_domain_error.tagnum = -1 ;
  G__LN_invalid_argument.tagnum = -1 ;
  G__LN_length_error.tagnum = -1 ;
  G__LN_out_of_range.tagnum = -1 ;
  G__LN_runtime_error.tagnum = -1 ;
  G__LN_range_error.tagnum = -1 ;
  G__LN_overflow_error.tagnum = -1 ;
  G__LN_underflow_error.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__LN_exception);
   G__get_linked_tagnum_fwd(&G__LN_string);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_logic_error),sizeof(logic_error),-1,32768,(char*)NULL,G__setup_memvarlogic_error,G__setup_memfunclogic_error);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_domain_error),sizeof(domain_error),-1,32768,(char*)NULL,G__setup_memvardomain_error,G__setup_memfuncdomain_error);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_invalid_argument),sizeof(invalid_argument),-1,32768,(char*)NULL,G__setup_memvarinvalid_argument,G__setup_memfuncinvalid_argument);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_length_error),sizeof(length_error),-1,32768,(char*)NULL,G__setup_memvarlength_error,G__setup_memfunclength_error);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_out_of_range),sizeof(out_of_range),-1,32768,(char*)NULL,G__setup_memvarout_of_range,G__setup_memfuncout_of_range);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_runtime_error),sizeof(runtime_error),-1,32768,(char*)NULL,G__setup_memvarruntime_error,G__setup_memfuncruntime_error);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_range_error),sizeof(range_error),-1,32768,(char*)NULL,G__setup_memvarrange_error,G__setup_memfuncrange_error);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_overflow_error),sizeof(overflow_error),-1,32768,(char*)NULL,G__setup_memvaroverflow_error,G__setup_memfuncoverflow_error);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_underflow_error),sizeof(underflow_error),-1,32768,(char*)NULL,G__setup_memvarunderflow_error,G__setup_memfuncunderflow_error);
}
extern "C" void G__cpp_setup(void) {
  G__check_setup_version(30051515,"G__cpp_setup()");
  G__set_cpp_environment();
  G__cpp_setup_tagtable();

  G__cpp_setup_inheritance();

  G__cpp_setup_typetable();

  G__cpp_setup_memvar();

  G__cpp_setup_memfunc();
  G__cpp_setup_global();
  G__cpp_setup_func();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc();
  return;
}
class G__cpp_setup_init {
  public:
    G__cpp_setup_init() { G__add_setup_func("G__Default",(G__incsetup)(&G__cpp_setup)); }
   ~G__cpp_setup_init() { G__remove_setup_func("G__Default"); }
};
G__cpp_setup_init G__cpp_setup_initializer;

