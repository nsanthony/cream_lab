/********************************************************
* cint/cint/lib/dll_stl/G__cpp_multimap2.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/
#include "cint/cint/lib/dll_stl/G__cpp_multimap2.h" //newlink 3678 

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable();

extern "C" void G__set_cpp_environment() {
  G__add_compiledheader("cint/cint/lib/dll_stl/multmp.h");
  G__add_compiledheader("cint/cint/inc/cintdictversion.h");
  G__cpp_reset_tagtable();
}
#include <new>
extern "C" int G__cpp_dllrev() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* less<long> */
static int G__multimap2_48_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<long>*) G__getstructoffset())->operator()(*(long*) G__Longref(&libp->para[0]), *(long*) G__Longref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multimap2_48_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<long> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<long>[n];
     } else {
       p = new((void*) gvp) less<long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<long>;
     } else {
       p = new((void*) gvp) less<long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multimap2_48_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<long>(*(less<long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<long> G__TlesslElonggR;
static int G__multimap2_48_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<long>*) (soff+(sizeof(less<long>)*i)))->~G__TlesslElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<long>*) (soff))->~G__TlesslElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_48_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<long>* dest = (less<long>*) G__getstructoffset();
   const less<long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<long,long,bool> */
// automatic default constructor
static int G__multimap2_49_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<long,long,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<long,long,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<long,long,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<long,long,bool>;
     } else {
       p = new((void*) gvp) binary_function<long,long,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multimap2_49_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<long,long,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<long,long,bool>(*(binary_function<long,long,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<long,long,bool> G__Tbinary_functionlElongcOlongcOboolgR;
static int G__multimap2_49_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<long,long,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<long,long,bool>*) (soff+(sizeof(binary_function<long,long,bool>)*i)))->~G__Tbinary_functionlElongcOlongcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<long,long,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<long,long,bool>*) (soff))->~G__Tbinary_functionlElongcOlongcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_49_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<long,long,bool>* dest = (binary_function<long,long,bool>*) G__getstructoffset();
   const binary_function<long,long,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,int> > */
static int G__multimap2_51_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,int> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,int> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_51_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,int> >(*(allocator<pair<const long,int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,int> >(*(allocator<pair<const long,int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_51_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,int> >*) G__getstructoffset())->address(*(pair<const long,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_51_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,int> >*) G__getstructoffset())->address(*(pair<const long,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_51_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,int> >*) G__getstructoffset())->allocate((allocator<pair<const long,int> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,int> >*) G__getstructoffset())->allocate((allocator<pair<const long,int> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_51_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,int> >*) G__getstructoffset())->deallocate((allocator<pair<const long,int> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,int> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_51_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_51_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,int> >*) G__getstructoffset())->construct((allocator<pair<const long,int> >::pointer) G__int(libp->para[0]), *(pair<const long,int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_51_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,int> >*) G__getstructoffset())->destroy((allocator<pair<const long,int> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,int> > G__TallocatorlEpairlEconstsPlongcOintgRsPgR;
static int G__multimap2_51_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,int> >*) (soff+(sizeof(allocator<pair<const long,int> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,int> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_51_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,int> >* dest = (allocator<pair<const long,int> >*) G__getstructoffset();
   const allocator<pair<const long,int> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,int,less<long>,allocator<pair<const long,int> > > */
static int G__multimap2_52_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,int,less<long>,allocator<pair<const long,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >[n];
     } else {
       p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >;
     } else {
       p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,int,less<long>,allocator<pair<const long,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,int,less<long>,allocator<pair<const long,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,int,less<long>,allocator<pair<const long,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->operator=(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->begin();
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->end();
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->rend();
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->insert(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->insert(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *(multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->insert(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->insert(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->erase(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->erase(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->swap(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_52_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,int,less<long>,allocator<pair<const long,int> > > G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR;
static int G__multimap2_52_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,int,less<long>,allocator<pair<const long,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) (soff+(sizeof(multimap<long,int,less<long>,allocator<pair<const long,int> > >)*i)))->~G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,int,less<long>,allocator<pair<const long,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,int,less<long>,allocator<pair<const long,int> > >*) (soff))->~G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator */
static int G__multimap2_54_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator=(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator==(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_54_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator;
static int G__multimap2_54_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) (soff+(sizeof(multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator)*i)))->~G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) (soff))->~G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator */
static int G__multimap2_55_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_55_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_55_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_55_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_55_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_55_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_55_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator& obj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_55_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator xobj = ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_55_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) (soff+(sizeof(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator)*i)))->~G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) (soff))->~G__TmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,long> > */
static int G__multimap2_57_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,long> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,long> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_57_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,long> >(*(allocator<pair<const long,long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,long> >(*(allocator<pair<const long,long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_57_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,long> >*) G__getstructoffset())->address(*(pair<const long,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_57_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,long> >*) G__getstructoffset())->address(*(pair<const long,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_57_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,long> >*) G__getstructoffset())->allocate((allocator<pair<const long,long> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,long> >*) G__getstructoffset())->allocate((allocator<pair<const long,long> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_57_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,long> >*) G__getstructoffset())->deallocate((allocator<pair<const long,long> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,long> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_57_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_57_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,long> >*) G__getstructoffset())->construct((allocator<pair<const long,long> >::pointer) G__int(libp->para[0]), *(pair<const long,long>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_57_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,long> >*) G__getstructoffset())->destroy((allocator<pair<const long,long> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,long> > G__TallocatorlEpairlEconstsPlongcOlonggRsPgR;
static int G__multimap2_57_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,long> >*) (soff+(sizeof(allocator<pair<const long,long> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOlonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,long> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOlonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_57_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,long> >* dest = (allocator<pair<const long,long> >*) G__getstructoffset();
   const allocator<pair<const long,long> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,long,less<long>,allocator<pair<const long,long> > > */
static int G__multimap2_58_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,long,less<long>,allocator<pair<const long,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >[n];
     } else {
       p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >;
     } else {
       p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,long,less<long>,allocator<pair<const long,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,long,less<long>,allocator<pair<const long,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,long,less<long>,allocator<pair<const long,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->operator=(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->begin();
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->end();
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->rend();
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->insert(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->insert(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *(multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->insert(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->insert(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->erase(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->erase(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->swap(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_58_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,long,less<long>,allocator<pair<const long,long> > > G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR;
static int G__multimap2_58_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,long,less<long>,allocator<pair<const long,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) (soff+(sizeof(multimap<long,long,less<long>,allocator<pair<const long,long> > >)*i)))->~G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,long,less<long>,allocator<pair<const long,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,long,less<long>,allocator<pair<const long,long> > >*) (soff))->~G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator */
static int G__multimap2_60_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator=(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator==(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_60_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator;
static int G__multimap2_60_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) (soff+(sizeof(multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator)*i)))->~G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) (soff))->~G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator */
static int G__multimap2_61_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_61_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_61_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_61_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_61_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_61_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_61_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator& obj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_61_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator xobj = ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_61_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) (soff+(sizeof(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator)*i)))->~G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) (soff))->~G__TmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,double> > */
static int G__multimap2_63_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,double> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,double> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_63_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,double> >(*(allocator<pair<const long,double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,double> >(*(allocator<pair<const long,double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_63_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,double> >*) G__getstructoffset())->address(*(pair<const long,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_63_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,double> >*) G__getstructoffset())->address(*(pair<const long,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_63_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,double> >*) G__getstructoffset())->allocate((allocator<pair<const long,double> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,double> >*) G__getstructoffset())->allocate((allocator<pair<const long,double> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_63_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,double> >*) G__getstructoffset())->deallocate((allocator<pair<const long,double> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,double> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_63_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_63_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,double> >*) G__getstructoffset())->construct((allocator<pair<const long,double> >::pointer) G__int(libp->para[0]), *(pair<const long,double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_63_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,double> >*) G__getstructoffset())->destroy((allocator<pair<const long,double> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,double> > G__TallocatorlEpairlEconstsPlongcOdoublegRsPgR;
static int G__multimap2_63_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,double> >*) (soff+(sizeof(allocator<pair<const long,double> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,double> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_63_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,double> >* dest = (allocator<pair<const long,double> >*) G__getstructoffset();
   const allocator<pair<const long,double> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,double,less<long>,allocator<pair<const long,double> > > */
static int G__multimap2_64_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,double,less<long>,allocator<pair<const long,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >[n];
     } else {
       p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >;
     } else {
       p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,double,less<long>,allocator<pair<const long,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,double,less<long>,allocator<pair<const long,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,double,less<long>,allocator<pair<const long,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->operator=(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->begin();
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->end();
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->rend();
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->insert(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->insert(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *(multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->insert(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->insert(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->erase(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->erase(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->swap(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_64_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,double,less<long>,allocator<pair<const long,double> > > G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR;
static int G__multimap2_64_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,double,less<long>,allocator<pair<const long,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) (soff+(sizeof(multimap<long,double,less<long>,allocator<pair<const long,double> > >)*i)))->~G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,double,less<long>,allocator<pair<const long,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,double,less<long>,allocator<pair<const long,double> > >*) (soff))->~G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator */
static int G__multimap2_66_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator=(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator==(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_66_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator;
static int G__multimap2_66_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) (soff+(sizeof(multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator)*i)))->~G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) (soff))->~G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator */
static int G__multimap2_67_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_67_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_67_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_67_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_67_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_67_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_67_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator& obj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_67_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator xobj = ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_67_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) (soff+(sizeof(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator)*i)))->~G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) (soff))->~G__TmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,void*> > */
static int G__multimap2_69_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,void*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,void*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_69_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,void*> >(*(allocator<pair<const long,void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,void*> >(*(allocator<pair<const long,void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_69_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,void*> >*) G__getstructoffset())->address(*(pair<const long,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_69_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,void*> >*) G__getstructoffset())->address(*(pair<const long,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_69_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,void*> >*) G__getstructoffset())->allocate((allocator<pair<const long,void*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,void*> >*) G__getstructoffset())->allocate((allocator<pair<const long,void*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_69_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,void*> >*) G__getstructoffset())->deallocate((allocator<pair<const long,void*> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,void*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_69_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_69_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,void*> >*) G__getstructoffset())->construct((allocator<pair<const long,void*> >::pointer) G__int(libp->para[0]), *(pair<const long,void*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_69_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,void*> >*) G__getstructoffset())->destroy((allocator<pair<const long,void*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,void*> > G__TallocatorlEpairlEconstsPlongcOvoidmUgRsPgR;
static int G__multimap2_69_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,void*> >*) (soff+(sizeof(allocator<pair<const long,void*> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,void*> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_69_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,void*> >* dest = (allocator<pair<const long,void*> >*) G__getstructoffset();
   const allocator<pair<const long,void*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,void*,less<long>,allocator<pair<const long,void*> > > */
static int G__multimap2_70_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,void*,less<long>,allocator<pair<const long,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >[n];
     } else {
       p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >;
     } else {
       p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,void*,less<long>,allocator<pair<const long,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,void*,less<long>,allocator<pair<const long,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,void*,less<long>,allocator<pair<const long,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->operator=(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->begin();
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->end();
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->rend();
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->insert(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->insert(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->insert(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->insert(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->erase(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->erase(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->swap(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_70_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,void*,less<long>,allocator<pair<const long,void*> > > G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR;
static int G__multimap2_70_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) (soff+(sizeof(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >)*i)))->~G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) (soff))->~G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator */
static int G__multimap2_72_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator=(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator==(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_72_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator;
static int G__multimap2_72_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) (soff+(sizeof(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator)*i)))->~G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) (soff))->~G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator */
static int G__multimap2_73_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_73_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_73_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_73_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_73_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_73_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_73_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator& obj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_73_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator xobj = ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_73_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) (soff+(sizeof(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator)*i)))->~G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) (soff))->~G__TmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,char*> > */
static int G__multimap2_75_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,char*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,char*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,char*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,char*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_75_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,char*> >(*(allocator<pair<const long,char*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,char*> >(*(allocator<pair<const long,char*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_75_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,char*> >*) G__getstructoffset())->address(*(pair<const long,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_75_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,char*> >*) G__getstructoffset())->address(*(pair<const long,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_75_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,char*> >*) G__getstructoffset())->allocate((allocator<pair<const long,char*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,char*> >*) G__getstructoffset())->allocate((allocator<pair<const long,char*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_75_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,char*> >*) G__getstructoffset())->deallocate((allocator<pair<const long,char*> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,char*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_75_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,char*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_75_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,char*> >*) G__getstructoffset())->construct((allocator<pair<const long,char*> >::pointer) G__int(libp->para[0]), *(pair<const long,char*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_75_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,char*> >*) G__getstructoffset())->destroy((allocator<pair<const long,char*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,char*> > G__TallocatorlEpairlEconstsPlongcOcharmUgRsPgR;
static int G__multimap2_75_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,char*> >*) (soff+(sizeof(allocator<pair<const long,char*> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOcharmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,char*> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOcharmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_75_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,char*> >* dest = (allocator<pair<const long,char*> >*) G__getstructoffset();
   const allocator<pair<const long,char*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,char*,less<long>,allocator<pair<const long,char*> > > */
static int G__multimap2_76_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,char*,less<long>,allocator<pair<const long,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >[n];
     } else {
       p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >;
     } else {
       p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,char*,less<long>,allocator<pair<const long,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,char*,less<long>,allocator<pair<const long,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,char*,less<long>,allocator<pair<const long,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->operator=(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->begin();
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->end();
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->rend();
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->insert(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->insert(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->insert(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->insert(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->erase(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->erase(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->swap(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_76_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,char*,less<long>,allocator<pair<const long,char*> > > G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR;
static int G__multimap2_76_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) (soff+(sizeof(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >)*i)))->~G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) (soff))->~G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator */
static int G__multimap2_78_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator=(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator==(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_78_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator;
static int G__multimap2_78_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) (soff+(sizeof(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator)*i)))->~G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) (soff))->~G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator */
static int G__multimap2_79_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_79_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_79_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_79_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_79_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_79_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_79_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator& obj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_79_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator xobj = ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_79_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) (soff+(sizeof(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator)*i)))->~G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) (soff))->~G__TmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<double> */
static int G__multimap2_80_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<double>*) G__getstructoffset())->operator()(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__multimap2_80_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<double> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<double>[n];
     } else {
       p = new((void*) gvp) less<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<double>;
     } else {
       p = new((void*) gvp) less<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multimap2_80_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<double>(*(less<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<double> G__TlesslEdoublegR;
static int G__multimap2_80_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<double>*) (soff+(sizeof(less<double>)*i)))->~G__TlesslEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<double>*) (soff))->~G__TlesslEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_80_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<double>* dest = (less<double>*) G__getstructoffset();
   const less<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<double,double,bool> */
// automatic default constructor
static int G__multimap2_81_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<double,double,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<double,double,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<double,double,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<double,double,bool>;
     } else {
       p = new((void*) gvp) binary_function<double,double,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__multimap2_81_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<double,double,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<double,double,bool>(*(binary_function<double,double,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<double,double,bool> G__Tbinary_functionlEdoublecOdoublecOboolgR;
static int G__multimap2_81_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<double,double,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<double,double,bool>*) (soff+(sizeof(binary_function<double,double,bool>)*i)))->~G__Tbinary_functionlEdoublecOdoublecOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<double,double,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<double,double,bool>*) (soff))->~G__Tbinary_functionlEdoublecOdoublecOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_81_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<double,double,bool>* dest = (binary_function<double,double,bool>*) G__getstructoffset();
   const binary_function<double,double,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,int> > */
static int G__multimap2_83_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,int> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,int> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_83_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,int> >(*(allocator<pair<const double,int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,int> >(*(allocator<pair<const double,int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_83_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,int> >*) G__getstructoffset())->address(*(pair<const double,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_83_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,int> >*) G__getstructoffset())->address(*(pair<const double,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_83_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,int> >*) G__getstructoffset())->allocate((allocator<pair<const double,int> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,int> >*) G__getstructoffset())->allocate((allocator<pair<const double,int> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_83_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,int> >*) G__getstructoffset())->deallocate((allocator<pair<const double,int> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,int> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_83_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_83_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,int> >*) G__getstructoffset())->construct((allocator<pair<const double,int> >::pointer) G__int(libp->para[0]), *(pair<const double,int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_83_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,int> >*) G__getstructoffset())->destroy((allocator<pair<const double,int> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,int> > G__TallocatorlEpairlEconstsPdoublecOintgRsPgR;
static int G__multimap2_83_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,int> >*) (soff+(sizeof(allocator<pair<const double,int> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,int> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_83_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,int> >* dest = (allocator<pair<const double,int> >*) G__getstructoffset();
   const allocator<pair<const double,int> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,int,less<double>,allocator<pair<const double,int> > > */
static int G__multimap2_84_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,int,less<double>,allocator<pair<const double,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >[n];
     } else {
       p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >;
     } else {
       p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,int,less<double>,allocator<pair<const double,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,int,less<double>,allocator<pair<const double,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,int,less<double>,allocator<pair<const double,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->operator=(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->begin();
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->end();
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->rend();
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->insert(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->insert(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *(multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->insert(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->insert(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->erase(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->erase(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->swap(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_84_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,int,less<double>,allocator<pair<const double,int> > > G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR;
static int G__multimap2_84_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,int,less<double>,allocator<pair<const double,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) (soff+(sizeof(multimap<double,int,less<double>,allocator<pair<const double,int> > >)*i)))->~G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,int,less<double>,allocator<pair<const double,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,int,less<double>,allocator<pair<const double,int> > >*) (soff))->~G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator */
static int G__multimap2_86_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator=(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator==(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_86_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator;
static int G__multimap2_86_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) (soff+(sizeof(multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator)*i)))->~G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) (soff))->~G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator */
static int G__multimap2_87_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_87_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_87_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_87_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_87_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_87_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_87_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator& obj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_87_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator xobj = ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_87_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) (soff+(sizeof(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator)*i)))->~G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) (soff))->~G__TmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,long> > */
static int G__multimap2_89_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,long> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,long> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_89_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,long> >(*(allocator<pair<const double,long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,long> >(*(allocator<pair<const double,long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_89_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,long> >*) G__getstructoffset())->address(*(pair<const double,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_89_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,long> >*) G__getstructoffset())->address(*(pair<const double,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_89_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,long> >*) G__getstructoffset())->allocate((allocator<pair<const double,long> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,long> >*) G__getstructoffset())->allocate((allocator<pair<const double,long> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_89_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,long> >*) G__getstructoffset())->deallocate((allocator<pair<const double,long> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,long> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_89_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_89_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,long> >*) G__getstructoffset())->construct((allocator<pair<const double,long> >::pointer) G__int(libp->para[0]), *(pair<const double,long>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_89_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,long> >*) G__getstructoffset())->destroy((allocator<pair<const double,long> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,long> > G__TallocatorlEpairlEconstsPdoublecOlonggRsPgR;
static int G__multimap2_89_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,long> >*) (soff+(sizeof(allocator<pair<const double,long> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOlonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,long> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOlonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_89_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,long> >* dest = (allocator<pair<const double,long> >*) G__getstructoffset();
   const allocator<pair<const double,long> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,long,less<double>,allocator<pair<const double,long> > > */
static int G__multimap2_90_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,long,less<double>,allocator<pair<const double,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >[n];
     } else {
       p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >;
     } else {
       p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,long,less<double>,allocator<pair<const double,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,long,less<double>,allocator<pair<const double,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,long,less<double>,allocator<pair<const double,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->operator=(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->begin();
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->end();
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->rend();
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->insert(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->insert(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *(multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->insert(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->insert(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->erase(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->erase(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->swap(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_90_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,long,less<double>,allocator<pair<const double,long> > > G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR;
static int G__multimap2_90_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,long,less<double>,allocator<pair<const double,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) (soff+(sizeof(multimap<double,long,less<double>,allocator<pair<const double,long> > >)*i)))->~G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,long,less<double>,allocator<pair<const double,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,long,less<double>,allocator<pair<const double,long> > >*) (soff))->~G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator */
static int G__multimap2_92_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator=(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator==(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_92_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator;
static int G__multimap2_92_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) (soff+(sizeof(multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator)*i)))->~G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) (soff))->~G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator */
static int G__multimap2_93_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_93_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_93_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_93_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_93_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_93_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_93_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator& obj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_93_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator xobj = ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_93_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) (soff+(sizeof(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator)*i)))->~G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) (soff))->~G__TmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,double> > */
static int G__multimap2_95_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,double> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,double> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_95_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,double> >(*(allocator<pair<const double,double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,double> >(*(allocator<pair<const double,double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_95_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,double> >*) G__getstructoffset())->address(*(pair<const double,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_95_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,double> >*) G__getstructoffset())->address(*(pair<const double,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_95_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,double> >*) G__getstructoffset())->allocate((allocator<pair<const double,double> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,double> >*) G__getstructoffset())->allocate((allocator<pair<const double,double> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_95_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,double> >*) G__getstructoffset())->deallocate((allocator<pair<const double,double> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,double> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_95_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_95_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,double> >*) G__getstructoffset())->construct((allocator<pair<const double,double> >::pointer) G__int(libp->para[0]), *(pair<const double,double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_95_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,double> >*) G__getstructoffset())->destroy((allocator<pair<const double,double> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,double> > G__TallocatorlEpairlEconstsPdoublecOdoublegRsPgR;
static int G__multimap2_95_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,double> >*) (soff+(sizeof(allocator<pair<const double,double> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,double> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_95_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,double> >* dest = (allocator<pair<const double,double> >*) G__getstructoffset();
   const allocator<pair<const double,double> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,double,less<double>,allocator<pair<const double,double> > > */
static int G__multimap2_96_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,double,less<double>,allocator<pair<const double,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >[n];
     } else {
       p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >;
     } else {
       p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,double,less<double>,allocator<pair<const double,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,double,less<double>,allocator<pair<const double,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,double,less<double>,allocator<pair<const double,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->operator=(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->begin();
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->end();
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->rend();
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->insert(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->insert(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *(multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->insert(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->insert(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->erase(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->erase(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->swap(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_96_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,double,less<double>,allocator<pair<const double,double> > > G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR;
static int G__multimap2_96_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,double,less<double>,allocator<pair<const double,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) (soff+(sizeof(multimap<double,double,less<double>,allocator<pair<const double,double> > >)*i)))->~G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,double,less<double>,allocator<pair<const double,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,double,less<double>,allocator<pair<const double,double> > >*) (soff))->~G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator */
static int G__multimap2_98_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator=(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator==(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_98_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator;
static int G__multimap2_98_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) (soff+(sizeof(multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator)*i)))->~G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) (soff))->~G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator */
static int G__multimap2_99_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_99_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_99_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_99_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_99_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_99_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_99_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator& obj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_99_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator xobj = ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_99_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) (soff+(sizeof(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator)*i)))->~G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) (soff))->~G__TmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,void*> > */
static int G__multimap2_101_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,void*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,void*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_101_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,void*> >(*(allocator<pair<const double,void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,void*> >(*(allocator<pair<const double,void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_101_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,void*> >*) G__getstructoffset())->address(*(pair<const double,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_101_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,void*> >*) G__getstructoffset())->address(*(pair<const double,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_101_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,void*> >*) G__getstructoffset())->allocate((allocator<pair<const double,void*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,void*> >*) G__getstructoffset())->allocate((allocator<pair<const double,void*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_101_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,void*> >*) G__getstructoffset())->deallocate((allocator<pair<const double,void*> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,void*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_101_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_101_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,void*> >*) G__getstructoffset())->construct((allocator<pair<const double,void*> >::pointer) G__int(libp->para[0]), *(pair<const double,void*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_101_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,void*> >*) G__getstructoffset())->destroy((allocator<pair<const double,void*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,void*> > G__TallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR;
static int G__multimap2_101_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,void*> >*) (soff+(sizeof(allocator<pair<const double,void*> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,void*> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_101_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,void*> >* dest = (allocator<pair<const double,void*> >*) G__getstructoffset();
   const allocator<pair<const double,void*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,void*,less<double>,allocator<pair<const double,void*> > > */
static int G__multimap2_102_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,void*,less<double>,allocator<pair<const double,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >[n];
     } else {
       p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >;
     } else {
       p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,void*,less<double>,allocator<pair<const double,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,void*,less<double>,allocator<pair<const double,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,void*,less<double>,allocator<pair<const double,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->operator=(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->begin();
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->end();
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->rend();
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->insert(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->insert(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->insert(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->insert(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->erase(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->erase(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->swap(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_102_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,void*,less<double>,allocator<pair<const double,void*> > > G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR;
static int G__multimap2_102_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) (soff+(sizeof(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >)*i)))->~G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) (soff))->~G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator */
static int G__multimap2_104_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator=(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator==(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_104_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator;
static int G__multimap2_104_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) (soff+(sizeof(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator)*i)))->~G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) (soff))->~G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator */
static int G__multimap2_105_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_105_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_105_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_105_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_105_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_105_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_105_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator& obj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_105_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator xobj = ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_105_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) (soff+(sizeof(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator)*i)))->~G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) (soff))->~G__TmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,char*> > */
static int G__multimap2_107_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,char*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,char*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,char*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,char*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_107_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,char*> >(*(allocator<pair<const double,char*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,char*> >(*(allocator<pair<const double,char*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_107_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,char*> >*) G__getstructoffset())->address(*(pair<const double,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_107_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,char*> >*) G__getstructoffset())->address(*(pair<const double,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_107_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,char*> >*) G__getstructoffset())->allocate((allocator<pair<const double,char*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,char*> >*) G__getstructoffset())->allocate((allocator<pair<const double,char*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_107_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,char*> >*) G__getstructoffset())->deallocate((allocator<pair<const double,char*> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,char*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_107_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,char*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_107_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,char*> >*) G__getstructoffset())->construct((allocator<pair<const double,char*> >::pointer) G__int(libp->para[0]), *(pair<const double,char*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_107_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,char*> >*) G__getstructoffset())->destroy((allocator<pair<const double,char*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,char*> > G__TallocatorlEpairlEconstsPdoublecOcharmUgRsPgR;
static int G__multimap2_107_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,char*> >*) (soff+(sizeof(allocator<pair<const double,char*> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOcharmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,char*> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOcharmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__multimap2_107_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,char*> >* dest = (allocator<pair<const double,char*> >*) G__getstructoffset();
   const allocator<pair<const double,char*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,char*,less<double>,allocator<pair<const double,char*> > > */
static int G__multimap2_108_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,char*,less<double>,allocator<pair<const double,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >[n];
     } else {
       p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >;
     } else {
       p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,char*,less<double>,allocator<pair<const double,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,char*,less<double>,allocator<pair<const double,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,char*,less<double>,allocator<pair<const double,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->operator=(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->begin();
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->end();
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->rbegin();
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->rend();
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->insert(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type*) libp->para[0].ref);
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->insert(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type*) libp->para[1].ref);
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->insert(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->insert(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->erase(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->erase(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->swap(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_108_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,char*,less<double>,allocator<pair<const double,char*> > > G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR;
static int G__multimap2_108_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) (soff+(sizeof(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >)*i)))->~G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) (soff))->~G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator */
static int G__multimap2_110_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator[n];
     } else {
       p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator;
     } else {
       p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator=(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator==(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_110_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator!=(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator;
static int G__multimap2_110_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) (soff+(sizeof(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator)*i)))->~G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) (soff))->~G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator */
static int G__multimap2_111_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_111_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_111_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_111_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_111_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_111_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_111_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator& obj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2_111_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator xobj = ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator;
static int G__multimap2_111_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) (soff+(sizeof(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator)*i)))->~G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) (soff))->~G__TmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__multimap2__0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(multimap<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = search(*((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1]))
, *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[2])), *((multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(multimap<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = search(*((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1]))
, *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[2])), *((multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(multimap<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = search(*((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1]))
, *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[2])), *((multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = search(*((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1]))
, *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[2])), *((multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref, *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = search(*((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1]))
, *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[2])), *((multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(multimap<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = search(*((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1]))
, *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[2])), *((multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_167(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(multimap<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = search(*((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1]))
, *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[2])), *((multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_178(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_179(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_180(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_182(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(multimap<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_183(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = search(*((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1]))
, *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[2])), *((multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_184(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_185(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_186(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_187(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_188(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_189(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_190(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_191(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_192(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = search(*((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1]))
, *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[2])), *((multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_193(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_194(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref, *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_195(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_196(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_197(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_198(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_199(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_200(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__multimap2__0_201(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = search(*((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1]))
, *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[2])), *((multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[3])));
         pobj = new multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* less<long> */

/* binary_function<long,long,bool> */

/* allocator<pair<const long,int> > */

/* multimap<long,int,less<long>,allocator<pair<const long,int> > > */

/* multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator */

/* multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator */

/* allocator<pair<const long,long> > */

/* multimap<long,long,less<long>,allocator<pair<const long,long> > > */

/* multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator */

/* multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator */

/* allocator<pair<const long,double> > */

/* multimap<long,double,less<long>,allocator<pair<const long,double> > > */

/* multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator */

/* multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator */

/* allocator<pair<const long,void*> > */

/* multimap<long,void*,less<long>,allocator<pair<const long,void*> > > */

/* multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator */

/* multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator */

/* allocator<pair<const long,char*> > */

/* multimap<long,char*,less<long>,allocator<pair<const long,char*> > > */

/* multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator */

/* multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator */

/* less<double> */

/* binary_function<double,double,bool> */

/* allocator<pair<const double,int> > */

/* multimap<double,int,less<double>,allocator<pair<const double,int> > > */

/* multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator */

/* multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator */

/* allocator<pair<const double,long> > */

/* multimap<double,long,less<double>,allocator<pair<const double,long> > > */

/* multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator */

/* multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator */

/* allocator<pair<const double,double> > */

/* multimap<double,double,less<double>,allocator<pair<const double,double> > > */

/* multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator */

/* multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator */

/* allocator<pair<const double,void*> > */

/* multimap<double,void*,less<double>,allocator<pair<const double,void*> > > */

/* multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator */

/* multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator */

/* allocator<pair<const double,char*> > */

/* multimap<double,char*,less<double>,allocator<pair<const double,char*> > > */

/* multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator */

/* multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc {
 public:
  G__Sizep2memfunc(): p(&G__Sizep2memfunc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc::*p)();
};

size_t G__get_sizep2memfunc()
{
  G__Sizep2memfunc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslElonggR))) {
     less<long> *G__Lderived;
     G__Lderived=(less<long>*)0x1000;
     {
       binary_function<long,long,bool> *G__Lpbase=(binary_function<long,long,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslElonggR),G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEdoublegR))) {
     less<double> *G__Lderived;
     G__Lderived=(less<double>*)0x1000;
     {
       binary_function<double,double,bool> *G__Lpbase=(binary_function<double,double,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR),G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable() {

   /* Setting up typedef entry */
   G__search_typename2("first_argument_type",108,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",108,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,int>",117,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",105,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOintgR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,int,less<long> >",117,G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,long>",117,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOlonggR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,long,less<long> >",117,G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,double>",117,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",100,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,double,less<long> >",117,G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,void*>",117,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",89,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,void*,less<long> >",117,G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,char*>",117,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",67,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<long,char*,less<long> >",117,G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",100,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",100,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,int>",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",105,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,int,less<double> >",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,long>",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,long,less<double> >",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,double>",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",100,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,double,less<double> >",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,void*>",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",89,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,void*,less<double> >",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,char*>",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",67,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR),0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<double,char*,less<double> >",117,G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* less<long> */
static void G__setup_memvarlesslElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslElonggR));
   { less<long> *p; p=(less<long>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<long,long,bool> */
static void G__setup_memvarbinary_functionlElongcOlongcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   { binary_function<long,long,bool> *p; p=(binary_function<long,long,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,int> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   { allocator<pair<const long,int> > *p; p=(allocator<pair<const long,int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,int,less<long>,allocator<pair<const long,int> > > */
static void G__setup_memvarmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   { multimap<long,int,less<long>,allocator<pair<const long,int> > > *p; p=(multimap<long,int,less<long>,allocator<pair<const long,int> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator */
static void G__setup_memvarmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator));
   { multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator *p; p=(multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator */
static void G__setup_memvarmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator));
   { multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator *p; p=(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,long> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOlonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   { allocator<pair<const long,long> > *p; p=(allocator<pair<const long,long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,long,less<long>,allocator<pair<const long,long> > > */
static void G__setup_memvarmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   { multimap<long,long,less<long>,allocator<pair<const long,long> > > *p; p=(multimap<long,long,less<long>,allocator<pair<const long,long> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator */
static void G__setup_memvarmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator));
   { multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator *p; p=(multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator */
static void G__setup_memvarmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator));
   { multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator *p; p=(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,double> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   { allocator<pair<const long,double> > *p; p=(allocator<pair<const long,double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,double,less<long>,allocator<pair<const long,double> > > */
static void G__setup_memvarmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   { multimap<long,double,less<long>,allocator<pair<const long,double> > > *p; p=(multimap<long,double,less<long>,allocator<pair<const long,double> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator */
static void G__setup_memvarmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator));
   { multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator *p; p=(multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator */
static void G__setup_memvarmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator));
   { multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator *p; p=(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,void*> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   { allocator<pair<const long,void*> > *p; p=(allocator<pair<const long,void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,void*,less<long>,allocator<pair<const long,void*> > > */
static void G__setup_memvarmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   { multimap<long,void*,less<long>,allocator<pair<const long,void*> > > *p; p=(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator */
static void G__setup_memvarmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator));
   { multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator *p; p=(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator */
static void G__setup_memvarmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   { multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator *p; p=(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,char*> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOcharmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   { allocator<pair<const long,char*> > *p; p=(allocator<pair<const long,char*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,char*,less<long>,allocator<pair<const long,char*> > > */
static void G__setup_memvarmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   { multimap<long,char*,less<long>,allocator<pair<const long,char*> > > *p; p=(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator */
static void G__setup_memvarmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator));
   { multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator *p; p=(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator */
static void G__setup_memvarmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   { multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator *p; p=(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* less<double> */
static void G__setup_memvarlesslEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   { less<double> *p; p=(less<double>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<double,double,bool> */
static void G__setup_memvarbinary_functionlEdoublecOdoublecOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   { binary_function<double,double,bool> *p; p=(binary_function<double,double,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,int> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   { allocator<pair<const double,int> > *p; p=(allocator<pair<const double,int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,int,less<double>,allocator<pair<const double,int> > > */
static void G__setup_memvarmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   { multimap<double,int,less<double>,allocator<pair<const double,int> > > *p; p=(multimap<double,int,less<double>,allocator<pair<const double,int> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator */
static void G__setup_memvarmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator));
   { multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator *p; p=(multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator */
static void G__setup_memvarmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator));
   { multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator *p; p=(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,long> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOlonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   { allocator<pair<const double,long> > *p; p=(allocator<pair<const double,long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,long,less<double>,allocator<pair<const double,long> > > */
static void G__setup_memvarmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   { multimap<double,long,less<double>,allocator<pair<const double,long> > > *p; p=(multimap<double,long,less<double>,allocator<pair<const double,long> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator */
static void G__setup_memvarmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator));
   { multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator *p; p=(multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator */
static void G__setup_memvarmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator));
   { multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator *p; p=(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,double> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   { allocator<pair<const double,double> > *p; p=(allocator<pair<const double,double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,double,less<double>,allocator<pair<const double,double> > > */
static void G__setup_memvarmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   { multimap<double,double,less<double>,allocator<pair<const double,double> > > *p; p=(multimap<double,double,less<double>,allocator<pair<const double,double> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator */
static void G__setup_memvarmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator));
   { multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator *p; p=(multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator */
static void G__setup_memvarmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator));
   { multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator *p; p=(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,void*> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   { allocator<pair<const double,void*> > *p; p=(allocator<pair<const double,void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,void*,less<double>,allocator<pair<const double,void*> > > */
static void G__setup_memvarmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   { multimap<double,void*,less<double>,allocator<pair<const double,void*> > > *p; p=(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator */
static void G__setup_memvarmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator));
   { multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator *p; p=(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator */
static void G__setup_memvarmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   { multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator *p; p=(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,char*> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOcharmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   { allocator<pair<const double,char*> > *p; p=(allocator<pair<const double,char*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,char*,less<double>,allocator<pair<const double,char*> > > */
static void G__setup_memvarmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   { multimap<double,char*,less<double>,allocator<pair<const double,char*> > > *p; p=(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator */
static void G__setup_memvarmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator));
   { multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator *p; p=(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator */
static void G__setup_memvarmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator));
   { multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator *p; p=(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunclesslElonggR(void) {
   /* less<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslElonggR));
   G__memfunc_setup("operator()",957,G__multimap2_48_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"l - - 11 - x l - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<long>", 993, G__multimap2_48_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<long>", 993, G__multimap2_48_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 0, 1, 1, 1, 0, "u 'less<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<long>", 1119, G__multimap2_48_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_48_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 1, 1, 1, 1, 0, "u 'less<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlElongcOlongcOboolgR(void) {
   /* binary_function<long,long,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<long,long,bool>", 3112, G__multimap2_49_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<long,long,bool>", 3112, G__multimap2_49_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<long,long,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<long,long,bool>", 3238, G__multimap2_49_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_49_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<long,long,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOintgRsPgR(void) {
   /* allocator<pair<const long,int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__memfunc_setup("allocator<pair<const long,int> >",3055,G__multimap2_51_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,int> >",3055,G__multimap2_51_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,int> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_51_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR), G__defined_typename("allocator<pair<const long,int> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,int>' 'allocator<pair<const long,int> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_51_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR), G__defined_typename("allocator<pair<const long,int> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,int>' 'allocator<pair<const long,int> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_51_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,int> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_51_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,int>' 'allocator<pair<const long,int> >::pointer' 0 - __p h - 'allocator<pair<const long,int> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_51_0_7, 104, -1, G__defined_typename("allocator<pair<const long,int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_51_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,int>' 'allocator<pair<const long,int> >::pointer' 0 - __p u 'pair<const long,int>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_51_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,int>' 'allocator<pair<const long,int> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,int> >", 3181, G__multimap2_51_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_51_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,int> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR(void) {
   /* multimap<long,int,less<long>,allocator<pair<const long,int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__memfunc_setup("multimap<long,int,less<long>,allocator<pair<const long,int> > >",5970,G__multimap2_52_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,int,less<long>,allocator<pair<const long,int> > >",5970,G__multimap2_52_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,int,less<long>,allocator<pair<const long,int> > >",5970,G__multimap2_52_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 0 - first u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,int,less<long>,allocator<pair<const long,int> > >",5970,G__multimap2_52_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_52_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_52_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_52_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_52_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_52_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_52_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_52_0_11, 104, -1, G__defined_typename("multimap<long,int,less<long>,allocator<pair<const long,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_52_0_12, 104, -1, G__defined_typename("multimap<long,int,less<long>,allocator<pair<const long,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_52_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<long,int>' 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_52_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - position u 'pair<long,int>' 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_52_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_52_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 0 - first u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_52_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_52_0_18, 104, -1, G__defined_typename("multimap<long,int,less<long>,allocator<pair<const long,int> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_52_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_52_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_52_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_52_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_52_0_23, 104, -1, G__defined_typename("multimap<long,int,less<long>,allocator<pair<const long,int> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_52_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_52_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<long,int,less<long>,allocator<pair<const long,int> > >", 6096, G__multimap2_52_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator(void) {
   /* multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_54_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_54_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_54_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_54_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOintgR), G__defined_typename("multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_54_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOintgR), G__defined_typename("multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_54_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_54_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_54_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_54_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_54_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_54_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_54_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_55_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_55_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_55_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOintgR), G__defined_typename("multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_55_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOintgR), G__defined_typename("multimap<long,int,less<long>,allocator<pair<const long,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_55_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_55_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_55_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_55_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_55_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOlonggRsPgR(void) {
   /* allocator<pair<const long,long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__memfunc_setup("allocator<pair<const long,long> >",3156,G__multimap2_57_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,long> >",3156,G__multimap2_57_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,long> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_57_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR), G__defined_typename("allocator<pair<const long,long> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,long>' 'allocator<pair<const long,long> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_57_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR), G__defined_typename("allocator<pair<const long,long> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,long>' 'allocator<pair<const long,long> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_57_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,long> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_57_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,long>' 'allocator<pair<const long,long> >::pointer' 0 - __p h - 'allocator<pair<const long,long> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_57_0_7, 104, -1, G__defined_typename("allocator<pair<const long,long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_57_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,long>' 'allocator<pair<const long,long> >::pointer' 0 - __p u 'pair<const long,long>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_57_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,long>' 'allocator<pair<const long,long> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,long> >", 3282, G__multimap2_57_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_57_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,long> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR(void) {
   /* multimap<long,long,less<long>,allocator<pair<const long,long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__memfunc_setup("multimap<long,long,less<long>,allocator<pair<const long,long> > >",6172,G__multimap2_58_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,long,less<long>,allocator<pair<const long,long> > >",6172,G__multimap2_58_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,long,less<long>,allocator<pair<const long,long> > >",6172,G__multimap2_58_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 0 - first u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,long,less<long>,allocator<pair<const long,long> > >",6172,G__multimap2_58_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_58_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_58_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_58_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_58_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_58_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_58_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_58_0_11, 104, -1, G__defined_typename("multimap<long,long,less<long>,allocator<pair<const long,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_58_0_12, 104, -1, G__defined_typename("multimap<long,long,less<long>,allocator<pair<const long,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_58_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<long,long>' 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_58_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - position u 'pair<long,long>' 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_58_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_58_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 0 - first u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_58_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_58_0_18, 104, -1, G__defined_typename("multimap<long,long,less<long>,allocator<pair<const long,long> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_58_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_58_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_58_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_58_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_58_0_23, 104, -1, G__defined_typename("multimap<long,long,less<long>,allocator<pair<const long,long> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_58_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_58_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<long,long,less<long>,allocator<pair<const long,long> > >", 6298, G__multimap2_58_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator(void) {
   /* multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_60_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_60_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_60_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_60_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOlonggR), G__defined_typename("multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_60_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOlonggR), G__defined_typename("multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_60_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_60_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_60_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_60_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_60_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_60_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_60_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_61_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_61_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_61_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOlonggR), G__defined_typename("multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_61_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOlonggR), G__defined_typename("multimap<long,long,less<long>,allocator<pair<const long,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_61_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_61_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_61_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_61_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_61_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOdoublegRsPgR(void) {
   /* allocator<pair<const long,double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__memfunc_setup("allocator<pair<const long,double> >",3359,G__multimap2_63_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,double> >",3359,G__multimap2_63_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,double> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_63_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR), G__defined_typename("allocator<pair<const long,double> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,double>' 'allocator<pair<const long,double> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_63_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR), G__defined_typename("allocator<pair<const long,double> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,double>' 'allocator<pair<const long,double> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_63_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,double> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_63_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,double>' 'allocator<pair<const long,double> >::pointer' 0 - __p h - 'allocator<pair<const long,double> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_63_0_7, 104, -1, G__defined_typename("allocator<pair<const long,double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_63_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,double>' 'allocator<pair<const long,double> >::pointer' 0 - __p u 'pair<const long,double>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_63_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,double>' 'allocator<pair<const long,double> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,double> >", 3485, G__multimap2_63_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_63_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,double> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR(void) {
   /* multimap<long,double,less<long>,allocator<pair<const long,double> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__memfunc_setup("multimap<long,double,less<long>,allocator<pair<const long,double> > >",6578,G__multimap2_64_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,double,less<long>,allocator<pair<const long,double> > >",6578,G__multimap2_64_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,double,less<long>,allocator<pair<const long,double> > >",6578,G__multimap2_64_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 0 - first u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,double,less<long>,allocator<pair<const long,double> > >",6578,G__multimap2_64_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_64_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_64_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_64_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_64_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_64_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_64_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_64_0_11, 104, -1, G__defined_typename("multimap<long,double,less<long>,allocator<pair<const long,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_64_0_12, 104, -1, G__defined_typename("multimap<long,double,less<long>,allocator<pair<const long,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_64_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<long,double>' 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_64_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - position u 'pair<long,double>' 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_64_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_64_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 0 - first u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_64_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_64_0_18, 104, -1, G__defined_typename("multimap<long,double,less<long>,allocator<pair<const long,double> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_64_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_64_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_64_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_64_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_64_0_23, 104, -1, G__defined_typename("multimap<long,double,less<long>,allocator<pair<const long,double> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_64_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_64_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<long,double,less<long>,allocator<pair<const long,double> > >", 6704, G__multimap2_64_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator(void) {
   /* multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_66_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_66_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_66_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_66_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR), G__defined_typename("multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_66_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR), G__defined_typename("multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_66_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_66_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_66_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_66_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_66_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_66_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_66_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_67_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_67_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_67_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR), G__defined_typename("multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_67_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR), G__defined_typename("multimap<long,double,less<long>,allocator<pair<const long,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_67_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_67_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_67_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_67_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_67_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOvoidmUgRsPgR(void) {
   /* allocator<pair<const long,void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__memfunc_setup("allocator<pair<const long,void*> >",3200,G__multimap2_69_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,void*> >",3200,G__multimap2_69_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,void*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_69_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR), G__defined_typename("allocator<pair<const long,void*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,void*>' 'allocator<pair<const long,void*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_69_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR), G__defined_typename("allocator<pair<const long,void*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,void*>' 'allocator<pair<const long,void*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_69_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,void*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_69_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,void*>' 'allocator<pair<const long,void*> >::pointer' 0 - __p h - 'allocator<pair<const long,void*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_69_0_7, 104, -1, G__defined_typename("allocator<pair<const long,void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_69_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,void*>' 'allocator<pair<const long,void*> >::pointer' 0 - __p u 'pair<const long,void*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_69_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,void*>' 'allocator<pair<const long,void*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,void*> >", 3326, G__multimap2_69_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_69_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,void*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR(void) {
   /* multimap<long,void*,less<long>,allocator<pair<const long,void*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__memfunc_setup("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >",6260,G__multimap2_70_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >",6260,G__multimap2_70_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >",6260,G__multimap2_70_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 0 - first u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >",6260,G__multimap2_70_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_70_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_70_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_70_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_70_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_70_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_70_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_70_0_11, 104, -1, G__defined_typename("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_70_0_12, 104, -1, G__defined_typename("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_70_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<long,void*>' 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_70_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - position u 'pair<long,void*>' 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_70_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_70_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 0 - first u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_70_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_70_0_18, 104, -1, G__defined_typename("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_70_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_70_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_70_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_70_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_70_0_23, 104, -1, G__defined_typename("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_70_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_70_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<long,void*,less<long>,allocator<pair<const long,void*> > >", 6386, G__multimap2_70_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator(void) {
   /* multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_72_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_72_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_72_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_72_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR), G__defined_typename("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_72_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR), G__defined_typename("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_72_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_72_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_72_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_72_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_72_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_72_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_72_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_73_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_73_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_73_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR), G__defined_typename("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_73_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR), G__defined_typename("multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_73_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_73_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_73_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_73_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_73_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOcharmUgRsPgR(void) {
   /* allocator<pair<const long,char*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__memfunc_setup("allocator<pair<const long,char*> >",3180,G__multimap2_75_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,char*> >",3180,G__multimap2_75_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,char*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_75_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR), G__defined_typename("allocator<pair<const long,char*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,char*>' 'allocator<pair<const long,char*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_75_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR), G__defined_typename("allocator<pair<const long,char*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,char*>' 'allocator<pair<const long,char*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_75_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,char*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_75_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,char*>' 'allocator<pair<const long,char*> >::pointer' 0 - __p h - 'allocator<pair<const long,char*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_75_0_7, 104, -1, G__defined_typename("allocator<pair<const long,char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_75_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,char*>' 'allocator<pair<const long,char*> >::pointer' 0 - __p u 'pair<const long,char*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_75_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,char*>' 'allocator<pair<const long,char*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,char*> >", 3306, G__multimap2_75_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_75_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,char*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR(void) {
   /* multimap<long,char*,less<long>,allocator<pair<const long,char*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__memfunc_setup("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >",6220,G__multimap2_76_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >",6220,G__multimap2_76_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >",6220,G__multimap2_76_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 0 - first u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >",6220,G__multimap2_76_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_76_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_76_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_76_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_76_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_76_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_76_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_76_0_11, 104, -1, G__defined_typename("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_76_0_12, 104, -1, G__defined_typename("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_76_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<long,char*>' 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_76_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - position u 'pair<long,char*>' 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_76_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_76_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 0 - first u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_76_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_76_0_18, 104, -1, G__defined_typename("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_76_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_76_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_76_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_76_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_76_0_23, 104, -1, G__defined_typename("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_76_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_76_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<long,char*,less<long>,allocator<pair<const long,char*> > >", 6346, G__multimap2_76_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator(void) {
   /* multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_78_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_78_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_78_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_78_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR), G__defined_typename("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_78_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR), G__defined_typename("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_78_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_78_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_78_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_78_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_78_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_78_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_78_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_79_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_79_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_79_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR), G__defined_typename("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_79_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR), G__defined_typename("multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_79_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_79_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_79_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_79_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_79_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEdoublegR(void) {
   /* less<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   G__memfunc_setup("operator()",957,G__multimap2_80_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"d - - 11 - x d - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<double>", 1196, G__multimap2_80_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<double>", 1196, G__multimap2_80_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'less<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<double>", 1322, G__multimap2_80_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_80_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'less<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEdoublecOdoublecOboolgR(void) {
   /* binary_function<double,double,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<double,double,bool>", 3518, G__multimap2_81_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<double,double,bool>", 3518, G__multimap2_81_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<double,double,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<double,double,bool>", 3644, G__multimap2_81_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_81_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<double,double,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOintgRsPgR(void) {
   /* allocator<pair<const double,int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__memfunc_setup("allocator<pair<const double,int> >",3258,G__multimap2_83_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,int> >",3258,G__multimap2_83_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,int> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_83_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR), G__defined_typename("allocator<pair<const double,int> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,int>' 'allocator<pair<const double,int> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_83_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR), G__defined_typename("allocator<pair<const double,int> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,int>' 'allocator<pair<const double,int> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_83_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,int> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_83_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,int>' 'allocator<pair<const double,int> >::pointer' 0 - __p h - 'allocator<pair<const double,int> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_83_0_7, 104, -1, G__defined_typename("allocator<pair<const double,int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_83_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,int>' 'allocator<pair<const double,int> >::pointer' 0 - __p u 'pair<const double,int>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_83_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,int>' 'allocator<pair<const double,int> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,int> >", 3384, G__multimap2_83_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_83_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,int> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR(void) {
   /* multimap<double,int,less<double>,allocator<pair<const double,int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__memfunc_setup("multimap<double,int,less<double>,allocator<pair<const double,int> > >",6579,G__multimap2_84_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,int,less<double>,allocator<pair<const double,int> > >",6579,G__multimap2_84_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,int,less<double>,allocator<pair<const double,int> > >",6579,G__multimap2_84_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 0 - first u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,int,less<double>,allocator<pair<const double,int> > >",6579,G__multimap2_84_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_84_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_84_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_84_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_84_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_84_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_84_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_84_0_11, 104, -1, G__defined_typename("multimap<double,int,less<double>,allocator<pair<const double,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_84_0_12, 104, -1, G__defined_typename("multimap<double,int,less<double>,allocator<pair<const double,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_84_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<double,int>' 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_84_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - position u 'pair<double,int>' 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_84_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_84_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 0 - first u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_84_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_84_0_18, 104, -1, G__defined_typename("multimap<double,int,less<double>,allocator<pair<const double,int> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_84_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_84_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_84_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_84_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_84_0_23, 104, -1, G__defined_typename("multimap<double,int,less<double>,allocator<pair<const double,int> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_84_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_84_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<double,int,less<double>,allocator<pair<const double,int> > >", 6705, G__multimap2_84_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator(void) {
   /* multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_86_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_86_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_86_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_86_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR), G__defined_typename("multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_86_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR), G__defined_typename("multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_86_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_86_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_86_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_86_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_86_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_86_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_86_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_87_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_87_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_87_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR), G__defined_typename("multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_87_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR), G__defined_typename("multimap<double,int,less<double>,allocator<pair<const double,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_87_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_87_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_87_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_87_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_87_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOlonggRsPgR(void) {
   /* allocator<pair<const double,long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__memfunc_setup("allocator<pair<const double,long> >",3359,G__multimap2_89_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,long> >",3359,G__multimap2_89_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,long> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_89_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR), G__defined_typename("allocator<pair<const double,long> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,long>' 'allocator<pair<const double,long> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_89_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR), G__defined_typename("allocator<pair<const double,long> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,long>' 'allocator<pair<const double,long> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_89_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,long> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_89_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,long>' 'allocator<pair<const double,long> >::pointer' 0 - __p h - 'allocator<pair<const double,long> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_89_0_7, 104, -1, G__defined_typename("allocator<pair<const double,long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_89_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,long>' 'allocator<pair<const double,long> >::pointer' 0 - __p u 'pair<const double,long>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_89_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,long>' 'allocator<pair<const double,long> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,long> >", 3485, G__multimap2_89_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_89_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,long> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR(void) {
   /* multimap<double,long,less<double>,allocator<pair<const double,long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__memfunc_setup("multimap<double,long,less<double>,allocator<pair<const double,long> > >",6781,G__multimap2_90_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,long,less<double>,allocator<pair<const double,long> > >",6781,G__multimap2_90_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,long,less<double>,allocator<pair<const double,long> > >",6781,G__multimap2_90_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 0 - first u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,long,less<double>,allocator<pair<const double,long> > >",6781,G__multimap2_90_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_90_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_90_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_90_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_90_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_90_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_90_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_90_0_11, 104, -1, G__defined_typename("multimap<double,long,less<double>,allocator<pair<const double,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_90_0_12, 104, -1, G__defined_typename("multimap<double,long,less<double>,allocator<pair<const double,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_90_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<double,long>' 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_90_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - position u 'pair<double,long>' 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_90_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_90_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 0 - first u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_90_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_90_0_18, 104, -1, G__defined_typename("multimap<double,long,less<double>,allocator<pair<const double,long> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_90_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_90_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_90_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_90_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_90_0_23, 104, -1, G__defined_typename("multimap<double,long,less<double>,allocator<pair<const double,long> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_90_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_90_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<double,long,less<double>,allocator<pair<const double,long> > >", 6907, G__multimap2_90_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator(void) {
   /* multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_92_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_92_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_92_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_92_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR), G__defined_typename("multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_92_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR), G__defined_typename("multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_92_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_92_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_92_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_92_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_92_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_92_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_92_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_93_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_93_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_93_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR), G__defined_typename("multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_93_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR), G__defined_typename("multimap<double,long,less<double>,allocator<pair<const double,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_93_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_93_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_93_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_93_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_93_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOdoublegRsPgR(void) {
   /* allocator<pair<const double,double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__memfunc_setup("allocator<pair<const double,double> >",3562,G__multimap2_95_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,double> >",3562,G__multimap2_95_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,double> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_95_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR), G__defined_typename("allocator<pair<const double,double> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,double>' 'allocator<pair<const double,double> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_95_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR), G__defined_typename("allocator<pair<const double,double> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,double>' 'allocator<pair<const double,double> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_95_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,double> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_95_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,double>' 'allocator<pair<const double,double> >::pointer' 0 - __p h - 'allocator<pair<const double,double> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_95_0_7, 104, -1, G__defined_typename("allocator<pair<const double,double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_95_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,double>' 'allocator<pair<const double,double> >::pointer' 0 - __p u 'pair<const double,double>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_95_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,double>' 'allocator<pair<const double,double> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,double> >", 3688, G__multimap2_95_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_95_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,double> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR(void) {
   /* multimap<double,double,less<double>,allocator<pair<const double,double> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__memfunc_setup("multimap<double,double,less<double>,allocator<pair<const double,double> > >",7187,G__multimap2_96_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,double,less<double>,allocator<pair<const double,double> > >",7187,G__multimap2_96_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,double,less<double>,allocator<pair<const double,double> > >",7187,G__multimap2_96_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 0 - first u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,double,less<double>,allocator<pair<const double,double> > >",7187,G__multimap2_96_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_96_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_96_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_96_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_96_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_96_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_96_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_96_0_11, 104, -1, G__defined_typename("multimap<double,double,less<double>,allocator<pair<const double,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_96_0_12, 104, -1, G__defined_typename("multimap<double,double,less<double>,allocator<pair<const double,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_96_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<double,double>' 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_96_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - position u 'pair<double,double>' 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_96_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_96_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 0 - first u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_96_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_96_0_18, 104, -1, G__defined_typename("multimap<double,double,less<double>,allocator<pair<const double,double> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_96_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_96_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_96_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_96_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_96_0_23, 104, -1, G__defined_typename("multimap<double,double,less<double>,allocator<pair<const double,double> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_96_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_96_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<double,double,less<double>,allocator<pair<const double,double> > >", 7313, G__multimap2_96_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator(void) {
   /* multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_98_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_98_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_98_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_98_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR), G__defined_typename("multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_98_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR), G__defined_typename("multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_98_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_98_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_98_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_98_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_98_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_98_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_98_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_99_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_99_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_99_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR), G__defined_typename("multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_99_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR), G__defined_typename("multimap<double,double,less<double>,allocator<pair<const double,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_99_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_99_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_99_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_99_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_99_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR(void) {
   /* allocator<pair<const double,void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__memfunc_setup("allocator<pair<const double,void*> >",3403,G__multimap2_101_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,void*> >",3403,G__multimap2_101_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,void*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_101_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR), G__defined_typename("allocator<pair<const double,void*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,void*>' 'allocator<pair<const double,void*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_101_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR), G__defined_typename("allocator<pair<const double,void*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,void*>' 'allocator<pair<const double,void*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_101_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,void*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_101_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,void*>' 'allocator<pair<const double,void*> >::pointer' 0 - __p h - 'allocator<pair<const double,void*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_101_0_7, 104, -1, G__defined_typename("allocator<pair<const double,void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_101_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,void*>' 'allocator<pair<const double,void*> >::pointer' 0 - __p u 'pair<const double,void*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_101_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,void*>' 'allocator<pair<const double,void*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,void*> >", 3529, G__multimap2_101_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_101_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,void*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR(void) {
   /* multimap<double,void*,less<double>,allocator<pair<const double,void*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__memfunc_setup("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >",6869,G__multimap2_102_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >",6869,G__multimap2_102_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >",6869,G__multimap2_102_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 0 - first u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >",6869,G__multimap2_102_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_102_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_102_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_102_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_102_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_102_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_102_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_102_0_11, 104, -1, G__defined_typename("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_102_0_12, 104, -1, G__defined_typename("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_102_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<double,void*>' 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_102_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - position u 'pair<double,void*>' 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_102_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_102_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 0 - first u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_102_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_102_0_18, 104, -1, G__defined_typename("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_102_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_102_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_102_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_102_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_102_0_23, 104, -1, G__defined_typename("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_102_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_102_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<double,void*,less<double>,allocator<pair<const double,void*> > >", 6995, G__multimap2_102_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator(void) {
   /* multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_104_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_104_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_104_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_104_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR), G__defined_typename("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_104_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR), G__defined_typename("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_104_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_104_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_104_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_104_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_104_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_104_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_104_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_105_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_105_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_105_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR), G__defined_typename("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_105_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR), G__defined_typename("multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_105_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_105_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_105_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_105_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_105_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOcharmUgRsPgR(void) {
   /* allocator<pair<const double,char*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__memfunc_setup("allocator<pair<const double,char*> >",3383,G__multimap2_107_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,char*> >",3383,G__multimap2_107_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,char*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_107_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR), G__defined_typename("allocator<pair<const double,char*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,char*>' 'allocator<pair<const double,char*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__multimap2_107_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR), G__defined_typename("allocator<pair<const double,char*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,char*>' 'allocator<pair<const double,char*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__multimap2_107_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,char*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__multimap2_107_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,char*>' 'allocator<pair<const double,char*> >::pointer' 0 - __p h - 'allocator<pair<const double,char*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_107_0_7, 104, -1, G__defined_typename("allocator<pair<const double,char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__multimap2_107_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,char*>' 'allocator<pair<const double,char*> >::pointer' 0 - __p u 'pair<const double,char*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__multimap2_107_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,char*>' 'allocator<pair<const double,char*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,char*> >", 3509, G__multimap2_107_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__multimap2_107_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,char*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR(void) {
   /* multimap<double,char*,less<double>,allocator<pair<const double,char*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__memfunc_setup("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >",6829,G__multimap2_108_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >",6829,G__multimap2_108_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >",6829,G__multimap2_108_0_3, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 0 - first u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >",6829,G__multimap2_108_0_4, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_108_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__multimap2_108_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__multimap2_108_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__multimap2_108_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__multimap2_108_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__multimap2_108_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__multimap2_108_0_11, 104, -1, G__defined_typename("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__multimap2_108_0_12, 104, -1, G__defined_typename("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_108_0_13, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'pair<double,char*>' 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_108_0_14, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - position u 'pair<double,char*>' 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_108_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__multimap2_108_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 0 - first u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_108_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_108_0_18, 104, -1, G__defined_typename("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__multimap2_108_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__multimap2_108_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__multimap2_108_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__multimap2_108_0_22, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__multimap2_108_0_23, 104, -1, G__defined_typename("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__multimap2_108_0_24, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__multimap2_108_0_25, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~multimap<double,char*,less<double>,allocator<pair<const double,char*> > >", 6955, G__multimap2_108_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator(void) {
   /* multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__multimap2_110_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__multimap2_110_0_2, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_110_0_3, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_110_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR), G__defined_typename("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_110_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR), G__defined_typename("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_110_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_110_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_110_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_110_0_9, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__multimap2_110_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__multimap2_110_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__multimap2_110_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__multimap2_111_0_1, 105, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__multimap2_111_0_2, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__multimap2_111_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR), G__defined_typename("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__multimap2_111_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR), G__defined_typename("multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_111_0_5, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__multimap2_111_0_6, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_111_0_7, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__multimap2_111_0_8, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__multimap2_111_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC__=3",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC_MINOR__=4",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__MULTIMAP_DLL=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"INCLUDE_CINTDICTVERSION=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__CINTDICTVERSION=20090608",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global() {
  G__cpp_setup_global0();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
   G__memfunc_setup("operator==", 998, G__multimap2__0_112, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - x u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_113, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - x u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_114, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_115, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_116, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_117, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_118, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_119, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_120, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first1 u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last1 "
"u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first2 u 'multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_121, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - x u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_122, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - x u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_123, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_124, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_125, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_126, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_127, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_128, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_129, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first1 u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last1 "
"u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first2 u 'multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_130, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - x u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_131, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - x u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_132, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_133, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_134, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_135, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_136, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_137, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_138, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first1 u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last1 "
"u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first2 u 'multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_139, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - x u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_140, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - x u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_141, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_142, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_143, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_144, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_145, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_146, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_147, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first1 u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last1 "
"u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first2 u 'multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_148, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - x u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_149, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - x u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_150, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_151, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_152, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_153, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_154, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_155, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_156, 117, G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first1 u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last1 "
"u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first2 u 'multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_157, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - x u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_158, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - x u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_159, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_160, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_161, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_162, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_163, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_164, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_165, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first1 u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last1 "
"u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first2 u 'multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_166, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - x u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_167, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - x u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_168, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_169, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_170, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_171, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_172, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_173, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_174, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first1 u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last1 "
"u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first2 u 'multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_175, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - x u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_176, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - x u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_177, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_178, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_179, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_180, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_181, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_182, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_183, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first1 u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last1 "
"u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first2 u 'multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_184, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - x u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_185, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - x u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_186, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_187, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_188, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_189, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_190, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_191, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_192, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first1 u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last1 "
"u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first2 u 'multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_193, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - x u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_194, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - x u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__multimap2__0_195, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__multimap2__0_196, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__multimap2__0_197, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__multimap2__0_198, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__multimap2__0_199, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__multimap2__0_200, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__multimap2__0_201, 117, G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first1 u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last1 "
"u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first2 u 'multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LN_lesslElonggR = { "less<long>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlElongcOlongcOboolgR = { "binary_function<long,long,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOintgR = { "pair<const long,int>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR = { "allocator<pair<const long,int> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR = { "multimap<long,int,less<long>,allocator<pair<const long,int> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOintgR = { "pair<long,int>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator = { "multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator = { "multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOlonggR = { "pair<const long,long>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR = { "allocator<pair<const long,long> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR = { "multimap<long,long,less<long>,allocator<pair<const long,long> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOlonggR = { "pair<long,long>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator = { "multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator = { "multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOdoublegR = { "pair<const long,double>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR = { "allocator<pair<const long,double> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR = { "multimap<long,double,less<long>,allocator<pair<const long,double> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOdoublegR = { "pair<long,double>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator = { "multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator = { "multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOvoidmUgR = { "pair<const long,void*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR = { "allocator<pair<const long,void*> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR = { "multimap<long,void*,less<long>,allocator<pair<const long,void*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOvoidmUgR = { "pair<long,void*>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator = { "multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator = { "multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOcharmUgR = { "pair<const long,char*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR = { "allocator<pair<const long,char*> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR = { "multimap<long,char*,less<long>,allocator<pair<const long,char*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOcharmUgR = { "pair<long,char*>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator = { "multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator = { "multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_lesslEdoublegR = { "less<double>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEdoublecOdoublecOboolgR = { "binary_function<double,double,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOintgR = { "pair<const double,int>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR = { "allocator<pair<const double,int> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR = { "multimap<double,int,less<double>,allocator<pair<const double,int> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOintgR = { "pair<double,int>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator = { "multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator = { "multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOlonggR = { "pair<const double,long>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR = { "allocator<pair<const double,long> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR = { "multimap<double,long,less<double>,allocator<pair<const double,long> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOlonggR = { "pair<double,long>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator = { "multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator = { "multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOdoublegR = { "pair<const double,double>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR = { "allocator<pair<const double,double> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR = { "multimap<double,double,less<double>,allocator<pair<const double,double> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator = { "multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator = { "multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOvoidmUgR = { "pair<const double,void*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR = { "allocator<pair<const double,void*> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR = { "multimap<double,void*,less<double>,allocator<pair<const double,void*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOvoidmUgR = { "pair<double,void*>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator = { "multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator = { "multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOcharmUgR = { "pair<const double,char*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR = { "allocator<pair<const double,char*> >" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR = { "multimap<double,char*,less<double>,allocator<pair<const double,char*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOcharmUgR = { "pair<double,char*>" , 115 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator = { "multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator = { "multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable() {
  G__LN_lesslElonggR.tagnum = -1 ;
  G__LN_binary_functionlElongcOlongcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOintgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR.tagnum = -1 ;
  G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOintgR.tagnum = -1 ;
  G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOlonggR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR.tagnum = -1 ;
  G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOlonggR.tagnum = -1 ;
  G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOdoublegR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR.tagnum = -1 ;
  G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOdoublegR.tagnum = -1 ;
  G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOvoidmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR.tagnum = -1 ;
  G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOvoidmUgR.tagnum = -1 ;
  G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOcharmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR.tagnum = -1 ;
  G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOcharmUgR.tagnum = -1 ;
  G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_lesslEdoublegR.tagnum = -1 ;
  G__LN_binary_functionlEdoublecOdoublecOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOintgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR.tagnum = -1 ;
  G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOintgR.tagnum = -1 ;
  G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOlonggR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR.tagnum = -1 ;
  G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOlonggR.tagnum = -1 ;
  G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOdoublegR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR.tagnum = -1 ;
  G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOvoidmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR.tagnum = -1 ;
  G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOvoidmUgR.tagnum = -1 ;
  G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOcharmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR.tagnum = -1 ;
  G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOcharmUgR.tagnum = -1 ;
  G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslElonggR),sizeof(less<long>),-1,0,(char*)NULL,G__setup_memvarlesslElonggR,G__setup_memfunclesslElonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR),sizeof(binary_function<long,long,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlElongcOlongcOboolgR,G__setup_memfuncbinary_functionlElongcOlongcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR),sizeof(allocator<pair<const long,int> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOintgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),sizeof(multimap<long,int,less<long>,allocator<pair<const long,int> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR,G__setup_memfuncmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator),sizeof(multimap<long,int,less<long>,allocator<pair<const long,int> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR),sizeof(allocator<pair<const long,long> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOlonggRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOlonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR),sizeof(multimap<long,long,less<long>,allocator<pair<const long,long> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR,G__setup_memfuncmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator),sizeof(multimap<long,long,less<long>,allocator<pair<const long,long> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR),sizeof(allocator<pair<const long,double> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOdoublegRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR),sizeof(multimap<long,double,less<long>,allocator<pair<const long,double> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR,G__setup_memfuncmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator),sizeof(multimap<long,double,less<long>,allocator<pair<const long,double> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR),sizeof(allocator<pair<const long,void*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOvoidmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR),sizeof(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR,G__setup_memfuncmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator),sizeof(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR),sizeof(allocator<pair<const long,char*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOcharmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOcharmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR),sizeof(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR,G__setup_memfuncmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator),sizeof(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR),sizeof(less<double>),-1,0,(char*)NULL,G__setup_memvarlesslEdoublegR,G__setup_memfunclesslEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR),sizeof(binary_function<double,double,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEdoublecOdoublecOboolgR,G__setup_memfuncbinary_functionlEdoublecOdoublecOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR),sizeof(allocator<pair<const double,int> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOintgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR),sizeof(multimap<double,int,less<double>,allocator<pair<const double,int> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR,G__setup_memfuncmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator),sizeof(multimap<double,int,less<double>,allocator<pair<const double,int> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR),sizeof(allocator<pair<const double,long> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOlonggRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOlonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR),sizeof(multimap<double,long,less<double>,allocator<pair<const double,long> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR,G__setup_memfuncmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator),sizeof(multimap<double,long,less<double>,allocator<pair<const double,long> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR),sizeof(allocator<pair<const double,double> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOdoublegRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR),sizeof(multimap<double,double,less<double>,allocator<pair<const double,double> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR,G__setup_memfuncmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator),sizeof(multimap<double,double,less<double>,allocator<pair<const double,double> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR),sizeof(allocator<pair<const double,void*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR),sizeof(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR,G__setup_memfuncmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator),sizeof(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR),sizeof(allocator<pair<const double,char*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOcharmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOcharmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR),sizeof(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >),-1,36608,(char*)NULL,G__setup_memvarmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR,G__setup_memfuncmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator),sizeof(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_multimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator),sizeof(multimap<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmultimaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator);
}
extern "C" void G__cpp_setup(void) {
  G__check_setup_version(30051515,"G__cpp_setup()");
  G__set_cpp_environment();
  G__cpp_setup_tagtable();

  G__cpp_setup_inheritance();

  G__cpp_setup_typetable();

  G__cpp_setup_memvar();

  G__cpp_setup_memfunc();
  G__cpp_setup_global();
  G__cpp_setup_func();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc();
  return;
}
class G__cpp_setup_init {
  public:
    G__cpp_setup_init() { G__add_setup_func("G__Default",(G__incsetup)(&G__cpp_setup)); }
   ~G__cpp_setup_init() { G__remove_setup_func("G__Default"); }
};
G__cpp_setup_init G__cpp_setup_initializer;

