/********************************************************
* cint/cint/lib/dll_stl/G__cpp_list.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/
#include "cint/cint/lib/dll_stl/G__cpp_list.h" //newlink 3678 

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable();

extern "C" void G__set_cpp_environment() {
  G__add_compiledheader("cint/cint/lib/dll_stl/lst.h");
  G__add_compiledheader("cint/cint/inc/cintdictversion.h");
  G__cpp_reset_tagtable();
}
#include <new>
extern "C" int G__cpp_dllrev() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* allocator<int> */
static int G__list_48_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<int>[n];
     } else {
       p = new((void*) gvp) allocator<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<int>;
     } else {
       p = new((void*) gvp) allocator<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_48_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<int>(*(allocator<int>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<int>(*(allocator<int>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_48_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const allocator<int>*) G__getstructoffset())->address(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_48_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const allocator<int>*) G__getstructoffset())->address(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_48_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 73, (long) ((allocator<int>*) G__getstructoffset())->allocate((allocator<int>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 73, (long) ((allocator<int>*) G__getstructoffset())->allocate((allocator<int>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_48_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->deallocate((allocator<int>::pointer) G__int(libp->para[0]), (allocator<int>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_48_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<int>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_48_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->construct((allocator<int>::pointer) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_48_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->destroy((allocator<int>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<int> G__TallocatorlEintgR;
static int G__list_48_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<int>*) (soff+(sizeof(allocator<int>)*i)))->~G__TallocatorlEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<int>*) (soff))->~G__TallocatorlEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__list_48_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* dest = (allocator<int>*) G__getstructoffset();
   const allocator<int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<int,allocator<int> > */
static int G__list_49_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<int,allocator<int> >[n];
     } else {
       p = new((void*) gvp) list<int,allocator<int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<int,allocator<int> >;
     } else {
       p = new((void*) gvp) list<int,allocator<int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = ((list<int,allocator<int> >*) G__getstructoffset())->begin();
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = ((list<int,allocator<int> >*) G__getstructoffset())->end();
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::reverse_iterator* pobj;
         list<int,allocator<int> >::reverse_iterator xobj = ((list<int,allocator<int> >*) G__getstructoffset())->rbegin();
         pobj = new list<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::reverse_iterator* pobj;
         list<int,allocator<int> >::reverse_iterator xobj = ((list<int,allocator<int> >*) G__getstructoffset())->rend();
         pobj = new list<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const list<int,allocator<int> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<int,allocator<int> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<int,allocator<int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((const list<int,allocator<int> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((const list<int,allocator<int> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->swap(*(list<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = ((list<int,allocator<int> >*) G__getstructoffset())->insert(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->insert(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->insert(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->insert(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), (list<int,allocator<int> >::size_type) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->push_front(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->push_back(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->resize((list<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->resize((list<int,allocator<int> >::size_type) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->erase(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->erase(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->pop_front();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<int,allocator<int> >((list<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     } else {
       p = new((void*) gvp) list<int,allocator<int> >((list<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<int,allocator<int> >((list<int,allocator<int> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) list<int,allocator<int> >((list<int,allocator<int> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<int,allocator<int> >((const int*) G__int(libp->para[0]), (const int*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) list<int,allocator<int> >((const int*) G__int(libp->para[0]), (const int*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<int,allocator<int> >(*((list<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) list<int,allocator<int> >(*((list<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<int,allocator<int> >(*(list<int,allocator<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<int,allocator<int> >(*(list<int,allocator<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<int,allocator<int> >& obj = ((list<int,allocator<int> >*) G__getstructoffset())->operator=(*(list<int,allocator<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->splice(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(list<int,allocator<int> >*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->splice(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(list<int,allocator<int> >*) libp->para[1].ref
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->splice(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(list<int,allocator<int> >*) libp->para[1].ref
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->remove(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->unique();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->merge(*(list<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->reverse();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_49_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<int,allocator<int> >*) G__getstructoffset())->sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<int,allocator<int> > G__TlistlEintcOallocatorlEintgRsPgR;
static int G__list_49_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<int,allocator<int> >*) (soff+(sizeof(list<int,allocator<int> >)*i)))->~G__TlistlEintcOallocatorlEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<int,allocator<int> >*) (soff))->~G__TlistlEintcOallocatorlEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<int,allocator<int> >::iterator */
static int G__list_50_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<int,allocator<int> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<int,allocator<int> >::iterator[n];
     } else {
       p = new((void*) gvp) list<int,allocator<int> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<int,allocator<int> >::iterator;
     } else {
       p = new((void*) gvp) list<int,allocator<int> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<int,allocator<int> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<int,allocator<int> >::iterator(*(list<int,allocator<int> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<int,allocator<int> >::iterator(*(list<int,allocator<int> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<int,allocator<int> >::iterator& obj = ((list<int,allocator<int> >::iterator*) G__getstructoffset())->operator=(*(list<int,allocator<int> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((const list<int,allocator<int> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const list<int,allocator<int> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<int,allocator<int> >::iterator& obj = ((list<int,allocator<int> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = ((list<int,allocator<int> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<int,allocator<int> >::iterator& obj = ((list<int,allocator<int> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = ((list<int,allocator<int> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<int,allocator<int> >::iterator*) G__getstructoffset())->operator==(*(list<int,allocator<int> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_50_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<int,allocator<int> >::iterator*) G__getstructoffset())->operator!=(*(list<int,allocator<int> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<int,allocator<int> >::iterator G__TlistlEintcOallocatorlEintgRsPgRcLcLiterator;
static int G__list_50_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<int,allocator<int> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<int,allocator<int> >::iterator*) (soff+(sizeof(list<int,allocator<int> >::iterator)*i)))->~G__TlistlEintcOallocatorlEintgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<int,allocator<int> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<int,allocator<int> >::iterator*) (soff))->~G__TlistlEintcOallocatorlEintgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<int,allocator<int> >::reverse_iterator */
static int G__list_51_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<int,allocator<int> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<int,allocator<int> >::reverse_iterator(*(list<int,allocator<int> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<int,allocator<int> >::reverse_iterator(*(list<int,allocator<int> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_51_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<int,allocator<int> >::reverse_iterator& obj = ((list<int,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator=(*(list<int,allocator<int> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_51_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((const list<int,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_51_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const list<int,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_51_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<int,allocator<int> >::reverse_iterator& obj = ((list<int,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_51_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::reverse_iterator* pobj;
         list<int,allocator<int> >::reverse_iterator xobj = ((list<int,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_51_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<int,allocator<int> >::reverse_iterator& obj = ((list<int,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_51_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::reverse_iterator* pobj;
         list<int,allocator<int> >::reverse_iterator xobj = ((list<int,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<int,allocator<int> >::reverse_iterator G__TlistlEintcOallocatorlEintgRsPgRcLcLreverse_iterator;
static int G__list_51_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<int,allocator<int> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<int,allocator<int> >::reverse_iterator*) (soff+(sizeof(list<int,allocator<int> >::reverse_iterator)*i)))->~G__TlistlEintcOallocatorlEintgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<int,allocator<int> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<int,allocator<int> >::reverse_iterator*) (soff))->~G__TlistlEintcOallocatorlEintgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<long> */
static int G__list_52_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<long>[n];
     } else {
       p = new((void*) gvp) allocator<long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<long>;
     } else {
       p = new((void*) gvp) allocator<long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_52_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<long>(*(allocator<long>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<long>(*(allocator<long>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_52_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const allocator<long>*) G__getstructoffset())->address(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_52_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const allocator<long>*) G__getstructoffset())->address(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_52_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 76, (long) ((allocator<long>*) G__getstructoffset())->allocate((allocator<long>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 76, (long) ((allocator<long>*) G__getstructoffset())->allocate((allocator<long>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_52_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->deallocate((allocator<long>::pointer) G__int(libp->para[0]), (allocator<long>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_52_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<long>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_52_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->construct((allocator<long>::pointer) G__int(libp->para[0]), *(long*) G__Longref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_52_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->destroy((allocator<long>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<long> G__TallocatorlElonggR;
static int G__list_52_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<long>*) (soff+(sizeof(allocator<long>)*i)))->~G__TallocatorlElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<long>*) (soff))->~G__TallocatorlElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__list_52_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* dest = (allocator<long>*) G__getstructoffset();
   const allocator<long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<long,allocator<long> > */
static int G__list_53_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<long,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<long,allocator<long> >[n];
     } else {
       p = new((void*) gvp) list<long,allocator<long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<long,allocator<long> >;
     } else {
       p = new((void*) gvp) list<long,allocator<long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = ((list<long,allocator<long> >*) G__getstructoffset())->begin();
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = ((list<long,allocator<long> >*) G__getstructoffset())->end();
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::reverse_iterator* pobj;
         list<long,allocator<long> >::reverse_iterator xobj = ((list<long,allocator<long> >*) G__getstructoffset())->rbegin();
         pobj = new list<long,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::reverse_iterator* pobj;
         list<long,allocator<long> >::reverse_iterator xobj = ((list<long,allocator<long> >*) G__getstructoffset())->rend();
         pobj = new list<long,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const list<long,allocator<long> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<long,allocator<long> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<long,allocator<long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((const list<long,allocator<long> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((const list<long,allocator<long> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->swap(*(list<long,allocator<long> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = ((list<long,allocator<long> >*) G__getstructoffset())->insert(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *(long*) G__Longref(&libp->para[1]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->insert(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), (long*) G__int(libp->para[1])
, (long*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->insert(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->insert(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), (list<long,allocator<long> >::size_type) G__int(libp->para[1])
, *(long*) G__Longref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->push_front(*(long*) G__Longref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->push_back(*(long*) G__Longref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->resize((list<long,allocator<long> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->resize((list<long,allocator<long> >::size_type) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->erase(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->erase(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->pop_front();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<long,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<long,allocator<long> >((list<long,allocator<long> >::size_type) G__int(libp->para[0]), *(long*) G__Longref(&libp->para[1]));
     } else {
       p = new((void*) gvp) list<long,allocator<long> >((list<long,allocator<long> >::size_type) G__int(libp->para[0]), *(long*) G__Longref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<long,allocator<long> >((list<long,allocator<long> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) list<long,allocator<long> >((list<long,allocator<long> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<long,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<long,allocator<long> >((const long*) G__int(libp->para[0]), (const long*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) list<long,allocator<long> >((const long*) G__int(libp->para[0]), (const long*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<long,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<long,allocator<long> >(*((list<long,allocator<long> >::const_iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) list<long,allocator<long> >(*((list<long,allocator<long> >::const_iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<long,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<long,allocator<long> >(*(list<long,allocator<long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<long,allocator<long> >(*(list<long,allocator<long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<long,allocator<long> >& obj = ((list<long,allocator<long> >*) G__getstructoffset())->operator=(*(list<long,allocator<long> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->splice(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *(list<long,allocator<long> >*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->splice(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *(list<long,allocator<long> >*) libp->para[1].ref
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->splice(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *(list<long,allocator<long> >*) libp->para[1].ref
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->remove(*(long*) G__Longref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->unique();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->merge(*(list<long,allocator<long> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->reverse();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_53_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<long,allocator<long> >*) G__getstructoffset())->sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<long,allocator<long> > G__TlistlElongcOallocatorlElonggRsPgR;
static int G__list_53_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<long,allocator<long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<long,allocator<long> >*) (soff+(sizeof(list<long,allocator<long> >)*i)))->~G__TlistlElongcOallocatorlElonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<long,allocator<long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<long,allocator<long> >*) (soff))->~G__TlistlElongcOallocatorlElonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<long,allocator<long> >::iterator */
static int G__list_54_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<long,allocator<long> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<long,allocator<long> >::iterator[n];
     } else {
       p = new((void*) gvp) list<long,allocator<long> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<long,allocator<long> >::iterator;
     } else {
       p = new((void*) gvp) list<long,allocator<long> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<long,allocator<long> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<long,allocator<long> >::iterator(*(list<long,allocator<long> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<long,allocator<long> >::iterator(*(list<long,allocator<long> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<long,allocator<long> >::iterator& obj = ((list<long,allocator<long> >::iterator*) G__getstructoffset())->operator=(*(list<long,allocator<long> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((const list<long,allocator<long> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const list<long,allocator<long> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<long,allocator<long> >::iterator& obj = ((list<long,allocator<long> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = ((list<long,allocator<long> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<long,allocator<long> >::iterator& obj = ((list<long,allocator<long> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = ((list<long,allocator<long> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<long,allocator<long> >::iterator*) G__getstructoffset())->operator==(*(list<long,allocator<long> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_54_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<long,allocator<long> >::iterator*) G__getstructoffset())->operator!=(*(list<long,allocator<long> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<long,allocator<long> >::iterator G__TlistlElongcOallocatorlElonggRsPgRcLcLiterator;
static int G__list_54_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<long,allocator<long> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<long,allocator<long> >::iterator*) (soff+(sizeof(list<long,allocator<long> >::iterator)*i)))->~G__TlistlElongcOallocatorlElonggRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<long,allocator<long> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<long,allocator<long> >::iterator*) (soff))->~G__TlistlElongcOallocatorlElonggRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<long,allocator<long> >::reverse_iterator */
static int G__list_55_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<long,allocator<long> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<long,allocator<long> >::reverse_iterator(*(list<long,allocator<long> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<long,allocator<long> >::reverse_iterator(*(list<long,allocator<long> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_55_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<long,allocator<long> >::reverse_iterator& obj = ((list<long,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator=(*(list<long,allocator<long> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_55_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((const list<long,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_55_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const list<long,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_55_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<long,allocator<long> >::reverse_iterator& obj = ((list<long,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_55_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::reverse_iterator* pobj;
         list<long,allocator<long> >::reverse_iterator xobj = ((list<long,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<long,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_55_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<long,allocator<long> >::reverse_iterator& obj = ((list<long,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_55_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::reverse_iterator* pobj;
         list<long,allocator<long> >::reverse_iterator xobj = ((list<long,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<long,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<long,allocator<long> >::reverse_iterator G__TlistlElongcOallocatorlElonggRsPgRcLcLreverse_iterator;
static int G__list_55_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<long,allocator<long> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<long,allocator<long> >::reverse_iterator*) (soff+(sizeof(list<long,allocator<long> >::reverse_iterator)*i)))->~G__TlistlElongcOallocatorlElonggRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<long,allocator<long> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<long,allocator<long> >::reverse_iterator*) (soff))->~G__TlistlElongcOallocatorlElonggRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<float> */
static int G__list_56_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<float>[n];
     } else {
       p = new((void*) gvp) allocator<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<float>;
     } else {
       p = new((void*) gvp) allocator<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_56_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<float>(*(allocator<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<float>(*(allocator<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_56_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const allocator<float>*) G__getstructoffset())->address(*(float*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_56_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const allocator<float>*) G__getstructoffset())->address(*(float*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_56_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 70, (long) ((allocator<float>*) G__getstructoffset())->allocate((allocator<float>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 70, (long) ((allocator<float>*) G__getstructoffset())->allocate((allocator<float>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_56_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->deallocate((allocator<float>::pointer) G__int(libp->para[0]), (allocator<float>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_56_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<float>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_56_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->construct((allocator<float>::pointer) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_56_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->destroy((allocator<float>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<float> G__TallocatorlEfloatgR;
static int G__list_56_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<float>*) (soff+(sizeof(allocator<float>)*i)))->~G__TallocatorlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<float>*) (soff))->~G__TallocatorlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__list_56_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* dest = (allocator<float>*) G__getstructoffset();
   const allocator<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<float,allocator<float> > */
static int G__list_57_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<float,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<float,allocator<float> >[n];
     } else {
       p = new((void*) gvp) list<float,allocator<float> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<float,allocator<float> >;
     } else {
       p = new((void*) gvp) list<float,allocator<float> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = ((list<float,allocator<float> >*) G__getstructoffset())->begin();
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = ((list<float,allocator<float> >*) G__getstructoffset())->end();
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::reverse_iterator* pobj;
         list<float,allocator<float> >::reverse_iterator xobj = ((list<float,allocator<float> >*) G__getstructoffset())->rbegin();
         pobj = new list<float,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::reverse_iterator* pobj;
         list<float,allocator<float> >::reverse_iterator xobj = ((list<float,allocator<float> >*) G__getstructoffset())->rend();
         pobj = new list<float,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const list<float,allocator<float> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<float,allocator<float> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<float,allocator<float> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((const list<float,allocator<float> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((const list<float,allocator<float> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->swap(*(list<float,allocator<float> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = ((list<float,allocator<float> >*) G__getstructoffset())->insert(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *(float*) G__Floatref(&libp->para[1]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->insert(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->insert(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->insert(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), (list<float,allocator<float> >::size_type) G__int(libp->para[1])
, *(float*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->push_front(*(float*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->push_back(*(float*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->resize((list<float,allocator<float> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->resize((list<float,allocator<float> >::size_type) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->erase(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->erase(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->pop_front();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<float,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<float,allocator<float> >((list<float,allocator<float> >::size_type) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1]));
     } else {
       p = new((void*) gvp) list<float,allocator<float> >((list<float,allocator<float> >::size_type) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<float,allocator<float> >((list<float,allocator<float> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) list<float,allocator<float> >((list<float,allocator<float> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<float,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<float,allocator<float> >((const float*) G__int(libp->para[0]), (const float*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) list<float,allocator<float> >((const float*) G__int(libp->para[0]), (const float*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<float,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<float,allocator<float> >(*((list<float,allocator<float> >::const_iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) list<float,allocator<float> >(*((list<float,allocator<float> >::const_iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<float,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<float,allocator<float> >(*(list<float,allocator<float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<float,allocator<float> >(*(list<float,allocator<float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<float,allocator<float> >& obj = ((list<float,allocator<float> >*) G__getstructoffset())->operator=(*(list<float,allocator<float> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->splice(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *(list<float,allocator<float> >*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->splice(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *(list<float,allocator<float> >*) libp->para[1].ref
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->splice(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *(list<float,allocator<float> >*) libp->para[1].ref
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->remove(*(float*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->unique();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->merge(*(list<float,allocator<float> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->reverse();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_57_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<float,allocator<float> >*) G__getstructoffset())->sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<float,allocator<float> > G__TlistlEfloatcOallocatorlEfloatgRsPgR;
static int G__list_57_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<float,allocator<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<float,allocator<float> >*) (soff+(sizeof(list<float,allocator<float> >)*i)))->~G__TlistlEfloatcOallocatorlEfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<float,allocator<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<float,allocator<float> >*) (soff))->~G__TlistlEfloatcOallocatorlEfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<float,allocator<float> >::iterator */
static int G__list_58_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<float,allocator<float> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<float,allocator<float> >::iterator[n];
     } else {
       p = new((void*) gvp) list<float,allocator<float> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<float,allocator<float> >::iterator;
     } else {
       p = new((void*) gvp) list<float,allocator<float> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<float,allocator<float> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<float,allocator<float> >::iterator(*(list<float,allocator<float> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<float,allocator<float> >::iterator(*(list<float,allocator<float> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<float,allocator<float> >::iterator& obj = ((list<float,allocator<float> >::iterator*) G__getstructoffset())->operator=(*(list<float,allocator<float> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((const list<float,allocator<float> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const list<float,allocator<float> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<float,allocator<float> >::iterator& obj = ((list<float,allocator<float> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = ((list<float,allocator<float> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<float,allocator<float> >::iterator& obj = ((list<float,allocator<float> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = ((list<float,allocator<float> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<float,allocator<float> >::iterator*) G__getstructoffset())->operator==(*(list<float,allocator<float> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_58_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<float,allocator<float> >::iterator*) G__getstructoffset())->operator!=(*(list<float,allocator<float> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<float,allocator<float> >::iterator G__TlistlEfloatcOallocatorlEfloatgRsPgRcLcLiterator;
static int G__list_58_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<float,allocator<float> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<float,allocator<float> >::iterator*) (soff+(sizeof(list<float,allocator<float> >::iterator)*i)))->~G__TlistlEfloatcOallocatorlEfloatgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<float,allocator<float> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<float,allocator<float> >::iterator*) (soff))->~G__TlistlEfloatcOallocatorlEfloatgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<float,allocator<float> >::reverse_iterator */
static int G__list_59_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<float,allocator<float> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<float,allocator<float> >::reverse_iterator(*(list<float,allocator<float> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<float,allocator<float> >::reverse_iterator(*(list<float,allocator<float> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_59_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<float,allocator<float> >::reverse_iterator& obj = ((list<float,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator=(*(list<float,allocator<float> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_59_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((const list<float,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_59_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const list<float,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_59_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<float,allocator<float> >::reverse_iterator& obj = ((list<float,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_59_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::reverse_iterator* pobj;
         list<float,allocator<float> >::reverse_iterator xobj = ((list<float,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<float,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_59_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<float,allocator<float> >::reverse_iterator& obj = ((list<float,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_59_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::reverse_iterator* pobj;
         list<float,allocator<float> >::reverse_iterator xobj = ((list<float,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<float,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<float,allocator<float> >::reverse_iterator G__TlistlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator;
static int G__list_59_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<float,allocator<float> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<float,allocator<float> >::reverse_iterator*) (soff+(sizeof(list<float,allocator<float> >::reverse_iterator)*i)))->~G__TlistlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<float,allocator<float> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<float,allocator<float> >::reverse_iterator*) (soff))->~G__TlistlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<double> */
static int G__list_60_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<double>[n];
     } else {
       p = new((void*) gvp) allocator<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<double>;
     } else {
       p = new((void*) gvp) allocator<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_60_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<double>(*(allocator<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<double>(*(allocator<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_60_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const allocator<double>*) G__getstructoffset())->address(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_60_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const allocator<double>*) G__getstructoffset())->address(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_60_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 68, (long) ((allocator<double>*) G__getstructoffset())->allocate((allocator<double>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 68, (long) ((allocator<double>*) G__getstructoffset())->allocate((allocator<double>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_60_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->deallocate((allocator<double>::pointer) G__int(libp->para[0]), (allocator<double>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_60_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<double>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_60_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->construct((allocator<double>::pointer) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_60_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->destroy((allocator<double>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<double> G__TallocatorlEdoublegR;
static int G__list_60_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<double>*) (soff+(sizeof(allocator<double>)*i)))->~G__TallocatorlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<double>*) (soff))->~G__TallocatorlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__list_60_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* dest = (allocator<double>*) G__getstructoffset();
   const allocator<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<double,allocator<double> > */
static int G__list_61_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<double,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<double,allocator<double> >[n];
     } else {
       p = new((void*) gvp) list<double,allocator<double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<double,allocator<double> >;
     } else {
       p = new((void*) gvp) list<double,allocator<double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = ((list<double,allocator<double> >*) G__getstructoffset())->begin();
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = ((list<double,allocator<double> >*) G__getstructoffset())->end();
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::reverse_iterator* pobj;
         list<double,allocator<double> >::reverse_iterator xobj = ((list<double,allocator<double> >*) G__getstructoffset())->rbegin();
         pobj = new list<double,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::reverse_iterator* pobj;
         list<double,allocator<double> >::reverse_iterator xobj = ((list<double,allocator<double> >*) G__getstructoffset())->rend();
         pobj = new list<double,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const list<double,allocator<double> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<double,allocator<double> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<double,allocator<double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const list<double,allocator<double> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const list<double,allocator<double> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->swap(*(list<double,allocator<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = ((list<double,allocator<double> >*) G__getstructoffset())->insert(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *(double*) G__Doubleref(&libp->para[1]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->insert(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->insert(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->insert(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), (list<double,allocator<double> >::size_type) G__int(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->push_front(*(double*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->push_back(*(double*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->resize((list<double,allocator<double> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->resize((list<double,allocator<double> >::size_type) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->erase(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->erase(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->pop_front();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<double,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<double,allocator<double> >((list<double,allocator<double> >::size_type) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
     } else {
       p = new((void*) gvp) list<double,allocator<double> >((list<double,allocator<double> >::size_type) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<double,allocator<double> >((list<double,allocator<double> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) list<double,allocator<double> >((list<double,allocator<double> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<double,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<double,allocator<double> >((const double*) G__int(libp->para[0]), (const double*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) list<double,allocator<double> >((const double*) G__int(libp->para[0]), (const double*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<double,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<double,allocator<double> >(*((list<double,allocator<double> >::const_iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) list<double,allocator<double> >(*((list<double,allocator<double> >::const_iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<double,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<double,allocator<double> >(*(list<double,allocator<double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<double,allocator<double> >(*(list<double,allocator<double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<double,allocator<double> >& obj = ((list<double,allocator<double> >*) G__getstructoffset())->operator=(*(list<double,allocator<double> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->splice(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *(list<double,allocator<double> >*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->splice(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *(list<double,allocator<double> >*) libp->para[1].ref
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->splice(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *(list<double,allocator<double> >*) libp->para[1].ref
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->remove(*(double*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->unique();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->merge(*(list<double,allocator<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->reverse();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_61_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<double,allocator<double> >*) G__getstructoffset())->sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<double,allocator<double> > G__TlistlEdoublecOallocatorlEdoublegRsPgR;
static int G__list_61_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<double,allocator<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<double,allocator<double> >*) (soff+(sizeof(list<double,allocator<double> >)*i)))->~G__TlistlEdoublecOallocatorlEdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<double,allocator<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<double,allocator<double> >*) (soff))->~G__TlistlEdoublecOallocatorlEdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<double,allocator<double> >::iterator */
static int G__list_62_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<double,allocator<double> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<double,allocator<double> >::iterator[n];
     } else {
       p = new((void*) gvp) list<double,allocator<double> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<double,allocator<double> >::iterator;
     } else {
       p = new((void*) gvp) list<double,allocator<double> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<double,allocator<double> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<double,allocator<double> >::iterator(*(list<double,allocator<double> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<double,allocator<double> >::iterator(*(list<double,allocator<double> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<double,allocator<double> >::iterator& obj = ((list<double,allocator<double> >::iterator*) G__getstructoffset())->operator=(*(list<double,allocator<double> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const list<double,allocator<double> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const list<double,allocator<double> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<double,allocator<double> >::iterator& obj = ((list<double,allocator<double> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = ((list<double,allocator<double> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<double,allocator<double> >::iterator& obj = ((list<double,allocator<double> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = ((list<double,allocator<double> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<double,allocator<double> >::iterator*) G__getstructoffset())->operator==(*(list<double,allocator<double> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_62_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<double,allocator<double> >::iterator*) G__getstructoffset())->operator!=(*(list<double,allocator<double> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<double,allocator<double> >::iterator G__TlistlEdoublecOallocatorlEdoublegRsPgRcLcLiterator;
static int G__list_62_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<double,allocator<double> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<double,allocator<double> >::iterator*) (soff+(sizeof(list<double,allocator<double> >::iterator)*i)))->~G__TlistlEdoublecOallocatorlEdoublegRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<double,allocator<double> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<double,allocator<double> >::iterator*) (soff))->~G__TlistlEdoublecOallocatorlEdoublegRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<double,allocator<double> >::reverse_iterator */
static int G__list_63_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<double,allocator<double> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<double,allocator<double> >::reverse_iterator(*(list<double,allocator<double> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<double,allocator<double> >::reverse_iterator(*(list<double,allocator<double> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_63_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<double,allocator<double> >::reverse_iterator& obj = ((list<double,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator=(*(list<double,allocator<double> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_63_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const list<double,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_63_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const list<double,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_63_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<double,allocator<double> >::reverse_iterator& obj = ((list<double,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_63_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::reverse_iterator* pobj;
         list<double,allocator<double> >::reverse_iterator xobj = ((list<double,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<double,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_63_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<double,allocator<double> >::reverse_iterator& obj = ((list<double,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_63_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::reverse_iterator* pobj;
         list<double,allocator<double> >::reverse_iterator xobj = ((list<double,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<double,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<double,allocator<double> >::reverse_iterator G__TlistlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator;
static int G__list_63_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<double,allocator<double> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<double,allocator<double> >::reverse_iterator*) (soff+(sizeof(list<double,allocator<double> >::reverse_iterator)*i)))->~G__TlistlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<double,allocator<double> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<double,allocator<double> >::reverse_iterator*) (soff))->~G__TlistlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<void*> */
static int G__list_64_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<void*>[n];
     } else {
       p = new((void*) gvp) allocator<void*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<void*>;
     } else {
       p = new((void*) gvp) allocator<void*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_64_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<void*>(*(allocator<void*>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<void*>(*(allocator<void*>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_64_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const allocator<void*>*) G__getstructoffset())->address(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_64_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const allocator<void*>*) G__getstructoffset())->address(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_64_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 89, (long) ((allocator<void*>*) G__getstructoffset())->allocate((allocator<void*>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 89, (long) ((allocator<void*>*) G__getstructoffset())->allocate((allocator<void*>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_64_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->deallocate((allocator<void*>::pointer) G__int(libp->para[0]), (allocator<void*>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_64_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<void*>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_64_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->construct((allocator<void*>::pointer) G__int(libp->para[0]), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_64_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->destroy((allocator<void*>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<void*> G__TallocatorlEvoidmUgR;
static int G__list_64_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<void*>*) (soff+(sizeof(allocator<void*>)*i)))->~G__TallocatorlEvoidmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<void*>*) (soff))->~G__TallocatorlEvoidmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__list_64_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* dest = (allocator<void*>*) G__getstructoffset();
   const allocator<void*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<void*,allocator<void*> > */
static int G__list_65_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<void*,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<void*,allocator<void*> >[n];
     } else {
       p = new((void*) gvp) list<void*,allocator<void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<void*,allocator<void*> >;
     } else {
       p = new((void*) gvp) list<void*,allocator<void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = ((list<void*,allocator<void*> >*) G__getstructoffset())->begin();
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = ((list<void*,allocator<void*> >*) G__getstructoffset())->end();
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::reverse_iterator* pobj;
         list<void*,allocator<void*> >::reverse_iterator xobj = ((list<void*,allocator<void*> >*) G__getstructoffset())->rbegin();
         pobj = new list<void*,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::reverse_iterator* pobj;
         list<void*,allocator<void*> >::reverse_iterator xobj = ((list<void*,allocator<void*> >*) G__getstructoffset())->rend();
         pobj = new list<void*,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const list<void*,allocator<void*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<void*,allocator<void*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<void*,allocator<void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void* const& obj = ((const list<void*,allocator<void*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void* const& obj = ((const list<void*,allocator<void*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->swap(*(list<void*,allocator<void*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = ((list<void*,allocator<void*> >*) G__getstructoffset())->insert(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->insert(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), (void**) G__int(libp->para[1])
, (void**) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->insert(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->insert(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), (list<void*,allocator<void*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->push_front(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->resize((list<void*,allocator<void*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->resize((list<void*,allocator<void*> >::size_type) G__int(libp->para[0]), (void*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->erase(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->erase(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->pop_front();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<void*,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<void*,allocator<void*> >((list<void*,allocator<void*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) list<void*,allocator<void*> >((list<void*,allocator<void*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<void*,allocator<void*> >((list<void*,allocator<void*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) list<void*,allocator<void*> >((list<void*,allocator<void*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<void*,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<void*,allocator<void*> >((void* *const) G__int(libp->para[0]), (void* *const) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) list<void*,allocator<void*> >((void* *const) G__int(libp->para[0]), (void* *const) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<void*,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<void*,allocator<void*> >(*((list<void*,allocator<void*> >::const_iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) list<void*,allocator<void*> >(*((list<void*,allocator<void*> >::const_iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<void*,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<void*,allocator<void*> >(*(list<void*,allocator<void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<void*,allocator<void*> >(*(list<void*,allocator<void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<void*,allocator<void*> >& obj = ((list<void*,allocator<void*> >*) G__getstructoffset())->operator=(*(list<void*,allocator<void*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->splice(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *(list<void*,allocator<void*> >*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->splice(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *(list<void*,allocator<void*> >*) libp->para[1].ref
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->splice(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *(list<void*,allocator<void*> >*) libp->para[1].ref
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->remove(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->unique();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->merge(*(list<void*,allocator<void*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->reverse();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_65_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<void*,allocator<void*> >*) G__getstructoffset())->sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<void*,allocator<void*> > G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgR;
static int G__list_65_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<void*,allocator<void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<void*,allocator<void*> >*) (soff+(sizeof(list<void*,allocator<void*> >)*i)))->~G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<void*,allocator<void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<void*,allocator<void*> >*) (soff))->~G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<void*,allocator<void*> >::iterator */
static int G__list_66_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<void*,allocator<void*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<void*,allocator<void*> >::iterator[n];
     } else {
       p = new((void*) gvp) list<void*,allocator<void*> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<void*,allocator<void*> >::iterator;
     } else {
       p = new((void*) gvp) list<void*,allocator<void*> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<void*,allocator<void*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<void*,allocator<void*> >::iterator(*(list<void*,allocator<void*> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<void*,allocator<void*> >::iterator(*(list<void*,allocator<void*> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<void*,allocator<void*> >::iterator& obj = ((list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator=(*(list<void*,allocator<void*> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void* const& obj = ((const list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<void*,allocator<void*> >::iterator& obj = ((list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = ((list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<void*,allocator<void*> >::iterator& obj = ((list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = ((list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator==(*(list<void*,allocator<void*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_66_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<void*,allocator<void*> >::iterator*) G__getstructoffset())->operator!=(*(list<void*,allocator<void*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<void*,allocator<void*> >::iterator G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator;
static int G__list_66_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<void*,allocator<void*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<void*,allocator<void*> >::iterator*) (soff+(sizeof(list<void*,allocator<void*> >::iterator)*i)))->~G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<void*,allocator<void*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<void*,allocator<void*> >::iterator*) (soff))->~G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<void*,allocator<void*> >::reverse_iterator */
static int G__list_67_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<void*,allocator<void*> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<void*,allocator<void*> >::reverse_iterator(*(list<void*,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<void*,allocator<void*> >::reverse_iterator(*(list<void*,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_67_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<void*,allocator<void*> >::reverse_iterator& obj = ((list<void*,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator=(*(list<void*,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_67_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void* const& obj = ((const list<void*,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_67_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const list<void*,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_67_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<void*,allocator<void*> >::reverse_iterator& obj = ((list<void*,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_67_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::reverse_iterator* pobj;
         list<void*,allocator<void*> >::reverse_iterator xobj = ((list<void*,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<void*,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_67_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<void*,allocator<void*> >::reverse_iterator& obj = ((list<void*,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_67_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::reverse_iterator* pobj;
         list<void*,allocator<void*> >::reverse_iterator xobj = ((list<void*,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<void*,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<void*,allocator<void*> >::reverse_iterator G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator;
static int G__list_67_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<void*,allocator<void*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<void*,allocator<void*> >::reverse_iterator*) (soff+(sizeof(list<void*,allocator<void*> >::reverse_iterator)*i)))->~G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<void*,allocator<void*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<void*,allocator<void*> >::reverse_iterator*) (soff))->~G__TlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<char*> */
static int G__list_68_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<char*>[n];
     } else {
       p = new((void*) gvp) allocator<char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<char*>;
     } else {
       p = new((void*) gvp) allocator<char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_68_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<char*>(*(allocator<char*>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<char*>(*(allocator<char*>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_68_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const allocator<char*>*) G__getstructoffset())->address(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_68_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const allocator<char*>*) G__getstructoffset())->address(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_68_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 67, (long) ((allocator<char*>*) G__getstructoffset())->allocate((allocator<char*>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((allocator<char*>*) G__getstructoffset())->allocate((allocator<char*>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_68_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->deallocate((allocator<char*>::pointer) G__int(libp->para[0]), (allocator<char*>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_68_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<char*>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_68_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->construct((allocator<char*>::pointer) G__int(libp->para[0]), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_68_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->destroy((allocator<char*>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<char*> G__TallocatorlEcharmUgR;
static int G__list_68_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<char*>*) (soff+(sizeof(allocator<char*>)*i)))->~G__TallocatorlEcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<char*>*) (soff))->~G__TallocatorlEcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__list_68_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* dest = (allocator<char*>*) G__getstructoffset();
   const allocator<char*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<char*,allocator<char*> > */
static int G__list_69_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<char*,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<char*,allocator<char*> >[n];
     } else {
       p = new((void*) gvp) list<char*,allocator<char*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<char*,allocator<char*> >;
     } else {
       p = new((void*) gvp) list<char*,allocator<char*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = ((list<char*,allocator<char*> >*) G__getstructoffset())->begin();
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = ((list<char*,allocator<char*> >*) G__getstructoffset())->end();
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::reverse_iterator* pobj;
         list<char*,allocator<char*> >::reverse_iterator xobj = ((list<char*,allocator<char*> >*) G__getstructoffset())->rbegin();
         pobj = new list<char*,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::reverse_iterator* pobj;
         list<char*,allocator<char*> >::reverse_iterator xobj = ((list<char*,allocator<char*> >*) G__getstructoffset())->rend();
         pobj = new list<char*,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const list<char*,allocator<char*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<char*,allocator<char*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<char*,allocator<char*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char* const& obj = ((const list<char*,allocator<char*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char* const& obj = ((const list<char*,allocator<char*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->swap(*(list<char*,allocator<char*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = ((list<char*,allocator<char*> >*) G__getstructoffset())->insert(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->insert(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), (char**) G__int(libp->para[1])
, (char**) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->insert(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->insert(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), (list<char*,allocator<char*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->push_front(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->resize((list<char*,allocator<char*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->resize((list<char*,allocator<char*> >::size_type) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->erase(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->erase(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->pop_front();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<char*,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<char*,allocator<char*> >((list<char*,allocator<char*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) list<char*,allocator<char*> >((list<char*,allocator<char*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<char*,allocator<char*> >((list<char*,allocator<char*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) list<char*,allocator<char*> >((list<char*,allocator<char*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<char*,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<char*,allocator<char*> >((char* *const) G__int(libp->para[0]), (char* *const) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) list<char*,allocator<char*> >((char* *const) G__int(libp->para[0]), (char* *const) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<char*,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<char*,allocator<char*> >(*((list<char*,allocator<char*> >::const_iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) list<char*,allocator<char*> >(*((list<char*,allocator<char*> >::const_iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<char*,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<char*,allocator<char*> >(*(list<char*,allocator<char*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<char*,allocator<char*> >(*(list<char*,allocator<char*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<char*,allocator<char*> >& obj = ((list<char*,allocator<char*> >*) G__getstructoffset())->operator=(*(list<char*,allocator<char*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->splice(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *(list<char*,allocator<char*> >*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->splice(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *(list<char*,allocator<char*> >*) libp->para[1].ref
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->splice(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *(list<char*,allocator<char*> >*) libp->para[1].ref
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->remove(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->unique();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->merge(*(list<char*,allocator<char*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->reverse();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_69_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<char*,allocator<char*> >*) G__getstructoffset())->sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<char*,allocator<char*> > G__TlistlEcharmUcOallocatorlEcharmUgRsPgR;
static int G__list_69_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<char*,allocator<char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<char*,allocator<char*> >*) (soff+(sizeof(list<char*,allocator<char*> >)*i)))->~G__TlistlEcharmUcOallocatorlEcharmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<char*,allocator<char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<char*,allocator<char*> >*) (soff))->~G__TlistlEcharmUcOallocatorlEcharmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<char*,allocator<char*> >::iterator */
static int G__list_70_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<char*,allocator<char*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<char*,allocator<char*> >::iterator[n];
     } else {
       p = new((void*) gvp) list<char*,allocator<char*> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<char*,allocator<char*> >::iterator;
     } else {
       p = new((void*) gvp) list<char*,allocator<char*> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<char*,allocator<char*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<char*,allocator<char*> >::iterator(*(list<char*,allocator<char*> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<char*,allocator<char*> >::iterator(*(list<char*,allocator<char*> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<char*,allocator<char*> >::iterator& obj = ((list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator=(*(list<char*,allocator<char*> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char* const& obj = ((const list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<char*,allocator<char*> >::iterator& obj = ((list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = ((list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<char*,allocator<char*> >::iterator& obj = ((list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = ((list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator==(*(list<char*,allocator<char*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_70_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<char*,allocator<char*> >::iterator*) G__getstructoffset())->operator!=(*(list<char*,allocator<char*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<char*,allocator<char*> >::iterator G__TlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator;
static int G__list_70_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<char*,allocator<char*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<char*,allocator<char*> >::iterator*) (soff+(sizeof(list<char*,allocator<char*> >::iterator)*i)))->~G__TlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<char*,allocator<char*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<char*,allocator<char*> >::iterator*) (soff))->~G__TlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<char*,allocator<char*> >::reverse_iterator */
static int G__list_71_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<char*,allocator<char*> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<char*,allocator<char*> >::reverse_iterator(*(list<char*,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<char*,allocator<char*> >::reverse_iterator(*(list<char*,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_71_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<char*,allocator<char*> >::reverse_iterator& obj = ((list<char*,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator=(*(list<char*,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_71_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char* const& obj = ((const list<char*,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_71_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const list<char*,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_71_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<char*,allocator<char*> >::reverse_iterator& obj = ((list<char*,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_71_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::reverse_iterator* pobj;
         list<char*,allocator<char*> >::reverse_iterator xobj = ((list<char*,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<char*,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_71_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<char*,allocator<char*> >::reverse_iterator& obj = ((list<char*,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_71_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::reverse_iterator* pobj;
         list<char*,allocator<char*> >::reverse_iterator xobj = ((list<char*,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<char*,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<char*,allocator<char*> >::reverse_iterator G__TlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator;
static int G__list_71_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<char*,allocator<char*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<char*,allocator<char*> >::reverse_iterator*) (soff+(sizeof(list<char*,allocator<char*> >::reverse_iterator)*i)))->~G__TlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<char*,allocator<char*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<char*,allocator<char*> >::reverse_iterator*) (soff))->~G__TlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<string> */
static int G__list_72_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<string>[n];
     } else {
       p = new((void*) gvp) allocator<string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<string>;
     } else {
       p = new((void*) gvp) allocator<string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_72_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<string>(*(allocator<string>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<string>(*(allocator<string>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_72_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<string>*) G__getstructoffset())->address(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_72_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<string>*) G__getstructoffset())->address(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_72_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<string>*) G__getstructoffset())->allocate((allocator<string>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<string>*) G__getstructoffset())->allocate((allocator<string>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_72_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->deallocate((allocator<string>::pointer) G__int(libp->para[0]), (allocator<string>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_72_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<string>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_72_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->construct((allocator<string>::pointer) G__int(libp->para[0]), *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_72_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->destroy((allocator<string>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<string> G__TallocatorlEstringgR;
static int G__list_72_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<string>*) (soff+(sizeof(allocator<string>)*i)))->~G__TallocatorlEstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<string>*) (soff))->~G__TallocatorlEstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__list_72_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* dest = (allocator<string>*) G__getstructoffset();
   const allocator<string>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<string,allocator<string> > */
static int G__list_73_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<string,allocator<string> >[n];
     } else {
       p = new((void*) gvp) list<string,allocator<string> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<string,allocator<string> >;
     } else {
       p = new((void*) gvp) list<string,allocator<string> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = ((list<string,allocator<string> >*) G__getstructoffset())->begin();
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = ((list<string,allocator<string> >*) G__getstructoffset())->end();
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::reverse_iterator* pobj;
         list<string,allocator<string> >::reverse_iterator xobj = ((list<string,allocator<string> >*) G__getstructoffset())->rbegin();
         pobj = new list<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::reverse_iterator* pobj;
         list<string,allocator<string> >::reverse_iterator xobj = ((list<string,allocator<string> >*) G__getstructoffset())->rend();
         pobj = new list<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const list<string,allocator<string> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<string,allocator<string> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const list<string,allocator<string> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const list<string,allocator<string> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const list<string,allocator<string> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->swap(*(list<string,allocator<string> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = ((list<string,allocator<string> >*) G__getstructoffset())->insert(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *(string*) libp->para[1].ref);
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->insert(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), (string*) G__int(libp->para[1])
, (string*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->insert(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->insert(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), (list<string,allocator<string> >::size_type) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->push_front(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->push_back(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->resize((list<string,allocator<string> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->resize((list<string,allocator<string> >::size_type) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->erase(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->erase(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->pop_front();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<string,allocator<string> >((list<string,allocator<string> >::size_type) G__int(libp->para[0]), *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) list<string,allocator<string> >((list<string,allocator<string> >::size_type) G__int(libp->para[0]), *(string*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<string,allocator<string> >((list<string,allocator<string> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) list<string,allocator<string> >((list<string,allocator<string> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<string,allocator<string> >((const string*) G__int(libp->para[0]), (const string*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) list<string,allocator<string> >((const string*) G__int(libp->para[0]), (const string*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<string,allocator<string> >(*((list<string,allocator<string> >::const_iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) list<string,allocator<string> >(*((list<string,allocator<string> >::const_iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<string,allocator<string> >(*(list<string,allocator<string> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<string,allocator<string> >(*(list<string,allocator<string> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<string,allocator<string> >& obj = ((list<string,allocator<string> >*) G__getstructoffset())->operator=(*(list<string,allocator<string> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->splice(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *(list<string,allocator<string> >*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->splice(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *(list<string,allocator<string> >*) libp->para[1].ref
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->splice(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *(list<string,allocator<string> >*) libp->para[1].ref
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->remove(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->unique();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->merge(*(list<string,allocator<string> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->reverse();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_73_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((list<string,allocator<string> >*) G__getstructoffset())->sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<string,allocator<string> > G__TlistlEstringcOallocatorlEstringgRsPgR;
static int G__list_73_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<string,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<string,allocator<string> >*) (soff+(sizeof(list<string,allocator<string> >)*i)))->~G__TlistlEstringcOallocatorlEstringgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<string,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<string,allocator<string> >*) (soff))->~G__TlistlEstringcOallocatorlEstringgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<string,allocator<string> >::iterator */
static int G__list_74_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<string,allocator<string> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<string,allocator<string> >::iterator[n];
     } else {
       p = new((void*) gvp) list<string,allocator<string> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new list<string,allocator<string> >::iterator;
     } else {
       p = new((void*) gvp) list<string,allocator<string> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<string,allocator<string> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<string,allocator<string> >::iterator(*(list<string,allocator<string> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<string,allocator<string> >::iterator(*(list<string,allocator<string> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<string,allocator<string> >::iterator& obj = ((list<string,allocator<string> >::iterator*) G__getstructoffset())->operator=(*(list<string,allocator<string> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const list<string,allocator<string> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const list<string,allocator<string> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<string,allocator<string> >::iterator& obj = ((list<string,allocator<string> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = ((list<string,allocator<string> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<string,allocator<string> >::iterator& obj = ((list<string,allocator<string> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = ((list<string,allocator<string> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<string,allocator<string> >::iterator*) G__getstructoffset())->operator==(*(list<string,allocator<string> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_74_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((list<string,allocator<string> >::iterator*) G__getstructoffset())->operator!=(*(list<string,allocator<string> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<string,allocator<string> >::iterator G__TlistlEstringcOallocatorlEstringgRsPgRcLcLiterator;
static int G__list_74_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<string,allocator<string> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<string,allocator<string> >::iterator*) (soff+(sizeof(list<string,allocator<string> >::iterator)*i)))->~G__TlistlEstringcOallocatorlEstringgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<string,allocator<string> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<string,allocator<string> >::iterator*) (soff))->~G__TlistlEstringcOallocatorlEstringgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* list<string,allocator<string> >::reverse_iterator */
static int G__list_75_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   list<string,allocator<string> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new list<string,allocator<string> >::reverse_iterator(*(list<string,allocator<string> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) list<string,allocator<string> >::reverse_iterator(*(list<string,allocator<string> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_75_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<string,allocator<string> >::reverse_iterator& obj = ((list<string,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator=(*(list<string,allocator<string> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_75_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const list<string,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_75_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const list<string,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_75_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<string,allocator<string> >::reverse_iterator& obj = ((list<string,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_75_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::reverse_iterator* pobj;
         list<string,allocator<string> >::reverse_iterator xobj = ((list<string,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new list<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_75_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<string,allocator<string> >::reverse_iterator& obj = ((list<string,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list_75_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::reverse_iterator* pobj;
         list<string,allocator<string> >::reverse_iterator xobj = ((list<string,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new list<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef list<string,allocator<string> >::reverse_iterator G__TlistlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator;
static int G__list_75_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (list<string,allocator<string> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((list<string,allocator<string> >::reverse_iterator*) (soff+(sizeof(list<string,allocator<string> >::reverse_iterator)*i)))->~G__TlistlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (list<string,allocator<string> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((list<string,allocator<string> >::reverse_iterator*) (soff))->~G__TlistlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__list__0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<int,allocator<int> >::reverse_iterator*) libp->para[0].ref, *(list<int,allocator<int> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<int,allocator<int> >::reverse_iterator*) libp->para[0].ref, *(list<int,allocator<int> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<int,allocator<int> >*) libp->para[0].ref, *(list<int,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(list<int,allocator<int> >*) libp->para[0].ref, *(list<int,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<int,allocator<int> >*) libp->para[0].ref, *(list<int,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(list<int,allocator<int> >*) libp->para[0].ref, *(list<int,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(list<int,allocator<int> >*) libp->para[0].ref, *(list<int,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(list<int,allocator<int> >*) libp->para[0].ref, *(list<int,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = find(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = find_end(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = find_first_of(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = adjacent_find(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) count(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) equal(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = search(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = search_n(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, (list<int,allocator<int> >::size_type) G__int(libp->para[2]), *(int*) G__Intref(&libp->para[3]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = copy(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = copy_backward(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      swap(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = swap_ranges(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      iter_swap(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      replace(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2]), *(int*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = replace_copy(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *(int*) G__Intref(&libp->para[3])
, *(int*) G__Intref(&libp->para[4]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill_n(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), (list<int,allocator<int> >::size_type) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = remove(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = remove_copy(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *(int*) G__Intref(&libp->para[3]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = unique(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = unique_copy(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      reverse(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = reverse_copy(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rotate(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = rotate_copy(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = lower_bound(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = upper_bound(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2]));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) binary_search(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = merge(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[4])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      inplace_merge(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) includes(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = set_union(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[4])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = set_intersection(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[4])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = set_difference(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[4])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = set_symmetric_difference(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[4])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = min(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = max(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = min_element(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<int,allocator<int> >::iterator* pobj;
         list<int,allocator<int> >::iterator xobj = max_element(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1])));
         pobj = new list<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) lexicographical_compare(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((list<int,allocator<int> >::iterator*) G__int(libp->para[2])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) next_permutation(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) prev_permutation(*((list<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((list<int,allocator<int> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<long,allocator<long> >::reverse_iterator*) libp->para[0].ref, *(list<long,allocator<long> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<long,allocator<long> >::reverse_iterator*) libp->para[0].ref, *(list<long,allocator<long> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<long,allocator<long> >*) libp->para[0].ref, *(list<long,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(list<long,allocator<long> >*) libp->para[0].ref, *(list<long,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<long,allocator<long> >*) libp->para[0].ref, *(list<long,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_167(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(list<long,allocator<long> >*) libp->para[0].ref, *(list<long,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(list<long,allocator<long> >*) libp->para[0].ref, *(list<long,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(list<long,allocator<long> >*) libp->para[0].ref, *(list<long,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = find(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = find_end(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = find_first_of(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = adjacent_find(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) count(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) equal(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = search(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = search_n(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, (list<long,allocator<long> >::size_type) G__int(libp->para[2]), *(long*) G__Longref(&libp->para[3]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_178(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = copy(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_179(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = copy_backward(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_180(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      swap(*(long*) G__Longref(&libp->para[0]), *(long*) G__Longref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = swap_ranges(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_182(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      iter_swap(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_183(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      replace(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2]), *(long*) G__Longref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_184(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = replace_copy(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *(long*) G__Longref(&libp->para[3])
, *(long*) G__Longref(&libp->para[4]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_185(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_186(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill_n(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), (list<long,allocator<long> >::size_type) G__int(libp->para[1])
, *(long*) G__Longref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_187(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = remove(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_188(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = remove_copy(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *(long*) G__Longref(&libp->para[3]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_189(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = unique(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_190(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = unique_copy(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_191(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      reverse(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_192(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = reverse_copy(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_193(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rotate(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_194(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = rotate_copy(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_195(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = lower_bound(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_196(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = upper_bound(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2]));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_197(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) binary_search(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_198(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = merge(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[4])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_199(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      inplace_merge(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_200(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) includes(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_201(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = set_union(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[4])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_202(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = set_intersection(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[4])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_203(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = set_difference(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[4])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_204(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = set_symmetric_difference(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[4])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_205(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = min(*(long*) G__Longref(&libp->para[0]), *(long*) G__Longref(&libp->para[1]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_206(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = max(*(long*) G__Longref(&libp->para[0]), *(long*) G__Longref(&libp->para[1]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_207(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = min_element(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_208(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<long,allocator<long> >::iterator* pobj;
         list<long,allocator<long> >::iterator xobj = max_element(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1])));
         pobj = new list<long,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_209(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) lexicographical_compare(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((list<long,allocator<long> >::iterator*) G__int(libp->para[2])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_210(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) next_permutation(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_211(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) prev_permutation(*((list<long,allocator<long> >::iterator*) G__int(libp->para[0])), *((list<long,allocator<long> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_212(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<float,allocator<float> >::reverse_iterator*) libp->para[0].ref, *(list<float,allocator<float> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_213(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<float,allocator<float> >::reverse_iterator*) libp->para[0].ref, *(list<float,allocator<float> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_214(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<float,allocator<float> >*) libp->para[0].ref, *(list<float,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_215(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(list<float,allocator<float> >*) libp->para[0].ref, *(list<float,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_216(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<float,allocator<float> >*) libp->para[0].ref, *(list<float,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_217(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(list<float,allocator<float> >*) libp->para[0].ref, *(list<float,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_218(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(list<float,allocator<float> >*) libp->para[0].ref, *(list<float,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_219(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(list<float,allocator<float> >*) libp->para[0].ref, *(list<float,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_220(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = find(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_221(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = find_end(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_222(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = find_first_of(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_223(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = adjacent_find(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_224(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) count(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_225(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) equal(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_226(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = search(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_227(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = search_n(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, (list<float,allocator<float> >::size_type) G__int(libp->para[2]), *(float*) G__Floatref(&libp->para[3]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_228(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = copy(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_229(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = copy_backward(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_230(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      swap(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_231(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = swap_ranges(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_232(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      iter_swap(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_233(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      replace(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_234(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = replace_copy(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *(float*) G__Floatref(&libp->para[3])
, *(float*) G__Floatref(&libp->para[4]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_235(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_236(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill_n(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), (list<float,allocator<float> >::size_type) G__int(libp->para[1])
, *(float*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_237(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = remove(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_238(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = remove_copy(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *(float*) G__Floatref(&libp->para[3]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_239(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = unique(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_240(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = unique_copy(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_241(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      reverse(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_242(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = reverse_copy(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_243(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rotate(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_244(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = rotate_copy(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_245(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = lower_bound(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_246(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = upper_bound(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2]));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_247(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) binary_search(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_248(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = merge(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[4])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_249(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      inplace_merge(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_250(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) includes(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_251(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = set_union(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[4])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_252(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = set_intersection(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[4])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_253(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = set_difference(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[4])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_254(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = set_symmetric_difference(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[4])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_255(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = min(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_256(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = max(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_257(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = min_element(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_258(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<float,allocator<float> >::iterator* pobj;
         list<float,allocator<float> >::iterator xobj = max_element(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1])));
         pobj = new list<float,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_259(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) lexicographical_compare(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((list<float,allocator<float> >::iterator*) G__int(libp->para[2])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_260(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) next_permutation(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_261(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) prev_permutation(*((list<float,allocator<float> >::iterator*) G__int(libp->para[0])), *((list<float,allocator<float> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_262(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<double,allocator<double> >::reverse_iterator*) libp->para[0].ref, *(list<double,allocator<double> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_263(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<double,allocator<double> >::reverse_iterator*) libp->para[0].ref, *(list<double,allocator<double> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_264(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<double,allocator<double> >*) libp->para[0].ref, *(list<double,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_265(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(list<double,allocator<double> >*) libp->para[0].ref, *(list<double,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_266(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<double,allocator<double> >*) libp->para[0].ref, *(list<double,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_267(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(list<double,allocator<double> >*) libp->para[0].ref, *(list<double,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_268(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(list<double,allocator<double> >*) libp->para[0].ref, *(list<double,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_269(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(list<double,allocator<double> >*) libp->para[0].ref, *(list<double,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_270(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = find(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_271(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = find_end(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_272(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = find_first_of(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_273(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = adjacent_find(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_274(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) count(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_275(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) equal(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_276(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = search(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_277(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = search_n(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, (list<double,allocator<double> >::size_type) G__int(libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_278(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = copy(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_279(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = copy_backward(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_280(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      swap(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_281(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = swap_ranges(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_282(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      iter_swap(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_283(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      replace(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_284(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = replace_copy(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_285(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_286(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill_n(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), (list<double,allocator<double> >::size_type) G__int(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_287(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = remove(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_288(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = remove_copy(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *(double*) G__Doubleref(&libp->para[3]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_289(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = unique(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_290(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = unique_copy(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_291(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      reverse(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_292(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = reverse_copy(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_293(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rotate(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_294(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = rotate_copy(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_295(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = lower_bound(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_296(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = upper_bound(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2]));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_297(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) binary_search(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_298(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = merge(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[4])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_299(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      inplace_merge(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_300(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) includes(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_301(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = set_union(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[4])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_302(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = set_intersection(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[4])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_303(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = set_difference(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[4])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_304(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = set_symmetric_difference(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[4])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_305(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = min(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_306(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = max(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_307(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = min_element(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_308(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<double,allocator<double> >::iterator* pobj;
         list<double,allocator<double> >::iterator xobj = max_element(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1])));
         pobj = new list<double,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_309(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) lexicographical_compare(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((list<double,allocator<double> >::iterator*) G__int(libp->para[2])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_310(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) next_permutation(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_311(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) prev_permutation(*((list<double,allocator<double> >::iterator*) G__int(libp->para[0])), *((list<double,allocator<double> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_312(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<void*,allocator<void*> >::reverse_iterator*) libp->para[0].ref, *(list<void*,allocator<void*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_313(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<void*,allocator<void*> >::reverse_iterator*) libp->para[0].ref, *(list<void*,allocator<void*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_314(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<void*,allocator<void*> >*) libp->para[0].ref, *(list<void*,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_315(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(list<void*,allocator<void*> >*) libp->para[0].ref, *(list<void*,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_316(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<void*,allocator<void*> >*) libp->para[0].ref, *(list<void*,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_317(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(list<void*,allocator<void*> >*) libp->para[0].ref, *(list<void*,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_318(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(list<void*,allocator<void*> >*) libp->para[0].ref, *(list<void*,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_319(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(list<void*,allocator<void*> >*) libp->para[0].ref, *(list<void*,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_320(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = find(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_321(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = find_end(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_322(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = find_first_of(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_323(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = adjacent_find(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_324(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) count(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_325(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) equal(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_326(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = search(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_327(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = search_n(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, (list<void*,allocator<void*> >::size_type) G__int(libp->para[2]), libp->para[3].ref ? *(void**) libp->para[3].ref : *(void**) (&G__Mlong(libp->para[3])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_328(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = copy(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_329(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = copy_backward(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_330(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      swap(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_331(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = swap_ranges(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_332(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      iter_swap(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_333(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      replace(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])), libp->para[3].ref ? *(void**) libp->para[3].ref : *(void**) (&G__Mlong(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_334(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = replace_copy(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), libp->para[3].ref ? *(void**) libp->para[3].ref : *(void**) (&G__Mlong(libp->para[3]))
, libp->para[4].ref ? *(void**) libp->para[4].ref : *(void**) (&G__Mlong(libp->para[4])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_335(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_336(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill_n(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), (list<void*,allocator<void*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_337(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = remove(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_338(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = remove_copy(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), libp->para[3].ref ? *(void**) libp->para[3].ref : *(void**) (&G__Mlong(libp->para[3])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_339(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = unique(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_340(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = unique_copy(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_341(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      reverse(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_342(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = reverse_copy(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_343(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rotate(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_344(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = rotate_copy(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_345(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = lower_bound(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_346(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = upper_bound(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_347(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) binary_search(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_348(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = merge(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_349(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      inplace_merge(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_350(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) includes(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_351(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = set_union(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_352(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = set_intersection(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_353(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = set_difference(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_354(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = set_symmetric_difference(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_355(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void* const& obj = min(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_356(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void* const& obj = max(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_357(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = min_element(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_358(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<void*,allocator<void*> >::iterator* pobj;
         list<void*,allocator<void*> >::iterator xobj = max_element(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1])));
         pobj = new list<void*,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_359(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) lexicographical_compare(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[2])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_360(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) next_permutation(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_361(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) prev_permutation(*((list<void*,allocator<void*> >::iterator*) G__int(libp->para[0])), *((list<void*,allocator<void*> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_362(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<char*,allocator<char*> >::reverse_iterator*) libp->para[0].ref, *(list<char*,allocator<char*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_363(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<char*,allocator<char*> >::reverse_iterator*) libp->para[0].ref, *(list<char*,allocator<char*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_364(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<char*,allocator<char*> >*) libp->para[0].ref, *(list<char*,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_365(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(list<char*,allocator<char*> >*) libp->para[0].ref, *(list<char*,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_366(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<char*,allocator<char*> >*) libp->para[0].ref, *(list<char*,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_367(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(list<char*,allocator<char*> >*) libp->para[0].ref, *(list<char*,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_368(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(list<char*,allocator<char*> >*) libp->para[0].ref, *(list<char*,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_369(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(list<char*,allocator<char*> >*) libp->para[0].ref, *(list<char*,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_370(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = find(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_371(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = find_end(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_372(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = find_first_of(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_373(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = adjacent_find(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_374(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) count(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_375(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) equal(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_376(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = search(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_377(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = search_n(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, (list<char*,allocator<char*> >::size_type) G__int(libp->para[2]), libp->para[3].ref ? *(char**) libp->para[3].ref : *(char**) (&G__Mlong(libp->para[3])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_378(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = copy(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_379(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = copy_backward(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_380(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      swap(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_381(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = swap_ranges(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_382(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      iter_swap(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_383(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      replace(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])), libp->para[3].ref ? *(char**) libp->para[3].ref : *(char**) (&G__Mlong(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_384(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = replace_copy(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), libp->para[3].ref ? *(char**) libp->para[3].ref : *(char**) (&G__Mlong(libp->para[3]))
, libp->para[4].ref ? *(char**) libp->para[4].ref : *(char**) (&G__Mlong(libp->para[4])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_385(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_386(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill_n(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), (list<char*,allocator<char*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_387(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = remove(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_388(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = remove_copy(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), libp->para[3].ref ? *(char**) libp->para[3].ref : *(char**) (&G__Mlong(libp->para[3])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_389(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = unique(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_390(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = unique_copy(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_391(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      reverse(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_392(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = reverse_copy(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_393(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rotate(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_394(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = rotate_copy(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_395(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = lower_bound(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_396(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = upper_bound(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_397(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) binary_search(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_398(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = merge(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_399(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      inplace_merge(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_400(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) includes(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_401(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = set_union(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_402(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = set_intersection(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_403(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = set_difference(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_404(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = set_symmetric_difference(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[4])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_405(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char* const& obj = min(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_406(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char* const& obj = max(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_407(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = min_element(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_408(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<char*,allocator<char*> >::iterator* pobj;
         list<char*,allocator<char*> >::iterator xobj = max_element(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1])));
         pobj = new list<char*,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_409(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) lexicographical_compare(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[2])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_410(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) next_permutation(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_411(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) prev_permutation(*((list<char*,allocator<char*> >::iterator*) G__int(libp->para[0])), *((list<char*,allocator<char*> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_412(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<string,allocator<string> >::reverse_iterator*) libp->para[0].ref, *(list<string,allocator<string> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_413(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<string,allocator<string> >::reverse_iterator*) libp->para[0].ref, *(list<string,allocator<string> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_414(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(list<string,allocator<string> >*) libp->para[0].ref, *(list<string,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_415(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(list<string,allocator<string> >*) libp->para[0].ref, *(list<string,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_416(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(list<string,allocator<string> >*) libp->para[0].ref, *(list<string,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_417(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(list<string,allocator<string> >*) libp->para[0].ref, *(list<string,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_418(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(list<string,allocator<string> >*) libp->para[0].ref, *(list<string,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_419(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(list<string,allocator<string> >*) libp->para[0].ref, *(list<string,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_420(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = find(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref);
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_421(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = find_end(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_422(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = find_first_of(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_423(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = adjacent_find(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_424(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) count(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_425(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) equal(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_426(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = search(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_427(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = search_n(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, (list<string,allocator<string> >::size_type) G__int(libp->para[2]), *(string*) libp->para[3].ref);
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_428(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = copy(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_429(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = copy_backward(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_430(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = swap_ranges(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_431(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      iter_swap(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_432(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      replace(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref, *(string*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_433(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = replace_copy(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *(string*) libp->para[3].ref
, *(string*) libp->para[4].ref);
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_434(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_435(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fill_n(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), (list<string,allocator<string> >::size_type) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_436(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = remove(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref);
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_437(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = remove_copy(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *(string*) libp->para[3].ref);
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_438(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = unique(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_439(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = unique_copy(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_440(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      reverse(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_441(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = reverse_copy(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_442(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rotate(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_443(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = rotate_copy(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_444(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = lower_bound(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref);
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_445(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = upper_bound(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref);
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_446(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) binary_search(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_447(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = merge(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[4])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_448(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      inplace_merge(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_449(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) includes(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_450(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = set_union(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[4])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_451(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = set_intersection(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[4])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_452(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = set_difference(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[4])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_453(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = set_symmetric_difference(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[4])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_454(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = min(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_455(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = max(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_456(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = min_element(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_457(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         list<string,allocator<string> >::iterator* pobj;
         list<string,allocator<string> >::iterator xobj = max_element(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1])));
         pobj = new list<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_458(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) lexicographical_compare(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((list<string,allocator<string> >::iterator*) G__int(libp->para[2])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_459(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) next_permutation(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__list__0_460(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) prev_permutation(*((list<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((list<string,allocator<string> >::iterator*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* allocator<int> */

/* list<int,allocator<int> > */

/* list<int,allocator<int> >::iterator */

/* list<int,allocator<int> >::reverse_iterator */

/* allocator<long> */

/* list<long,allocator<long> > */

/* list<long,allocator<long> >::iterator */

/* list<long,allocator<long> >::reverse_iterator */

/* allocator<float> */

/* list<float,allocator<float> > */

/* list<float,allocator<float> >::iterator */

/* list<float,allocator<float> >::reverse_iterator */

/* allocator<double> */

/* list<double,allocator<double> > */

/* list<double,allocator<double> >::iterator */

/* list<double,allocator<double> >::reverse_iterator */

/* allocator<void*> */

/* list<void*,allocator<void*> > */

/* list<void*,allocator<void*> >::iterator */

/* list<void*,allocator<void*> >::reverse_iterator */

/* allocator<char*> */

/* list<char*,allocator<char*> > */

/* list<char*,allocator<char*> >::iterator */

/* list<char*,allocator<char*> >::reverse_iterator */

/* allocator<string> */

/* list<string,allocator<string> > */

/* list<string,allocator<string> >::iterator */

/* list<string,allocator<string> >::reverse_iterator */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc {
 public:
  G__Sizep2memfunc(): p(&G__Sizep2memfunc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc::*p)();
};

size_t G__get_sizep2memfunc()
{
  G__Sizep2memfunc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable() {

   /* Setting up typedef entry */
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<int>",117,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEintgR),0,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void_pointer",89,-1,0,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",76,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",76,-1,256,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",108,-1,1,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",108,-1,257,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<long>",117,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",108,-1,0,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlElonggR),0,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void_pointer",89,-1,0,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",76,-1,0,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",76,-1,256,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",108,-1,1,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",108,-1,257,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",102,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<float>",117,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",102,-1,0,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR),0,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void_pointer",89,-1,0,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,256,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,1,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,257,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",68,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",68,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",100,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",100,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",100,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<double>",117,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",100,-1,0,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR),0,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void_pointer",89,-1,0,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",68,-1,0,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",68,-1,256,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",100,-1,1,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",100,-1,257,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",89,-1,2,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",89,-1,258,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",89,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",89,-1,1025,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",89,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<void*>",117,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",89,-1,0,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR),0,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void_pointer",89,-1,0,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",89,-1,0,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",89,-1,256,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",89,-1,1,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",89,-1,257,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",67,-1,2,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",67,-1,258,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",67,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",67,-1,1025,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",67,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<char*>",117,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",67,-1,0,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR),0,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void_pointer",89,-1,0,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",67,-1,0,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",67,-1,256,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",67,-1,1,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",67,-1,257,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_string),256,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_string),1,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_string),257,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<string>",117,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEstringgR),0,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void_pointer",89,-1,0,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_string),256,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_string),1,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_string),257,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* allocator<int> */
static void G__setup_memvarallocatorlEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   { allocator<int> *p; p=(allocator<int>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<int,allocator<int> > */
static void G__setup_memvarlistlEintcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   { list<int,allocator<int> > *p; p=(list<int,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<int,allocator<int> >::iterator */
static void G__setup_memvarlistlEintcOallocatorlEintgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator));
   { list<int,allocator<int> >::iterator *p; p=(list<int,allocator<int> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<int,allocator<int> >::reverse_iterator */
static void G__setup_memvarlistlEintcOallocatorlEintgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator));
   { list<int,allocator<int> >::reverse_iterator *p; p=(list<int,allocator<int> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<long> */
static void G__setup_memvarallocatorlElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   { allocator<long> *p; p=(allocator<long>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<long,allocator<long> > */
static void G__setup_memvarlistlElongcOallocatorlElonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   { list<long,allocator<long> > *p; p=(list<long,allocator<long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<long,allocator<long> >::iterator */
static void G__setup_memvarlistlElongcOallocatorlElonggRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator));
   { list<long,allocator<long> >::iterator *p; p=(list<long,allocator<long> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<long,allocator<long> >::reverse_iterator */
static void G__setup_memvarlistlElongcOallocatorlElonggRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator));
   { list<long,allocator<long> >::reverse_iterator *p; p=(list<long,allocator<long> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<float> */
static void G__setup_memvarallocatorlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   { allocator<float> *p; p=(allocator<float>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<float,allocator<float> > */
static void G__setup_memvarlistlEfloatcOallocatorlEfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   { list<float,allocator<float> > *p; p=(list<float,allocator<float> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<float,allocator<float> >::iterator */
static void G__setup_memvarlistlEfloatcOallocatorlEfloatgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator));
   { list<float,allocator<float> >::iterator *p; p=(list<float,allocator<float> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<float,allocator<float> >::reverse_iterator */
static void G__setup_memvarlistlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   { list<float,allocator<float> >::reverse_iterator *p; p=(list<float,allocator<float> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<double> */
static void G__setup_memvarallocatorlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   { allocator<double> *p; p=(allocator<double>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<double,allocator<double> > */
static void G__setup_memvarlistlEdoublecOallocatorlEdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   { list<double,allocator<double> > *p; p=(list<double,allocator<double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<double,allocator<double> >::iterator */
static void G__setup_memvarlistlEdoublecOallocatorlEdoublegRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator));
   { list<double,allocator<double> >::iterator *p; p=(list<double,allocator<double> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<double,allocator<double> >::reverse_iterator */
static void G__setup_memvarlistlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   { list<double,allocator<double> >::reverse_iterator *p; p=(list<double,allocator<double> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<void*> */
static void G__setup_memvarallocatorlEvoidmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   { allocator<void*> *p; p=(allocator<void*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<void*,allocator<void*> > */
static void G__setup_memvarlistlEvoidmUcOallocatorlEvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   { list<void*,allocator<void*> > *p; p=(list<void*,allocator<void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<void*,allocator<void*> >::iterator */
static void G__setup_memvarlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator));
   { list<void*,allocator<void*> >::iterator *p; p=(list<void*,allocator<void*> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<void*,allocator<void*> >::reverse_iterator */
static void G__setup_memvarlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   { list<void*,allocator<void*> >::reverse_iterator *p; p=(list<void*,allocator<void*> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<char*> */
static void G__setup_memvarallocatorlEcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   { allocator<char*> *p; p=(allocator<char*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<char*,allocator<char*> > */
static void G__setup_memvarlistlEcharmUcOallocatorlEcharmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   { list<char*,allocator<char*> > *p; p=(list<char*,allocator<char*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<char*,allocator<char*> >::iterator */
static void G__setup_memvarlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator));
   { list<char*,allocator<char*> >::iterator *p; p=(list<char*,allocator<char*> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<char*,allocator<char*> >::reverse_iterator */
static void G__setup_memvarlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   { list<char*,allocator<char*> >::reverse_iterator *p; p=(list<char*,allocator<char*> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<string> */
static void G__setup_memvarallocatorlEstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   { allocator<string> *p; p=(allocator<string>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<string,allocator<string> > */
static void G__setup_memvarlistlEstringcOallocatorlEstringgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   { list<string,allocator<string> > *p; p=(list<string,allocator<string> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<string,allocator<string> >::iterator */
static void G__setup_memvarlistlEstringcOallocatorlEstringgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator));
   { list<string,allocator<string> >::iterator *p; p=(list<string,allocator<string> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* list<string,allocator<string> >::reverse_iterator */
static void G__setup_memvarlistlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   { list<string,allocator<string> >::reverse_iterator *p; p=(list<string,allocator<string> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncallocatorlEintgR(void) {
   /* allocator<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__memfunc_setup("allocator<int>",1414,G__list_48_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<int>",1414,G__list_48_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 0, 1, 1, 1, 0, "u 'allocator<int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_48_0_3, 73, -1, G__defined_typename("allocator<int>::pointer"), 0, 1, 1, 1, 8, "i - 'allocator<int>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_48_0_4, 73, -1, G__defined_typename("allocator<int>::const_pointer"), 0, 1, 1, 1, 8, "i - 'allocator<int>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__list_48_0_5, 73, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<int>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__list_48_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'allocator<int>::pointer' 0 - __p h - 'allocator<int>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_48_0_7, 104, -1, G__defined_typename("allocator<int>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__list_48_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'allocator<int>::pointer' 0 - __p i - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__list_48_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'allocator<int>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<int>", 1540, G__list_48_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__list_48_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 1, 1, 1, 1, 0, "u 'allocator<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEintcOallocatorlEintgRsPgR(void) {
   /* list<int,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR));
   G__memfunc_setup("list<int,allocator<int> >",2387,G__list_49_0_1, 105, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__list_49_0_2, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__list_49_0_3, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__list_49_0_4, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__list_49_0_5, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__list_49_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__list_49_0_7, 104, -1, G__defined_typename("list<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_49_0_8, 104, -1, G__defined_typename("list<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__list_49_0_9, 105, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__list_49_0_10, 105, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__list_49_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_49_0_12, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - position i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_49_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - position I - - 0 - first "
"I - - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_49_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - position u 'list<int,allocator<int> >::iterator' - 0 - first "
"u 'list<int,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_49_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - position h - 'list<int,allocator<int> >::size_type' 0 - n "
"i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_front",1096,G__list_49_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__list_49_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_49_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'list<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_49_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'list<int,allocator<int> >::size_type' 0 - n i - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_49_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_49_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__list_49_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_front",983,G__list_49_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__list_49_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<int,allocator<int> >",2387,G__list_49_0_25, 105, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'list<int,allocator<int> >::size_type' 0 - n i - - 11 'int()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<int,allocator<int> >",2387,G__list_49_0_26, 105, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"I - - 10 - first I - - 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<int,allocator<int> >",2387,G__list_49_0_27, 105, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' 'list<int,allocator<int> >::const_iterator' 10 - first u 'list<int,allocator<int> >::iterator' 'list<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<int,allocator<int> >",2387,G__list_49_0_28, 105, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_49_0_29, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'list<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_49_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - position u 'list<int,allocator<int> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_49_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - position u 'list<int,allocator<int> >' - 1 - x "
"u 'list<int,allocator<int> >::iterator' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_49_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - position u 'list<int,allocator<int> >' - 1 - x "
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__list_49_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unique",663,G__list_49_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("merge",528,G__list_49_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverse",764,G__list_49_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sort",456,G__list_49_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~list<int,allocator<int> >", 2513, G__list_49_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEintcOallocatorlEintgRsPgRcLcLiterator(void) {
   /* list<int,allocator<int> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__list_50_0_1, 105, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__list_50_0_2, 105, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_50_0_3, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'list<int,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_50_0_4, 105, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_50_0_5, 73, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_50_0_6, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_50_0_7, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_50_0_8, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_50_0_9, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__list_50_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__list_50_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__list_50_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEintcOallocatorlEintgRsPgRcLcLreverse_iterator(void) {
   /* list<int,allocator<int> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__list_51_0_1, 105, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'list<int,allocator<int> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_51_0_2, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'list<int,allocator<int> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_51_0_3, 105, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_51_0_4, 73, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_51_0_5, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_51_0_6, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_51_0_7, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_51_0_8, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__list_51_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlElonggR(void) {
   /* allocator<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__memfunc_setup("allocator<long>",1515,G__list_52_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<long>",1515,G__list_52_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 0, 1, 1, 1, 0, "u 'allocator<long>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_52_0_3, 76, -1, G__defined_typename("allocator<long>::pointer"), 0, 1, 1, 1, 8, "l - 'allocator<long>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_52_0_4, 76, -1, G__defined_typename("allocator<long>::const_pointer"), 0, 1, 1, 1, 8, "l - 'allocator<long>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__list_52_0_5, 76, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<long>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__list_52_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - 'allocator<long>::pointer' 0 - __p h - 'allocator<long>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_52_0_7, 104, -1, G__defined_typename("allocator<long>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__list_52_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - 'allocator<long>::pointer' 0 - __p l - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__list_52_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "L - 'allocator<long>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<long>", 1641, G__list_52_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__list_52_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 1, 1, 1, 1, 0, "u 'allocator<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlElongcOallocatorlElonggRsPgR(void) {
   /* list<long,allocator<long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR));
   G__memfunc_setup("list<long,allocator<long> >",2589,G__list_53_0_1, 105, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__list_53_0_2, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__list_53_0_3, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__list_53_0_4, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__list_53_0_5, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__list_53_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__list_53_0_7, 104, -1, G__defined_typename("list<long,allocator<long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_53_0_8, 104, -1, G__defined_typename("list<long,allocator<long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__list_53_0_9, 108, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__list_53_0_10, 108, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__list_53_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<long,allocator<long> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_53_0_12, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - position l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_53_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - position L - - 0 - first "
"L - - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_53_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - position u 'list<long,allocator<long> >::iterator' - 0 - first "
"u 'list<long,allocator<long> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_53_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - position h - 'list<long,allocator<long> >::size_type' 0 - n "
"l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_front",1096,G__list_53_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__list_53_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_53_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'list<long,allocator<long> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_53_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'list<long,allocator<long> >::size_type' 0 - n l - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_53_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<long,allocator<long> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_53_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__list_53_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_front",983,G__list_53_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__list_53_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<long,allocator<long> >",2589,G__list_53_0_25, 105, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'list<long,allocator<long> >::size_type' 0 - n l - - 11 'long()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<long,allocator<long> >",2589,G__list_53_0_26, 105, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR), -1, 0, 2, 1, 1, 0, 
"L - - 10 - first L - - 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<long,allocator<long> >",2589,G__list_53_0_27, 105, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' 'list<long,allocator<long> >::const_iterator' 10 - first u 'list<long,allocator<long> >::iterator' 'list<long,allocator<long> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<long,allocator<long> >",2589,G__list_53_0_28, 105, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'list<long,allocator<long> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_53_0_29, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'list<long,allocator<long> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_53_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - position u 'list<long,allocator<long> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_53_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - position u 'list<long,allocator<long> >' - 1 - x "
"u 'list<long,allocator<long> >::iterator' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_53_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - position u 'list<long,allocator<long> >' - 1 - x "
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__list_53_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "l - - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unique",663,G__list_53_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("merge",528,G__list_53_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<long,allocator<long> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverse",764,G__list_53_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sort",456,G__list_53_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~list<long,allocator<long> >", 2715, G__list_53_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlElongcOallocatorlElonggRsPgRcLcLiterator(void) {
   /* list<long,allocator<long> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__list_54_0_1, 105, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__list_54_0_2, 105, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'list<long,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_54_0_3, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'list<long,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_54_0_4, 108, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_54_0_5, 76, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_54_0_6, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_54_0_7, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_54_0_8, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_54_0_9, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__list_54_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<long,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__list_54_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<long,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__list_54_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlElongcOallocatorlElonggRsPgRcLcLreverse_iterator(void) {
   /* list<long,allocator<long> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__list_55_0_1, 105, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'list<long,allocator<long> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_55_0_2, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'list<long,allocator<long> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_55_0_3, 108, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_55_0_4, 76, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_55_0_5, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_55_0_6, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_55_0_7, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_55_0_8, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__list_55_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEfloatgR(void) {
   /* allocator<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__memfunc_setup("allocator<float>",1617,G__list_56_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<float>",1617,G__list_56_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'allocator<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_56_0_3, 70, -1, G__defined_typename("allocator<float>::pointer"), 0, 1, 1, 1, 8, "f - 'allocator<float>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_56_0_4, 70, -1, G__defined_typename("allocator<float>::const_pointer"), 0, 1, 1, 1, 8, "f - 'allocator<float>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__list_56_0_5, 70, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<float>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__list_56_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'allocator<float>::pointer' 0 - __p h - 'allocator<float>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_56_0_7, 104, -1, G__defined_typename("allocator<float>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__list_56_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'allocator<float>::pointer' 0 - __p f - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__list_56_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'allocator<float>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<float>", 1743, G__list_56_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__list_56_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'allocator<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEfloatcOallocatorlEfloatgRsPgR(void) {
   /* list<float,allocator<float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR));
   G__memfunc_setup("list<float,allocator<float> >",2793,G__list_57_0_1, 105, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__list_57_0_2, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__list_57_0_3, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__list_57_0_4, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__list_57_0_5, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__list_57_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__list_57_0_7, 104, -1, G__defined_typename("list<float,allocator<float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_57_0_8, 104, -1, G__defined_typename("list<float,allocator<float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__list_57_0_9, 102, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__list_57_0_10, 102, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__list_57_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<float,allocator<float> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_57_0_12, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - position f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_57_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - position F - - 0 - first "
"F - - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_57_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - position u 'list<float,allocator<float> >::iterator' - 0 - first "
"u 'list<float,allocator<float> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_57_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - position h - 'list<float,allocator<float> >::size_type' 0 - n "
"f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_front",1096,G__list_57_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__list_57_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_57_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'list<float,allocator<float> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_57_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'list<float,allocator<float> >::size_type' 0 - n f - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_57_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<float,allocator<float> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_57_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__list_57_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_front",983,G__list_57_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__list_57_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<float,allocator<float> >",2793,G__list_57_0_25, 105, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'list<float,allocator<float> >::size_type' 0 - n f - - 11 'float()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<float,allocator<float> >",2793,G__list_57_0_26, 105, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR), -1, 0, 2, 1, 1, 0, 
"F - - 10 - first F - - 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<float,allocator<float> >",2793,G__list_57_0_27, 105, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' 'list<float,allocator<float> >::const_iterator' 10 - first u 'list<float,allocator<float> >::iterator' 'list<float,allocator<float> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<float,allocator<float> >",2793,G__list_57_0_28, 105, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR), -1, 0, 1, 1, 1, 0, "u 'list<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_57_0_29, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'list<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_57_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - position u 'list<float,allocator<float> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_57_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - position u 'list<float,allocator<float> >' - 1 - x "
"u 'list<float,allocator<float> >::iterator' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_57_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - position u 'list<float,allocator<float> >' - 1 - x "
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__list_57_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unique",663,G__list_57_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("merge",528,G__list_57_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<float,allocator<float> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverse",764,G__list_57_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sort",456,G__list_57_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~list<float,allocator<float> >", 2919, G__list_57_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEfloatcOallocatorlEfloatgRsPgRcLcLiterator(void) {
   /* list<float,allocator<float> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__list_58_0_1, 105, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__list_58_0_2, 105, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'list<float,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_58_0_3, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'list<float,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_58_0_4, 102, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_58_0_5, 70, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_58_0_6, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_58_0_7, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_58_0_8, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_58_0_9, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__list_58_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<float,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__list_58_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<float,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__list_58_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator(void) {
   /* list<float,allocator<float> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__list_59_0_1, 105, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'list<float,allocator<float> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_59_0_2, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'list<float,allocator<float> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_59_0_3, 102, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_59_0_4, 70, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_59_0_5, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_59_0_6, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_59_0_7, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_59_0_8, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__list_59_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEdoublegR(void) {
   /* allocator<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__memfunc_setup("allocator<double>",1718,G__list_60_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<double>",1718,G__list_60_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'allocator<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_60_0_3, 68, -1, G__defined_typename("allocator<double>::pointer"), 0, 1, 1, 1, 8, "d - 'allocator<double>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_60_0_4, 68, -1, G__defined_typename("allocator<double>::const_pointer"), 0, 1, 1, 1, 8, "d - 'allocator<double>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__list_60_0_5, 68, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<double>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__list_60_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'allocator<double>::pointer' 0 - __p h - 'allocator<double>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_60_0_7, 104, -1, G__defined_typename("allocator<double>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__list_60_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'allocator<double>::pointer' 0 - __p d - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__list_60_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'allocator<double>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<double>", 1844, G__list_60_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__list_60_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'allocator<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEdoublecOallocatorlEdoublegRsPgR(void) {
   /* list<double,allocator<double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR));
   G__memfunc_setup("list<double,allocator<double> >",2995,G__list_61_0_1, 105, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__list_61_0_2, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__list_61_0_3, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__list_61_0_4, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__list_61_0_5, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__list_61_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__list_61_0_7, 104, -1, G__defined_typename("list<double,allocator<double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_61_0_8, 104, -1, G__defined_typename("list<double,allocator<double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__list_61_0_9, 100, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__list_61_0_10, 100, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__list_61_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<double,allocator<double> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_61_0_12, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - position d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_61_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - position D - - 0 - first "
"D - - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_61_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - position u 'list<double,allocator<double> >::iterator' - 0 - first "
"u 'list<double,allocator<double> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_61_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - position h - 'list<double,allocator<double> >::size_type' 0 - n "
"d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_front",1096,G__list_61_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__list_61_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_61_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'list<double,allocator<double> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_61_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'list<double,allocator<double> >::size_type' 0 - n d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_61_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<double,allocator<double> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_61_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__list_61_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_front",983,G__list_61_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__list_61_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<double,allocator<double> >",2995,G__list_61_0_25, 105, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'list<double,allocator<double> >::size_type' 0 - n d - - 11 'double()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<double,allocator<double> >",2995,G__list_61_0_26, 105, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR), -1, 0, 2, 1, 1, 0, 
"D - - 10 - first D - - 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<double,allocator<double> >",2995,G__list_61_0_27, 105, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' 'list<double,allocator<double> >::const_iterator' 10 - first u 'list<double,allocator<double> >::iterator' 'list<double,allocator<double> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<double,allocator<double> >",2995,G__list_61_0_28, 105, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'list<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_61_0_29, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'list<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_61_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - position u 'list<double,allocator<double> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_61_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - position u 'list<double,allocator<double> >' - 1 - x "
"u 'list<double,allocator<double> >::iterator' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_61_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - position u 'list<double,allocator<double> >' - 1 - x "
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__list_61_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unique",663,G__list_61_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("merge",528,G__list_61_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<double,allocator<double> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverse",764,G__list_61_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sort",456,G__list_61_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~list<double,allocator<double> >", 3121, G__list_61_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEdoublecOallocatorlEdoublegRsPgRcLcLiterator(void) {
   /* list<double,allocator<double> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__list_62_0_1, 105, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__list_62_0_2, 105, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'list<double,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_62_0_3, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'list<double,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_62_0_4, 100, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_62_0_5, 68, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_62_0_6, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_62_0_7, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_62_0_8, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_62_0_9, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__list_62_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<double,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__list_62_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<double,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__list_62_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator(void) {
   /* list<double,allocator<double> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__list_63_0_1, 105, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'list<double,allocator<double> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_63_0_2, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'list<double,allocator<double> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_63_0_3, 100, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_63_0_4, 68, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_63_0_5, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_63_0_6, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_63_0_7, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_63_0_8, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__list_63_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEvoidmUgR(void) {
   /* allocator<void*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__memfunc_setup("allocator<void*>",1559,G__list_64_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<void*>",1559,G__list_64_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 0, 1, 1, 1, 0, "u 'allocator<void*>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_64_0_3, 89, -1, G__defined_typename("allocator<void*>::pointer"), 2, 1, 1, 1, 8, "Y - 'allocator<void*>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_64_0_4, 89, -1, G__defined_typename("allocator<void*>::const_pointer"), 2, 1, 1, 1, 8, "Y - 'allocator<void*>::const_reference' 40 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__list_64_0_5, 89, -1, -1, 2, 2, 1, 1, 0, 
"h - 'allocator<void*>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__list_64_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"Y - 'allocator<void*>::pointer' 2 - __p h - 'allocator<void*>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_64_0_7, 104, -1, G__defined_typename("allocator<void*>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__list_64_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"Y - 'allocator<void*>::pointer' 2 - __p Y - - 41 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__list_64_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "Y - 'allocator<void*>::pointer' 2 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<void*>", 1685, G__list_64_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__list_64_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 1, 1, 1, 1, 0, "u 'allocator<void*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEvoidmUcOallocatorlEvoidmUgRsPgR(void) {
   /* list<void*,allocator<void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR));
   G__memfunc_setup("list<void*,allocator<void*> >",2677,G__list_65_0_1, 105, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__list_65_0_2, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__list_65_0_3, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__list_65_0_4, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__list_65_0_5, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__list_65_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__list_65_0_7, 104, -1, G__defined_typename("list<void*,allocator<void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_65_0_8, 104, -1, G__defined_typename("list<void*,allocator<void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__list_65_0_9, 89, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__list_65_0_10, 89, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__list_65_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_65_0_12, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - position Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_65_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - position Y - - 2 - first "
"Y - - 2 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_65_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - position u 'list<void*,allocator<void*> >::iterator' - 0 - first "
"u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_65_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - position h - 'list<void*,allocator<void*> >::size_type' 0 - n "
"Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_front",1096,G__list_65_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__list_65_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_65_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'list<void*,allocator<void*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_65_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'list<void*,allocator<void*> >::size_type' 0 - n Y - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_65_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_65_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__list_65_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_front",983,G__list_65_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__list_65_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<void*,allocator<void*> >",2677,G__list_65_0_25, 105, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'list<void*,allocator<void*> >::size_type' 0 - n Y - - 41 '(void*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<void*,allocator<void*> >",2677,G__list_65_0_26, 105, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"Y - - 42 - first Y - - 42 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<void*,allocator<void*> >",2677,G__list_65_0_27, 105, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' 'list<void*,allocator<void*> >::const_iterator' 10 - first u 'list<void*,allocator<void*> >::iterator' 'list<void*,allocator<void*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<void*,allocator<void*> >",2677,G__list_65_0_28, 105, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_65_0_29, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_65_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - position u 'list<void*,allocator<void*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_65_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - position u 'list<void*,allocator<void*> >' - 1 - x "
"u 'list<void*,allocator<void*> >::iterator' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_65_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - position u 'list<void*,allocator<void*> >' - 1 - x "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__list_65_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "Y - - 41 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unique",663,G__list_65_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("merge",528,G__list_65_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverse",764,G__list_65_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sort",456,G__list_65_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~list<void*,allocator<void*> >", 2803, G__list_65_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator(void) {
   /* list<void*,allocator<void*> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__list_66_0_1, 105, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__list_66_0_2, 105, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_66_0_3, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_66_0_4, 89, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_66_0_5, 89, -1, -1, 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_66_0_6, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_66_0_7, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_66_0_8, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_66_0_9, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__list_66_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__list_66_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__list_66_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator(void) {
   /* list<void*,allocator<void*> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__list_67_0_1, 105, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_67_0_2, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'list<void*,allocator<void*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_67_0_3, 89, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_67_0_4, 89, -1, -1, 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_67_0_5, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_67_0_6, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_67_0_7, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_67_0_8, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__list_67_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEcharmUgR(void) {
   /* allocator<char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__memfunc_setup("allocator<char*>",1539,G__list_68_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<char*>",1539,G__list_68_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 0, 1, 1, 1, 0, "u 'allocator<char*>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_68_0_3, 67, -1, G__defined_typename("allocator<char*>::pointer"), 2, 1, 1, 1, 8, "C - 'allocator<char*>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_68_0_4, 67, -1, G__defined_typename("allocator<char*>::const_pointer"), 2, 1, 1, 1, 8, "C - 'allocator<char*>::const_reference' 40 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__list_68_0_5, 67, -1, -1, 2, 2, 1, 1, 0, 
"h - 'allocator<char*>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__list_68_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'allocator<char*>::pointer' 2 - __p h - 'allocator<char*>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_68_0_7, 104, -1, G__defined_typename("allocator<char*>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__list_68_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'allocator<char*>::pointer' 2 - __p C - - 41 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__list_68_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'allocator<char*>::pointer' 2 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<char*>", 1665, G__list_68_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__list_68_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 1, 1, 1, 1, 0, "u 'allocator<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEcharmUcOallocatorlEcharmUgRsPgR(void) {
   /* list<char*,allocator<char*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR));
   G__memfunc_setup("list<char*,allocator<char*> >",2637,G__list_69_0_1, 105, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__list_69_0_2, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__list_69_0_3, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__list_69_0_4, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__list_69_0_5, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__list_69_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__list_69_0_7, 104, -1, G__defined_typename("list<char*,allocator<char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_69_0_8, 104, -1, G__defined_typename("list<char*,allocator<char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__list_69_0_9, 67, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__list_69_0_10, 67, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__list_69_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_69_0_12, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - position C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_69_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - position C - - 2 - first "
"C - - 2 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_69_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - position u 'list<char*,allocator<char*> >::iterator' - 0 - first "
"u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_69_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - position h - 'list<char*,allocator<char*> >::size_type' 0 - n "
"C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_front",1096,G__list_69_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__list_69_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_69_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'list<char*,allocator<char*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_69_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'list<char*,allocator<char*> >::size_type' 0 - n C - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_69_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_69_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__list_69_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_front",983,G__list_69_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__list_69_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<char*,allocator<char*> >",2637,G__list_69_0_25, 105, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'list<char*,allocator<char*> >::size_type' 0 - n C - - 41 '(char*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<char*,allocator<char*> >",2637,G__list_69_0_26, 105, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 42 - first C - - 42 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<char*,allocator<char*> >",2637,G__list_69_0_27, 105, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' 'list<char*,allocator<char*> >::const_iterator' 10 - first u 'list<char*,allocator<char*> >::iterator' 'list<char*,allocator<char*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<char*,allocator<char*> >",2637,G__list_69_0_28, 105, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_69_0_29, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_69_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - position u 'list<char*,allocator<char*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_69_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - position u 'list<char*,allocator<char*> >' - 1 - x "
"u 'list<char*,allocator<char*> >::iterator' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_69_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - position u 'list<char*,allocator<char*> >' - 1 - x "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__list_69_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 41 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unique",663,G__list_69_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("merge",528,G__list_69_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverse",764,G__list_69_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sort",456,G__list_69_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~list<char*,allocator<char*> >", 2763, G__list_69_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator(void) {
   /* list<char*,allocator<char*> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__list_70_0_1, 105, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__list_70_0_2, 105, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_70_0_3, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_70_0_4, 67, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_70_0_5, 67, -1, -1, 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_70_0_6, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_70_0_7, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_70_0_8, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_70_0_9, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__list_70_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__list_70_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__list_70_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator(void) {
   /* list<char*,allocator<char*> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__list_71_0_1, 105, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_71_0_2, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'list<char*,allocator<char*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_71_0_3, 67, -1, -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_71_0_4, 67, -1, -1, 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_71_0_5, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_71_0_6, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_71_0_7, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_71_0_8, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__list_71_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEstringgR(void) {
   /* allocator<string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__memfunc_setup("allocator<string>",1746,G__list_72_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<string>",1746,G__list_72_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 0, 1, 1, 1, 0, "u 'allocator<string>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_72_0_3, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("allocator<string>::pointer"), 0, 1, 1, 1, 8, "u 'string' 'allocator<string>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__list_72_0_4, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("allocator<string>::const_pointer"), 0, 1, 1, 1, 8, "u 'string' 'allocator<string>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__list_72_0_5, 85, G__get_linked_tagnum(&G__LN_string), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<string>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__list_72_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'string' 'allocator<string>::pointer' 0 - __p h - 'allocator<string>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_72_0_7, 104, -1, G__defined_typename("allocator<string>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__list_72_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'string' 'allocator<string>::pointer' 0 - __p u 'string' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__list_72_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'string' 'allocator<string>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<string>", 1872, G__list_72_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__list_72_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 1, 1, 1, 1, 0, "u 'allocator<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEstringcOallocatorlEstringgRsPgR(void) {
   /* list<string,allocator<string> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR));
   G__memfunc_setup("list<string,allocator<string> >",3051,G__list_73_0_1, 105, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__list_73_0_2, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__list_73_0_3, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__list_73_0_4, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__list_73_0_5, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__list_73_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__list_73_0_7, 104, -1, G__defined_typename("list<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__list_73_0_8, 104, -1, G__defined_typename("list<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__list_73_0_9, 117, G__get_linked_tagnum(&G__LN_string), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__list_73_0_10, 117, G__get_linked_tagnum(&G__LN_string), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__list_73_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<string,allocator<string> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_73_0_12, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - position u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_73_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - position U 'string' - 0 - first "
"U 'string' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_73_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - position u 'list<string,allocator<string> >::iterator' - 0 - first "
"u 'list<string,allocator<string> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__list_73_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - position h - 'list<string,allocator<string> >::size_type' 0 - n "
"u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_front",1096,G__list_73_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__list_73_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_73_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'list<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__list_73_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'list<string,allocator<string> >::size_type' 0 - n u 'string' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_73_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<string,allocator<string> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__list_73_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__list_73_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_front",983,G__list_73_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__list_73_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<string,allocator<string> >",3051,G__list_73_0_25, 105, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'list<string,allocator<string> >::size_type' 0 - n u 'string' - 11 'string()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<string,allocator<string> >",3051,G__list_73_0_26, 105, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"U 'string' - 10 - first U 'string' - 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<string,allocator<string> >",3051,G__list_73_0_27, 105, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' 'list<string,allocator<string> >::const_iterator' 10 - first u 'list<string,allocator<string> >::iterator' 'list<string,allocator<string> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list<string,allocator<string> >",3051,G__list_73_0_28, 105, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR), -1, 0, 1, 1, 1, 0, "u 'list<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_73_0_29, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR), -1, 1, 1, 1, 1, 0, "u 'list<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_73_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - position u 'list<string,allocator<string> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_73_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - position u 'list<string,allocator<string> >' - 1 - x "
"u 'list<string,allocator<string> >::iterator' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splice",640,G__list_73_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - position u 'list<string,allocator<string> >' - 1 - x "
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__list_73_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unique",663,G__list_73_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("merge",528,G__list_73_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<string,allocator<string> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverse",764,G__list_73_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sort",456,G__list_73_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~list<string,allocator<string> >", 3177, G__list_73_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEstringcOallocatorlEstringgRsPgRcLcLiterator(void) {
   /* list<string,allocator<string> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__list_74_0_1, 105, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__list_74_0_2, 105, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'list<string,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_74_0_3, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'list<string,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_74_0_4, 117, G__get_linked_tagnum(&G__LN_string), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_74_0_5, 85, G__get_linked_tagnum(&G__LN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_74_0_6, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_74_0_7, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_74_0_8, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_74_0_9, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__list_74_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<string,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__list_74_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'list<string,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__list_74_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclistlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator(void) {
   /* list<string,allocator<string> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__list_75_0_1, 105, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'list<string,allocator<string> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__list_75_0_2, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'list<string,allocator<string> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__list_75_0_3, 117, G__get_linked_tagnum(&G__LN_string), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__list_75_0_4, 85, G__get_linked_tagnum(&G__LN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_75_0_5, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__list_75_0_6, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_75_0_7, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__list_75_0_8, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__list_75_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC__=3",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC_MINOR__=4",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__LIST_DLL=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"INCLUDE_CINTDICTVERSION=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__CINTDICTVERSION=20090608",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global() {
  G__cpp_setup_global0();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
   G__memfunc_setup("operator==", 998, G__list__0_112, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<int,allocator<int> >::reverse_iterator' - 11 - x u 'list<int,allocator<int> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_113, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<int,allocator<int> >::reverse_iterator' - 11 - x u 'list<int,allocator<int> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_114, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >' - 11 - x u 'list<int,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__list__0_115, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >' - 11 - x u 'list<int,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_116, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >' - 11 - x u 'list<int,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__list__0_117, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >' - 11 - x u 'list<int,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__list__0_118, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >' - 11 - x u 'list<int,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__list__0_119, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >' - 11 - x u 'list<int,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__list__0_120, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_end", 823, G__list__0_121, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_first_of", 1372, G__list__0_122, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("adjacent_find", 1338, G__list__0_123, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("count", 553, G__list__0_124, 108, -1, G__defined_typename("difference_type"), 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("equal", 536, G__list__0_125, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__list__0_126, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search_n", 835, G__list__0_127, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"h - 'size_type' 0 - count i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy", 443, G__list__0_128, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy_backward", 1369, G__list__0_129, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap", 443, G__list__0_130, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 1 - a i - - 1 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap_ranges", 1178, G__list__0_131, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("iter_swap", 974, G__list__0_132, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - a u 'list<int,allocator<int> >::iterator' - 0 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace", 732, G__list__0_133, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"i - - 11 - old_value i - - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace_copy", 1270, G__list__0_134, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"u 'list<int,allocator<int> >::iterator' - 0 - result i - - 11 - old_value "
"i - - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill", 423, G__list__0_135, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill_n", 628, G__list__0_136, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first h - 'size_type' 0 - n "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove", 654, G__list__0_137, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove_copy", 1192, G__list__0_138, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"u 'list<int,allocator<int> >::iterator' - 0 - result i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique", 663, G__list__0_139, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique_copy", 1201, G__list__0_140, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse", 764, G__list__0_141, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse_copy", 1302, G__list__0_142, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate", 655, G__list__0_143, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - mid "
"u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate_copy", 1193, G__list__0_144, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - mid "
"u 'list<int,allocator<int> >::iterator' - 0 - last u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lower_bound", 1184, G__list__0_145, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("upper_bound", 1187, G__list__0_146, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("binary_search", 1370, G__list__0_147, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("merge", 528, G__list__0_148, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2 "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("inplace_merge", 1355, G__list__0_149, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - middle "
"u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("includes", 855, G__list__0_150, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_union", 980, G__list__0_151, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2 "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_intersection", 1730, G__list__0_152, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2 "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_difference", 1462, G__list__0_153, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2 "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_symmetric_difference", 2546, G__list__0_154, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2 "
"u 'list<int,allocator<int> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min", 324, G__list__0_155, 105, -1, -1, 1, 2, 1, 1, 1, 
"i - - 11 - a i - - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max", 326, G__list__0_156, 105, -1, -1, 1, 2, 1, 1, 1, 
"i - - 11 - a i - - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min_element", 1165, G__list__0_157, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max_element", 1167, G__list__0_158, 117, G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lexicographical_compare", 2421, G__list__0_159, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first1 u 'list<int,allocator<int> >::iterator' - 0 - last1 "
"u 'list<int,allocator<int> >::iterator' - 0 - first2 u 'list<int,allocator<int> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("next_permutation", 1750, G__list__0_160, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("prev_permutation", 1748, G__list__0_161, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<int,allocator<int> >::iterator' - 0 - first u 'list<int,allocator<int> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_162, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<long,allocator<long> >::reverse_iterator' - 11 - x u 'list<long,allocator<long> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_163, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<long,allocator<long> >::reverse_iterator' - 11 - x u 'list<long,allocator<long> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_164, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >' - 11 - x u 'list<long,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__list__0_165, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >' - 11 - x u 'list<long,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_166, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >' - 11 - x u 'list<long,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__list__0_167, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >' - 11 - x u 'list<long,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__list__0_168, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >' - 11 - x u 'list<long,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__list__0_169, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >' - 11 - x u 'list<long,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__list__0_170, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_end", 823, G__list__0_171, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_first_of", 1372, G__list__0_172, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("adjacent_find", 1338, G__list__0_173, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("count", 553, G__list__0_174, 108, -1, G__defined_typename("difference_type"), 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("equal", 536, G__list__0_175, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__list__0_176, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search_n", 835, G__list__0_177, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"h - 'size_type' 0 - count l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy", 443, G__list__0_178, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy_backward", 1369, G__list__0_179, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap", 443, G__list__0_180, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - - 1 - a l - - 1 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap_ranges", 1178, G__list__0_181, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("iter_swap", 974, G__list__0_182, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - a u 'list<long,allocator<long> >::iterator' - 0 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace", 732, G__list__0_183, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"l - - 11 - old_value l - - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace_copy", 1270, G__list__0_184, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"u 'list<long,allocator<long> >::iterator' - 0 - result l - - 11 - old_value "
"l - - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill", 423, G__list__0_185, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill_n", 628, G__list__0_186, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first h - 'size_type' 0 - n "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove", 654, G__list__0_187, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove_copy", 1192, G__list__0_188, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"u 'list<long,allocator<long> >::iterator' - 0 - result l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique", 663, G__list__0_189, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique_copy", 1201, G__list__0_190, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse", 764, G__list__0_191, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse_copy", 1302, G__list__0_192, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate", 655, G__list__0_193, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - mid "
"u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate_copy", 1193, G__list__0_194, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - mid "
"u 'list<long,allocator<long> >::iterator' - 0 - last u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lower_bound", 1184, G__list__0_195, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("upper_bound", 1187, G__list__0_196, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("binary_search", 1370, G__list__0_197, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("merge", 528, G__list__0_198, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2 "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("inplace_merge", 1355, G__list__0_199, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - middle "
"u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("includes", 855, G__list__0_200, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_union", 980, G__list__0_201, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2 "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_intersection", 1730, G__list__0_202, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2 "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func2() {
   G__memfunc_setup("set_difference", 1462, G__list__0_203, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2 "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_symmetric_difference", 2546, G__list__0_204, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2 "
"u 'list<long,allocator<long> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min", 324, G__list__0_205, 108, -1, -1, 1, 2, 1, 1, 1, 
"l - - 11 - a l - - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max", 326, G__list__0_206, 108, -1, -1, 1, 2, 1, 1, 1, 
"l - - 11 - a l - - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min_element", 1165, G__list__0_207, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max_element", 1167, G__list__0_208, 117, G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lexicographical_compare", 2421, G__list__0_209, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first1 u 'list<long,allocator<long> >::iterator' - 0 - last1 "
"u 'list<long,allocator<long> >::iterator' - 0 - first2 u 'list<long,allocator<long> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("next_permutation", 1750, G__list__0_210, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("prev_permutation", 1748, G__list__0_211, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<long,allocator<long> >::iterator' - 0 - first u 'list<long,allocator<long> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_212, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<float,allocator<float> >::reverse_iterator' - 11 - x u 'list<float,allocator<float> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_213, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<float,allocator<float> >::reverse_iterator' - 11 - x u 'list<float,allocator<float> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_214, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >' - 11 - x u 'list<float,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__list__0_215, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >' - 11 - x u 'list<float,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_216, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >' - 11 - x u 'list<float,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__list__0_217, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >' - 11 - x u 'list<float,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__list__0_218, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >' - 11 - x u 'list<float,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__list__0_219, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >' - 11 - x u 'list<float,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__list__0_220, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_end", 823, G__list__0_221, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_first_of", 1372, G__list__0_222, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("adjacent_find", 1338, G__list__0_223, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("count", 553, G__list__0_224, 108, -1, G__defined_typename("difference_type"), 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("equal", 536, G__list__0_225, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__list__0_226, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search_n", 835, G__list__0_227, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"h - 'size_type' 0 - count f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy", 443, G__list__0_228, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy_backward", 1369, G__list__0_229, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap", 443, G__list__0_230, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 1 - a f - - 1 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap_ranges", 1178, G__list__0_231, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("iter_swap", 974, G__list__0_232, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - a u 'list<float,allocator<float> >::iterator' - 0 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace", 732, G__list__0_233, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"f - - 11 - old_value f - - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace_copy", 1270, G__list__0_234, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"u 'list<float,allocator<float> >::iterator' - 0 - result f - - 11 - old_value "
"f - - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill", 423, G__list__0_235, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill_n", 628, G__list__0_236, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first h - 'size_type' 0 - n "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove", 654, G__list__0_237, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove_copy", 1192, G__list__0_238, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"u 'list<float,allocator<float> >::iterator' - 0 - result f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique", 663, G__list__0_239, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique_copy", 1201, G__list__0_240, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse", 764, G__list__0_241, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse_copy", 1302, G__list__0_242, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate", 655, G__list__0_243, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - mid "
"u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate_copy", 1193, G__list__0_244, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - mid "
"u 'list<float,allocator<float> >::iterator' - 0 - last u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lower_bound", 1184, G__list__0_245, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("upper_bound", 1187, G__list__0_246, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("binary_search", 1370, G__list__0_247, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("merge", 528, G__list__0_248, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2 "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("inplace_merge", 1355, G__list__0_249, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - middle "
"u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("includes", 855, G__list__0_250, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_union", 980, G__list__0_251, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2 "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_intersection", 1730, G__list__0_252, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2 "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_difference", 1462, G__list__0_253, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2 "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_symmetric_difference", 2546, G__list__0_254, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2 "
"u 'list<float,allocator<float> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min", 324, G__list__0_255, 102, -1, -1, 1, 2, 1, 1, 1, 
"f - - 11 - a f - - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max", 326, G__list__0_256, 102, -1, -1, 1, 2, 1, 1, 1, 
"f - - 11 - a f - - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min_element", 1165, G__list__0_257, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max_element", 1167, G__list__0_258, 117, G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lexicographical_compare", 2421, G__list__0_259, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first1 u 'list<float,allocator<float> >::iterator' - 0 - last1 "
"u 'list<float,allocator<float> >::iterator' - 0 - first2 u 'list<float,allocator<float> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("next_permutation", 1750, G__list__0_260, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("prev_permutation", 1748, G__list__0_261, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<float,allocator<float> >::iterator' - 0 - first u 'list<float,allocator<float> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_262, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<double,allocator<double> >::reverse_iterator' - 11 - x u 'list<double,allocator<double> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_263, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<double,allocator<double> >::reverse_iterator' - 11 - x u 'list<double,allocator<double> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_264, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >' - 11 - x u 'list<double,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__list__0_265, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >' - 11 - x u 'list<double,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_266, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >' - 11 - x u 'list<double,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__list__0_267, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >' - 11 - x u 'list<double,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__list__0_268, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >' - 11 - x u 'list<double,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__list__0_269, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >' - 11 - x u 'list<double,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__list__0_270, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_end", 823, G__list__0_271, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_first_of", 1372, G__list__0_272, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("adjacent_find", 1338, G__list__0_273, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("count", 553, G__list__0_274, 108, -1, G__defined_typename("difference_type"), 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("equal", 536, G__list__0_275, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__list__0_276, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search_n", 835, G__list__0_277, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"h - 'size_type' 0 - count d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy", 443, G__list__0_278, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy_backward", 1369, G__list__0_279, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap", 443, G__list__0_280, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 1 - a d - - 1 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap_ranges", 1178, G__list__0_281, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("iter_swap", 974, G__list__0_282, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - a u 'list<double,allocator<double> >::iterator' - 0 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace", 732, G__list__0_283, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"d - - 11 - old_value d - - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace_copy", 1270, G__list__0_284, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"u 'list<double,allocator<double> >::iterator' - 0 - result d - - 11 - old_value "
"d - - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill", 423, G__list__0_285, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill_n", 628, G__list__0_286, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first h - 'size_type' 0 - n "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove", 654, G__list__0_287, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove_copy", 1192, G__list__0_288, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"u 'list<double,allocator<double> >::iterator' - 0 - result d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique", 663, G__list__0_289, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique_copy", 1201, G__list__0_290, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse", 764, G__list__0_291, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse_copy", 1302, G__list__0_292, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate", 655, G__list__0_293, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - mid "
"u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate_copy", 1193, G__list__0_294, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - mid "
"u 'list<double,allocator<double> >::iterator' - 0 - last u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lower_bound", 1184, G__list__0_295, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("upper_bound", 1187, G__list__0_296, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("binary_search", 1370, G__list__0_297, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("merge", 528, G__list__0_298, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2 "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("inplace_merge", 1355, G__list__0_299, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - middle "
"u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("includes", 855, G__list__0_300, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_union", 980, G__list__0_301, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2 "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_intersection", 1730, G__list__0_302, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2 "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_difference", 1462, G__list__0_303, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2 "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_symmetric_difference", 2546, G__list__0_304, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2 "
"u 'list<double,allocator<double> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func3() {
   G__memfunc_setup("min", 324, G__list__0_305, 100, -1, -1, 1, 2, 1, 1, 1, 
"d - - 11 - a d - - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max", 326, G__list__0_306, 100, -1, -1, 1, 2, 1, 1, 1, 
"d - - 11 - a d - - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min_element", 1165, G__list__0_307, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max_element", 1167, G__list__0_308, 117, G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lexicographical_compare", 2421, G__list__0_309, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first1 u 'list<double,allocator<double> >::iterator' - 0 - last1 "
"u 'list<double,allocator<double> >::iterator' - 0 - first2 u 'list<double,allocator<double> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("next_permutation", 1750, G__list__0_310, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("prev_permutation", 1748, G__list__0_311, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<double,allocator<double> >::iterator' - 0 - first u 'list<double,allocator<double> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_312, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<void*,allocator<void*> >::reverse_iterator' - 11 - x u 'list<void*,allocator<void*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_313, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<void*,allocator<void*> >::reverse_iterator' - 11 - x u 'list<void*,allocator<void*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_314, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >' - 11 - x u 'list<void*,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__list__0_315, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >' - 11 - x u 'list<void*,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_316, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >' - 11 - x u 'list<void*,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__list__0_317, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >' - 11 - x u 'list<void*,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__list__0_318, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >' - 11 - x u 'list<void*,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__list__0_319, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >' - 11 - x u 'list<void*,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__list__0_320, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_end", 823, G__list__0_321, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_first_of", 1372, G__list__0_322, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("adjacent_find", 1338, G__list__0_323, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("count", 553, G__list__0_324, 108, -1, G__defined_typename("difference_type"), 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("equal", 536, G__list__0_325, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__list__0_326, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search_n", 835, G__list__0_327, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"h - 'size_type' 0 - count Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy", 443, G__list__0_328, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy_backward", 1369, G__list__0_329, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap", 443, G__list__0_330, 121, -1, -1, 0, 2, 1, 1, 0, 
"Y - - 1 - a Y - - 1 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap_ranges", 1178, G__list__0_331, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("iter_swap", 974, G__list__0_332, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - a u 'list<void*,allocator<void*> >::iterator' - 0 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace", 732, G__list__0_333, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - old_value Y - - 41 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace_copy", 1270, G__list__0_334, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result Y - - 41 - old_value "
"Y - - 41 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill", 423, G__list__0_335, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill_n", 628, G__list__0_336, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first h - 'size_type' 0 - n "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove", 654, G__list__0_337, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove_copy", 1192, G__list__0_338, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique", 663, G__list__0_339, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique_copy", 1201, G__list__0_340, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse", 764, G__list__0_341, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse_copy", 1302, G__list__0_342, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate", 655, G__list__0_343, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - mid "
"u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate_copy", 1193, G__list__0_344, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - mid "
"u 'list<void*,allocator<void*> >::iterator' - 0 - last u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lower_bound", 1184, G__list__0_345, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("upper_bound", 1187, G__list__0_346, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("binary_search", 1370, G__list__0_347, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("merge", 528, G__list__0_348, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("inplace_merge", 1355, G__list__0_349, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - middle "
"u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("includes", 855, G__list__0_350, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_union", 980, G__list__0_351, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_intersection", 1730, G__list__0_352, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_difference", 1462, G__list__0_353, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_symmetric_difference", 2546, G__list__0_354, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min", 324, G__list__0_355, 89, -1, -1, 1, 2, 1, 1, 4, 
"Y - - 41 - a Y - - 41 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max", 326, G__list__0_356, 89, -1, -1, 1, 2, 1, 1, 4, 
"Y - - 41 - a Y - - 41 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min_element", 1165, G__list__0_357, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max_element", 1167, G__list__0_358, 117, G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lexicographical_compare", 2421, G__list__0_359, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first1 u 'list<void*,allocator<void*> >::iterator' - 0 - last1 "
"u 'list<void*,allocator<void*> >::iterator' - 0 - first2 u 'list<void*,allocator<void*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("next_permutation", 1750, G__list__0_360, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("prev_permutation", 1748, G__list__0_361, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<void*,allocator<void*> >::iterator' - 0 - first u 'list<void*,allocator<void*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_362, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<char*,allocator<char*> >::reverse_iterator' - 11 - x u 'list<char*,allocator<char*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_363, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<char*,allocator<char*> >::reverse_iterator' - 11 - x u 'list<char*,allocator<char*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_364, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >' - 11 - x u 'list<char*,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__list__0_365, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >' - 11 - x u 'list<char*,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_366, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >' - 11 - x u 'list<char*,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__list__0_367, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >' - 11 - x u 'list<char*,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__list__0_368, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >' - 11 - x u 'list<char*,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__list__0_369, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >' - 11 - x u 'list<char*,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__list__0_370, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_end", 823, G__list__0_371, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_first_of", 1372, G__list__0_372, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("adjacent_find", 1338, G__list__0_373, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("count", 553, G__list__0_374, 108, -1, G__defined_typename("difference_type"), 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("equal", 536, G__list__0_375, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__list__0_376, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search_n", 835, G__list__0_377, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"h - 'size_type' 0 - count C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy", 443, G__list__0_378, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy_backward", 1369, G__list__0_379, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap", 443, G__list__0_380, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 1 - a C - - 1 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap_ranges", 1178, G__list__0_381, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("iter_swap", 974, G__list__0_382, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - a u 'list<char*,allocator<char*> >::iterator' - 0 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace", 732, G__list__0_383, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - old_value C - - 41 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace_copy", 1270, G__list__0_384, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result C - - 41 - old_value "
"C - - 41 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill", 423, G__list__0_385, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill_n", 628, G__list__0_386, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first h - 'size_type' 0 - n "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove", 654, G__list__0_387, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove_copy", 1192, G__list__0_388, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique", 663, G__list__0_389, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique_copy", 1201, G__list__0_390, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse", 764, G__list__0_391, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse_copy", 1302, G__list__0_392, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate", 655, G__list__0_393, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - mid "
"u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate_copy", 1193, G__list__0_394, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - mid "
"u 'list<char*,allocator<char*> >::iterator' - 0 - last u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lower_bound", 1184, G__list__0_395, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("upper_bound", 1187, G__list__0_396, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("binary_search", 1370, G__list__0_397, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("merge", 528, G__list__0_398, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("inplace_merge", 1355, G__list__0_399, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - middle "
"u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("includes", 855, G__list__0_400, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_union", 980, G__list__0_401, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_intersection", 1730, G__list__0_402, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_difference", 1462, G__list__0_403, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_symmetric_difference", 2546, G__list__0_404, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min", 324, G__list__0_405, 67, -1, -1, 1, 2, 1, 1, 4, 
"C - - 41 - a C - - 41 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max", 326, G__list__0_406, 67, -1, -1, 1, 2, 1, 1, 4, 
"C - - 41 - a C - - 41 - b", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func4() {
   G__memfunc_setup("min_element", 1165, G__list__0_407, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max_element", 1167, G__list__0_408, 117, G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lexicographical_compare", 2421, G__list__0_409, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first1 u 'list<char*,allocator<char*> >::iterator' - 0 - last1 "
"u 'list<char*,allocator<char*> >::iterator' - 0 - first2 u 'list<char*,allocator<char*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("next_permutation", 1750, G__list__0_410, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("prev_permutation", 1748, G__list__0_411, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<char*,allocator<char*> >::iterator' - 0 - first u 'list<char*,allocator<char*> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_412, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<string,allocator<string> >::reverse_iterator' - 11 - x u 'list<string,allocator<string> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_413, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'list<string,allocator<string> >::reverse_iterator' - 11 - x u 'list<string,allocator<string> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__list__0_414, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >' - 11 - x u 'list<string,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__list__0_415, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >' - 11 - x u 'list<string,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__list__0_416, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >' - 11 - x u 'list<string,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__list__0_417, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >' - 11 - x u 'list<string,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__list__0_418, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >' - 11 - x u 'list<string,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__list__0_419, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >' - 11 - x u 'list<string,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__list__0_420, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_end", 823, G__list__0_421, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find_first_of", 1372, G__list__0_422, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("adjacent_find", 1338, G__list__0_423, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("count", 553, G__list__0_424, 108, -1, G__defined_typename("difference_type"), 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("equal", 536, G__list__0_425, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__list__0_426, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search_n", 835, G__list__0_427, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"h - 'size_type' 0 - count u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy", 443, G__list__0_428, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("copy_backward", 1369, G__list__0_429, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("swap_ranges", 1178, G__list__0_430, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("iter_swap", 974, G__list__0_431, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - a u 'list<string,allocator<string> >::iterator' - 0 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace", 732, G__list__0_432, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - old_value u 'string' - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("replace_copy", 1270, G__list__0_433, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'list<string,allocator<string> >::iterator' - 0 - result u 'string' - 11 - old_value "
"u 'string' - 11 - new_value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill", 423, G__list__0_434, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fill_n", 628, G__list__0_435, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first h - 'size_type' 0 - n "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove", 654, G__list__0_436, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("remove_copy", 1192, G__list__0_437, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'list<string,allocator<string> >::iterator' - 0 - result u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique", 663, G__list__0_438, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("unique_copy", 1201, G__list__0_439, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse", 764, G__list__0_440, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("reverse_copy", 1302, G__list__0_441, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate", 655, G__list__0_442, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - mid "
"u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("rotate_copy", 1193, G__list__0_443, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - mid "
"u 'list<string,allocator<string> >::iterator' - 0 - last u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lower_bound", 1184, G__list__0_444, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("upper_bound", 1187, G__list__0_445, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("binary_search", 1370, G__list__0_446, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("merge", 528, G__list__0_447, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2 "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("inplace_merge", 1355, G__list__0_448, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - middle "
"u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("includes", 855, G__list__0_449, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_union", 980, G__list__0_450, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2 "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_intersection", 1730, G__list__0_451, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2 "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_difference", 1462, G__list__0_452, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2 "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_symmetric_difference", 2546, G__list__0_453, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 5, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2 "
"u 'list<string,allocator<string> >::iterator' - 0 - result", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min", 324, G__list__0_454, 117, G__get_linked_tagnum(&G__LN_string), -1, 1, 2, 1, 1, 1, 
"u 'string' - 11 - a u 'string' - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max", 326, G__list__0_455, 117, G__get_linked_tagnum(&G__LN_string), -1, 1, 2, 1, 1, 1, 
"u 'string' - 11 - a u 'string' - 11 - b", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("min_element", 1165, G__list__0_456, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("max_element", 1167, G__list__0_457, 117, G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("lexicographical_compare", 2421, G__list__0_458, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first1 u 'list<string,allocator<string> >::iterator' - 0 - last1 "
"u 'list<string,allocator<string> >::iterator' - 0 - first2 u 'list<string,allocator<string> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("next_permutation", 1750, G__list__0_459, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("prev_permutation", 1748, G__list__0_460, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'list<string,allocator<string> >::iterator' - 0 - first u 'list<string,allocator<string> >::iterator' - 0 - last", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LN_string = { "string" , 99 , -1 };
G__linked_taginfo G__LN_allocatorlEintgR = { "allocator<int>" , 99 , -1 };
G__linked_taginfo G__LN_listlEintcOallocatorlEintgRsPgR = { "list<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator = { "list<int,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator = { "list<int,allocator<int> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_allocatorlElonggR = { "allocator<long>" , 99 , -1 };
G__linked_taginfo G__LN_listlElongcOallocatorlElonggRsPgR = { "list<long,allocator<long> >" , 99 , -1 };
G__linked_taginfo G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator = { "list<long,allocator<long> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator = { "list<long,allocator<long> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_allocatorlEfloatgR = { "allocator<float>" , 99 , -1 };
G__linked_taginfo G__LN_listlEfloatcOallocatorlEfloatgRsPgR = { "list<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator = { "list<float,allocator<float> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator = { "list<float,allocator<float> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_allocatorlEdoublegR = { "allocator<double>" , 99 , -1 };
G__linked_taginfo G__LN_listlEdoublecOallocatorlEdoublegRsPgR = { "list<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator = { "list<double,allocator<double> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator = { "list<double,allocator<double> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_allocatorlEvoidmUgR = { "allocator<void*>" , 99 , -1 };
G__linked_taginfo G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR = { "list<void*,allocator<void*> >" , 99 , -1 };
G__linked_taginfo G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator = { "list<void*,allocator<void*> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator = { "list<void*,allocator<void*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_allocatorlEcharmUgR = { "allocator<char*>" , 99 , -1 };
G__linked_taginfo G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR = { "list<char*,allocator<char*> >" , 99 , -1 };
G__linked_taginfo G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator = { "list<char*,allocator<char*> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator = { "list<char*,allocator<char*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_allocatorlEstringgR = { "allocator<string>" , 99 , -1 };
G__linked_taginfo G__LN_listlEstringcOallocatorlEstringgRsPgR = { "list<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator = { "list<string,allocator<string> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator = { "list<string,allocator<string> >::reverse_iterator" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable() {
  G__LN_string.tagnum = -1 ;
  G__LN_allocatorlEintgR.tagnum = -1 ;
  G__LN_listlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_allocatorlElonggR.tagnum = -1 ;
  G__LN_listlElongcOallocatorlElonggRsPgR.tagnum = -1 ;
  G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_allocatorlEfloatgR.tagnum = -1 ;
  G__LN_listlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_allocatorlEdoublegR.tagnum = -1 ;
  G__LN_listlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_allocatorlEvoidmUgR.tagnum = -1 ;
  G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR.tagnum = -1 ;
  G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_allocatorlEcharmUgR.tagnum = -1 ;
  G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR.tagnum = -1 ;
  G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_allocatorlEstringgR.tagnum = -1 ;
  G__LN_listlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__LN_string);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR),sizeof(allocator<int>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEintgR,G__setup_memfuncallocatorlEintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgR),sizeof(list<int,allocator<int> >),-1,36608,(char*)NULL,G__setup_memvarlistlEintcOallocatorlEintgRsPgR,G__setup_memfunclistlEintcOallocatorlEintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLiterator),sizeof(list<int,allocator<int> >::iterator),-1,2816,(char*)NULL,G__setup_memvarlistlEintcOallocatorlEintgRsPgRcLcLiterator,G__setup_memfunclistlEintcOallocatorlEintgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEintcOallocatorlEintgRsPgRcLcLreverse_iterator),sizeof(list<int,allocator<int> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarlistlEintcOallocatorlEintgRsPgRcLcLreverse_iterator,G__setup_memfunclistlEintcOallocatorlEintgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR),sizeof(allocator<long>),-1,1792,(char*)NULL,G__setup_memvarallocatorlElonggR,G__setup_memfuncallocatorlElonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgR),sizeof(list<long,allocator<long> >),-1,36608,(char*)NULL,G__setup_memvarlistlElongcOallocatorlElonggRsPgR,G__setup_memfunclistlElongcOallocatorlElonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLiterator),sizeof(list<long,allocator<long> >::iterator),-1,2816,(char*)NULL,G__setup_memvarlistlElongcOallocatorlElonggRsPgRcLcLiterator,G__setup_memfunclistlElongcOallocatorlElonggRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlElongcOallocatorlElonggRsPgRcLcLreverse_iterator),sizeof(list<long,allocator<long> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarlistlElongcOallocatorlElonggRsPgRcLcLreverse_iterator,G__setup_memfunclistlElongcOallocatorlElonggRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR),sizeof(allocator<float>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEfloatgR,G__setup_memfuncallocatorlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgR),sizeof(list<float,allocator<float> >),-1,36608,(char*)NULL,G__setup_memvarlistlEfloatcOallocatorlEfloatgRsPgR,G__setup_memfunclistlEfloatcOallocatorlEfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLiterator),sizeof(list<float,allocator<float> >::iterator),-1,2816,(char*)NULL,G__setup_memvarlistlEfloatcOallocatorlEfloatgRsPgRcLcLiterator,G__setup_memfunclistlEfloatcOallocatorlEfloatgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator),sizeof(list<float,allocator<float> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarlistlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator,G__setup_memfunclistlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR),sizeof(allocator<double>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEdoublegR,G__setup_memfuncallocatorlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgR),sizeof(list<double,allocator<double> >),-1,36608,(char*)NULL,G__setup_memvarlistlEdoublecOallocatorlEdoublegRsPgR,G__setup_memfunclistlEdoublecOallocatorlEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLiterator),sizeof(list<double,allocator<double> >::iterator),-1,2816,(char*)NULL,G__setup_memvarlistlEdoublecOallocatorlEdoublegRsPgRcLcLiterator,G__setup_memfunclistlEdoublecOallocatorlEdoublegRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator),sizeof(list<double,allocator<double> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarlistlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator,G__setup_memfunclistlEdoublecOallocatorlEdoublegRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR),sizeof(allocator<void*>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEvoidmUgR,G__setup_memfuncallocatorlEvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgR),sizeof(list<void*,allocator<void*> >),-1,36608,(char*)NULL,G__setup_memvarlistlEvoidmUcOallocatorlEvoidmUgRsPgR,G__setup_memfunclistlEvoidmUcOallocatorlEvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator),sizeof(list<void*,allocator<void*> >::iterator),-1,2816,(char*)NULL,G__setup_memvarlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator,G__setup_memfunclistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator),sizeof(list<void*,allocator<void*> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarlistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator,G__setup_memfunclistlEvoidmUcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR),sizeof(allocator<char*>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEcharmUgR,G__setup_memfuncallocatorlEcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgR),sizeof(list<char*,allocator<char*> >),-1,36608,(char*)NULL,G__setup_memvarlistlEcharmUcOallocatorlEcharmUgRsPgR,G__setup_memfunclistlEcharmUcOallocatorlEcharmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator),sizeof(list<char*,allocator<char*> >::iterator),-1,2816,(char*)NULL,G__setup_memvarlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator,G__setup_memfunclistlEcharmUcOallocatorlEcharmUgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator),sizeof(list<char*,allocator<char*> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarlistlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator,G__setup_memfunclistlEcharmUcOallocatorlEcharmUgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR),sizeof(allocator<string>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEstringgR,G__setup_memfuncallocatorlEstringgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgR),sizeof(list<string,allocator<string> >),-1,36608,(char*)NULL,G__setup_memvarlistlEstringcOallocatorlEstringgRsPgR,G__setup_memfunclistlEstringcOallocatorlEstringgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLiterator),sizeof(list<string,allocator<string> >::iterator),-1,2816,(char*)NULL,G__setup_memvarlistlEstringcOallocatorlEstringgRsPgRcLcLiterator,G__setup_memfunclistlEstringcOallocatorlEstringgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_listlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator),sizeof(list<string,allocator<string> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarlistlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator,G__setup_memfunclistlEstringcOallocatorlEstringgRsPgRcLcLreverse_iterator);
}
extern "C" void G__cpp_setup(void) {
  G__check_setup_version(30051515,"G__cpp_setup()");
  G__set_cpp_environment();
  G__cpp_setup_tagtable();

  G__cpp_setup_inheritance();

  G__cpp_setup_typetable();

  G__cpp_setup_memvar();

  G__cpp_setup_memfunc();
  G__cpp_setup_global();
  G__cpp_setup_func();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc();
  return;
}
class G__cpp_setup_init {
  public:
    G__cpp_setup_init() { G__add_setup_func("G__Default",(G__incsetup)(&G__cpp_setup)); }
   ~G__cpp_setup_init() { G__remove_setup_func("G__Default"); }
};
G__cpp_setup_init G__cpp_setup_initializer;

