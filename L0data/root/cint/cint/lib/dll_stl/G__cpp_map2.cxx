/********************************************************
* cint/cint/lib/dll_stl/G__cpp_map2.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/
#include "cint/cint/lib/dll_stl/G__cpp_map2.h" //newlink 3678 

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable();

extern "C" void G__set_cpp_environment() {
  G__add_compiledheader("cint/cint/lib/dll_stl/mp.h");
  G__add_compiledheader("cint/cint/inc/cintdictversion.h");
  G__cpp_reset_tagtable();
}
#include <new>
extern "C" int G__cpp_dllrev() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* less<int> */
static int G__map2_48_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<int>*) G__getstructoffset())->operator()(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__map2_48_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<int> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<int>[n];
     } else {
       p = new((void*) gvp) less<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<int>;
     } else {
       p = new((void*) gvp) less<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_48_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<int>(*(less<int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<int> G__TlesslEintgR;
static int G__map2_48_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<int>*) (soff+(sizeof(less<int>)*i)))->~G__TlesslEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<int>*) (soff))->~G__TlesslEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_48_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<int>* dest = (less<int>*) G__getstructoffset();
   const less<int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<int,int,bool> */
// automatic default constructor
static int G__map2_49_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<int,int,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<int,int,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<int,int,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<int,int,bool>;
     } else {
       p = new((void*) gvp) binary_function<int,int,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_49_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<int,int,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<int,int,bool>(*(binary_function<int,int,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<int,int,bool> G__Tbinary_functionlEintcOintcOboolgR;
static int G__map2_49_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<int,int,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<int,int,bool>*) (soff+(sizeof(binary_function<int,int,bool>)*i)))->~G__Tbinary_functionlEintcOintcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<int,int,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<int,int,bool>*) (soff))->~G__Tbinary_functionlEintcOintcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_49_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<int,int,bool>* dest = (binary_function<int,int,bool>*) G__getstructoffset();
   const binary_function<int,int,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const int,int> > */
static int G__map2_51_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const int,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const int,int> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const int,int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const int,int> >;
     } else {
       p = new((void*) gvp) allocator<pair<const int,int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_51_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const int,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const int,int> >(*(allocator<pair<const int,int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const int,int> >(*(allocator<pair<const int,int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_51_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const int,int> >*) G__getstructoffset())->address(*(pair<const int,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_51_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const int,int> >*) G__getstructoffset())->address(*(pair<const int,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_51_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const int,int> >*) G__getstructoffset())->allocate((allocator<pair<const int,int> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const int,int> >*) G__getstructoffset())->allocate((allocator<pair<const int,int> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_51_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const int,int> >*) G__getstructoffset())->deallocate((allocator<pair<const int,int> >::pointer) G__int(libp->para[0]), (allocator<pair<const int,int> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_51_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const int,int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_51_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const int,int> >*) G__getstructoffset())->construct((allocator<pair<const int,int> >::pointer) G__int(libp->para[0]), *(pair<const int,int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_51_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const int,int> >*) G__getstructoffset())->destroy((allocator<pair<const int,int> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const int,int> > G__TallocatorlEpairlEconstsPintcOintgRsPgR;
static int G__map2_51_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const int,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const int,int> >*) (soff+(sizeof(allocator<pair<const int,int> >)*i)))->~G__TallocatorlEpairlEconstsPintcOintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const int,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const int,int> >*) (soff))->~G__TallocatorlEpairlEconstsPintcOintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_51_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const int,int> >* dest = (allocator<pair<const int,int> >*) G__getstructoffset();
   const allocator<pair<const int,int> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<int,int,less<int>,allocator<pair<const int,int> > > */
static int G__map2_52_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,int,less<int>,allocator<pair<const int,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,int,less<int>,allocator<pair<const int,int> > >[n];
     } else {
       p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,int,less<int>,allocator<pair<const int,int> > >;
     } else {
       p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,int,less<int>,allocator<pair<const int,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,int,less<int>,allocator<pair<const int,int> > >(*((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[0])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >(*((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[0])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,int,less<int>,allocator<pair<const int,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,int,less<int>,allocator<pair<const int,int> > >(*((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >(*((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,int,less<int>,allocator<pair<const int,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,int,less<int>,allocator<pair<const int,int> > >(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->operator=(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->begin();
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->end();
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->rbegin();
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->rend();
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->operator[](*(int*) G__Intref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>* pobj;
         pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool> xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->insert(*(map<int,int,less<int>,allocator<pair<const int,int> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->insert(*((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[0])), *(map<int,int,less<int>,allocator<pair<const int,int> > >::value_type*) libp->para[1].ref);
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->insert(*((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[0])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->insert(*((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->erase(*((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->erase(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->erase(*((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[0])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->swap(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->find(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->count(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->lower_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_52_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >*) G__getstructoffset())->upper_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<int,int,less<int>,allocator<pair<const int,int> > > G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR;
static int G__map2_52_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<int,int,less<int>,allocator<pair<const int,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<int,int,less<int>,allocator<pair<const int,int> > >*) (soff+(sizeof(map<int,int,less<int>,allocator<pair<const int,int> > >)*i)))->~G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<int,int,less<int>,allocator<pair<const int,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<int,int,less<int>,allocator<pair<const int,int> > >*) (soff))->~G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<int,int,less<int>,allocator<pair<const int,int> > >::iterator */
static int G__map2_54_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator;
     } else {
       p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(*(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(*(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >::iterator& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator=(*(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >::value_type& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >::iterator& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >::iterator& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator==(*(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_54_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__getstructoffset())->operator!=(*(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<int,int,less<int>,allocator<pair<const int,int> > >::iterator G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator;
static int G__map2_54_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) (soff+(sizeof(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator)*i)))->~G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) (soff))->~G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator */
static int G__map2_55_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator(*(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator(*(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_55_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_55_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >::value_type& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_55_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_55_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_55_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_55_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator& obj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_55_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator xobj = ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_55_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) (soff+(sizeof(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator)*i)))->~G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) (soff))->~G__TmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool> */
static int G__map2_56_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_56_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>(*(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>(*(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_56_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>(*(pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool> G__TpairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_56_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>*) (soff+(sizeof(pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>)*i)))->~G__TpairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<long> */
static int G__map2_57_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<long>*) G__getstructoffset())->operator()(*(long*) G__Longref(&libp->para[0]), *(long*) G__Longref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__map2_57_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<long> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<long>[n];
     } else {
       p = new((void*) gvp) less<long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<long>;
     } else {
       p = new((void*) gvp) less<long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_57_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<long>(*(less<long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<long> G__TlesslElonggR;
static int G__map2_57_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<long>*) (soff+(sizeof(less<long>)*i)))->~G__TlesslElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<long>*) (soff))->~G__TlesslElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_57_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<long>* dest = (less<long>*) G__getstructoffset();
   const less<long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<long,long,bool> */
// automatic default constructor
static int G__map2_58_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<long,long,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<long,long,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<long,long,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<long,long,bool>;
     } else {
       p = new((void*) gvp) binary_function<long,long,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_58_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<long,long,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<long,long,bool>(*(binary_function<long,long,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<long,long,bool> G__Tbinary_functionlElongcOlongcOboolgR;
static int G__map2_58_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<long,long,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<long,long,bool>*) (soff+(sizeof(binary_function<long,long,bool>)*i)))->~G__Tbinary_functionlElongcOlongcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<long,long,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<long,long,bool>*) (soff))->~G__Tbinary_functionlElongcOlongcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_58_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<long,long,bool>* dest = (binary_function<long,long,bool>*) G__getstructoffset();
   const binary_function<long,long,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,int> > */
static int G__map2_60_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,int> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,int> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_60_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,int> >(*(allocator<pair<const long,int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,int> >(*(allocator<pair<const long,int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_60_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,int> >*) G__getstructoffset())->address(*(pair<const long,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_60_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,int> >*) G__getstructoffset())->address(*(pair<const long,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_60_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,int> >*) G__getstructoffset())->allocate((allocator<pair<const long,int> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,int> >*) G__getstructoffset())->allocate((allocator<pair<const long,int> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_60_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,int> >*) G__getstructoffset())->deallocate((allocator<pair<const long,int> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,int> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_60_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_60_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,int> >*) G__getstructoffset())->construct((allocator<pair<const long,int> >::pointer) G__int(libp->para[0]), *(pair<const long,int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_60_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,int> >*) G__getstructoffset())->destroy((allocator<pair<const long,int> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,int> > G__TallocatorlEpairlEconstsPlongcOintgRsPgR;
static int G__map2_60_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,int> >*) (soff+(sizeof(allocator<pair<const long,int> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,int> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_60_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,int> >* dest = (allocator<pair<const long,int> >*) G__getstructoffset();
   const allocator<pair<const long,int> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,int,less<long>,allocator<pair<const long,int> > > */
static int G__map2_61_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,int,less<long>,allocator<pair<const long,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,int,less<long>,allocator<pair<const long,int> > >[n];
     } else {
       p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,int,less<long>,allocator<pair<const long,int> > >;
     } else {
       p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,int,less<long>,allocator<pair<const long,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,int,less<long>,allocator<pair<const long,int> > >(*((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >(*((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,int,less<long>,allocator<pair<const long,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,int,less<long>,allocator<pair<const long,int> > >(*((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >(*((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,int,less<long>,allocator<pair<const long,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,int,less<long>,allocator<pair<const long,int> > >(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->operator=(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->begin();
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->end();
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->rbegin();
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->rend();
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->operator[](*(long*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>* pobj;
         pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool> xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->insert(*(map<long,int,less<long>,allocator<pair<const long,int> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->insert(*((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *(map<long,int,less<long>,allocator<pair<const long,int> > >::value_type*) libp->para[1].ref);
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->insert(*((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->insert(*((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->erase(*((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->erase(*((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->swap(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_61_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,int,less<long>,allocator<pair<const long,int> > > G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR;
static int G__map2_61_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,int,less<long>,allocator<pair<const long,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,int,less<long>,allocator<pair<const long,int> > >*) (soff+(sizeof(map<long,int,less<long>,allocator<pair<const long,int> > >)*i)))->~G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,int,less<long>,allocator<pair<const long,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,int,less<long>,allocator<pair<const long,int> > >*) (soff))->~G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,int,less<long>,allocator<pair<const long,int> > >::iterator */
static int G__map2_63_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator;
     } else {
       p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(*(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(*(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >::iterator& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator=(*(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >::value_type& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >::iterator& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >::iterator& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator==(*(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_63_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__getstructoffset())->operator!=(*(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,int,less<long>,allocator<pair<const long,int> > >::iterator G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator;
static int G__map2_63_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) (soff+(sizeof(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator)*i)))->~G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) (soff))->~G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator */
static int G__map2_64_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(*(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(*(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_64_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_64_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >::value_type& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_64_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_64_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_64_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_64_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator& obj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_64_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator xobj = ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_64_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) (soff+(sizeof(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator)*i)))->~G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) (soff))->~G__TmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool> */
static int G__map2_65_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_65_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>(*(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>(*(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_65_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>(*(pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool> G__TpairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_65_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>*) (soff+(sizeof(pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>)*i)))->~G__TpairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>*) (soff))->~G__TpairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,long> > */
static int G__map2_67_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,long> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,long> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_67_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,long> >(*(allocator<pair<const long,long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,long> >(*(allocator<pair<const long,long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_67_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,long> >*) G__getstructoffset())->address(*(pair<const long,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_67_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,long> >*) G__getstructoffset())->address(*(pair<const long,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_67_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,long> >*) G__getstructoffset())->allocate((allocator<pair<const long,long> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,long> >*) G__getstructoffset())->allocate((allocator<pair<const long,long> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_67_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,long> >*) G__getstructoffset())->deallocate((allocator<pair<const long,long> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,long> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_67_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_67_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,long> >*) G__getstructoffset())->construct((allocator<pair<const long,long> >::pointer) G__int(libp->para[0]), *(pair<const long,long>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_67_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,long> >*) G__getstructoffset())->destroy((allocator<pair<const long,long> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,long> > G__TallocatorlEpairlEconstsPlongcOlonggRsPgR;
static int G__map2_67_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,long> >*) (soff+(sizeof(allocator<pair<const long,long> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOlonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,long> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOlonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_67_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,long> >* dest = (allocator<pair<const long,long> >*) G__getstructoffset();
   const allocator<pair<const long,long> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,long,less<long>,allocator<pair<const long,long> > > */
static int G__map2_68_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,long,less<long>,allocator<pair<const long,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,long,less<long>,allocator<pair<const long,long> > >[n];
     } else {
       p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,long,less<long>,allocator<pair<const long,long> > >;
     } else {
       p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,long,less<long>,allocator<pair<const long,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,long,less<long>,allocator<pair<const long,long> > >(*((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >(*((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,long,less<long>,allocator<pair<const long,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,long,less<long>,allocator<pair<const long,long> > >(*((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >(*((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,long,less<long>,allocator<pair<const long,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,long,less<long>,allocator<pair<const long,long> > >(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->operator=(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->begin();
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->end();
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->rbegin();
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->rend();
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->operator[](*(long*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>* pobj;
         pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool> xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->insert(*(map<long,long,less<long>,allocator<pair<const long,long> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->insert(*((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *(map<long,long,less<long>,allocator<pair<const long,long> > >::value_type*) libp->para[1].ref);
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->insert(*((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->insert(*((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->erase(*((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->erase(*((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->swap(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_68_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,long,less<long>,allocator<pair<const long,long> > > G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR;
static int G__map2_68_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,long,less<long>,allocator<pair<const long,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,long,less<long>,allocator<pair<const long,long> > >*) (soff+(sizeof(map<long,long,less<long>,allocator<pair<const long,long> > >)*i)))->~G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,long,less<long>,allocator<pair<const long,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,long,less<long>,allocator<pair<const long,long> > >*) (soff))->~G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,long,less<long>,allocator<pair<const long,long> > >::iterator */
static int G__map2_70_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator;
     } else {
       p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(*(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(*(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >::iterator& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator=(*(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >::value_type& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >::iterator& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >::iterator& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator==(*(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_70_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__getstructoffset())->operator!=(*(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,long,less<long>,allocator<pair<const long,long> > >::iterator G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator;
static int G__map2_70_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) (soff+(sizeof(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator)*i)))->~G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) (soff))->~G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator */
static int G__map2_71_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(*(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(*(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_71_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_71_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >::value_type& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_71_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_71_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_71_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_71_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator& obj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_71_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator xobj = ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator;
static int G__map2_71_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) (soff+(sizeof(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator)*i)))->~G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) (soff))->~G__TmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool> */
static int G__map2_72_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_72_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>(*(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>(*(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_72_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>(*(pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool> G__TpairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_72_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>*) (soff+(sizeof(pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>)*i)))->~G__TpairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>*) (soff))->~G__TpairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,float> > */
static int G__map2_74_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,float> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,float> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,float> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,float> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_74_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,float> >(*(allocator<pair<const long,float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,float> >(*(allocator<pair<const long,float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_74_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,float> >*) G__getstructoffset())->address(*(pair<const long,float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_74_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,float> >*) G__getstructoffset())->address(*(pair<const long,float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_74_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,float> >*) G__getstructoffset())->allocate((allocator<pair<const long,float> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,float> >*) G__getstructoffset())->allocate((allocator<pair<const long,float> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_74_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,float> >*) G__getstructoffset())->deallocate((allocator<pair<const long,float> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,float> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_74_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,float> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_74_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,float> >*) G__getstructoffset())->construct((allocator<pair<const long,float> >::pointer) G__int(libp->para[0]), *(pair<const long,float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_74_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,float> >*) G__getstructoffset())->destroy((allocator<pair<const long,float> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,float> > G__TallocatorlEpairlEconstsPlongcOfloatgRsPgR;
static int G__map2_74_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,float> >*) (soff+(sizeof(allocator<pair<const long,float> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,float> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_74_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,float> >* dest = (allocator<pair<const long,float> >*) G__getstructoffset();
   const allocator<pair<const long,float> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,float,less<long>,allocator<pair<const long,float> > > */
static int G__map2_75_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,float,less<long>,allocator<pair<const long,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,float,less<long>,allocator<pair<const long,float> > >[n];
     } else {
       p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,float,less<long>,allocator<pair<const long,float> > >;
     } else {
       p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,float,less<long>,allocator<pair<const long,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,float,less<long>,allocator<pair<const long,float> > >(*((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[0])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >(*((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[0])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,float,less<long>,allocator<pair<const long,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,float,less<long>,allocator<pair<const long,float> > >(*((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >(*((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,float,less<long>,allocator<pair<const long,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,float,less<long>,allocator<pair<const long,float> > >(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->operator=(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->begin();
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->end();
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->rbegin();
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->rend();
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->operator[](*(long*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>* pobj;
         pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool> xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->insert(*(map<long,float,less<long>,allocator<pair<const long,float> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->insert(*((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[0])), *(map<long,float,less<long>,allocator<pair<const long,float> > >::value_type*) libp->para[1].ref);
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->insert(*((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[0])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->insert(*((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->erase(*((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->erase(*((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[0])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->swap(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_75_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,float,less<long>,allocator<pair<const long,float> > > G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR;
static int G__map2_75_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,float,less<long>,allocator<pair<const long,float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,float,less<long>,allocator<pair<const long,float> > >*) (soff+(sizeof(map<long,float,less<long>,allocator<pair<const long,float> > >)*i)))->~G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,float,less<long>,allocator<pair<const long,float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,float,less<long>,allocator<pair<const long,float> > >*) (soff))->~G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,float,less<long>,allocator<pair<const long,float> > >::iterator */
static int G__map2_77_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator;
     } else {
       p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(*(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(*(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >::iterator& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator=(*(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >::value_type& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >::iterator& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >::iterator& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator==(*(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_77_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__getstructoffset())->operator!=(*(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,float,less<long>,allocator<pair<const long,float> > >::iterator G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator;
static int G__map2_77_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) (soff+(sizeof(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator)*i)))->~G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) (soff))->~G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator */
static int G__map2_78_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator(*(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator(*(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_78_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_78_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >::value_type& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_78_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_78_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_78_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_78_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator& obj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_78_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator xobj = ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_78_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) (soff+(sizeof(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator)*i)))->~G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) (soff))->~G__TmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool> */
static int G__map2_79_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_79_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>(*(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>(*(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_79_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>(*(pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool> G__TpairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_79_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>*) (soff+(sizeof(pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>)*i)))->~G__TpairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>*) (soff))->~G__TpairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,double> > */
static int G__map2_81_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,double> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,double> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_81_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,double> >(*(allocator<pair<const long,double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,double> >(*(allocator<pair<const long,double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_81_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,double> >*) G__getstructoffset())->address(*(pair<const long,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_81_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,double> >*) G__getstructoffset())->address(*(pair<const long,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_81_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,double> >*) G__getstructoffset())->allocate((allocator<pair<const long,double> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,double> >*) G__getstructoffset())->allocate((allocator<pair<const long,double> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_81_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,double> >*) G__getstructoffset())->deallocate((allocator<pair<const long,double> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,double> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_81_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_81_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,double> >*) G__getstructoffset())->construct((allocator<pair<const long,double> >::pointer) G__int(libp->para[0]), *(pair<const long,double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_81_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,double> >*) G__getstructoffset())->destroy((allocator<pair<const long,double> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,double> > G__TallocatorlEpairlEconstsPlongcOdoublegRsPgR;
static int G__map2_81_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,double> >*) (soff+(sizeof(allocator<pair<const long,double> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,double> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_81_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,double> >* dest = (allocator<pair<const long,double> >*) G__getstructoffset();
   const allocator<pair<const long,double> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,double,less<long>,allocator<pair<const long,double> > > */
static int G__map2_82_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,double,less<long>,allocator<pair<const long,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,double,less<long>,allocator<pair<const long,double> > >[n];
     } else {
       p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,double,less<long>,allocator<pair<const long,double> > >;
     } else {
       p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,double,less<long>,allocator<pair<const long,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,double,less<long>,allocator<pair<const long,double> > >(*((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >(*((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,double,less<long>,allocator<pair<const long,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,double,less<long>,allocator<pair<const long,double> > >(*((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >(*((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,double,less<long>,allocator<pair<const long,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,double,less<long>,allocator<pair<const long,double> > >(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->operator=(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->begin();
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->end();
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->rbegin();
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->rend();
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->operator[](*(long*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>* pobj;
         pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool> xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->insert(*(map<long,double,less<long>,allocator<pair<const long,double> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->insert(*((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *(map<long,double,less<long>,allocator<pair<const long,double> > >::value_type*) libp->para[1].ref);
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->insert(*((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->insert(*((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->erase(*((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->erase(*((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->swap(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_82_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,double,less<long>,allocator<pair<const long,double> > > G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR;
static int G__map2_82_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,double,less<long>,allocator<pair<const long,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,double,less<long>,allocator<pair<const long,double> > >*) (soff+(sizeof(map<long,double,less<long>,allocator<pair<const long,double> > >)*i)))->~G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,double,less<long>,allocator<pair<const long,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,double,less<long>,allocator<pair<const long,double> > >*) (soff))->~G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,double,less<long>,allocator<pair<const long,double> > >::iterator */
static int G__map2_84_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator;
     } else {
       p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(*(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(*(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >::iterator& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator=(*(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >::value_type& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >::iterator& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >::iterator& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator==(*(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_84_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__getstructoffset())->operator!=(*(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,double,less<long>,allocator<pair<const long,double> > >::iterator G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator;
static int G__map2_84_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) (soff+(sizeof(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator)*i)))->~G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) (soff))->~G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator */
static int G__map2_85_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(*(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(*(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_85_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_85_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >::value_type& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_85_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_85_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_85_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_85_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator& obj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_85_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator xobj = ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator;
static int G__map2_85_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) (soff+(sizeof(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator)*i)))->~G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) (soff))->~G__TmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool> */
static int G__map2_86_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_86_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>(*(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>(*(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_86_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>(*(pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool> G__TpairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_86_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>*) (soff+(sizeof(pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>)*i)))->~G__TpairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>*) (soff))->~G__TpairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,void*> > */
static int G__map2_88_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,void*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,void*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_88_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,void*> >(*(allocator<pair<const long,void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,void*> >(*(allocator<pair<const long,void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_88_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,void*> >*) G__getstructoffset())->address(*(pair<const long,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_88_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,void*> >*) G__getstructoffset())->address(*(pair<const long,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_88_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,void*> >*) G__getstructoffset())->allocate((allocator<pair<const long,void*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,void*> >*) G__getstructoffset())->allocate((allocator<pair<const long,void*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_88_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,void*> >*) G__getstructoffset())->deallocate((allocator<pair<const long,void*> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,void*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_88_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_88_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,void*> >*) G__getstructoffset())->construct((allocator<pair<const long,void*> >::pointer) G__int(libp->para[0]), *(pair<const long,void*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_88_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,void*> >*) G__getstructoffset())->destroy((allocator<pair<const long,void*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,void*> > G__TallocatorlEpairlEconstsPlongcOvoidmUgRsPgR;
static int G__map2_88_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,void*> >*) (soff+(sizeof(allocator<pair<const long,void*> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,void*> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_88_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,void*> >* dest = (allocator<pair<const long,void*> >*) G__getstructoffset();
   const allocator<pair<const long,void*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,void*,less<long>,allocator<pair<const long,void*> > > */
static int G__map2_89_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,void*,less<long>,allocator<pair<const long,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >[n];
     } else {
       p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >;
     } else {
       p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,void*,less<long>,allocator<pair<const long,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,void*,less<long>,allocator<pair<const long,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,void*,less<long>,allocator<pair<const long,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->operator=(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->begin();
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->end();
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->rbegin();
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->rend();
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void*& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->operator[](*(long*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>* pobj;
         pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool> xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->insert(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->insert(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *(map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type*) libp->para[1].ref);
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->insert(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->insert(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->erase(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->erase(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->swap(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_89_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,void*,less<long>,allocator<pair<const long,void*> > > G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR;
static int G__map2_89_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,void*,less<long>,allocator<pair<const long,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) (soff+(sizeof(map<long,void*,less<long>,allocator<pair<const long,void*> > >)*i)))->~G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,void*,less<long>,allocator<pair<const long,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,void*,less<long>,allocator<pair<const long,void*> > >*) (soff))->~G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator */
static int G__map2_91_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator;
     } else {
       p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator=(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator==(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_91_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__getstructoffset())->operator!=(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator;
static int G__map2_91_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) (soff+(sizeof(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator)*i)))->~G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) (soff))->~G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator */
static int G__map2_92_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_92_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_92_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_92_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_92_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_92_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_92_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator& obj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_92_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator xobj = ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_92_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) (soff+(sizeof(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator)*i)))->~G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) (soff))->~G__TmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool> */
static int G__map2_93_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_93_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_93_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>(*(pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool> G__TpairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_93_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>*) (soff+(sizeof(pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>)*i)))->~G__TpairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>*) (soff))->~G__TpairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const long,char*> > */
static int G__map2_95_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,char*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const long,char*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const long,char*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const long,char*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_95_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const long,char*> >(*(allocator<pair<const long,char*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const long,char*> >(*(allocator<pair<const long,char*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_95_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,char*> >*) G__getstructoffset())->address(*(pair<const long,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_95_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const long,char*> >*) G__getstructoffset())->address(*(pair<const long,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_95_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const long,char*> >*) G__getstructoffset())->allocate((allocator<pair<const long,char*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const long,char*> >*) G__getstructoffset())->allocate((allocator<pair<const long,char*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_95_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,char*> >*) G__getstructoffset())->deallocate((allocator<pair<const long,char*> >::pointer) G__int(libp->para[0]), (allocator<pair<const long,char*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_95_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const long,char*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_95_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,char*> >*) G__getstructoffset())->construct((allocator<pair<const long,char*> >::pointer) G__int(libp->para[0]), *(pair<const long,char*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_95_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const long,char*> >*) G__getstructoffset())->destroy((allocator<pair<const long,char*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const long,char*> > G__TallocatorlEpairlEconstsPlongcOcharmUgRsPgR;
static int G__map2_95_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const long,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const long,char*> >*) (soff+(sizeof(allocator<pair<const long,char*> >)*i)))->~G__TallocatorlEpairlEconstsPlongcOcharmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const long,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const long,char*> >*) (soff))->~G__TallocatorlEpairlEconstsPlongcOcharmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_95_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const long,char*> >* dest = (allocator<pair<const long,char*> >*) G__getstructoffset();
   const allocator<pair<const long,char*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,char*,less<long>,allocator<pair<const long,char*> > > */
static int G__map2_96_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,char*,less<long>,allocator<pair<const long,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >[n];
     } else {
       p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >;
     } else {
       p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,char*,less<long>,allocator<pair<const long,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,char*,less<long>,allocator<pair<const long,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,char*,less<long>,allocator<pair<const long,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->operator=(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->begin();
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->end();
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->rbegin();
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->rend();
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->operator[](*(long*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>* pobj;
         pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool> xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->insert(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->insert(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *(map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type*) libp->para[1].ref);
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->insert(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->insert(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->erase(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->erase(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->erase(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->swap(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_96_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,char*,less<long>,allocator<pair<const long,char*> > > G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR;
static int G__map2_96_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,char*,less<long>,allocator<pair<const long,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) (soff+(sizeof(map<long,char*,less<long>,allocator<pair<const long,char*> > >)*i)))->~G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,char*,less<long>,allocator<pair<const long,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,char*,less<long>,allocator<pair<const long,char*> > >*) (soff))->~G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator */
static int G__map2_98_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator;
     } else {
       p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator=(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator==(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_98_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__getstructoffset())->operator!=(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator;
static int G__map2_98_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) (soff+(sizeof(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator)*i)))->~G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) (soff))->~G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator */
static int G__map2_99_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_99_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_99_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_99_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_99_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_99_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_99_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator& obj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_99_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator xobj = ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_99_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) (soff+(sizeof(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator)*i)))->~G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) (soff))->~G__TmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool> */
static int G__map2_100_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_100_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_100_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>(*(pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool> G__TpairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_100_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>*) (soff+(sizeof(pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>)*i)))->~G__TpairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>*) (soff))->~G__TpairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<double> */
static int G__map2_101_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<double>*) G__getstructoffset())->operator()(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__map2_101_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<double> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<double>[n];
     } else {
       p = new((void*) gvp) less<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<double>;
     } else {
       p = new((void*) gvp) less<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_101_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<double>(*(less<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<double> G__TlesslEdoublegR;
static int G__map2_101_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<double>*) (soff+(sizeof(less<double>)*i)))->~G__TlesslEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<double>*) (soff))->~G__TlesslEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_101_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<double>* dest = (less<double>*) G__getstructoffset();
   const less<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<double,double,bool> */
// automatic default constructor
static int G__map2_102_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<double,double,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<double,double,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<double,double,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<double,double,bool>;
     } else {
       p = new((void*) gvp) binary_function<double,double,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_102_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<double,double,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<double,double,bool>(*(binary_function<double,double,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<double,double,bool> G__Tbinary_functionlEdoublecOdoublecOboolgR;
static int G__map2_102_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<double,double,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<double,double,bool>*) (soff+(sizeof(binary_function<double,double,bool>)*i)))->~G__Tbinary_functionlEdoublecOdoublecOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<double,double,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<double,double,bool>*) (soff))->~G__Tbinary_functionlEdoublecOdoublecOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_102_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<double,double,bool>* dest = (binary_function<double,double,bool>*) G__getstructoffset();
   const binary_function<double,double,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,int> > */
static int G__map2_104_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,int> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,int> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_104_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,int> >(*(allocator<pair<const double,int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,int> >(*(allocator<pair<const double,int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_104_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,int> >*) G__getstructoffset())->address(*(pair<const double,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_104_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,int> >*) G__getstructoffset())->address(*(pair<const double,int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_104_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,int> >*) G__getstructoffset())->allocate((allocator<pair<const double,int> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,int> >*) G__getstructoffset())->allocate((allocator<pair<const double,int> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_104_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,int> >*) G__getstructoffset())->deallocate((allocator<pair<const double,int> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,int> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_104_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_104_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,int> >*) G__getstructoffset())->construct((allocator<pair<const double,int> >::pointer) G__int(libp->para[0]), *(pair<const double,int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_104_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,int> >*) G__getstructoffset())->destroy((allocator<pair<const double,int> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,int> > G__TallocatorlEpairlEconstsPdoublecOintgRsPgR;
static int G__map2_104_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,int> >*) (soff+(sizeof(allocator<pair<const double,int> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,int> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_104_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,int> >* dest = (allocator<pair<const double,int> >*) G__getstructoffset();
   const allocator<pair<const double,int> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,int,less<double>,allocator<pair<const double,int> > > */
static int G__map2_105_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,int,less<double>,allocator<pair<const double,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,int,less<double>,allocator<pair<const double,int> > >[n];
     } else {
       p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,int,less<double>,allocator<pair<const double,int> > >;
     } else {
       p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,int,less<double>,allocator<pair<const double,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,int,less<double>,allocator<pair<const double,int> > >(*((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >(*((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,int,less<double>,allocator<pair<const double,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,int,less<double>,allocator<pair<const double,int> > >(*((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >(*((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,int,less<double>,allocator<pair<const double,int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,int,less<double>,allocator<pair<const double,int> > >(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->operator=(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->begin();
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->end();
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->rbegin();
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->rend();
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->operator[](*(double*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>* pobj;
         pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool> xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->insert(*(map<double,int,less<double>,allocator<pair<const double,int> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->insert(*((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *(map<double,int,less<double>,allocator<pair<const double,int> > >::value_type*) libp->para[1].ref);
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->insert(*((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->insert(*((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->erase(*((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->erase(*((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->swap(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_105_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,int,less<double>,allocator<pair<const double,int> > > G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR;
static int G__map2_105_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,int,less<double>,allocator<pair<const double,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,int,less<double>,allocator<pair<const double,int> > >*) (soff+(sizeof(map<double,int,less<double>,allocator<pair<const double,int> > >)*i)))->~G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,int,less<double>,allocator<pair<const double,int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,int,less<double>,allocator<pair<const double,int> > >*) (soff))->~G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,int,less<double>,allocator<pair<const double,int> > >::iterator */
static int G__map2_107_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator;
     } else {
       p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(*(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(*(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >::iterator& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator=(*(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >::value_type& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >::iterator& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >::iterator& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator==(*(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_107_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__getstructoffset())->operator!=(*(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,int,less<double>,allocator<pair<const double,int> > >::iterator G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator;
static int G__map2_107_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) (soff+(sizeof(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator)*i)))->~G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) (soff))->~G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator */
static int G__map2_108_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(*(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(*(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_108_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_108_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >::value_type& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_108_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_108_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_108_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_108_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator& obj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_108_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator xobj = ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_108_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) (soff+(sizeof(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator)*i)))->~G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) (soff))->~G__TmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool> */
static int G__map2_109_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_109_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>(*(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>(*(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_109_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>(*(pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool> G__TpairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_109_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>*) (soff+(sizeof(pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>)*i)))->~G__TpairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,long> > */
static int G__map2_111_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,long> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,long> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_111_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,long> >(*(allocator<pair<const double,long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,long> >(*(allocator<pair<const double,long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_111_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,long> >*) G__getstructoffset())->address(*(pair<const double,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_111_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,long> >*) G__getstructoffset())->address(*(pair<const double,long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_111_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,long> >*) G__getstructoffset())->allocate((allocator<pair<const double,long> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,long> >*) G__getstructoffset())->allocate((allocator<pair<const double,long> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_111_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,long> >*) G__getstructoffset())->deallocate((allocator<pair<const double,long> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,long> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_111_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_111_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,long> >*) G__getstructoffset())->construct((allocator<pair<const double,long> >::pointer) G__int(libp->para[0]), *(pair<const double,long>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_111_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,long> >*) G__getstructoffset())->destroy((allocator<pair<const double,long> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,long> > G__TallocatorlEpairlEconstsPdoublecOlonggRsPgR;
static int G__map2_111_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,long> >*) (soff+(sizeof(allocator<pair<const double,long> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOlonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,long> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOlonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_111_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,long> >* dest = (allocator<pair<const double,long> >*) G__getstructoffset();
   const allocator<pair<const double,long> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,long,less<double>,allocator<pair<const double,long> > > */
static int G__map2_112_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,long,less<double>,allocator<pair<const double,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,long,less<double>,allocator<pair<const double,long> > >[n];
     } else {
       p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,long,less<double>,allocator<pair<const double,long> > >;
     } else {
       p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,long,less<double>,allocator<pair<const double,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,long,less<double>,allocator<pair<const double,long> > >(*((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >(*((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,long,less<double>,allocator<pair<const double,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,long,less<double>,allocator<pair<const double,long> > >(*((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >(*((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,long,less<double>,allocator<pair<const double,long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,long,less<double>,allocator<pair<const double,long> > >(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->operator=(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->begin();
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->end();
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->rbegin();
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->rend();
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->operator[](*(double*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>* pobj;
         pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool> xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->insert(*(map<double,long,less<double>,allocator<pair<const double,long> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->insert(*((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *(map<double,long,less<double>,allocator<pair<const double,long> > >::value_type*) libp->para[1].ref);
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->insert(*((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->insert(*((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->erase(*((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->erase(*((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->swap(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_112_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,long,less<double>,allocator<pair<const double,long> > > G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR;
static int G__map2_112_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,long,less<double>,allocator<pair<const double,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,long,less<double>,allocator<pair<const double,long> > >*) (soff+(sizeof(map<double,long,less<double>,allocator<pair<const double,long> > >)*i)))->~G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,long,less<double>,allocator<pair<const double,long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,long,less<double>,allocator<pair<const double,long> > >*) (soff))->~G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,long,less<double>,allocator<pair<const double,long> > >::iterator */
static int G__map2_114_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator;
     } else {
       p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(*(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(*(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >::iterator& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator=(*(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >::value_type& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >::iterator& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >::iterator& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator==(*(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_114_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__getstructoffset())->operator!=(*(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,long,less<double>,allocator<pair<const double,long> > >::iterator G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator;
static int G__map2_114_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) (soff+(sizeof(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator)*i)))->~G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) (soff))->~G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator */
static int G__map2_115_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(*(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(*(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_115_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_115_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >::value_type& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_115_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_115_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_115_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_115_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator& obj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_115_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator xobj = ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator;
static int G__map2_115_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) (soff+(sizeof(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator)*i)))->~G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) (soff))->~G__TmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool> */
static int G__map2_116_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_116_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>(*(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>(*(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_116_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>(*(pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool> G__TpairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_116_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>*) (soff+(sizeof(pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>)*i)))->~G__TpairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,float> > */
static int G__map2_118_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,float> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,float> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,float> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,float> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_118_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,float> >(*(allocator<pair<const double,float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,float> >(*(allocator<pair<const double,float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_118_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,float> >*) G__getstructoffset())->address(*(pair<const double,float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_118_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,float> >*) G__getstructoffset())->address(*(pair<const double,float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_118_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,float> >*) G__getstructoffset())->allocate((allocator<pair<const double,float> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,float> >*) G__getstructoffset())->allocate((allocator<pair<const double,float> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_118_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,float> >*) G__getstructoffset())->deallocate((allocator<pair<const double,float> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,float> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_118_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,float> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_118_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,float> >*) G__getstructoffset())->construct((allocator<pair<const double,float> >::pointer) G__int(libp->para[0]), *(pair<const double,float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_118_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,float> >*) G__getstructoffset())->destroy((allocator<pair<const double,float> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,float> > G__TallocatorlEpairlEconstsPdoublecOfloatgRsPgR;
static int G__map2_118_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,float> >*) (soff+(sizeof(allocator<pair<const double,float> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,float> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_118_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,float> >* dest = (allocator<pair<const double,float> >*) G__getstructoffset();
   const allocator<pair<const double,float> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,float,less<double>,allocator<pair<const double,float> > > */
static int G__map2_119_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,float,less<double>,allocator<pair<const double,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,float,less<double>,allocator<pair<const double,float> > >[n];
     } else {
       p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,float,less<double>,allocator<pair<const double,float> > >;
     } else {
       p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,float,less<double>,allocator<pair<const double,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,float,less<double>,allocator<pair<const double,float> > >(*((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[0])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >(*((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[0])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,float,less<double>,allocator<pair<const double,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,float,less<double>,allocator<pair<const double,float> > >(*((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >(*((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,float,less<double>,allocator<pair<const double,float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,float,less<double>,allocator<pair<const double,float> > >(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->operator=(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->begin();
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->end();
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->rbegin();
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->rend();
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->operator[](*(double*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>* pobj;
         pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool> xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->insert(*(map<double,float,less<double>,allocator<pair<const double,float> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->insert(*((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[0])), *(map<double,float,less<double>,allocator<pair<const double,float> > >::value_type*) libp->para[1].ref);
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->insert(*((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[0])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->insert(*((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->erase(*((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->erase(*((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[0])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->swap(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_119_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,float,less<double>,allocator<pair<const double,float> > > G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR;
static int G__map2_119_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,float,less<double>,allocator<pair<const double,float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,float,less<double>,allocator<pair<const double,float> > >*) (soff+(sizeof(map<double,float,less<double>,allocator<pair<const double,float> > >)*i)))->~G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,float,less<double>,allocator<pair<const double,float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,float,less<double>,allocator<pair<const double,float> > >*) (soff))->~G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,float,less<double>,allocator<pair<const double,float> > >::iterator */
static int G__map2_121_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator;
     } else {
       p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(*(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(*(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >::iterator& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator=(*(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >::value_type& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >::iterator& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >::iterator& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator==(*(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_121_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__getstructoffset())->operator!=(*(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,float,less<double>,allocator<pair<const double,float> > >::iterator G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator;
static int G__map2_121_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) (soff+(sizeof(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator)*i)))->~G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) (soff))->~G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator */
static int G__map2_122_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator(*(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator(*(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_122_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_122_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >::value_type& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_122_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_122_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_122_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_122_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator& obj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_122_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator xobj = ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_122_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) (soff+(sizeof(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator)*i)))->~G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) (soff))->~G__TmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool> */
static int G__map2_123_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_123_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>(*(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>(*(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_123_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>(*(pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool> G__TpairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_123_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>*) (soff+(sizeof(pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>)*i)))->~G__TpairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,double> > */
static int G__map2_125_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,double> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,double> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_125_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,double> >(*(allocator<pair<const double,double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,double> >(*(allocator<pair<const double,double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_125_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,double> >*) G__getstructoffset())->address(*(pair<const double,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_125_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,double> >*) G__getstructoffset())->address(*(pair<const double,double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_125_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,double> >*) G__getstructoffset())->allocate((allocator<pair<const double,double> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,double> >*) G__getstructoffset())->allocate((allocator<pair<const double,double> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_125_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,double> >*) G__getstructoffset())->deallocate((allocator<pair<const double,double> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,double> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_125_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_125_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,double> >*) G__getstructoffset())->construct((allocator<pair<const double,double> >::pointer) G__int(libp->para[0]), *(pair<const double,double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_125_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,double> >*) G__getstructoffset())->destroy((allocator<pair<const double,double> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,double> > G__TallocatorlEpairlEconstsPdoublecOdoublegRsPgR;
static int G__map2_125_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,double> >*) (soff+(sizeof(allocator<pair<const double,double> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,double> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_125_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,double> >* dest = (allocator<pair<const double,double> >*) G__getstructoffset();
   const allocator<pair<const double,double> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,double,less<double>,allocator<pair<const double,double> > > */
static int G__map2_126_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,double,less<double>,allocator<pair<const double,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,double,less<double>,allocator<pair<const double,double> > >[n];
     } else {
       p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,double,less<double>,allocator<pair<const double,double> > >;
     } else {
       p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,double,less<double>,allocator<pair<const double,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,double,less<double>,allocator<pair<const double,double> > >(*((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >(*((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,double,less<double>,allocator<pair<const double,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,double,less<double>,allocator<pair<const double,double> > >(*((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >(*((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,double,less<double>,allocator<pair<const double,double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,double,less<double>,allocator<pair<const double,double> > >(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->operator=(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->begin();
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->end();
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->rbegin();
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->rend();
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->operator[](*(double*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>* pobj;
         pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool> xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->insert(*(map<double,double,less<double>,allocator<pair<const double,double> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->insert(*((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *(map<double,double,less<double>,allocator<pair<const double,double> > >::value_type*) libp->para[1].ref);
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->insert(*((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->insert(*((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->erase(*((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->erase(*((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->swap(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_126_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,double,less<double>,allocator<pair<const double,double> > > G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR;
static int G__map2_126_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,double,less<double>,allocator<pair<const double,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,double,less<double>,allocator<pair<const double,double> > >*) (soff+(sizeof(map<double,double,less<double>,allocator<pair<const double,double> > >)*i)))->~G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,double,less<double>,allocator<pair<const double,double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,double,less<double>,allocator<pair<const double,double> > >*) (soff))->~G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,double,less<double>,allocator<pair<const double,double> > >::iterator */
static int G__map2_128_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator;
     } else {
       p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(*(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(*(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >::iterator& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator=(*(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >::value_type& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >::iterator& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >::iterator& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator==(*(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_128_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__getstructoffset())->operator!=(*(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,double,less<double>,allocator<pair<const double,double> > >::iterator G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator;
static int G__map2_128_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) (soff+(sizeof(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator)*i)))->~G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) (soff))->~G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator */
static int G__map2_129_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(*(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(*(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_129_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_129_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >::value_type& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_129_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_129_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_129_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_129_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator& obj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_129_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator xobj = ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator;
static int G__map2_129_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) (soff+(sizeof(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator)*i)))->~G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) (soff))->~G__TmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool> */
static int G__map2_130_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_130_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>(*(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>(*(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_130_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>(*(pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool> G__TpairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_130_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>*) (soff+(sizeof(pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>)*i)))->~G__TpairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,void*> > */
static int G__map2_132_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,void*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,void*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_132_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,void*> >(*(allocator<pair<const double,void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,void*> >(*(allocator<pair<const double,void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_132_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,void*> >*) G__getstructoffset())->address(*(pair<const double,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_132_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,void*> >*) G__getstructoffset())->address(*(pair<const double,void*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_132_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,void*> >*) G__getstructoffset())->allocate((allocator<pair<const double,void*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,void*> >*) G__getstructoffset())->allocate((allocator<pair<const double,void*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_132_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,void*> >*) G__getstructoffset())->deallocate((allocator<pair<const double,void*> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,void*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_132_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_132_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,void*> >*) G__getstructoffset())->construct((allocator<pair<const double,void*> >::pointer) G__int(libp->para[0]), *(pair<const double,void*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_132_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,void*> >*) G__getstructoffset())->destroy((allocator<pair<const double,void*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,void*> > G__TallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR;
static int G__map2_132_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,void*> >*) (soff+(sizeof(allocator<pair<const double,void*> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,void*> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_132_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,void*> >* dest = (allocator<pair<const double,void*> >*) G__getstructoffset();
   const allocator<pair<const double,void*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,void*,less<double>,allocator<pair<const double,void*> > > */
static int G__map2_133_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,void*,less<double>,allocator<pair<const double,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >[n];
     } else {
       p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >;
     } else {
       p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,void*,less<double>,allocator<pair<const double,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,void*,less<double>,allocator<pair<const double,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,void*,less<double>,allocator<pair<const double,void*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->operator=(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->begin();
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->end();
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->rbegin();
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->rend();
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         void*& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->operator[](*(double*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'Y', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>* pobj;
         pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool> xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->insert(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->insert(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *(map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type*) libp->para[1].ref);
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->insert(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->insert(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->erase(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->erase(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->swap(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_133_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,void*,less<double>,allocator<pair<const double,void*> > > G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR;
static int G__map2_133_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,void*,less<double>,allocator<pair<const double,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) (soff+(sizeof(map<double,void*,less<double>,allocator<pair<const double,void*> > >)*i)))->~G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,void*,less<double>,allocator<pair<const double,void*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,void*,less<double>,allocator<pair<const double,void*> > >*) (soff))->~G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator */
static int G__map2_135_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator;
     } else {
       p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator=(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator==(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_135_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__getstructoffset())->operator!=(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator;
static int G__map2_135_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) (soff+(sizeof(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator)*i)))->~G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) (soff))->~G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator */
static int G__map2_136_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_136_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_136_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_136_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_136_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_136_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_136_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator& obj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_136_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator xobj = ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_136_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) (soff+(sizeof(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator)*i)))->~G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) (soff))->~G__TmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool> */
static int G__map2_137_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_137_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_137_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>(*(pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool> G__TpairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_137_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>*) (soff+(sizeof(pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>)*i)))->~G__TpairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<pair<const double,char*> > */
static int G__map2_139_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,char*> >[n];
     } else {
       p = new((void*) gvp) allocator<pair<const double,char*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<pair<const double,char*> >;
     } else {
       p = new((void*) gvp) allocator<pair<const double,char*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_139_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<pair<const double,char*> >(*(allocator<pair<const double,char*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<pair<const double,char*> >(*(allocator<pair<const double,char*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_139_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,char*> >*) G__getstructoffset())->address(*(pair<const double,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_139_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<pair<const double,char*> >*) G__getstructoffset())->address(*(pair<const double,char*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_139_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<pair<const double,char*> >*) G__getstructoffset())->allocate((allocator<pair<const double,char*> >::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<pair<const double,char*> >*) G__getstructoffset())->allocate((allocator<pair<const double,char*> >::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_139_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,char*> >*) G__getstructoffset())->deallocate((allocator<pair<const double,char*> >::pointer) G__int(libp->para[0]), (allocator<pair<const double,char*> >::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_139_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<pair<const double,char*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_139_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,char*> >*) G__getstructoffset())->construct((allocator<pair<const double,char*> >::pointer) G__int(libp->para[0]), *(pair<const double,char*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_139_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<pair<const double,char*> >*) G__getstructoffset())->destroy((allocator<pair<const double,char*> >::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<pair<const double,char*> > G__TallocatorlEpairlEconstsPdoublecOcharmUgRsPgR;
static int G__map2_139_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<pair<const double,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<pair<const double,char*> >*) (soff+(sizeof(allocator<pair<const double,char*> >)*i)))->~G__TallocatorlEpairlEconstsPdoublecOcharmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<pair<const double,char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<pair<const double,char*> >*) (soff))->~G__TallocatorlEpairlEconstsPdoublecOcharmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__map2_139_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<pair<const double,char*> >* dest = (allocator<pair<const double,char*> >*) G__getstructoffset();
   const allocator<pair<const double,char*> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,char*,less<double>,allocator<pair<const double,char*> > > */
static int G__map2_140_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,char*,less<double>,allocator<pair<const double,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >[n];
     } else {
       p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >;
     } else {
       p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,char*,less<double>,allocator<pair<const double,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,char*,less<double>,allocator<pair<const double,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,char*,less<double>,allocator<pair<const double,char*> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->operator=(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->begin();
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->end();
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->rbegin();
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->rend();
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->operator[](*(double*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>* pobj;
         pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool> xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->insert(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->insert(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *(map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type*) libp->para[1].ref);
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->insert(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->insert(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[0])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->erase(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->erase(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->erase(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->swap(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_140_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,char*,less<double>,allocator<pair<const double,char*> > > G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR;
static int G__map2_140_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,char*,less<double>,allocator<pair<const double,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) (soff+(sizeof(map<double,char*,less<double>,allocator<pair<const double,char*> > >)*i)))->~G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,char*,less<double>,allocator<pair<const double,char*> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,char*,less<double>,allocator<pair<const double,char*> > >*) (soff))->~G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator */
static int G__map2_142_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator;
     } else {
       p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator=(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator==(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_142_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__getstructoffset())->operator!=(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator;
static int G__map2_142_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) (soff+(sizeof(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator)*i)))->~G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) (soff))->~G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator */
static int G__map2_143_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_143_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator=(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_143_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_143_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_143_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_143_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_143_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator& obj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_143_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator xobj = ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator;
static int G__map2_143_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) (soff+(sizeof(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator)*i)))->~G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) (soff))->~G__TmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool> */
static int G__map2_144_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2_144_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__map2_144_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>(*(pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool> G__TpairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR;
static int G__map2_144_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>*) (soff+(sizeof(pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>)*i)))->~G__TpairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>*) (soff))->~G__TpairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__map2__0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) libp->para[0].ref, *(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) libp->para[0].ref, *(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref, *(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref, *(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref, *(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref, *(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref, *(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[0].ref, *(map<int,int,less<int>,allocator<pair<const int,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator* pobj;
         map<int,int,less<int>,allocator<pair<const int,int> > >::iterator xobj = search(*((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[0])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[1]))
, *((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[2])), *((map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<int,int,less<int>,allocator<pair<const int,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref, *(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[0].ref, *(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[0].ref, *(map<long,int,less<long>,allocator<pair<const long,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator* pobj;
         map<long,int,less<long>,allocator<pair<const long,int> > >::iterator xobj = search(*((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[0])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[1]))
, *((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[2])), *((map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<long,int,less<long>,allocator<pair<const long,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref, *(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[0].ref, *(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[0].ref, *(map<long,long,less<long>,allocator<pair<const long,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator* pobj;
         map<long,long,less<long>,allocator<pair<const long,long> > >::iterator xobj = search(*((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[0])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[1]))
, *((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[2])), *((map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<long,long,less<long>,allocator<pair<const long,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) libp->para[0].ref, *(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) libp->para[0].ref, *(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref, *(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref, *(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref, *(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref, *(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref, *(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[0].ref, *(map<long,float,less<long>,allocator<pair<const long,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator* pobj;
         map<long,float,less<long>,allocator<pair<const long,float> > >::iterator xobj = search(*((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[0])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[1]))
, *((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[2])), *((map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<long,float,less<long>,allocator<pair<const long,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref, *(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[0].ref, *(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[0].ref, *(map<long,double,less<long>,allocator<pair<const long,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator* pobj;
         map<long,double,less<long>,allocator<pair<const long,double> > >::iterator xobj = search(*((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[0])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[1]))
, *((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[2])), *((map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<long,double,less<long>,allocator<pair<const long,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref, *(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[0].ref, *(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[0].ref, *(map<long,void*,less<long>,allocator<pair<const long,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator* pobj;
         map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator xobj = search(*((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[0])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[1]))
, *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[2])), *((map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref, *(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_167(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[0].ref, *(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[0].ref, *(map<long,char*,less<long>,allocator<pair<const long,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator* pobj;
         map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator xobj = search(*((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[0])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[1]))
, *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[2])), *((map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref, *(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[0].ref, *(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_178(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_179(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_180(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_182(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[0].ref, *(map<double,int,less<double>,allocator<pair<const double,int> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_183(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator* pobj;
         map<double,int,less<double>,allocator<pair<const double,int> > >::iterator xobj = search(*((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[0])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[1]))
, *((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[2])), *((map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<double,int,less<double>,allocator<pair<const double,int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_184(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref, *(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_185(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[0].ref, *(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_186(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_187(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_188(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_189(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_190(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_191(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[0].ref, *(map<double,long,less<double>,allocator<pair<const double,long> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_192(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator* pobj;
         map<double,long,less<double>,allocator<pair<const double,long> > >::iterator xobj = search(*((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[0])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[1]))
, *((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[2])), *((map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<double,long,less<double>,allocator<pair<const double,long> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_193(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) libp->para[0].ref, *(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_194(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) libp->para[0].ref, *(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_195(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref, *(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_196(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref, *(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_197(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref, *(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_198(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref, *(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_199(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref, *(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_200(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[0].ref, *(map<double,float,less<double>,allocator<pair<const double,float> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_201(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator* pobj;
         map<double,float,less<double>,allocator<pair<const double,float> > >::iterator xobj = search(*((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[0])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[1]))
, *((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[2])), *((map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<double,float,less<double>,allocator<pair<const double,float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_202(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref, *(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_203(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[0].ref, *(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_204(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_205(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_206(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_207(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_208(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_209(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[0].ref, *(map<double,double,less<double>,allocator<pair<const double,double> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_210(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator* pobj;
         map<double,double,less<double>,allocator<pair<const double,double> > >::iterator xobj = search(*((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[0])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[1]))
, *((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[2])), *((map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<double,double,less<double>,allocator<pair<const double,double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_211(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref, *(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_212(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[0].ref, *(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_213(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_214(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_215(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_216(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_217(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_218(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[0].ref, *(map<double,void*,less<double>,allocator<pair<const double,void*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_219(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator* pobj;
         map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator xobj = search(*((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[0])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[1]))
, *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[2])), *((map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_220(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref, *(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_221(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[0].ref, *(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_222(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_223(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_224(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_225(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_226(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_227(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[0].ref, *(map<double,char*,less<double>,allocator<pair<const double,char*> > >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__map2__0_228(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator* pobj;
         map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator xobj = search(*((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[0])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[1]))
, *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[2])), *((map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*) G__int(libp->para[3])));
         pobj = new map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* less<int> */

/* binary_function<int,int,bool> */

/* allocator<pair<const int,int> > */

/* map<int,int,less<int>,allocator<pair<const int,int> > > */

/* map<int,int,less<int>,allocator<pair<const int,int> > >::iterator */

/* map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator */

/* pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool> */

/* less<long> */

/* binary_function<long,long,bool> */

/* allocator<pair<const long,int> > */

/* map<long,int,less<long>,allocator<pair<const long,int> > > */

/* map<long,int,less<long>,allocator<pair<const long,int> > >::iterator */

/* map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator */

/* pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool> */

/* allocator<pair<const long,long> > */

/* map<long,long,less<long>,allocator<pair<const long,long> > > */

/* map<long,long,less<long>,allocator<pair<const long,long> > >::iterator */

/* map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator */

/* pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool> */

/* allocator<pair<const long,float> > */

/* map<long,float,less<long>,allocator<pair<const long,float> > > */

/* map<long,float,less<long>,allocator<pair<const long,float> > >::iterator */

/* map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator */

/* pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool> */

/* allocator<pair<const long,double> > */

/* map<long,double,less<long>,allocator<pair<const long,double> > > */

/* map<long,double,less<long>,allocator<pair<const long,double> > >::iterator */

/* map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator */

/* pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool> */

/* allocator<pair<const long,void*> > */

/* map<long,void*,less<long>,allocator<pair<const long,void*> > > */

/* map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator */

/* map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator */

/* pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool> */

/* allocator<pair<const long,char*> > */

/* map<long,char*,less<long>,allocator<pair<const long,char*> > > */

/* map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator */

/* map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator */

/* pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool> */

/* less<double> */

/* binary_function<double,double,bool> */

/* allocator<pair<const double,int> > */

/* map<double,int,less<double>,allocator<pair<const double,int> > > */

/* map<double,int,less<double>,allocator<pair<const double,int> > >::iterator */

/* map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator */

/* pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool> */

/* allocator<pair<const double,long> > */

/* map<double,long,less<double>,allocator<pair<const double,long> > > */

/* map<double,long,less<double>,allocator<pair<const double,long> > >::iterator */

/* map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator */

/* pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool> */

/* allocator<pair<const double,float> > */

/* map<double,float,less<double>,allocator<pair<const double,float> > > */

/* map<double,float,less<double>,allocator<pair<const double,float> > >::iterator */

/* map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator */

/* pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool> */

/* allocator<pair<const double,double> > */

/* map<double,double,less<double>,allocator<pair<const double,double> > > */

/* map<double,double,less<double>,allocator<pair<const double,double> > >::iterator */

/* map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator */

/* pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool> */

/* allocator<pair<const double,void*> > */

/* map<double,void*,less<double>,allocator<pair<const double,void*> > > */

/* map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator */

/* map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator */

/* pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool> */

/* allocator<pair<const double,char*> > */

/* map<double,char*,less<double>,allocator<pair<const double,char*> > > */

/* map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator */

/* map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator */

/* pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc {
 public:
  G__Sizep2memfunc(): p(&G__Sizep2memfunc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc::*p)();
};

size_t G__get_sizep2memfunc()
{
  G__Sizep2memfunc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEintgR))) {
     less<int> *G__Lderived;
     G__Lderived=(less<int>*)0x1000;
     {
       binary_function<int,int,bool> *G__Lpbase=(binary_function<int,int,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEintgR),G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslElonggR))) {
     less<long> *G__Lderived;
     G__Lderived=(less<long>*)0x1000;
     {
       binary_function<long,long,bool> *G__Lpbase=(binary_function<long,long,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslElonggR),G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEdoublegR))) {
     less<double> *G__Lderived;
     G__Lderived=(less<double>*)0x1000;
     {
       binary_function<double,double,bool> *G__Lpbase=(binary_function<double,double,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR),G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable() {

   /* Setting up typedef entry */
   G__search_typename2("first_argument_type",105,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",105,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPintcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPintcOintgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPintcOintgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPintcOintgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPintcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,int>",117,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",105,-1,0,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",105,-1,0,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEintcOintgR),0,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEintgR),0,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,int,less<int> >",117,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",108,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",108,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,int>",117,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",105,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOintgR),0,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR),0,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,int,less<long> >",117,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,long>",117,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOlonggR),0,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR),0,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,long,less<long> >",117,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOfloatgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOfloatgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOfloatgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOfloatgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOfloatgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,float>",117,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",102,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOfloatgR),0,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR),0,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,float,less<long> >",117,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,double>",117,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR),0,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR),0,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,double,less<long> >",117,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,void*>",117,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",89,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR),0,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR),0,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,void*,less<long> >",117,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,char*>",117,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR),0,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR),0,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,char*,less<long> >",117,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",100,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",100,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,int>",117,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",105,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,int,less<double> >",117,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,long>",117,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,long,less<double> >",117,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOfloatgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOfloatgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOfloatgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOfloatgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOfloatgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,float>",117,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",102,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOfloatgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,float,less<double> >",117,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,double>",117,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,double,less<double> >",117,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,void*>",117,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",89,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,void*,less<double> >",117,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),256,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),1,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),257,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR),0,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,char*>",117,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",67,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR),0,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,char*,less<double> >",117,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* less<int> */
static void G__setup_memvarlesslEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEintgR));
   { less<int> *p; p=(less<int>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<int,int,bool> */
static void G__setup_memvarbinary_functionlEintcOintcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   { binary_function<int,int,bool> *p; p=(binary_function<int,int,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const int,int> > */
static void G__setup_memvarallocatorlEpairlEconstsPintcOintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   { allocator<pair<const int,int> > *p; p=(allocator<pair<const int,int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<int,int,less<int>,allocator<pair<const int,int> > > */
static void G__setup_memvarmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   { map<int,int,less<int>,allocator<pair<const int,int> > > *p; p=(map<int,int,less<int>,allocator<pair<const int,int> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<int,int,less<int>,allocator<pair<const int,int> > >::iterator */
static void G__setup_memvarmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator));
   { map<int,int,less<int>,allocator<pair<const int,int> > >::iterator *p; p=(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator */
static void G__setup_memvarmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator));
   { map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator *p; p=(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool> *p; p=(pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<long> */
static void G__setup_memvarlesslElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslElonggR));
   { less<long> *p; p=(less<long>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<long,long,bool> */
static void G__setup_memvarbinary_functionlElongcOlongcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   { binary_function<long,long,bool> *p; p=(binary_function<long,long,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,int> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   { allocator<pair<const long,int> > *p; p=(allocator<pair<const long,int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,int,less<long>,allocator<pair<const long,int> > > */
static void G__setup_memvarmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   { map<long,int,less<long>,allocator<pair<const long,int> > > *p; p=(map<long,int,less<long>,allocator<pair<const long,int> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,int,less<long>,allocator<pair<const long,int> > >::iterator */
static void G__setup_memvarmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator));
   { map<long,int,less<long>,allocator<pair<const long,int> > >::iterator *p; p=(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator */
static void G__setup_memvarmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator));
   { map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator *p; p=(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool> *p; p=(pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,long> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOlonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   { allocator<pair<const long,long> > *p; p=(allocator<pair<const long,long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,long,less<long>,allocator<pair<const long,long> > > */
static void G__setup_memvarmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   { map<long,long,less<long>,allocator<pair<const long,long> > > *p; p=(map<long,long,less<long>,allocator<pair<const long,long> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,long,less<long>,allocator<pair<const long,long> > >::iterator */
static void G__setup_memvarmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator));
   { map<long,long,less<long>,allocator<pair<const long,long> > >::iterator *p; p=(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator */
static void G__setup_memvarmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator));
   { map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator *p; p=(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool> *p; p=(pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,float> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   { allocator<pair<const long,float> > *p; p=(allocator<pair<const long,float> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,float,less<long>,allocator<pair<const long,float> > > */
static void G__setup_memvarmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   { map<long,float,less<long>,allocator<pair<const long,float> > > *p; p=(map<long,float,less<long>,allocator<pair<const long,float> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,float,less<long>,allocator<pair<const long,float> > >::iterator */
static void G__setup_memvarmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator));
   { map<long,float,less<long>,allocator<pair<const long,float> > >::iterator *p; p=(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator */
static void G__setup_memvarmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator));
   { map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator *p; p=(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool> *p; p=(pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,double> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   { allocator<pair<const long,double> > *p; p=(allocator<pair<const long,double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,double,less<long>,allocator<pair<const long,double> > > */
static void G__setup_memvarmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   { map<long,double,less<long>,allocator<pair<const long,double> > > *p; p=(map<long,double,less<long>,allocator<pair<const long,double> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,double,less<long>,allocator<pair<const long,double> > >::iterator */
static void G__setup_memvarmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator));
   { map<long,double,less<long>,allocator<pair<const long,double> > >::iterator *p; p=(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator */
static void G__setup_memvarmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator));
   { map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator *p; p=(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool> *p; p=(pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,void*> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   { allocator<pair<const long,void*> > *p; p=(allocator<pair<const long,void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,void*,less<long>,allocator<pair<const long,void*> > > */
static void G__setup_memvarmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   { map<long,void*,less<long>,allocator<pair<const long,void*> > > *p; p=(map<long,void*,less<long>,allocator<pair<const long,void*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator */
static void G__setup_memvarmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator));
   { map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator *p; p=(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator */
static void G__setup_memvarmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   { map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator *p; p=(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool> *p; p=(pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const long,char*> > */
static void G__setup_memvarallocatorlEpairlEconstsPlongcOcharmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   { allocator<pair<const long,char*> > *p; p=(allocator<pair<const long,char*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,char*,less<long>,allocator<pair<const long,char*> > > */
static void G__setup_memvarmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   { map<long,char*,less<long>,allocator<pair<const long,char*> > > *p; p=(map<long,char*,less<long>,allocator<pair<const long,char*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator */
static void G__setup_memvarmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator));
   { map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator *p; p=(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator */
static void G__setup_memvarmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   { map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator *p; p=(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool> *p; p=(pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<double> */
static void G__setup_memvarlesslEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   { less<double> *p; p=(less<double>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<double,double,bool> */
static void G__setup_memvarbinary_functionlEdoublecOdoublecOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   { binary_function<double,double,bool> *p; p=(binary_function<double,double,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,int> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   { allocator<pair<const double,int> > *p; p=(allocator<pair<const double,int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,int,less<double>,allocator<pair<const double,int> > > */
static void G__setup_memvarmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   { map<double,int,less<double>,allocator<pair<const double,int> > > *p; p=(map<double,int,less<double>,allocator<pair<const double,int> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,int,less<double>,allocator<pair<const double,int> > >::iterator */
static void G__setup_memvarmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator));
   { map<double,int,less<double>,allocator<pair<const double,int> > >::iterator *p; p=(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator */
static void G__setup_memvarmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator));
   { map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator *p; p=(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool> *p; p=(pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,long> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOlonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   { allocator<pair<const double,long> > *p; p=(allocator<pair<const double,long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,long,less<double>,allocator<pair<const double,long> > > */
static void G__setup_memvarmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   { map<double,long,less<double>,allocator<pair<const double,long> > > *p; p=(map<double,long,less<double>,allocator<pair<const double,long> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,long,less<double>,allocator<pair<const double,long> > >::iterator */
static void G__setup_memvarmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator));
   { map<double,long,less<double>,allocator<pair<const double,long> > >::iterator *p; p=(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator */
static void G__setup_memvarmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator));
   { map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator *p; p=(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool> *p; p=(pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,float> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   { allocator<pair<const double,float> > *p; p=(allocator<pair<const double,float> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,float,less<double>,allocator<pair<const double,float> > > */
static void G__setup_memvarmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   { map<double,float,less<double>,allocator<pair<const double,float> > > *p; p=(map<double,float,less<double>,allocator<pair<const double,float> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,float,less<double>,allocator<pair<const double,float> > >::iterator */
static void G__setup_memvarmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator));
   { map<double,float,less<double>,allocator<pair<const double,float> > >::iterator *p; p=(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator */
static void G__setup_memvarmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator));
   { map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator *p; p=(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool> *p; p=(pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,double> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   { allocator<pair<const double,double> > *p; p=(allocator<pair<const double,double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,double,less<double>,allocator<pair<const double,double> > > */
static void G__setup_memvarmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   { map<double,double,less<double>,allocator<pair<const double,double> > > *p; p=(map<double,double,less<double>,allocator<pair<const double,double> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,double,less<double>,allocator<pair<const double,double> > >::iterator */
static void G__setup_memvarmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator));
   { map<double,double,less<double>,allocator<pair<const double,double> > >::iterator *p; p=(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator */
static void G__setup_memvarmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator));
   { map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator *p; p=(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool> *p; p=(pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,void*> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   { allocator<pair<const double,void*> > *p; p=(allocator<pair<const double,void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,void*,less<double>,allocator<pair<const double,void*> > > */
static void G__setup_memvarmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   { map<double,void*,less<double>,allocator<pair<const double,void*> > > *p; p=(map<double,void*,less<double>,allocator<pair<const double,void*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator */
static void G__setup_memvarmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator));
   { map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator *p; p=(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator */
static void G__setup_memvarmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   { map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator *p; p=(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool> *p; p=(pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* allocator<pair<const double,char*> > */
static void G__setup_memvarallocatorlEpairlEconstsPdoublecOcharmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   { allocator<pair<const double,char*> > *p; p=(allocator<pair<const double,char*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,char*,less<double>,allocator<pair<const double,char*> > > */
static void G__setup_memvarmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   { map<double,char*,less<double>,allocator<pair<const double,char*> > > *p; p=(map<double,char*,less<double>,allocator<pair<const double,char*> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator */
static void G__setup_memvarmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator));
   { map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator *p; p=(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator */
static void G__setup_memvarmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator));
   { map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator *p; p=(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool> */
static void G__setup_memvarpairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   { pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool> *p; p=(pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunclesslEintgR(void) {
   /* less<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEintgR));
   G__memfunc_setup("operator()",957,G__map2_48_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 11 - x i - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<int>", 892, G__map2_48_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<int>", 892, G__map2_48_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 0, 1, 1, 1, 0, "u 'less<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<int>", 1018, G__map2_48_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_48_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 1, 1, 1, 1, 0, "u 'less<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEintcOintcOboolgR(void) {
   /* binary_function<int,int,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<int,int,bool>", 2910, G__map2_49_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<int,int,bool>", 2910, G__map2_49_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<int,int,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<int,int,bool>", 3036, G__map2_49_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_49_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<int,int,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPintcOintgRsPgR(void) {
   /* allocator<pair<const int,int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR));
   G__memfunc_setup("allocator<pair<const int,int> >",2954,G__map2_51_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const int,int> >",2954,G__map2_51_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const int,int> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_51_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPintcOintgR), G__defined_typename("allocator<pair<const int,int> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const int,int>' 'allocator<pair<const int,int> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_51_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPintcOintgR), G__defined_typename("allocator<pair<const int,int> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const int,int>' 'allocator<pair<const int,int> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_51_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPintcOintgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const int,int> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_51_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const int,int>' 'allocator<pair<const int,int> >::pointer' 0 - __p h - 'allocator<pair<const int,int> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_51_0_7, 104, -1, G__defined_typename("allocator<pair<const int,int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_51_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const int,int>' 'allocator<pair<const int,int> >::pointer' 0 - __p u 'pair<const int,int>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_51_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const int,int>' 'allocator<pair<const int,int> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const int,int> >", 3080, G__map2_51_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_51_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const int,int> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR(void) {
   /* map<int,int,less<int>,allocator<pair<const int,int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR));
   G__memfunc_setup("map<int,int,less<int>,allocator<pair<const int,int> > >",5112,G__map2_52_0_1, 105, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,int,less<int>,allocator<pair<const int,int> > >",5112,G__map2_52_0_2, 105, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - first u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,int,less<int>,allocator<pair<const int,int> > >",5112,G__map2_52_0_3, 105, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 0 - first u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,int,less<int>,allocator<pair<const int,int> > >",5112,G__map2_52_0_4, 105, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_52_0_5, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_52_0_6, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_52_0_7, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_52_0_8, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_52_0_9, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_52_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_52_0_11, 104, -1, G__defined_typename("map<int,int,less<int>,allocator<pair<const int,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_52_0_12, 104, -1, G__defined_typename("map<int,int,less<int>,allocator<pair<const int,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_52_0_13, 105, -1, -1, 1, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_52_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<int,int>' 'map<int,int,less<int>,allocator<pair<const int,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_52_0_15, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - position u 'pair<int,int>' 'map<int,int,less<int>,allocator<pair<const int,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_52_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - first u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_52_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 0 - first u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_52_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_52_0_19, 104, -1, G__defined_typename("map<int,int,less<int>,allocator<pair<const int,int> > >::size_type"), 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_52_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - first u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_52_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_52_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_52_0_23, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_52_0_24, 104, -1, G__defined_typename("map<int,int,less<int>,allocator<pair<const int,int> > >::size_type"), 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_52_0_25, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_52_0_26, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<int,int,less<int>,allocator<pair<const int,int> > >", 5238, G__map2_52_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator(void) {
   /* map<int,int,less<int>,allocator<pair<const int,int> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_54_0_1, 105, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_54_0_2, 105, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_54_0_3, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_54_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEintcOintgR), G__defined_typename("map<int,int,less<int>,allocator<pair<const int,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_54_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEintcOintgR), G__defined_typename("map<int,int,less<int>,allocator<pair<const int,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_54_0_6, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_54_0_7, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_54_0_8, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_54_0_9, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_54_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_54_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_54_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_55_0_1, 105, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_55_0_2, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_55_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEintcOintgR), G__defined_typename("map<int,int,less<int>,allocator<pair<const int,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_55_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEintcOintgR), G__defined_typename("map<int,int,less<int>,allocator<pair<const int,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_55_0_5, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_55_0_6, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_55_0_7, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_55_0_8, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_55_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>",7124,G__map2_56_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>",7124,G__map2_56_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>", 7124, G__map2_56_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>", 7250, G__map2_56_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslElonggR(void) {
   /* less<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslElonggR));
   G__memfunc_setup("operator()",957,G__map2_57_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"l - - 11 - x l - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<long>", 993, G__map2_57_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<long>", 993, G__map2_57_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 0, 1, 1, 1, 0, "u 'less<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<long>", 1119, G__map2_57_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_57_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 1, 1, 1, 1, 0, "u 'less<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlElongcOlongcOboolgR(void) {
   /* binary_function<long,long,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<long,long,bool>", 3112, G__map2_58_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<long,long,bool>", 3112, G__map2_58_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<long,long,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<long,long,bool>", 3238, G__map2_58_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_58_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<long,long,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOintgRsPgR(void) {
   /* allocator<pair<const long,int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR));
   G__memfunc_setup("allocator<pair<const long,int> >",3055,G__map2_60_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,int> >",3055,G__map2_60_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,int> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_60_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR), G__defined_typename("allocator<pair<const long,int> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,int>' 'allocator<pair<const long,int> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_60_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR), G__defined_typename("allocator<pair<const long,int> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,int>' 'allocator<pair<const long,int> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_60_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOintgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,int> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_60_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,int>' 'allocator<pair<const long,int> >::pointer' 0 - __p h - 'allocator<pair<const long,int> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_60_0_7, 104, -1, G__defined_typename("allocator<pair<const long,int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_60_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,int>' 'allocator<pair<const long,int> >::pointer' 0 - __p u 'pair<const long,int>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_60_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,int>' 'allocator<pair<const long,int> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,int> >", 3181, G__map2_60_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_60_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,int> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR(void) {
   /* map<long,int,less<long>,allocator<pair<const long,int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR));
   G__memfunc_setup("map<long,int,less<long>,allocator<pair<const long,int> > >",5415,G__map2_61_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,int,less<long>,allocator<pair<const long,int> > >",5415,G__map2_61_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,int,less<long>,allocator<pair<const long,int> > >",5415,G__map2_61_0_3, 105, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 0 - first u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,int,less<long>,allocator<pair<const long,int> > >",5415,G__map2_61_0_4, 105, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_61_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_61_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_61_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_61_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_61_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_61_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_61_0_11, 104, -1, G__defined_typename("map<long,int,less<long>,allocator<pair<const long,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_61_0_12, 104, -1, G__defined_typename("map<long,int,less<long>,allocator<pair<const long,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_61_0_13, 105, -1, -1, 1, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_61_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<long,int>' 'map<long,int,less<long>,allocator<pair<const long,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_61_0_15, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - position u 'pair<long,int>' 'map<long,int,less<long>,allocator<pair<const long,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_61_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_61_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 0 - first u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_61_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_61_0_19, 104, -1, G__defined_typename("map<long,int,less<long>,allocator<pair<const long,int> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_61_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_61_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_61_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_61_0_23, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_61_0_24, 104, -1, G__defined_typename("map<long,int,less<long>,allocator<pair<const long,int> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_61_0_25, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_61_0_26, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<long,int,less<long>,allocator<pair<const long,int> > >", 5541, G__map2_61_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator(void) {
   /* map<long,int,less<long>,allocator<pair<const long,int> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_63_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_63_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_63_0_3, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_63_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOintgR), G__defined_typename("map<long,int,less<long>,allocator<pair<const long,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_63_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOintgR), G__defined_typename("map<long,int,less<long>,allocator<pair<const long,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_63_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_63_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_63_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_63_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_63_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_63_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_63_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_64_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_64_0_2, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_64_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOintgR), G__defined_typename("map<long,int,less<long>,allocator<pair<const long,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_64_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOintgR), G__defined_typename("map<long,int,less<long>,allocator<pair<const long,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_64_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_64_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_64_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_64_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_64_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>",7427,G__map2_65_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>",7427,G__map2_65_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>", 7427, G__map2_65_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>", 7553, G__map2_65_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOlonggRsPgR(void) {
   /* allocator<pair<const long,long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR));
   G__memfunc_setup("allocator<pair<const long,long> >",3156,G__map2_67_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,long> >",3156,G__map2_67_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,long> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_67_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR), G__defined_typename("allocator<pair<const long,long> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,long>' 'allocator<pair<const long,long> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_67_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR), G__defined_typename("allocator<pair<const long,long> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,long>' 'allocator<pair<const long,long> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_67_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOlonggR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,long> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_67_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,long>' 'allocator<pair<const long,long> >::pointer' 0 - __p h - 'allocator<pair<const long,long> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_67_0_7, 104, -1, G__defined_typename("allocator<pair<const long,long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_67_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,long>' 'allocator<pair<const long,long> >::pointer' 0 - __p u 'pair<const long,long>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_67_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,long>' 'allocator<pair<const long,long> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,long> >", 3282, G__map2_67_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_67_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,long> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR(void) {
   /* map<long,long,less<long>,allocator<pair<const long,long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR));
   G__memfunc_setup("map<long,long,less<long>,allocator<pair<const long,long> > >",5617,G__map2_68_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,long,less<long>,allocator<pair<const long,long> > >",5617,G__map2_68_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,long,less<long>,allocator<pair<const long,long> > >",5617,G__map2_68_0_3, 105, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 0 - first u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,long,less<long>,allocator<pair<const long,long> > >",5617,G__map2_68_0_4, 105, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_68_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_68_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_68_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_68_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_68_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_68_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_68_0_11, 104, -1, G__defined_typename("map<long,long,less<long>,allocator<pair<const long,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_68_0_12, 104, -1, G__defined_typename("map<long,long,less<long>,allocator<pair<const long,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_68_0_13, 108, -1, -1, 1, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_68_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<long,long>' 'map<long,long,less<long>,allocator<pair<const long,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_68_0_15, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - position u 'pair<long,long>' 'map<long,long,less<long>,allocator<pair<const long,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_68_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_68_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 0 - first u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_68_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_68_0_19, 104, -1, G__defined_typename("map<long,long,less<long>,allocator<pair<const long,long> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_68_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_68_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_68_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_68_0_23, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_68_0_24, 104, -1, G__defined_typename("map<long,long,less<long>,allocator<pair<const long,long> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_68_0_25, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_68_0_26, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<long,long,less<long>,allocator<pair<const long,long> > >", 5743, G__map2_68_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator(void) {
   /* map<long,long,less<long>,allocator<pair<const long,long> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_70_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_70_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_70_0_3, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_70_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOlonggR), G__defined_typename("map<long,long,less<long>,allocator<pair<const long,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_70_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOlonggR), G__defined_typename("map<long,long,less<long>,allocator<pair<const long,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_70_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_70_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_70_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_70_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_70_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_70_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_70_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_71_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_71_0_2, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_71_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOlonggR), G__defined_typename("map<long,long,less<long>,allocator<pair<const long,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_71_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOlonggR), G__defined_typename("map<long,long,less<long>,allocator<pair<const long,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_71_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_71_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_71_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_71_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_71_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>",7629,G__map2_72_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>",7629,G__map2_72_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>", 7629, G__map2_72_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>", 7755, G__map2_72_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOfloatgRsPgR(void) {
   /* allocator<pair<const long,float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR));
   G__memfunc_setup("allocator<pair<const long,float> >",3258,G__map2_74_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,float> >",3258,G__map2_74_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,float> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_74_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOfloatgR), G__defined_typename("allocator<pair<const long,float> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,float>' 'allocator<pair<const long,float> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_74_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOfloatgR), G__defined_typename("allocator<pair<const long,float> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,float>' 'allocator<pair<const long,float> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_74_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOfloatgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,float> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_74_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,float>' 'allocator<pair<const long,float> >::pointer' 0 - __p h - 'allocator<pair<const long,float> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_74_0_7, 104, -1, G__defined_typename("allocator<pair<const long,float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_74_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,float>' 'allocator<pair<const long,float> >::pointer' 0 - __p u 'pair<const long,float>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_74_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,float>' 'allocator<pair<const long,float> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,float> >", 3384, G__map2_74_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_74_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,float> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR(void) {
   /* map<long,float,less<long>,allocator<pair<const long,float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR));
   G__memfunc_setup("map<long,float,less<long>,allocator<pair<const long,float> > >",5821,G__map2_75_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,float,less<long>,allocator<pair<const long,float> > >",5821,G__map2_75_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - first u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,float,less<long>,allocator<pair<const long,float> > >",5821,G__map2_75_0_3, 105, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 0 - first u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,float,less<long>,allocator<pair<const long,float> > >",5821,G__map2_75_0_4, 105, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_75_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_75_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_75_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_75_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_75_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_75_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_75_0_11, 104, -1, G__defined_typename("map<long,float,less<long>,allocator<pair<const long,float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_75_0_12, 104, -1, G__defined_typename("map<long,float,less<long>,allocator<pair<const long,float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_75_0_13, 102, -1, -1, 1, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_75_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<long,float>' 'map<long,float,less<long>,allocator<pair<const long,float> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_75_0_15, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - position u 'pair<long,float>' 'map<long,float,less<long>,allocator<pair<const long,float> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_75_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - first u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_75_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 0 - first u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_75_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_75_0_19, 104, -1, G__defined_typename("map<long,float,less<long>,allocator<pair<const long,float> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_75_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - first u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_75_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_75_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_75_0_23, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_75_0_24, 104, -1, G__defined_typename("map<long,float,less<long>,allocator<pair<const long,float> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_75_0_25, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_75_0_26, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<long,float,less<long>,allocator<pair<const long,float> > >", 5947, G__map2_75_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator(void) {
   /* map<long,float,less<long>,allocator<pair<const long,float> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_77_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_77_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_77_0_3, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_77_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOfloatgR), G__defined_typename("map<long,float,less<long>,allocator<pair<const long,float> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_77_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOfloatgR), G__defined_typename("map<long,float,less<long>,allocator<pair<const long,float> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_77_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_77_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_77_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_77_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_77_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_77_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_77_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_78_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_78_0_2, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_78_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOfloatgR), G__defined_typename("map<long,float,less<long>,allocator<pair<const long,float> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_78_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOfloatgR), G__defined_typename("map<long,float,less<long>,allocator<pair<const long,float> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_78_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_78_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_78_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_78_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_78_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>",7833,G__map2_79_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>",7833,G__map2_79_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>", 7833, G__map2_79_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>", 7959, G__map2_79_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOdoublegRsPgR(void) {
   /* allocator<pair<const long,double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR));
   G__memfunc_setup("allocator<pair<const long,double> >",3359,G__map2_81_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,double> >",3359,G__map2_81_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,double> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_81_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR), G__defined_typename("allocator<pair<const long,double> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,double>' 'allocator<pair<const long,double> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_81_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR), G__defined_typename("allocator<pair<const long,double> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,double>' 'allocator<pair<const long,double> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_81_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOdoublegR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,double> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_81_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,double>' 'allocator<pair<const long,double> >::pointer' 0 - __p h - 'allocator<pair<const long,double> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_81_0_7, 104, -1, G__defined_typename("allocator<pair<const long,double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_81_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,double>' 'allocator<pair<const long,double> >::pointer' 0 - __p u 'pair<const long,double>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_81_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,double>' 'allocator<pair<const long,double> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,double> >", 3485, G__map2_81_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_81_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,double> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR(void) {
   /* map<long,double,less<long>,allocator<pair<const long,double> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR));
   G__memfunc_setup("map<long,double,less<long>,allocator<pair<const long,double> > >",6023,G__map2_82_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,double,less<long>,allocator<pair<const long,double> > >",6023,G__map2_82_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,double,less<long>,allocator<pair<const long,double> > >",6023,G__map2_82_0_3, 105, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 0 - first u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,double,less<long>,allocator<pair<const long,double> > >",6023,G__map2_82_0_4, 105, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_82_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_82_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_82_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_82_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_82_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_82_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_82_0_11, 104, -1, G__defined_typename("map<long,double,less<long>,allocator<pair<const long,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_82_0_12, 104, -1, G__defined_typename("map<long,double,less<long>,allocator<pair<const long,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_82_0_13, 100, -1, -1, 1, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_82_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<long,double>' 'map<long,double,less<long>,allocator<pair<const long,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_82_0_15, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - position u 'pair<long,double>' 'map<long,double,less<long>,allocator<pair<const long,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_82_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_82_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 0 - first u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_82_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_82_0_19, 104, -1, G__defined_typename("map<long,double,less<long>,allocator<pair<const long,double> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_82_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_82_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_82_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_82_0_23, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_82_0_24, 104, -1, G__defined_typename("map<long,double,less<long>,allocator<pair<const long,double> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_82_0_25, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_82_0_26, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<long,double,less<long>,allocator<pair<const long,double> > >", 6149, G__map2_82_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator(void) {
   /* map<long,double,less<long>,allocator<pair<const long,double> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_84_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_84_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_84_0_3, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_84_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR), G__defined_typename("map<long,double,less<long>,allocator<pair<const long,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_84_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR), G__defined_typename("map<long,double,less<long>,allocator<pair<const long,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_84_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_84_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_84_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_84_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_84_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_84_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_84_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_85_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_85_0_2, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_85_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR), G__defined_typename("map<long,double,less<long>,allocator<pair<const long,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_85_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOdoublegR), G__defined_typename("map<long,double,less<long>,allocator<pair<const long,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_85_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_85_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_85_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_85_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_85_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>",8035,G__map2_86_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>",8035,G__map2_86_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>", 8035, G__map2_86_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>", 8161, G__map2_86_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOvoidmUgRsPgR(void) {
   /* allocator<pair<const long,void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR));
   G__memfunc_setup("allocator<pair<const long,void*> >",3200,G__map2_88_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,void*> >",3200,G__map2_88_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,void*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_88_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR), G__defined_typename("allocator<pair<const long,void*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,void*>' 'allocator<pair<const long,void*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_88_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR), G__defined_typename("allocator<pair<const long,void*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,void*>' 'allocator<pair<const long,void*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_88_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOvoidmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,void*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_88_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,void*>' 'allocator<pair<const long,void*> >::pointer' 0 - __p h - 'allocator<pair<const long,void*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_88_0_7, 104, -1, G__defined_typename("allocator<pair<const long,void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_88_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,void*>' 'allocator<pair<const long,void*> >::pointer' 0 - __p u 'pair<const long,void*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_88_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,void*>' 'allocator<pair<const long,void*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,void*> >", 3326, G__map2_88_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_88_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,void*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR(void) {
   /* map<long,void*,less<long>,allocator<pair<const long,void*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR));
   G__memfunc_setup("map<long,void*,less<long>,allocator<pair<const long,void*> > >",5705,G__map2_89_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,void*,less<long>,allocator<pair<const long,void*> > >",5705,G__map2_89_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,void*,less<long>,allocator<pair<const long,void*> > >",5705,G__map2_89_0_3, 105, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 0 - first u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,void*,less<long>,allocator<pair<const long,void*> > >",5705,G__map2_89_0_4, 105, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_89_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_89_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_89_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_89_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_89_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_89_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_89_0_11, 104, -1, G__defined_typename("map<long,void*,less<long>,allocator<pair<const long,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_89_0_12, 104, -1, G__defined_typename("map<long,void*,less<long>,allocator<pair<const long,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_89_0_13, 89, -1, -1, 1, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_89_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<long,void*>' 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_89_0_15, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - position u 'pair<long,void*>' 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_89_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_89_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 0 - first u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_89_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_89_0_19, 104, -1, G__defined_typename("map<long,void*,less<long>,allocator<pair<const long,void*> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_89_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_89_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_89_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_89_0_23, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_89_0_24, 104, -1, G__defined_typename("map<long,void*,less<long>,allocator<pair<const long,void*> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_89_0_25, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_89_0_26, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<long,void*,less<long>,allocator<pair<const long,void*> > >", 5831, G__map2_89_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator(void) {
   /* map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_91_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_91_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_91_0_3, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_91_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR), G__defined_typename("map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_91_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR), G__defined_typename("map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_91_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_91_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_91_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_91_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_91_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_91_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_91_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_92_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_92_0_2, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_92_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR), G__defined_typename("map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_92_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOvoidmUgR), G__defined_typename("map<long,void*,less<long>,allocator<pair<const long,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_92_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_92_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_92_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_92_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_92_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>",7717,G__map2_93_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>",7717,G__map2_93_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>", 7717, G__map2_93_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>", 7843, G__map2_93_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPlongcOcharmUgRsPgR(void) {
   /* allocator<pair<const long,char*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR));
   G__memfunc_setup("allocator<pair<const long,char*> >",3180,G__map2_95_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const long,char*> >",3180,G__map2_95_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const long,char*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_95_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR), G__defined_typename("allocator<pair<const long,char*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,char*>' 'allocator<pair<const long,char*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_95_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR), G__defined_typename("allocator<pair<const long,char*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const long,char*>' 'allocator<pair<const long,char*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_95_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPlongcOcharmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const long,char*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_95_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,char*>' 'allocator<pair<const long,char*> >::pointer' 0 - __p h - 'allocator<pair<const long,char*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_95_0_7, 104, -1, G__defined_typename("allocator<pair<const long,char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_95_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const long,char*>' 'allocator<pair<const long,char*> >::pointer' 0 - __p u 'pair<const long,char*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_95_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const long,char*>' 'allocator<pair<const long,char*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const long,char*> >", 3306, G__map2_95_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_95_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const long,char*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR(void) {
   /* map<long,char*,less<long>,allocator<pair<const long,char*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR));
   G__memfunc_setup("map<long,char*,less<long>,allocator<pair<const long,char*> > >",5665,G__map2_96_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,char*,less<long>,allocator<pair<const long,char*> > >",5665,G__map2_96_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,char*,less<long>,allocator<pair<const long,char*> > >",5665,G__map2_96_0_3, 105, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 0 - first u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<long,char*,less<long>,allocator<pair<const long,char*> > >",5665,G__map2_96_0_4, 105, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_96_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_96_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_96_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_96_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_96_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_96_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_96_0_11, 104, -1, G__defined_typename("map<long,char*,less<long>,allocator<pair<const long,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_96_0_12, 104, -1, G__defined_typename("map<long,char*,less<long>,allocator<pair<const long,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_96_0_13, 67, -1, -1, 1, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_96_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<long,char*>' 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_96_0_15, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - position u 'pair<long,char*>' 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_96_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_96_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 0 - first u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_96_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_96_0_19, 104, -1, G__defined_typename("map<long,char*,less<long>,allocator<pair<const long,char*> > >::size_type"), 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_96_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_96_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_96_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_96_0_23, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_96_0_24, 104, -1, G__defined_typename("map<long,char*,less<long>,allocator<pair<const long,char*> > >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_96_0_25, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_96_0_26, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<long,char*,less<long>,allocator<pair<const long,char*> > >", 5791, G__map2_96_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator(void) {
   /* map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_98_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_98_0_2, 105, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_98_0_3, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_98_0_4, 117, G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR), G__defined_typename("map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_98_0_5, 85, G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR), G__defined_typename("map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_98_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_98_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_98_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_98_0_9, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_98_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_98_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_98_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_99_0_1, 105, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_99_0_2, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_99_0_3, 117, G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR), G__defined_typename("map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_99_0_4, 85, G__get_linked_tagnum(&G__LN_pairlElongcOcharmUgR), G__defined_typename("map<long,char*,less<long>,allocator<pair<const long,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_99_0_5, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_99_0_6, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_99_0_7, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_99_0_8, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_99_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>",7677,G__map2_100_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>",7677,G__map2_100_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>", 7677, G__map2_100_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>", 7803, G__map2_100_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEdoublegR(void) {
   /* less<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   G__memfunc_setup("operator()",957,G__map2_101_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"d - - 11 - x d - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<double>", 1196, G__map2_101_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<double>", 1196, G__map2_101_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'less<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<double>", 1322, G__map2_101_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_101_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'less<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEdoublecOdoublecOboolgR(void) {
   /* binary_function<double,double,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<double,double,bool>", 3518, G__map2_102_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<double,double,bool>", 3518, G__map2_102_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<double,double,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<double,double,bool>", 3644, G__map2_102_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_102_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<double,double,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOintgRsPgR(void) {
   /* allocator<pair<const double,int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR));
   G__memfunc_setup("allocator<pair<const double,int> >",3258,G__map2_104_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,int> >",3258,G__map2_104_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,int> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_104_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR), G__defined_typename("allocator<pair<const double,int> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,int>' 'allocator<pair<const double,int> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_104_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR), G__defined_typename("allocator<pair<const double,int> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,int>' 'allocator<pair<const double,int> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_104_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOintgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,int> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_104_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,int>' 'allocator<pair<const double,int> >::pointer' 0 - __p h - 'allocator<pair<const double,int> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_104_0_7, 104, -1, G__defined_typename("allocator<pair<const double,int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_104_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,int>' 'allocator<pair<const double,int> >::pointer' 0 - __p u 'pair<const double,int>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_104_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,int>' 'allocator<pair<const double,int> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,int> >", 3384, G__map2_104_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_104_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,int> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR(void) {
   /* map<double,int,less<double>,allocator<pair<const double,int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR));
   G__memfunc_setup("map<double,int,less<double>,allocator<pair<const double,int> > >",6024,G__map2_105_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,int,less<double>,allocator<pair<const double,int> > >",6024,G__map2_105_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,int,less<double>,allocator<pair<const double,int> > >",6024,G__map2_105_0_3, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 0 - first u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,int,less<double>,allocator<pair<const double,int> > >",6024,G__map2_105_0_4, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_105_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_105_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_105_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_105_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_105_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_105_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_105_0_11, 104, -1, G__defined_typename("map<double,int,less<double>,allocator<pair<const double,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_105_0_12, 104, -1, G__defined_typename("map<double,int,less<double>,allocator<pair<const double,int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_105_0_13, 105, -1, -1, 1, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_105_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<double,int>' 'map<double,int,less<double>,allocator<pair<const double,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_105_0_15, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - position u 'pair<double,int>' 'map<double,int,less<double>,allocator<pair<const double,int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_105_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_105_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 0 - first u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_105_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_105_0_19, 104, -1, G__defined_typename("map<double,int,less<double>,allocator<pair<const double,int> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_105_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_105_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_105_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_105_0_23, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_105_0_24, 104, -1, G__defined_typename("map<double,int,less<double>,allocator<pair<const double,int> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_105_0_25, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_105_0_26, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<double,int,less<double>,allocator<pair<const double,int> > >", 6150, G__map2_105_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator(void) {
   /* map<double,int,less<double>,allocator<pair<const double,int> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_107_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_107_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_107_0_3, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_107_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR), G__defined_typename("map<double,int,less<double>,allocator<pair<const double,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_107_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR), G__defined_typename("map<double,int,less<double>,allocator<pair<const double,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_107_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_107_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_107_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_107_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_107_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_107_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_107_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_108_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_108_0_2, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_108_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR), G__defined_typename("map<double,int,less<double>,allocator<pair<const double,int> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_108_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOintgR), G__defined_typename("map<double,int,less<double>,allocator<pair<const double,int> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_108_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_108_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_108_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_108_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_108_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>",8036,G__map2_109_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>",8036,G__map2_109_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>", 8036, G__map2_109_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>", 8162, G__map2_109_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOlonggRsPgR(void) {
   /* allocator<pair<const double,long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR));
   G__memfunc_setup("allocator<pair<const double,long> >",3359,G__map2_111_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,long> >",3359,G__map2_111_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,long> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_111_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR), G__defined_typename("allocator<pair<const double,long> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,long>' 'allocator<pair<const double,long> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_111_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR), G__defined_typename("allocator<pair<const double,long> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,long>' 'allocator<pair<const double,long> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_111_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOlonggR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,long> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_111_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,long>' 'allocator<pair<const double,long> >::pointer' 0 - __p h - 'allocator<pair<const double,long> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_111_0_7, 104, -1, G__defined_typename("allocator<pair<const double,long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_111_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,long>' 'allocator<pair<const double,long> >::pointer' 0 - __p u 'pair<const double,long>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_111_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,long>' 'allocator<pair<const double,long> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,long> >", 3485, G__map2_111_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_111_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,long> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR(void) {
   /* map<double,long,less<double>,allocator<pair<const double,long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR));
   G__memfunc_setup("map<double,long,less<double>,allocator<pair<const double,long> > >",6226,G__map2_112_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,long,less<double>,allocator<pair<const double,long> > >",6226,G__map2_112_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,long,less<double>,allocator<pair<const double,long> > >",6226,G__map2_112_0_3, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 0 - first u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,long,less<double>,allocator<pair<const double,long> > >",6226,G__map2_112_0_4, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_112_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_112_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_112_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_112_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_112_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_112_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_112_0_11, 104, -1, G__defined_typename("map<double,long,less<double>,allocator<pair<const double,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_112_0_12, 104, -1, G__defined_typename("map<double,long,less<double>,allocator<pair<const double,long> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_112_0_13, 108, -1, -1, 1, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_112_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<double,long>' 'map<double,long,less<double>,allocator<pair<const double,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_112_0_15, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - position u 'pair<double,long>' 'map<double,long,less<double>,allocator<pair<const double,long> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_112_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_112_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 0 - first u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_112_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_112_0_19, 104, -1, G__defined_typename("map<double,long,less<double>,allocator<pair<const double,long> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_112_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_112_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_112_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_112_0_23, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_112_0_24, 104, -1, G__defined_typename("map<double,long,less<double>,allocator<pair<const double,long> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_112_0_25, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_112_0_26, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<double,long,less<double>,allocator<pair<const double,long> > >", 6352, G__map2_112_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator(void) {
   /* map<double,long,less<double>,allocator<pair<const double,long> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_114_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_114_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_114_0_3, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_114_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR), G__defined_typename("map<double,long,less<double>,allocator<pair<const double,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_114_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR), G__defined_typename("map<double,long,less<double>,allocator<pair<const double,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_114_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_114_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_114_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_114_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_114_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_114_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_114_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_115_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_115_0_2, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_115_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR), G__defined_typename("map<double,long,less<double>,allocator<pair<const double,long> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_115_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOlonggR), G__defined_typename("map<double,long,less<double>,allocator<pair<const double,long> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_115_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_115_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_115_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_115_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_115_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>",8238,G__map2_116_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>",8238,G__map2_116_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>", 8238, G__map2_116_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>", 8364, G__map2_116_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOfloatgRsPgR(void) {
   /* allocator<pair<const double,float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR));
   G__memfunc_setup("allocator<pair<const double,float> >",3461,G__map2_118_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,float> >",3461,G__map2_118_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,float> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_118_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOfloatgR), G__defined_typename("allocator<pair<const double,float> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,float>' 'allocator<pair<const double,float> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_118_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOfloatgR), G__defined_typename("allocator<pair<const double,float> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,float>' 'allocator<pair<const double,float> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_118_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOfloatgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,float> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_118_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,float>' 'allocator<pair<const double,float> >::pointer' 0 - __p h - 'allocator<pair<const double,float> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_118_0_7, 104, -1, G__defined_typename("allocator<pair<const double,float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_118_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,float>' 'allocator<pair<const double,float> >::pointer' 0 - __p u 'pair<const double,float>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_118_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,float>' 'allocator<pair<const double,float> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,float> >", 3587, G__map2_118_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_118_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,float> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR(void) {
   /* map<double,float,less<double>,allocator<pair<const double,float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR));
   G__memfunc_setup("map<double,float,less<double>,allocator<pair<const double,float> > >",6430,G__map2_119_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,float,less<double>,allocator<pair<const double,float> > >",6430,G__map2_119_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - first u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,float,less<double>,allocator<pair<const double,float> > >",6430,G__map2_119_0_3, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 0 - first u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,float,less<double>,allocator<pair<const double,float> > >",6430,G__map2_119_0_4, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_119_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_119_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_119_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_119_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_119_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_119_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_119_0_11, 104, -1, G__defined_typename("map<double,float,less<double>,allocator<pair<const double,float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_119_0_12, 104, -1, G__defined_typename("map<double,float,less<double>,allocator<pair<const double,float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_119_0_13, 102, -1, -1, 1, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_119_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<double,float>' 'map<double,float,less<double>,allocator<pair<const double,float> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_119_0_15, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - position u 'pair<double,float>' 'map<double,float,less<double>,allocator<pair<const double,float> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_119_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - first u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_119_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 0 - first u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_119_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_119_0_19, 104, -1, G__defined_typename("map<double,float,less<double>,allocator<pair<const double,float> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_119_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - first u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_119_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_119_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_119_0_23, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_119_0_24, 104, -1, G__defined_typename("map<double,float,less<double>,allocator<pair<const double,float> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_119_0_25, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_119_0_26, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<double,float,less<double>,allocator<pair<const double,float> > >", 6556, G__map2_119_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator(void) {
   /* map<double,float,less<double>,allocator<pair<const double,float> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_121_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_121_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_121_0_3, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_121_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOfloatgR), G__defined_typename("map<double,float,less<double>,allocator<pair<const double,float> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_121_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOfloatgR), G__defined_typename("map<double,float,less<double>,allocator<pair<const double,float> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_121_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_121_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_121_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_121_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_121_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_121_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_121_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_122_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_122_0_2, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_122_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOfloatgR), G__defined_typename("map<double,float,less<double>,allocator<pair<const double,float> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_122_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOfloatgR), G__defined_typename("map<double,float,less<double>,allocator<pair<const double,float> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_122_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_122_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_122_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_122_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_122_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>",8442,G__map2_123_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>",8442,G__map2_123_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>", 8442, G__map2_123_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>", 8568, G__map2_123_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOdoublegRsPgR(void) {
   /* allocator<pair<const double,double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR));
   G__memfunc_setup("allocator<pair<const double,double> >",3562,G__map2_125_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,double> >",3562,G__map2_125_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,double> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_125_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR), G__defined_typename("allocator<pair<const double,double> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,double>' 'allocator<pair<const double,double> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_125_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR), G__defined_typename("allocator<pair<const double,double> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,double>' 'allocator<pair<const double,double> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_125_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOdoublegR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,double> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_125_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,double>' 'allocator<pair<const double,double> >::pointer' 0 - __p h - 'allocator<pair<const double,double> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_125_0_7, 104, -1, G__defined_typename("allocator<pair<const double,double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_125_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,double>' 'allocator<pair<const double,double> >::pointer' 0 - __p u 'pair<const double,double>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_125_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,double>' 'allocator<pair<const double,double> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,double> >", 3688, G__map2_125_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_125_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,double> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR(void) {
   /* map<double,double,less<double>,allocator<pair<const double,double> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR));
   G__memfunc_setup("map<double,double,less<double>,allocator<pair<const double,double> > >",6632,G__map2_126_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,double,less<double>,allocator<pair<const double,double> > >",6632,G__map2_126_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,double,less<double>,allocator<pair<const double,double> > >",6632,G__map2_126_0_3, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 0 - first u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,double,less<double>,allocator<pair<const double,double> > >",6632,G__map2_126_0_4, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_126_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_126_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_126_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_126_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_126_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_126_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_126_0_11, 104, -1, G__defined_typename("map<double,double,less<double>,allocator<pair<const double,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_126_0_12, 104, -1, G__defined_typename("map<double,double,less<double>,allocator<pair<const double,double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_126_0_13, 100, -1, -1, 1, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_126_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<double,double>' 'map<double,double,less<double>,allocator<pair<const double,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_126_0_15, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - position u 'pair<double,double>' 'map<double,double,less<double>,allocator<pair<const double,double> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_126_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_126_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 0 - first u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_126_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_126_0_19, 104, -1, G__defined_typename("map<double,double,less<double>,allocator<pair<const double,double> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_126_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_126_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_126_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_126_0_23, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_126_0_24, 104, -1, G__defined_typename("map<double,double,less<double>,allocator<pair<const double,double> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_126_0_25, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_126_0_26, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<double,double,less<double>,allocator<pair<const double,double> > >", 6758, G__map2_126_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator(void) {
   /* map<double,double,less<double>,allocator<pair<const double,double> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_128_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_128_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_128_0_3, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_128_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR), G__defined_typename("map<double,double,less<double>,allocator<pair<const double,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_128_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR), G__defined_typename("map<double,double,less<double>,allocator<pair<const double,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_128_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_128_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_128_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_128_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_128_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_128_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_128_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_129_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_129_0_2, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_129_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR), G__defined_typename("map<double,double,less<double>,allocator<pair<const double,double> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_129_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOdoublegR), G__defined_typename("map<double,double,less<double>,allocator<pair<const double,double> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_129_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_129_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_129_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_129_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_129_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>",8644,G__map2_130_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>",8644,G__map2_130_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>", 8644, G__map2_130_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>", 8770, G__map2_130_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR(void) {
   /* allocator<pair<const double,void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR));
   G__memfunc_setup("allocator<pair<const double,void*> >",3403,G__map2_132_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,void*> >",3403,G__map2_132_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,void*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_132_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR), G__defined_typename("allocator<pair<const double,void*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,void*>' 'allocator<pair<const double,void*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_132_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR), G__defined_typename("allocator<pair<const double,void*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,void*>' 'allocator<pair<const double,void*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_132_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOvoidmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,void*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_132_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,void*>' 'allocator<pair<const double,void*> >::pointer' 0 - __p h - 'allocator<pair<const double,void*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_132_0_7, 104, -1, G__defined_typename("allocator<pair<const double,void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_132_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,void*>' 'allocator<pair<const double,void*> >::pointer' 0 - __p u 'pair<const double,void*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_132_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,void*>' 'allocator<pair<const double,void*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,void*> >", 3529, G__map2_132_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_132_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,void*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR(void) {
   /* map<double,void*,less<double>,allocator<pair<const double,void*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR));
   G__memfunc_setup("map<double,void*,less<double>,allocator<pair<const double,void*> > >",6314,G__map2_133_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,void*,less<double>,allocator<pair<const double,void*> > >",6314,G__map2_133_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,void*,less<double>,allocator<pair<const double,void*> > >",6314,G__map2_133_0_3, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 0 - first u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,void*,less<double>,allocator<pair<const double,void*> > >",6314,G__map2_133_0_4, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_133_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_133_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_133_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_133_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_133_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_133_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_133_0_11, 104, -1, G__defined_typename("map<double,void*,less<double>,allocator<pair<const double,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_133_0_12, 104, -1, G__defined_typename("map<double,void*,less<double>,allocator<pair<const double,void*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_133_0_13, 89, -1, -1, 1, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_133_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<double,void*>' 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_133_0_15, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - position u 'pair<double,void*>' 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_133_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_133_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 0 - first u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_133_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_133_0_19, 104, -1, G__defined_typename("map<double,void*,less<double>,allocator<pair<const double,void*> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_133_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_133_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_133_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_133_0_23, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_133_0_24, 104, -1, G__defined_typename("map<double,void*,less<double>,allocator<pair<const double,void*> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_133_0_25, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_133_0_26, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<double,void*,less<double>,allocator<pair<const double,void*> > >", 6440, G__map2_133_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator(void) {
   /* map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_135_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_135_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_135_0_3, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_135_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR), G__defined_typename("map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_135_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR), G__defined_typename("map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_135_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_135_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_135_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_135_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_135_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_135_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_135_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_136_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_136_0_2, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_136_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR), G__defined_typename("map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_136_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOvoidmUgR), G__defined_typename("map<double,void*,less<double>,allocator<pair<const double,void*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_136_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_136_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_136_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_136_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_136_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>",8326,G__map2_137_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>",8326,G__map2_137_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>", 8326, G__map2_137_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>", 8452, G__map2_137_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEpairlEconstsPdoublecOcharmUgRsPgR(void) {
   /* allocator<pair<const double,char*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR));
   G__memfunc_setup("allocator<pair<const double,char*> >",3383,G__map2_139_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<pair<const double,char*> >",3383,G__map2_139_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'allocator<pair<const double,char*> >' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_139_0_3, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR), G__defined_typename("allocator<pair<const double,char*> >::pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,char*>' 'allocator<pair<const double,char*> >::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__map2_139_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR), G__defined_typename("allocator<pair<const double,char*> >::const_pointer"), 0, 1, 1, 1, 8, "u 'pair<const double,char*>' 'allocator<pair<const double,char*> >::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__map2_139_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEconstsPdoublecOcharmUgR), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<pair<const double,char*> >::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__map2_139_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,char*>' 'allocator<pair<const double,char*> >::pointer' 0 - __p h - 'allocator<pair<const double,char*> >::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_139_0_7, 104, -1, G__defined_typename("allocator<pair<const double,char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__map2_139_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'pair<const double,char*>' 'allocator<pair<const double,char*> >::pointer' 0 - __p u 'pair<const double,char*>' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__map2_139_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'pair<const double,char*>' 'allocator<pair<const double,char*> >::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<pair<const double,char*> >", 3509, G__map2_139_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__map2_139_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'allocator<pair<const double,char*> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR(void) {
   /* map<double,char*,less<double>,allocator<pair<const double,char*> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR));
   G__memfunc_setup("map<double,char*,less<double>,allocator<pair<const double,char*> > >",6274,G__map2_140_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,char*,less<double>,allocator<pair<const double,char*> > >",6274,G__map2_140_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,char*,less<double>,allocator<pair<const double,char*> > >",6274,G__map2_140_0_3, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 0 - first u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<double,char*,less<double>,allocator<pair<const double,char*> > >",6274,G__map2_140_0_4, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_140_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__map2_140_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__map2_140_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__map2_140_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__map2_140_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__map2_140_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__map2_140_0_11, 104, -1, G__defined_typename("map<double,char*,less<double>,allocator<pair<const double,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__map2_140_0_12, 104, -1, G__defined_typename("map<double,char*,less<double>,allocator<pair<const double,char*> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__map2_140_0_13, 67, -1, -1, 1, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_140_0_14, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<double,char*>' 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_140_0_15, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - position u 'pair<double,char*>' 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_140_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__map2_140_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 0 - first u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_140_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_140_0_19, 104, -1, G__defined_typename("map<double,char*,less<double>,allocator<pair<const double,char*> > >::size_type"), 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__map2_140_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__map2_140_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__map2_140_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__map2_140_0_23, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__map2_140_0_24, 104, -1, G__defined_typename("map<double,char*,less<double>,allocator<pair<const double,char*> > >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__map2_140_0_25, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__map2_140_0_26, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<double,char*,less<double>,allocator<pair<const double,char*> > >", 6400, G__map2_140_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator(void) {
   /* map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__map2_142_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__map2_142_0_2, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_142_0_3, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_142_0_4, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR), G__defined_typename("map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_142_0_5, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR), G__defined_typename("map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_142_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_142_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_142_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_142_0_9, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__map2_142_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__map2_142_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__map2_142_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator(void) {
   /* map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__map2_143_0_1, 105, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__map2_143_0_2, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__map2_143_0_3, 117, G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR), G__defined_typename("map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__map2_143_0_4, 85, G__get_linked_tagnum(&G__LN_pairlEdoublecOcharmUgR), G__defined_typename("map<double,char*,less<double>,allocator<pair<const double,char*> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_143_0_5, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__map2_143_0_6, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_143_0_7, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__map2_143_0_8, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__map2_143_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>",8286,G__map2_144_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>",8286,G__map2_144_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>", 8286, G__map2_144_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>", 8412, G__map2_144_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC__=3",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC_MINOR__=4",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__MAP_DLL=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"INCLUDE_CINTDICTVERSION=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__CINTDICTVERSION=20090608",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global() {
  G__cpp_setup_global0();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
   G__memfunc_setup("operator==", 998, G__map2__0_112, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 11 - x u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_113, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 11 - x u 'map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_114, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - x u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_115, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - x u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_116, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - x u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_117, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - x u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_118, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - x u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_119, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - x u 'map<int,int,less<int>,allocator<pair<const int,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_120, 117, G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - first1 u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - last1 "
"u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - first2 u 'map<int,int,less<int>,allocator<pair<const int,int> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_121, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - x u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_122, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - x u 'map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_123, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_124, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_125, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_126, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_127, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_128, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - x u 'map<long,int,less<long>,allocator<pair<const long,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_129, 117, G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first1 u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last1 "
"u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - first2 u 'map<long,int,less<long>,allocator<pair<const long,int> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_130, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - x u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_131, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - x u 'map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_132, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_133, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_134, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_135, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_136, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_137, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - x u 'map<long,long,less<long>,allocator<pair<const long,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_138, 117, G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first1 u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last1 "
"u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - first2 u 'map<long,long,less<long>,allocator<pair<const long,long> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_139, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 11 - x u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_140, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 11 - x u 'map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_141, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - x u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_142, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - x u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_143, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - x u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_144, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - x u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_145, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - x u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_146, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - x u 'map<long,float,less<long>,allocator<pair<const long,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_147, 117, G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - first1 u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - last1 "
"u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - first2 u 'map<long,float,less<long>,allocator<pair<const long,float> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_148, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - x u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_149, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - x u 'map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_150, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_151, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_152, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_153, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_154, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_155, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - x u 'map<long,double,less<long>,allocator<pair<const long,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_156, 117, G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first1 u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last1 "
"u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - first2 u 'map<long,double,less<long>,allocator<pair<const long,double> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_157, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - x u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_158, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - x u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_159, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_160, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_161, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_162, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_163, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_164, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - x u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_165, 117, G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first1 u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last1 "
"u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - first2 u 'map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_166, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - x u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_167, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - x u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_168, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_169, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_170, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_171, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_172, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_173, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - x u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_174, 117, G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first1 u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last1 "
"u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - first2 u 'map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_175, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - x u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_176, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - x u 'map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_177, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_178, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_179, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_180, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_181, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_182, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - x u 'map<double,int,less<double>,allocator<pair<const double,int> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_183, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first1 u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last1 "
"u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - first2 u 'map<double,int,less<double>,allocator<pair<const double,int> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_184, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - x u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_185, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - x u 'map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_186, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_187, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_188, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_189, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_190, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_191, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - x u 'map<double,long,less<double>,allocator<pair<const double,long> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_192, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first1 u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last1 "
"u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - first2 u 'map<double,long,less<double>,allocator<pair<const double,long> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_193, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 11 - x u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_194, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 11 - x u 'map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_195, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - x u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_196, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - x u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_197, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - x u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_198, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - x u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_199, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - x u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_200, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - x u 'map<double,float,less<double>,allocator<pair<const double,float> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_201, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - first1 u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - last1 "
"u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - first2 u 'map<double,float,less<double>,allocator<pair<const double,float> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_202, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - x u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func2() {
   G__memfunc_setup("operator!=", 970, G__map2__0_203, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - x u 'map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_204, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_205, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_206, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_207, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_208, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_209, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - x u 'map<double,double,less<double>,allocator<pair<const double,double> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_210, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first1 u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last1 "
"u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - first2 u 'map<double,double,less<double>,allocator<pair<const double,double> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_211, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - x u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_212, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - x u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_213, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_214, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_215, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_216, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_217, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_218, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - x u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_219, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first1 u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last1 "
"u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - first2 u 'map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_220, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - x u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_221, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - x u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__map2__0_222, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__map2__0_223, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__map2__0_224, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__map2__0_225, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__map2__0_226, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__map2__0_227, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - x u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__map2__0_228, 117, G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first1 u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last1 "
"u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - first2 u 'map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LN_lesslEintgR = { "less<int>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEintcOintcOboolgR = { "binary_function<int,int,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPintcOintgR = { "pair<const int,int>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPintcOintgRsPgR = { "allocator<pair<const int,int> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEintcOintgR = { "pair<int,int>" , 115 , -1 };
G__linked_taginfo G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator = { "map<int,int,less<int>,allocator<pair<const int,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator = { "map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslElonggR = { "less<long>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlElongcOlongcOboolgR = { "binary_function<long,long,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOintgR = { "pair<const long,int>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR = { "allocator<pair<const long,int> >" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR = { "map<long,int,less<long>,allocator<pair<const long,int> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOintgR = { "pair<long,int>" , 115 , -1 };
G__linked_taginfo G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator = { "map<long,int,less<long>,allocator<pair<const long,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator = { "map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOlonggR = { "pair<const long,long>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR = { "allocator<pair<const long,long> >" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR = { "map<long,long,less<long>,allocator<pair<const long,long> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOlonggR = { "pair<long,long>" , 115 , -1 };
G__linked_taginfo G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator = { "map<long,long,less<long>,allocator<pair<const long,long> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator = { "map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOfloatgR = { "pair<const long,float>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR = { "allocator<pair<const long,float> >" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR = { "map<long,float,less<long>,allocator<pair<const long,float> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOfloatgR = { "pair<long,float>" , 115 , -1 };
G__linked_taginfo G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator = { "map<long,float,less<long>,allocator<pair<const long,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator = { "map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOdoublegR = { "pair<const long,double>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR = { "allocator<pair<const long,double> >" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR = { "map<long,double,less<long>,allocator<pair<const long,double> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOdoublegR = { "pair<long,double>" , 115 , -1 };
G__linked_taginfo G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator = { "map<long,double,less<long>,allocator<pair<const long,double> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator = { "map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOvoidmUgR = { "pair<const long,void*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR = { "allocator<pair<const long,void*> >" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR = { "map<long,void*,less<long>,allocator<pair<const long,void*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOvoidmUgR = { "pair<long,void*>" , 115 , -1 };
G__linked_taginfo G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator = { "map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator = { "map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPlongcOcharmUgR = { "pair<const long,char*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR = { "allocator<pair<const long,char*> >" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR = { "map<long,char*,less<long>,allocator<pair<const long,char*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlElongcOcharmUgR = { "pair<long,char*>" , 115 , -1 };
G__linked_taginfo G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator = { "map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator = { "map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslEdoublegR = { "less<double>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEdoublecOdoublecOboolgR = { "binary_function<double,double,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOintgR = { "pair<const double,int>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR = { "allocator<pair<const double,int> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR = { "map<double,int,less<double>,allocator<pair<const double,int> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOintgR = { "pair<double,int>" , 115 , -1 };
G__linked_taginfo G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator = { "map<double,int,less<double>,allocator<pair<const double,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator = { "map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOlonggR = { "pair<const double,long>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR = { "allocator<pair<const double,long> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR = { "map<double,long,less<double>,allocator<pair<const double,long> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOlonggR = { "pair<double,long>" , 115 , -1 };
G__linked_taginfo G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator = { "map<double,long,less<double>,allocator<pair<const double,long> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator = { "map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOfloatgR = { "pair<const double,float>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR = { "allocator<pair<const double,float> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR = { "map<double,float,less<double>,allocator<pair<const double,float> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOfloatgR = { "pair<double,float>" , 115 , -1 };
G__linked_taginfo G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator = { "map<double,float,less<double>,allocator<pair<const double,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator = { "map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOdoublegR = { "pair<const double,double>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR = { "allocator<pair<const double,double> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR = { "map<double,double,less<double>,allocator<pair<const double,double> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator = { "map<double,double,less<double>,allocator<pair<const double,double> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator = { "map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOvoidmUgR = { "pair<const double,void*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR = { "allocator<pair<const double,void*> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR = { "map<double,void*,less<double>,allocator<pair<const double,void*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOvoidmUgR = { "pair<double,void*>" , 115 , -1 };
G__linked_taginfo G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator = { "map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator = { "map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_pairlEconstsPdoublecOcharmUgR = { "pair<const double,char*>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR = { "allocator<pair<const double,char*> >" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR = { "map<double,char*,less<double>,allocator<pair<const double,char*> > >" , 99 , -1 };
G__linked_taginfo G__LN_pairlEdoublecOcharmUgR = { "pair<double,char*>" , 115 , -1 };
G__linked_taginfo G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator = { "map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator = { "map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>" , 115 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable() {
  G__LN_lesslEintgR.tagnum = -1 ;
  G__LN_binary_functionlEintcOintcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPintcOintgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPintcOintgRsPgR.tagnum = -1 ;
  G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEintcOintgR.tagnum = -1 ;
  G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslElonggR.tagnum = -1 ;
  G__LN_binary_functionlElongcOlongcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOintgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR.tagnum = -1 ;
  G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOintgR.tagnum = -1 ;
  G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOlonggR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR.tagnum = -1 ;
  G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOlonggR.tagnum = -1 ;
  G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOfloatgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR.tagnum = -1 ;
  G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOfloatgR.tagnum = -1 ;
  G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOdoublegR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR.tagnum = -1 ;
  G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOdoublegR.tagnum = -1 ;
  G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOvoidmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR.tagnum = -1 ;
  G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOvoidmUgR.tagnum = -1 ;
  G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPlongcOcharmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR.tagnum = -1 ;
  G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlElongcOcharmUgR.tagnum = -1 ;
  G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslEdoublegR.tagnum = -1 ;
  G__LN_binary_functionlEdoublecOdoublecOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOintgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR.tagnum = -1 ;
  G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOintgR.tagnum = -1 ;
  G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOlonggR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR.tagnum = -1 ;
  G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOlonggR.tagnum = -1 ;
  G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOfloatgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR.tagnum = -1 ;
  G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOfloatgR.tagnum = -1 ;
  G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOdoublegR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR.tagnum = -1 ;
  G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOvoidmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR.tagnum = -1 ;
  G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOvoidmUgR.tagnum = -1 ;
  G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_pairlEconstsPdoublecOcharmUgR.tagnum = -1 ;
  G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR.tagnum = -1 ;
  G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR.tagnum = -1 ;
  G__LN_pairlEdoublecOcharmUgR.tagnum = -1 ;
  G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEintgR),sizeof(less<int>),-1,0,(char*)NULL,G__setup_memvarlesslEintgR,G__setup_memfunclesslEintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR),sizeof(binary_function<int,int,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEintcOintcOboolgR,G__setup_memfuncbinary_functionlEintcOintcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPintcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPintcOintgRsPgR),sizeof(allocator<pair<const int,int> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPintcOintgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPintcOintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),sizeof(map<int,int,less<int>,allocator<pair<const int,int> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR,G__setup_memfuncmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEintcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator),sizeof(map<int,int,less<int>,allocator<pair<const int,int> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator),sizeof(map<int,int,less<int>,allocator<pair<const int,int> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<int,int,less<int>,allocator<pair<const int,int> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslElonggR),sizeof(less<long>),-1,0,(char*)NULL,G__setup_memvarlesslElonggR,G__setup_memfunclesslElonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR),sizeof(binary_function<long,long,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlElongcOlongcOboolgR,G__setup_memfuncbinary_functionlElongcOlongcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOintgRsPgR),sizeof(allocator<pair<const long,int> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOintgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),sizeof(map<long,int,less<long>,allocator<pair<const long,int> > >),-1,36608,(char*)NULL,G__setup_memvarmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR,G__setup_memfuncmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator),sizeof(map<long,int,less<long>,allocator<pair<const long,int> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator),sizeof(map<long,int,less<long>,allocator<pair<const long,int> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<long,int,less<long>,allocator<pair<const long,int> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOlonggRsPgR),sizeof(allocator<pair<const long,long> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOlonggRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOlonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR),sizeof(map<long,long,less<long>,allocator<pair<const long,long> > >),-1,36608,(char*)NULL,G__setup_memvarmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR,G__setup_memfuncmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator),sizeof(map<long,long,less<long>,allocator<pair<const long,long> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator,G__setup_memfuncmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator),sizeof(map<long,long,less<long>,allocator<pair<const long,long> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<long,long,less<long>,allocator<pair<const long,long> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplElongcOlongcOlesslElonggRcOallocatorlEpairlEconstsPlongcOlonggRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOfloatgRsPgR),sizeof(allocator<pair<const long,float> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOfloatgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR),sizeof(map<long,float,less<long>,allocator<pair<const long,float> > >),-1,36608,(char*)NULL,G__setup_memvarmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR,G__setup_memfuncmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator),sizeof(map<long,float,less<long>,allocator<pair<const long,float> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator),sizeof(map<long,float,less<long>,allocator<pair<const long,float> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<long,float,less<long>,allocator<pair<const long,float> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplElongcOfloatcOlesslElonggRcOallocatorlEpairlEconstsPlongcOfloatgRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOdoublegRsPgR),sizeof(allocator<pair<const long,double> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOdoublegRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR),sizeof(map<long,double,less<long>,allocator<pair<const long,double> > >),-1,36608,(char*)NULL,G__setup_memvarmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR,G__setup_memfuncmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator),sizeof(map<long,double,less<long>,allocator<pair<const long,double> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator,G__setup_memfuncmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator),sizeof(map<long,double,less<long>,allocator<pair<const long,double> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<long,double,less<long>,allocator<pair<const long,double> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplElongcOdoublecOlesslElonggRcOallocatorlEpairlEconstsPlongcOdoublegRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOvoidmUgRsPgR),sizeof(allocator<pair<const long,void*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOvoidmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR),sizeof(map<long,void*,less<long>,allocator<pair<const long,void*> > >),-1,36608,(char*)NULL,G__setup_memvarmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR,G__setup_memfuncmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator),sizeof(map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator),sizeof(map<long,void*,less<long>,allocator<pair<const long,void*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<long,void*,less<long>,allocator<pair<const long,void*> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplElongcOvoidmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPlongcOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPlongcOcharmUgRsPgR),sizeof(allocator<pair<const long,char*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPlongcOcharmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPlongcOcharmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR),sizeof(map<long,char*,less<long>,allocator<pair<const long,char*> > >),-1,36608,(char*)NULL,G__setup_memvarmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR,G__setup_memfuncmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlElongcOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator),sizeof(map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator),sizeof(map<long,char*,less<long>,allocator<pair<const long,char*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<long,char*,less<long>,allocator<pair<const long,char*> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplElongcOcharmUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOcharmUgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR),sizeof(less<double>),-1,0,(char*)NULL,G__setup_memvarlesslEdoublegR,G__setup_memfunclesslEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR),sizeof(binary_function<double,double,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEdoublecOdoublecOboolgR,G__setup_memfuncbinary_functionlEdoublecOdoublecOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOintgRsPgR),sizeof(allocator<pair<const double,int> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOintgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR),sizeof(map<double,int,less<double>,allocator<pair<const double,int> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR,G__setup_memfuncmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator),sizeof(map<double,int,less<double>,allocator<pair<const double,int> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator),sizeof(map<double,int,less<double>,allocator<pair<const double,int> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<double,int,less<double>,allocator<pair<const double,int> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEdoublecOintcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOintgRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOlonggRsPgR),sizeof(allocator<pair<const double,long> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOlonggRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOlonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR),sizeof(map<double,long,less<double>,allocator<pair<const double,long> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR,G__setup_memfuncmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOlonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator),sizeof(map<double,long,less<double>,allocator<pair<const double,long> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator),sizeof(map<double,long,less<double>,allocator<pair<const double,long> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<double,long,less<double>,allocator<pair<const double,long> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEdoublecOlongcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOlonggRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOfloatgRsPgR),sizeof(allocator<pair<const double,float> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOfloatgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR),sizeof(map<double,float,less<double>,allocator<pair<const double,float> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR,G__setup_memfuncmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator),sizeof(map<double,float,less<double>,allocator<pair<const double,float> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator),sizeof(map<double,float,less<double>,allocator<pair<const double,float> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<double,float,less<double>,allocator<pair<const double,float> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEdoublecOfloatcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOfloatgRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOdoublegRsPgR),sizeof(allocator<pair<const double,double> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOdoublegRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR),sizeof(map<double,double,less<double>,allocator<pair<const double,double> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR,G__setup_memfuncmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator),sizeof(map<double,double,less<double>,allocator<pair<const double,double> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator),sizeof(map<double,double,less<double>,allocator<pair<const double,double> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<double,double,less<double>,allocator<pair<const double,double> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOvoidmUgRsPgR),sizeof(allocator<pair<const double,void*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR),sizeof(map<double,void*,less<double>,allocator<pair<const double,void*> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR,G__setup_memfuncmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator),sizeof(map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator),sizeof(map<double,void*,less<double>,allocator<pair<const double,void*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<double,void*,less<double>,allocator<pair<const double,void*> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEdoublecOvoidmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOvoidmUgRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEconstsPdoublecOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEpairlEconstsPdoublecOcharmUgRsPgR),sizeof(allocator<pair<const double,char*> >),-1,1792,(char*)NULL,G__setup_memvarallocatorlEpairlEconstsPdoublecOcharmUgRsPgR,G__setup_memfuncallocatorlEpairlEconstsPdoublecOcharmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR),sizeof(map<double,char*,less<double>,allocator<pair<const double,char*> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR,G__setup_memfuncmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LN_pairlEdoublecOcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator),sizeof(map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_maplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator),sizeof(map<double,char*,less<double>,allocator<pair<const double,char*> > >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator,G__setup_memfuncmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR),sizeof(pair<map<double,char*,less<double>,allocator<pair<const double,char*> > >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEmaplEdoublecOcharmUcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOcharmUgRsPgRsPgRcLcLiteratorcOboolgR);
}
extern "C" void G__cpp_setup(void) {
  G__check_setup_version(30051515,"G__cpp_setup()");
  G__set_cpp_environment();
  G__cpp_setup_tagtable();

  G__cpp_setup_inheritance();

  G__cpp_setup_typetable();

  G__cpp_setup_memvar();

  G__cpp_setup_memfunc();
  G__cpp_setup_global();
  G__cpp_setup_func();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc();
  return;
}
class G__cpp_setup_init {
  public:
    G__cpp_setup_init() { G__add_setup_func("G__Default",(G__incsetup)(&G__cpp_setup)); }
   ~G__cpp_setup_init() { G__remove_setup_func("G__Default"); }
};
G__cpp_setup_init G__cpp_setup_initializer;

