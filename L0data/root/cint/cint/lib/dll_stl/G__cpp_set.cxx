/********************************************************
* cint/cint/lib/dll_stl/G__cpp_set.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/
#include "cint/cint/lib/dll_stl/G__cpp_set.h" //newlink 3678 

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable();

extern "C" void G__set_cpp_environment() {
  G__add_compiledheader("cint/cint/lib/dll_stl/st.h");
  G__add_compiledheader("cint/cint/inc/cintdictversion.h");
  G__cpp_reset_tagtable();
}
#include <new>
extern "C" int G__cpp_dllrev() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* less<int> */
static int G__set_48_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<int>*) G__getstructoffset())->operator()(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__set_48_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<int> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<int>[n];
     } else {
       p = new((void*) gvp) less<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<int>;
     } else {
       p = new((void*) gvp) less<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_48_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<int>(*(less<int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<int> G__TlesslEintgR;
static int G__set_48_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<int>*) (soff+(sizeof(less<int>)*i)))->~G__TlesslEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<int>*) (soff))->~G__TlesslEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_48_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<int>* dest = (less<int>*) G__getstructoffset();
   const less<int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<int,int,bool> */
// automatic default constructor
static int G__set_49_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<int,int,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<int,int,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<int,int,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<int,int,bool>;
     } else {
       p = new((void*) gvp) binary_function<int,int,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_49_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<int,int,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<int,int,bool>(*(binary_function<int,int,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<int,int,bool> G__Tbinary_functionlEintcOintcOboolgR;
static int G__set_49_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<int,int,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<int,int,bool>*) (soff+(sizeof(binary_function<int,int,bool>)*i)))->~G__Tbinary_functionlEintcOintcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<int,int,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<int,int,bool>*) (soff))->~G__Tbinary_functionlEintcOintcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_49_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<int,int,bool>* dest = (binary_function<int,int,bool>*) G__getstructoffset();
   const binary_function<int,int,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<int> */
static int G__set_50_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<int>[n];
     } else {
       p = new((void*) gvp) allocator<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<int>;
     } else {
       p = new((void*) gvp) allocator<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_50_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<int>(*(allocator<int>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<int>(*(allocator<int>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_50_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const allocator<int>*) G__getstructoffset())->address(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_50_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const allocator<int>*) G__getstructoffset())->address(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_50_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 73, (long) ((allocator<int>*) G__getstructoffset())->allocate((allocator<int>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 73, (long) ((allocator<int>*) G__getstructoffset())->allocate((allocator<int>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_50_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->deallocate((allocator<int>::pointer) G__int(libp->para[0]), (allocator<int>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_50_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<int>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_50_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->construct((allocator<int>::pointer) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_50_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<int>*) G__getstructoffset())->destroy((allocator<int>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<int> G__TallocatorlEintgR;
static int G__set_50_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<int>*) (soff+(sizeof(allocator<int>)*i)))->~G__TallocatorlEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<int>*) (soff))->~G__TallocatorlEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_50_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<int>* dest = (allocator<int>*) G__getstructoffset();
   const allocator<int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<int,less<int>,allocator<int> > */
static int G__set_51_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<int,less<int>,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<int,less<int>,allocator<int> >[n];
     } else {
       p = new((void*) gvp) set<int,less<int>,allocator<int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<int,less<int>,allocator<int> >;
     } else {
       p = new((void*) gvp) set<int,less<int>,allocator<int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<int,less<int>,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<int,less<int>,allocator<int> >(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<int,less<int>,allocator<int> >(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >& obj = ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->operator=(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::iterator* pobj;
         set<int,less<int>,allocator<int> >::iterator xobj = ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->begin();
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::iterator* pobj;
         set<int,less<int>,allocator<int> >::iterator xobj = ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->end();
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::reverse_iterator* pobj;
         set<int,less<int>,allocator<int> >::reverse_iterator xobj = ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->rbegin();
         pobj = new set<int,less<int>,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::reverse_iterator* pobj;
         set<int,less<int>,allocator<int> >::reverse_iterator xobj = ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->rend();
         pobj = new set<int,less<int>,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const set<int,less<int>,allocator<int> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<int,less<int>,allocator<int> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<int,less<int>,allocator<int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<set<int,less<int>,allocator<int> >::iterator,bool>* pobj;
         pair<set<int,less<int>,allocator<int> >::iterator,bool> xobj = ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->insert(*(int*) G__Intref(&libp->para[0]));
         pobj = new pair<set<int,less<int>,allocator<int> >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::iterator* pobj;
         set<int,less<int>,allocator<int> >::iterator xobj = ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->insert(*((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->erase(*((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->erase(*((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])), *((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->swap(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<int,less<int>,allocator<int> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::iterator* pobj;
         const set<int,less<int>,allocator<int> >::iterator xobj = ((const set<int,less<int>,allocator<int> >*) G__getstructoffset())->find(*(int*) G__Intref(&libp->para[0]));
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<int,less<int>,allocator<int> >*) G__getstructoffset())->count(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::iterator* pobj;
         const set<int,less<int>,allocator<int> >::iterator xobj = ((const set<int,less<int>,allocator<int> >*) G__getstructoffset())->lower_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_51_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::iterator* pobj;
         const set<int,less<int>,allocator<int> >::iterator xobj = ((const set<int,less<int>,allocator<int> >*) G__getstructoffset())->upper_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<int,less<int>,allocator<int> > G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgR;
static int G__set_51_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<int,less<int>,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<int,less<int>,allocator<int> >*) (soff+(sizeof(set<int,less<int>,allocator<int> >)*i)))->~G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<int,less<int>,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<int,less<int>,allocator<int> >*) (soff))->~G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<int,less<int>,allocator<int> >::iterator */
static int G__set_52_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<int,less<int>,allocator<int> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<int,less<int>,allocator<int> >::iterator[n];
     } else {
       p = new((void*) gvp) set<int,less<int>,allocator<int> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<int,less<int>,allocator<int> >::iterator;
     } else {
       p = new((void*) gvp) set<int,less<int>,allocator<int> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<int,less<int>,allocator<int> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<int,less<int>,allocator<int> >::iterator(*(set<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<int,less<int>,allocator<int> >::iterator(*(set<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::iterator& obj = ((set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator=(*(set<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::iterator& obj = ((set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::iterator* pobj;
         set<int,less<int>,allocator<int> >::iterator xobj = ((set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::iterator& obj = ((set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::iterator* pobj;
         set<int,less<int>,allocator<int> >::iterator xobj = ((set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator==(*(set<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_52_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<int,less<int>,allocator<int> >::iterator*) G__getstructoffset())->operator!=(*(set<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<int,less<int>,allocator<int> >::iterator G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator;
static int G__set_52_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<int,less<int>,allocator<int> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<int,less<int>,allocator<int> >::iterator*) (soff+(sizeof(set<int,less<int>,allocator<int> >::iterator)*i)))->~G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<int,less<int>,allocator<int> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<int,less<int>,allocator<int> >::iterator*) (soff))->~G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<int,less<int>,allocator<int> >::reverse_iterator */
static int G__set_53_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<int,less<int>,allocator<int> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<int,less<int>,allocator<int> >::reverse_iterator(*(set<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<int,less<int>,allocator<int> >::reverse_iterator(*(set<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_53_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::reverse_iterator& obj = ((set<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator=(*(set<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_53_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const set<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_53_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const set<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_53_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::reverse_iterator& obj = ((set<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_53_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::reverse_iterator* pobj;
         set<int,less<int>,allocator<int> >::reverse_iterator xobj = ((set<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<int,less<int>,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_53_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int,less<int>,allocator<int> >::reverse_iterator& obj = ((set<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_53_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::reverse_iterator* pobj;
         set<int,less<int>,allocator<int> >::reverse_iterator xobj = ((set<int,less<int>,allocator<int> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<int,less<int>,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<int,less<int>,allocator<int> >::reverse_iterator G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator;
static int G__set_53_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<int,less<int>,allocator<int> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<int,less<int>,allocator<int> >::reverse_iterator*) (soff+(sizeof(set<int,less<int>,allocator<int> >::reverse_iterator)*i)))->~G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<int,less<int>,allocator<int> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<int,less<int>,allocator<int> >::reverse_iterator*) (soff))->~G__TsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<set<int,less<int>,allocator<int> >::iterator,bool> */
static int G__set_54_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<int,less<int>,allocator<int> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<int,less<int>,allocator<int> >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<set<int,less<int>,allocator<int> >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<int,less<int>,allocator<int> >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<set<int,less<int>,allocator<int> >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_54_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<int,less<int>,allocator<int> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<set<int,less<int>,allocator<int> >::iterator,bool>(*(set<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<set<int,less<int>,allocator<int> >::iterator,bool>(*(set<int,less<int>,allocator<int> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_54_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<set<int,less<int>,allocator<int> >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<set<int,less<int>,allocator<int> >::iterator,bool>(*(pair<set<int,less<int>,allocator<int> >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<set<int,less<int>,allocator<int> >::iterator,bool> G__TpairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR;
static int G__set_54_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<set<int,less<int>,allocator<int> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<set<int,less<int>,allocator<int> >::iterator,bool>*) (soff+(sizeof(pair<set<int,less<int>,allocator<int> >::iterator,bool>)*i)))->~G__TpairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<set<int,less<int>,allocator<int> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<set<int,less<int>,allocator<int> >::iterator,bool>*) (soff))->~G__TpairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<long> */
static int G__set_55_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<long>*) G__getstructoffset())->operator()(*(long*) G__Longref(&libp->para[0]), *(long*) G__Longref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__set_55_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<long> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<long>[n];
     } else {
       p = new((void*) gvp) less<long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<long>;
     } else {
       p = new((void*) gvp) less<long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_55_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<long>(*(less<long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<long> G__TlesslElonggR;
static int G__set_55_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<long>*) (soff+(sizeof(less<long>)*i)))->~G__TlesslElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<long>*) (soff))->~G__TlesslElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_55_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<long>* dest = (less<long>*) G__getstructoffset();
   const less<long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<long,long,bool> */
// automatic default constructor
static int G__set_56_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<long,long,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<long,long,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<long,long,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<long,long,bool>;
     } else {
       p = new((void*) gvp) binary_function<long,long,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_56_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<long,long,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<long,long,bool>(*(binary_function<long,long,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<long,long,bool> G__Tbinary_functionlElongcOlongcOboolgR;
static int G__set_56_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<long,long,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<long,long,bool>*) (soff+(sizeof(binary_function<long,long,bool>)*i)))->~G__Tbinary_functionlElongcOlongcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<long,long,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<long,long,bool>*) (soff))->~G__Tbinary_functionlElongcOlongcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_56_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<long,long,bool>* dest = (binary_function<long,long,bool>*) G__getstructoffset();
   const binary_function<long,long,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<long> */
static int G__set_57_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<long>[n];
     } else {
       p = new((void*) gvp) allocator<long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<long>;
     } else {
       p = new((void*) gvp) allocator<long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_57_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<long>(*(allocator<long>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<long>(*(allocator<long>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_57_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const allocator<long>*) G__getstructoffset())->address(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_57_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const allocator<long>*) G__getstructoffset())->address(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_57_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 76, (long) ((allocator<long>*) G__getstructoffset())->allocate((allocator<long>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 76, (long) ((allocator<long>*) G__getstructoffset())->allocate((allocator<long>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_57_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->deallocate((allocator<long>::pointer) G__int(libp->para[0]), (allocator<long>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_57_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<long>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_57_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->construct((allocator<long>::pointer) G__int(libp->para[0]), *(long*) G__Longref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_57_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<long>*) G__getstructoffset())->destroy((allocator<long>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<long> G__TallocatorlElonggR;
static int G__set_57_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<long>*) (soff+(sizeof(allocator<long>)*i)))->~G__TallocatorlElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<long>*) (soff))->~G__TallocatorlElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_57_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<long>* dest = (allocator<long>*) G__getstructoffset();
   const allocator<long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<long,less<long>,allocator<long> > */
static int G__set_58_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<long,less<long>,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<long,less<long>,allocator<long> >[n];
     } else {
       p = new((void*) gvp) set<long,less<long>,allocator<long> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<long,less<long>,allocator<long> >;
     } else {
       p = new((void*) gvp) set<long,less<long>,allocator<long> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<long,less<long>,allocator<long> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<long,less<long>,allocator<long> >(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<long,less<long>,allocator<long> >(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >& obj = ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->operator=(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::iterator* pobj;
         set<long,less<long>,allocator<long> >::iterator xobj = ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->begin();
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::iterator* pobj;
         set<long,less<long>,allocator<long> >::iterator xobj = ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->end();
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::reverse_iterator* pobj;
         set<long,less<long>,allocator<long> >::reverse_iterator xobj = ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->rbegin();
         pobj = new set<long,less<long>,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::reverse_iterator* pobj;
         set<long,less<long>,allocator<long> >::reverse_iterator xobj = ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->rend();
         pobj = new set<long,less<long>,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const set<long,less<long>,allocator<long> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<long,less<long>,allocator<long> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<long,less<long>,allocator<long> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<set<long,less<long>,allocator<long> >::iterator,bool>* pobj;
         pair<set<long,less<long>,allocator<long> >::iterator,bool> xobj = ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->insert(*(long*) G__Longref(&libp->para[0]));
         pobj = new pair<set<long,less<long>,allocator<long> >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::iterator* pobj;
         set<long,less<long>,allocator<long> >::iterator xobj = ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->insert(*((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])), *(long*) G__Longref(&libp->para[1]));
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->erase(*((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->erase(*((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])), *((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->swap(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<long,less<long>,allocator<long> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::iterator* pobj;
         const set<long,less<long>,allocator<long> >::iterator xobj = ((const set<long,less<long>,allocator<long> >*) G__getstructoffset())->find(*(long*) G__Longref(&libp->para[0]));
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<long,less<long>,allocator<long> >*) G__getstructoffset())->count(*(long*) G__Longref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::iterator* pobj;
         const set<long,less<long>,allocator<long> >::iterator xobj = ((const set<long,less<long>,allocator<long> >*) G__getstructoffset())->lower_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_58_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::iterator* pobj;
         const set<long,less<long>,allocator<long> >::iterator xobj = ((const set<long,less<long>,allocator<long> >*) G__getstructoffset())->upper_bound(*(long*) G__Longref(&libp->para[0]));
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<long,less<long>,allocator<long> > G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgR;
static int G__set_58_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<long,less<long>,allocator<long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<long,less<long>,allocator<long> >*) (soff+(sizeof(set<long,less<long>,allocator<long> >)*i)))->~G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<long,less<long>,allocator<long> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<long,less<long>,allocator<long> >*) (soff))->~G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<long,less<long>,allocator<long> >::iterator */
static int G__set_59_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<long,less<long>,allocator<long> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<long,less<long>,allocator<long> >::iterator[n];
     } else {
       p = new((void*) gvp) set<long,less<long>,allocator<long> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<long,less<long>,allocator<long> >::iterator;
     } else {
       p = new((void*) gvp) set<long,less<long>,allocator<long> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<long,less<long>,allocator<long> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<long,less<long>,allocator<long> >::iterator(*(set<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<long,less<long>,allocator<long> >::iterator(*(set<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::iterator& obj = ((set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator=(*(set<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::iterator& obj = ((set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::iterator* pobj;
         set<long,less<long>,allocator<long> >::iterator xobj = ((set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::iterator& obj = ((set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::iterator* pobj;
         set<long,less<long>,allocator<long> >::iterator xobj = ((set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator==(*(set<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_59_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<long,less<long>,allocator<long> >::iterator*) G__getstructoffset())->operator!=(*(set<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<long,less<long>,allocator<long> >::iterator G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator;
static int G__set_59_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<long,less<long>,allocator<long> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<long,less<long>,allocator<long> >::iterator*) (soff+(sizeof(set<long,less<long>,allocator<long> >::iterator)*i)))->~G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<long,less<long>,allocator<long> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<long,less<long>,allocator<long> >::iterator*) (soff))->~G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<long,less<long>,allocator<long> >::reverse_iterator */
static int G__set_60_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<long,less<long>,allocator<long> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<long,less<long>,allocator<long> >::reverse_iterator(*(set<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<long,less<long>,allocator<long> >::reverse_iterator(*(set<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_60_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::reverse_iterator& obj = ((set<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator=(*(set<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_60_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const set<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_60_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((const set<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_60_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::reverse_iterator& obj = ((set<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_60_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::reverse_iterator* pobj;
         set<long,less<long>,allocator<long> >::reverse_iterator xobj = ((set<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<long,less<long>,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_60_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<long,less<long>,allocator<long> >::reverse_iterator& obj = ((set<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_60_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::reverse_iterator* pobj;
         set<long,less<long>,allocator<long> >::reverse_iterator xobj = ((set<long,less<long>,allocator<long> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<long,less<long>,allocator<long> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<long,less<long>,allocator<long> >::reverse_iterator G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator;
static int G__set_60_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<long,less<long>,allocator<long> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<long,less<long>,allocator<long> >::reverse_iterator*) (soff+(sizeof(set<long,less<long>,allocator<long> >::reverse_iterator)*i)))->~G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<long,less<long>,allocator<long> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<long,less<long>,allocator<long> >::reverse_iterator*) (soff))->~G__TsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<set<long,less<long>,allocator<long> >::iterator,bool> */
static int G__set_61_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<long,less<long>,allocator<long> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<long,less<long>,allocator<long> >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<set<long,less<long>,allocator<long> >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<long,less<long>,allocator<long> >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<set<long,less<long>,allocator<long> >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_61_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<long,less<long>,allocator<long> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<set<long,less<long>,allocator<long> >::iterator,bool>(*(set<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<set<long,less<long>,allocator<long> >::iterator,bool>(*(set<long,less<long>,allocator<long> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_61_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<set<long,less<long>,allocator<long> >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<set<long,less<long>,allocator<long> >::iterator,bool>(*(pair<set<long,less<long>,allocator<long> >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<set<long,less<long>,allocator<long> >::iterator,bool> G__TpairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR;
static int G__set_61_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<set<long,less<long>,allocator<long> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<set<long,less<long>,allocator<long> >::iterator,bool>*) (soff+(sizeof(pair<set<long,less<long>,allocator<long> >::iterator,bool>)*i)))->~G__TpairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<set<long,less<long>,allocator<long> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<set<long,less<long>,allocator<long> >::iterator,bool>*) (soff))->~G__TpairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<float> */
static int G__set_62_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<float>*) G__getstructoffset())->operator()(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__set_62_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<float> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<float>[n];
     } else {
       p = new((void*) gvp) less<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<float>;
     } else {
       p = new((void*) gvp) less<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_62_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<float>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<float>(*(less<float>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<float> G__TlesslEfloatgR;
static int G__set_62_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<float>*) (soff+(sizeof(less<float>)*i)))->~G__TlesslEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<float>*) (soff))->~G__TlesslEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_62_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<float>* dest = (less<float>*) G__getstructoffset();
   const less<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<float,float,bool> */
// automatic default constructor
static int G__set_63_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<float,float,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<float,float,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<float,float,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<float,float,bool>;
     } else {
       p = new((void*) gvp) binary_function<float,float,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_63_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<float,float,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<float,float,bool>(*(binary_function<float,float,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<float,float,bool> G__Tbinary_functionlEfloatcOfloatcOboolgR;
static int G__set_63_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<float,float,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<float,float,bool>*) (soff+(sizeof(binary_function<float,float,bool>)*i)))->~G__Tbinary_functionlEfloatcOfloatcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<float,float,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<float,float,bool>*) (soff))->~G__Tbinary_functionlEfloatcOfloatcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_63_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<float,float,bool>* dest = (binary_function<float,float,bool>*) G__getstructoffset();
   const binary_function<float,float,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<float> */
static int G__set_64_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<float>[n];
     } else {
       p = new((void*) gvp) allocator<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<float>;
     } else {
       p = new((void*) gvp) allocator<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_64_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<float>(*(allocator<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<float>(*(allocator<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_64_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const allocator<float>*) G__getstructoffset())->address(*(float*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_64_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const allocator<float>*) G__getstructoffset())->address(*(float*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_64_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 70, (long) ((allocator<float>*) G__getstructoffset())->allocate((allocator<float>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 70, (long) ((allocator<float>*) G__getstructoffset())->allocate((allocator<float>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_64_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->deallocate((allocator<float>::pointer) G__int(libp->para[0]), (allocator<float>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_64_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<float>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_64_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->construct((allocator<float>::pointer) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_64_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<float>*) G__getstructoffset())->destroy((allocator<float>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<float> G__TallocatorlEfloatgR;
static int G__set_64_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<float>*) (soff+(sizeof(allocator<float>)*i)))->~G__TallocatorlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<float>*) (soff))->~G__TallocatorlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_64_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<float>* dest = (allocator<float>*) G__getstructoffset();
   const allocator<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<float,less<float>,allocator<float> > */
static int G__set_65_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<float,less<float>,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<float,less<float>,allocator<float> >[n];
     } else {
       p = new((void*) gvp) set<float,less<float>,allocator<float> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<float,less<float>,allocator<float> >;
     } else {
       p = new((void*) gvp) set<float,less<float>,allocator<float> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<float,less<float>,allocator<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<float,less<float>,allocator<float> >(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<float,less<float>,allocator<float> >(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >& obj = ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->operator=(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::iterator* pobj;
         set<float,less<float>,allocator<float> >::iterator xobj = ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->begin();
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::iterator* pobj;
         set<float,less<float>,allocator<float> >::iterator xobj = ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->end();
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::reverse_iterator* pobj;
         set<float,less<float>,allocator<float> >::reverse_iterator xobj = ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->rbegin();
         pobj = new set<float,less<float>,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::reverse_iterator* pobj;
         set<float,less<float>,allocator<float> >::reverse_iterator xobj = ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->rend();
         pobj = new set<float,less<float>,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const set<float,less<float>,allocator<float> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<float,less<float>,allocator<float> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<float,less<float>,allocator<float> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<set<float,less<float>,allocator<float> >::iterator,bool>* pobj;
         pair<set<float,less<float>,allocator<float> >::iterator,bool> xobj = ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->insert(*(float*) G__Floatref(&libp->para[0]));
         pobj = new pair<set<float,less<float>,allocator<float> >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::iterator* pobj;
         set<float,less<float>,allocator<float> >::iterator xobj = ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->insert(*((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])), *(float*) G__Floatref(&libp->para[1]));
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->erase(*((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->erase(*((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])), *((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->swap(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<float,less<float>,allocator<float> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::iterator* pobj;
         const set<float,less<float>,allocator<float> >::iterator xobj = ((const set<float,less<float>,allocator<float> >*) G__getstructoffset())->find(*(float*) G__Floatref(&libp->para[0]));
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<float,less<float>,allocator<float> >*) G__getstructoffset())->count(*(float*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::iterator* pobj;
         const set<float,less<float>,allocator<float> >::iterator xobj = ((const set<float,less<float>,allocator<float> >*) G__getstructoffset())->lower_bound(*(float*) G__Floatref(&libp->para[0]));
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_65_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::iterator* pobj;
         const set<float,less<float>,allocator<float> >::iterator xobj = ((const set<float,less<float>,allocator<float> >*) G__getstructoffset())->upper_bound(*(float*) G__Floatref(&libp->para[0]));
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<float,less<float>,allocator<float> > G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR;
static int G__set_65_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<float,less<float>,allocator<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<float,less<float>,allocator<float> >*) (soff+(sizeof(set<float,less<float>,allocator<float> >)*i)))->~G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<float,less<float>,allocator<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<float,less<float>,allocator<float> >*) (soff))->~G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<float,less<float>,allocator<float> >::iterator */
static int G__set_66_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<float,less<float>,allocator<float> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<float,less<float>,allocator<float> >::iterator[n];
     } else {
       p = new((void*) gvp) set<float,less<float>,allocator<float> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<float,less<float>,allocator<float> >::iterator;
     } else {
       p = new((void*) gvp) set<float,less<float>,allocator<float> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<float,less<float>,allocator<float> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<float,less<float>,allocator<float> >::iterator(*(set<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<float,less<float>,allocator<float> >::iterator(*(set<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::iterator& obj = ((set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator=(*(set<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::iterator& obj = ((set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::iterator* pobj;
         set<float,less<float>,allocator<float> >::iterator xobj = ((set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::iterator& obj = ((set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::iterator* pobj;
         set<float,less<float>,allocator<float> >::iterator xobj = ((set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator==(*(set<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_66_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<float,less<float>,allocator<float> >::iterator*) G__getstructoffset())->operator!=(*(set<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<float,less<float>,allocator<float> >::iterator G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator;
static int G__set_66_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<float,less<float>,allocator<float> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<float,less<float>,allocator<float> >::iterator*) (soff+(sizeof(set<float,less<float>,allocator<float> >::iterator)*i)))->~G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<float,less<float>,allocator<float> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<float,less<float>,allocator<float> >::iterator*) (soff))->~G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<float,less<float>,allocator<float> >::reverse_iterator */
static int G__set_67_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<float,less<float>,allocator<float> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<float,less<float>,allocator<float> >::reverse_iterator(*(set<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<float,less<float>,allocator<float> >::reverse_iterator(*(set<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_67_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::reverse_iterator& obj = ((set<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator=(*(set<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_67_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const set<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_67_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const set<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_67_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::reverse_iterator& obj = ((set<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_67_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::reverse_iterator* pobj;
         set<float,less<float>,allocator<float> >::reverse_iterator xobj = ((set<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<float,less<float>,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_67_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<float,less<float>,allocator<float> >::reverse_iterator& obj = ((set<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_67_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::reverse_iterator* pobj;
         set<float,less<float>,allocator<float> >::reverse_iterator xobj = ((set<float,less<float>,allocator<float> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<float,less<float>,allocator<float> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<float,less<float>,allocator<float> >::reverse_iterator G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator;
static int G__set_67_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<float,less<float>,allocator<float> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<float,less<float>,allocator<float> >::reverse_iterator*) (soff+(sizeof(set<float,less<float>,allocator<float> >::reverse_iterator)*i)))->~G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<float,less<float>,allocator<float> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<float,less<float>,allocator<float> >::reverse_iterator*) (soff))->~G__TsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<set<float,less<float>,allocator<float> >::iterator,bool> */
static int G__set_68_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<float,less<float>,allocator<float> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<float,less<float>,allocator<float> >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<set<float,less<float>,allocator<float> >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<float,less<float>,allocator<float> >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<set<float,less<float>,allocator<float> >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_68_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<float,less<float>,allocator<float> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<set<float,less<float>,allocator<float> >::iterator,bool>(*(set<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<set<float,less<float>,allocator<float> >::iterator,bool>(*(set<float,less<float>,allocator<float> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_68_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<set<float,less<float>,allocator<float> >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<set<float,less<float>,allocator<float> >::iterator,bool>(*(pair<set<float,less<float>,allocator<float> >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<set<float,less<float>,allocator<float> >::iterator,bool> G__TpairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR;
static int G__set_68_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<set<float,less<float>,allocator<float> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<set<float,less<float>,allocator<float> >::iterator,bool>*) (soff+(sizeof(pair<set<float,less<float>,allocator<float> >::iterator,bool>)*i)))->~G__TpairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<set<float,less<float>,allocator<float> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<set<float,less<float>,allocator<float> >::iterator,bool>*) (soff))->~G__TpairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<double> */
static int G__set_69_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<double>*) G__getstructoffset())->operator()(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__set_69_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<double> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<double>[n];
     } else {
       p = new((void*) gvp) less<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<double>;
     } else {
       p = new((void*) gvp) less<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_69_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<double>(*(less<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<double> G__TlesslEdoublegR;
static int G__set_69_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<double>*) (soff+(sizeof(less<double>)*i)))->~G__TlesslEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<double>*) (soff))->~G__TlesslEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_69_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<double>* dest = (less<double>*) G__getstructoffset();
   const less<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<double,double,bool> */
// automatic default constructor
static int G__set_70_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<double,double,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<double,double,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<double,double,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<double,double,bool>;
     } else {
       p = new((void*) gvp) binary_function<double,double,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_70_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<double,double,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<double,double,bool>(*(binary_function<double,double,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<double,double,bool> G__Tbinary_functionlEdoublecOdoublecOboolgR;
static int G__set_70_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<double,double,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<double,double,bool>*) (soff+(sizeof(binary_function<double,double,bool>)*i)))->~G__Tbinary_functionlEdoublecOdoublecOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<double,double,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<double,double,bool>*) (soff))->~G__Tbinary_functionlEdoublecOdoublecOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_70_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<double,double,bool>* dest = (binary_function<double,double,bool>*) G__getstructoffset();
   const binary_function<double,double,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<double> */
static int G__set_71_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<double>[n];
     } else {
       p = new((void*) gvp) allocator<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<double>;
     } else {
       p = new((void*) gvp) allocator<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_71_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<double>(*(allocator<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<double>(*(allocator<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_71_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const allocator<double>*) G__getstructoffset())->address(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_71_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const allocator<double>*) G__getstructoffset())->address(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_71_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 68, (long) ((allocator<double>*) G__getstructoffset())->allocate((allocator<double>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 68, (long) ((allocator<double>*) G__getstructoffset())->allocate((allocator<double>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_71_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->deallocate((allocator<double>::pointer) G__int(libp->para[0]), (allocator<double>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_71_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<double>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_71_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->construct((allocator<double>::pointer) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_71_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<double>*) G__getstructoffset())->destroy((allocator<double>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<double> G__TallocatorlEdoublegR;
static int G__set_71_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<double>*) (soff+(sizeof(allocator<double>)*i)))->~G__TallocatorlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<double>*) (soff))->~G__TallocatorlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_71_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<double>* dest = (allocator<double>*) G__getstructoffset();
   const allocator<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<double,less<double>,allocator<double> > */
static int G__set_72_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<double,less<double>,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<double,less<double>,allocator<double> >[n];
     } else {
       p = new((void*) gvp) set<double,less<double>,allocator<double> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<double,less<double>,allocator<double> >;
     } else {
       p = new((void*) gvp) set<double,less<double>,allocator<double> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<double,less<double>,allocator<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<double,less<double>,allocator<double> >(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<double,less<double>,allocator<double> >(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >& obj = ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->operator=(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::iterator* pobj;
         set<double,less<double>,allocator<double> >::iterator xobj = ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->begin();
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::iterator* pobj;
         set<double,less<double>,allocator<double> >::iterator xobj = ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->end();
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::reverse_iterator* pobj;
         set<double,less<double>,allocator<double> >::reverse_iterator xobj = ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->rbegin();
         pobj = new set<double,less<double>,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::reverse_iterator* pobj;
         set<double,less<double>,allocator<double> >::reverse_iterator xobj = ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->rend();
         pobj = new set<double,less<double>,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const set<double,less<double>,allocator<double> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<double,less<double>,allocator<double> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<double,less<double>,allocator<double> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<set<double,less<double>,allocator<double> >::iterator,bool>* pobj;
         pair<set<double,less<double>,allocator<double> >::iterator,bool> xobj = ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->insert(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new pair<set<double,less<double>,allocator<double> >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::iterator* pobj;
         set<double,less<double>,allocator<double> >::iterator xobj = ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->insert(*((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])), *(double*) G__Doubleref(&libp->para[1]));
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->erase(*((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->erase(*((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])), *((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->swap(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<double,less<double>,allocator<double> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::iterator* pobj;
         const set<double,less<double>,allocator<double> >::iterator xobj = ((const set<double,less<double>,allocator<double> >*) G__getstructoffset())->find(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<double,less<double>,allocator<double> >*) G__getstructoffset())->count(*(double*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::iterator* pobj;
         const set<double,less<double>,allocator<double> >::iterator xobj = ((const set<double,less<double>,allocator<double> >*) G__getstructoffset())->lower_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_72_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::iterator* pobj;
         const set<double,less<double>,allocator<double> >::iterator xobj = ((const set<double,less<double>,allocator<double> >*) G__getstructoffset())->upper_bound(*(double*) G__Doubleref(&libp->para[0]));
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<double,less<double>,allocator<double> > G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR;
static int G__set_72_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<double,less<double>,allocator<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<double,less<double>,allocator<double> >*) (soff+(sizeof(set<double,less<double>,allocator<double> >)*i)))->~G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<double,less<double>,allocator<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<double,less<double>,allocator<double> >*) (soff))->~G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<double,less<double>,allocator<double> >::iterator */
static int G__set_73_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<double,less<double>,allocator<double> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<double,less<double>,allocator<double> >::iterator[n];
     } else {
       p = new((void*) gvp) set<double,less<double>,allocator<double> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<double,less<double>,allocator<double> >::iterator;
     } else {
       p = new((void*) gvp) set<double,less<double>,allocator<double> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<double,less<double>,allocator<double> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<double,less<double>,allocator<double> >::iterator(*(set<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<double,less<double>,allocator<double> >::iterator(*(set<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::iterator& obj = ((set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator=(*(set<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::iterator& obj = ((set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::iterator* pobj;
         set<double,less<double>,allocator<double> >::iterator xobj = ((set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::iterator& obj = ((set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::iterator* pobj;
         set<double,less<double>,allocator<double> >::iterator xobj = ((set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator==(*(set<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_73_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<double,less<double>,allocator<double> >::iterator*) G__getstructoffset())->operator!=(*(set<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<double,less<double>,allocator<double> >::iterator G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator;
static int G__set_73_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<double,less<double>,allocator<double> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<double,less<double>,allocator<double> >::iterator*) (soff+(sizeof(set<double,less<double>,allocator<double> >::iterator)*i)))->~G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<double,less<double>,allocator<double> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<double,less<double>,allocator<double> >::iterator*) (soff))->~G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<double,less<double>,allocator<double> >::reverse_iterator */
static int G__set_74_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<double,less<double>,allocator<double> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<double,less<double>,allocator<double> >::reverse_iterator(*(set<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<double,less<double>,allocator<double> >::reverse_iterator(*(set<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_74_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::reverse_iterator& obj = ((set<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator=(*(set<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_74_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const set<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_74_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const set<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_74_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::reverse_iterator& obj = ((set<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_74_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::reverse_iterator* pobj;
         set<double,less<double>,allocator<double> >::reverse_iterator xobj = ((set<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<double,less<double>,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_74_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<double,less<double>,allocator<double> >::reverse_iterator& obj = ((set<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_74_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::reverse_iterator* pobj;
         set<double,less<double>,allocator<double> >::reverse_iterator xobj = ((set<double,less<double>,allocator<double> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<double,less<double>,allocator<double> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<double,less<double>,allocator<double> >::reverse_iterator G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator;
static int G__set_74_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<double,less<double>,allocator<double> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<double,less<double>,allocator<double> >::reverse_iterator*) (soff+(sizeof(set<double,less<double>,allocator<double> >::reverse_iterator)*i)))->~G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<double,less<double>,allocator<double> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<double,less<double>,allocator<double> >::reverse_iterator*) (soff))->~G__TsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<set<double,less<double>,allocator<double> >::iterator,bool> */
static int G__set_75_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<double,less<double>,allocator<double> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<double,less<double>,allocator<double> >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<set<double,less<double>,allocator<double> >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<double,less<double>,allocator<double> >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<set<double,less<double>,allocator<double> >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_75_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<double,less<double>,allocator<double> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<set<double,less<double>,allocator<double> >::iterator,bool>(*(set<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<set<double,less<double>,allocator<double> >::iterator,bool>(*(set<double,less<double>,allocator<double> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_75_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<set<double,less<double>,allocator<double> >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<set<double,less<double>,allocator<double> >::iterator,bool>(*(pair<set<double,less<double>,allocator<double> >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<set<double,less<double>,allocator<double> >::iterator,bool> G__TpairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR;
static int G__set_75_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<set<double,less<double>,allocator<double> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<set<double,less<double>,allocator<double> >::iterator,bool>*) (soff+(sizeof(pair<set<double,less<double>,allocator<double> >::iterator,bool>)*i)))->~G__TpairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<set<double,less<double>,allocator<double> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<set<double,less<double>,allocator<double> >::iterator,bool>*) (soff))->~G__TpairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<void*> */
static int G__set_76_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<void*>*) G__getstructoffset())->operator()(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__set_76_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<void*> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<void*>[n];
     } else {
       p = new((void*) gvp) less<void*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<void*>;
     } else {
       p = new((void*) gvp) less<void*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_76_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<void*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<void*>(*(less<void*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<void*> G__TlesslEvoidmUgR;
static int G__set_76_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<void*>*) (soff+(sizeof(less<void*>)*i)))->~G__TlesslEvoidmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<void*>*) (soff))->~G__TlesslEvoidmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_76_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<void*>* dest = (less<void*>*) G__getstructoffset();
   const less<void*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<void*,void*,bool> */
// automatic default constructor
static int G__set_77_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<void*,void*,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<void*,void*,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<void*,void*,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<void*,void*,bool>;
     } else {
       p = new((void*) gvp) binary_function<void*,void*,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_77_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<void*,void*,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<void*,void*,bool>(*(binary_function<void*,void*,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<void*,void*,bool> G__Tbinary_functionlEvoidmUcOvoidmUcOboolgR;
static int G__set_77_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<void*,void*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<void*,void*,bool>*) (soff+(sizeof(binary_function<void*,void*,bool>)*i)))->~G__Tbinary_functionlEvoidmUcOvoidmUcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<void*,void*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<void*,void*,bool>*) (soff))->~G__Tbinary_functionlEvoidmUcOvoidmUcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_77_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<void*,void*,bool>* dest = (binary_function<void*,void*,bool>*) G__getstructoffset();
   const binary_function<void*,void*,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<void*> */
static int G__set_78_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<void*>[n];
     } else {
       p = new((void*) gvp) allocator<void*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<void*>;
     } else {
       p = new((void*) gvp) allocator<void*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_78_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<void*>(*(allocator<void*>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<void*>(*(allocator<void*>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_78_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const allocator<void*>*) G__getstructoffset())->address(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_78_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const allocator<void*>*) G__getstructoffset())->address(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_78_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 89, (long) ((allocator<void*>*) G__getstructoffset())->allocate((allocator<void*>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 89, (long) ((allocator<void*>*) G__getstructoffset())->allocate((allocator<void*>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_78_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->deallocate((allocator<void*>::pointer) G__int(libp->para[0]), (allocator<void*>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_78_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<void*>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_78_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->construct((allocator<void*>::pointer) G__int(libp->para[0]), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_78_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<void*>*) G__getstructoffset())->destroy((allocator<void*>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<void*> G__TallocatorlEvoidmUgR;
static int G__set_78_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<void*>*) (soff+(sizeof(allocator<void*>)*i)))->~G__TallocatorlEvoidmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<void*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<void*>*) (soff))->~G__TallocatorlEvoidmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_78_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<void*>* dest = (allocator<void*>*) G__getstructoffset();
   const allocator<void*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<void*,less<void*>,allocator<void*> > */
static int G__set_79_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<void*,less<void*>,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<void*,less<void*>,allocator<void*> >[n];
     } else {
       p = new((void*) gvp) set<void*,less<void*>,allocator<void*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<void*,less<void*>,allocator<void*> >;
     } else {
       p = new((void*) gvp) set<void*,less<void*>,allocator<void*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<void*,less<void*>,allocator<void*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<void*,less<void*>,allocator<void*> >(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<void*,less<void*>,allocator<void*> >(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >& obj = ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->operator=(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::iterator xobj = ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->begin();
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::iterator xobj = ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->end();
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::reverse_iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::reverse_iterator xobj = ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->rbegin();
         pobj = new set<void*,less<void*>,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::reverse_iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::reverse_iterator xobj = ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->rend();
         pobj = new set<void*,less<void*>,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>* pobj;
         pair<set<void*,less<void*>,allocator<void*> >::iterator,bool> xobj = ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->insert(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
         pobj = new pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::iterator xobj = ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->insert(*((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(void**) libp->para[1].ref : *(void**) (&G__Mlong(libp->para[1])));
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->erase(*((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->erase(*((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])), *((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->swap(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         const set<void*,less<void*>,allocator<void*> >::iterator xobj = ((const set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->find(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->count(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         const set<void*,less<void*>,allocator<void*> >::iterator xobj = ((const set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_79_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         const set<void*,less<void*>,allocator<void*> >::iterator xobj = ((const set<void*,less<void*>,allocator<void*> >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(void**) libp->para[0].ref : *(void**) (&G__Mlong(libp->para[0])));
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<void*,less<void*>,allocator<void*> > G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR;
static int G__set_79_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<void*,less<void*>,allocator<void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<void*,less<void*>,allocator<void*> >*) (soff+(sizeof(set<void*,less<void*>,allocator<void*> >)*i)))->~G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<void*,less<void*>,allocator<void*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<void*,less<void*>,allocator<void*> >*) (soff))->~G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<void*,less<void*>,allocator<void*> >::iterator */
static int G__set_80_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<void*,less<void*>,allocator<void*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<void*,less<void*>,allocator<void*> >::iterator[n];
     } else {
       p = new((void*) gvp) set<void*,less<void*>,allocator<void*> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<void*,less<void*>,allocator<void*> >::iterator;
     } else {
       p = new((void*) gvp) set<void*,less<void*>,allocator<void*> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<void*,less<void*>,allocator<void*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<void*,less<void*>,allocator<void*> >::iterator(*(set<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<void*,less<void*>,allocator<void*> >::iterator(*(set<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::iterator& obj = ((set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator=(*(set<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::iterator& obj = ((set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::iterator xobj = ((set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::iterator& obj = ((set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::iterator xobj = ((set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator==(*(set<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_80_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<void*,less<void*>,allocator<void*> >::iterator*) G__getstructoffset())->operator!=(*(set<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<void*,less<void*>,allocator<void*> >::iterator G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator;
static int G__set_80_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<void*,less<void*>,allocator<void*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<void*,less<void*>,allocator<void*> >::iterator*) (soff+(sizeof(set<void*,less<void*>,allocator<void*> >::iterator)*i)))->~G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<void*,less<void*>,allocator<void*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<void*,less<void*>,allocator<void*> >::iterator*) (soff))->~G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<void*,less<void*>,allocator<void*> >::reverse_iterator */
static int G__set_81_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<void*,less<void*>,allocator<void*> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<void*,less<void*>,allocator<void*> >::reverse_iterator(*(set<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<void*,less<void*>,allocator<void*> >::reverse_iterator(*(set<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_81_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::reverse_iterator& obj = ((set<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator=(*(set<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_81_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const set<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_81_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const set<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_81_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::reverse_iterator& obj = ((set<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_81_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::reverse_iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::reverse_iterator xobj = ((set<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<void*,less<void*>,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_81_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<void*,less<void*>,allocator<void*> >::reverse_iterator& obj = ((set<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_81_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::reverse_iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::reverse_iterator xobj = ((set<void*,less<void*>,allocator<void*> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<void*,less<void*>,allocator<void*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<void*,less<void*>,allocator<void*> >::reverse_iterator G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator;
static int G__set_81_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<void*,less<void*>,allocator<void*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<void*,less<void*>,allocator<void*> >::reverse_iterator*) (soff+(sizeof(set<void*,less<void*>,allocator<void*> >::reverse_iterator)*i)))->~G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<void*,less<void*>,allocator<void*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<void*,less<void*>,allocator<void*> >::reverse_iterator*) (soff))->~G__TsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<set<void*,less<void*>,allocator<void*> >::iterator,bool> */
static int G__set_82_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_82_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>(*(set<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>(*(set<void*,less<void*>,allocator<void*> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_82_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>(*(pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<set<void*,less<void*>,allocator<void*> >::iterator,bool> G__TpairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR;
static int G__set_82_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>*) (soff+(sizeof(pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>)*i)))->~G__TpairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>*) (soff))->~G__TpairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<char*> */
static int G__set_83_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<char*>*) G__getstructoffset())->operator()(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__set_83_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<char*> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<char*>[n];
     } else {
       p = new((void*) gvp) less<char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<char*>;
     } else {
       p = new((void*) gvp) less<char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_83_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<char*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<char*>(*(less<char*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<char*> G__TlesslEcharmUgR;
static int G__set_83_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<char*>*) (soff+(sizeof(less<char*>)*i)))->~G__TlesslEcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<char*>*) (soff))->~G__TlesslEcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_83_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<char*>* dest = (less<char*>*) G__getstructoffset();
   const less<char*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<char*,char*,bool> */
// automatic default constructor
static int G__set_84_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<char*,char*,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<char*,char*,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<char*,char*,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<char*,char*,bool>;
     } else {
       p = new((void*) gvp) binary_function<char*,char*,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_84_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<char*,char*,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<char*,char*,bool>(*(binary_function<char*,char*,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<char*,char*,bool> G__Tbinary_functionlEcharmUcOcharmUcOboolgR;
static int G__set_84_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<char*,char*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<char*,char*,bool>*) (soff+(sizeof(binary_function<char*,char*,bool>)*i)))->~G__Tbinary_functionlEcharmUcOcharmUcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<char*,char*,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<char*,char*,bool>*) (soff))->~G__Tbinary_functionlEcharmUcOcharmUcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_84_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<char*,char*,bool>* dest = (binary_function<char*,char*,bool>*) G__getstructoffset();
   const binary_function<char*,char*,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<char*> */
static int G__set_85_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<char*>[n];
     } else {
       p = new((void*) gvp) allocator<char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<char*>;
     } else {
       p = new((void*) gvp) allocator<char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_85_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<char*>(*(allocator<char*>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<char*>(*(allocator<char*>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_85_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const allocator<char*>*) G__getstructoffset())->address(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_85_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const allocator<char*>*) G__getstructoffset())->address(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_85_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 67, (long) ((allocator<char*>*) G__getstructoffset())->allocate((allocator<char*>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((allocator<char*>*) G__getstructoffset())->allocate((allocator<char*>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_85_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->deallocate((allocator<char*>::pointer) G__int(libp->para[0]), (allocator<char*>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_85_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<char*>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_85_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->construct((allocator<char*>::pointer) G__int(libp->para[0]), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_85_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<char*>*) G__getstructoffset())->destroy((allocator<char*>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<char*> G__TallocatorlEcharmUgR;
static int G__set_85_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<char*>*) (soff+(sizeof(allocator<char*>)*i)))->~G__TallocatorlEcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<char*>*) (soff))->~G__TallocatorlEcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_85_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<char*>* dest = (allocator<char*>*) G__getstructoffset();
   const allocator<char*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<char*,less<char*>,allocator<char*> > */
static int G__set_86_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<char*,less<char*>,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<char*,less<char*>,allocator<char*> >[n];
     } else {
       p = new((void*) gvp) set<char*,less<char*>,allocator<char*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<char*,less<char*>,allocator<char*> >;
     } else {
       p = new((void*) gvp) set<char*,less<char*>,allocator<char*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<char*,less<char*>,allocator<char*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<char*,less<char*>,allocator<char*> >(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<char*,less<char*>,allocator<char*> >(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >& obj = ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->operator=(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::iterator xobj = ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->begin();
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::iterator xobj = ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->end();
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::reverse_iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::reverse_iterator xobj = ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->rbegin();
         pobj = new set<char*,less<char*>,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::reverse_iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::reverse_iterator xobj = ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->rend();
         pobj = new set<char*,less<char*>,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>* pobj;
         pair<set<char*,less<char*>,allocator<char*> >::iterator,bool> xobj = ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->insert(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::iterator xobj = ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->insert(*((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (&G__Mlong(libp->para[1])));
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->erase(*((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->erase(*((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])), *((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->swap(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         const set<char*,less<char*>,allocator<char*> >::iterator xobj = ((const set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->find(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->count(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         const set<char*,less<char*>,allocator<char*> >::iterator xobj = ((const set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->lower_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_86_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         const set<char*,less<char*>,allocator<char*> >::iterator xobj = ((const set<char*,less<char*>,allocator<char*> >*) G__getstructoffset())->upper_bound(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (&G__Mlong(libp->para[0])));
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<char*,less<char*>,allocator<char*> > G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR;
static int G__set_86_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<char*,less<char*>,allocator<char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<char*,less<char*>,allocator<char*> >*) (soff+(sizeof(set<char*,less<char*>,allocator<char*> >)*i)))->~G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<char*,less<char*>,allocator<char*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<char*,less<char*>,allocator<char*> >*) (soff))->~G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<char*,less<char*>,allocator<char*> >::iterator */
static int G__set_87_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<char*,less<char*>,allocator<char*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<char*,less<char*>,allocator<char*> >::iterator[n];
     } else {
       p = new((void*) gvp) set<char*,less<char*>,allocator<char*> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<char*,less<char*>,allocator<char*> >::iterator;
     } else {
       p = new((void*) gvp) set<char*,less<char*>,allocator<char*> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<char*,less<char*>,allocator<char*> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<char*,less<char*>,allocator<char*> >::iterator(*(set<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<char*,less<char*>,allocator<char*> >::iterator(*(set<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::iterator& obj = ((set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator=(*(set<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::iterator& obj = ((set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::iterator xobj = ((set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::iterator& obj = ((set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::iterator xobj = ((set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator==(*(set<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_87_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<char*,less<char*>,allocator<char*> >::iterator*) G__getstructoffset())->operator!=(*(set<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<char*,less<char*>,allocator<char*> >::iterator G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator;
static int G__set_87_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<char*,less<char*>,allocator<char*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<char*,less<char*>,allocator<char*> >::iterator*) (soff+(sizeof(set<char*,less<char*>,allocator<char*> >::iterator)*i)))->~G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<char*,less<char*>,allocator<char*> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<char*,less<char*>,allocator<char*> >::iterator*) (soff))->~G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<char*,less<char*>,allocator<char*> >::reverse_iterator */
static int G__set_88_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<char*,less<char*>,allocator<char*> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<char*,less<char*>,allocator<char*> >::reverse_iterator(*(set<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<char*,less<char*>,allocator<char*> >::reverse_iterator(*(set<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_88_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::reverse_iterator& obj = ((set<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator=(*(set<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_88_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const set<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_88_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const set<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_88_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::reverse_iterator& obj = ((set<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_88_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::reverse_iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::reverse_iterator xobj = ((set<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<char*,less<char*>,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_88_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<char*,less<char*>,allocator<char*> >::reverse_iterator& obj = ((set<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_88_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::reverse_iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::reverse_iterator xobj = ((set<char*,less<char*>,allocator<char*> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<char*,less<char*>,allocator<char*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<char*,less<char*>,allocator<char*> >::reverse_iterator G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator;
static int G__set_88_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<char*,less<char*>,allocator<char*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<char*,less<char*>,allocator<char*> >::reverse_iterator*) (soff+(sizeof(set<char*,less<char*>,allocator<char*> >::reverse_iterator)*i)))->~G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<char*,less<char*>,allocator<char*> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<char*,less<char*>,allocator<char*> >::reverse_iterator*) (soff))->~G__TsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<set<char*,less<char*>,allocator<char*> >::iterator,bool> */
static int G__set_89_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_89_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>(*(set<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>(*(set<char*,less<char*>,allocator<char*> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_89_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>(*(pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<set<char*,less<char*>,allocator<char*> >::iterator,bool> G__TpairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR;
static int G__set_89_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>*) (soff+(sizeof(pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>)*i)))->~G__TpairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>*) (soff))->~G__TpairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* less<string> */
static int G__set_90_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const less<string>*) G__getstructoffset())->operator()(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__set_90_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<string> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<string>[n];
     } else {
       p = new((void*) gvp) less<string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new less<string>;
     } else {
       p = new((void*) gvp) less<string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_90_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   less<string>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new less<string>(*(less<string>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_lesslEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef less<string> G__TlesslEstringgR;
static int G__set_90_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (less<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((less<string>*) (soff+(sizeof(less<string>)*i)))->~G__TlesslEstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (less<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((less<string>*) (soff))->~G__TlesslEstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_90_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   less<string>* dest = (less<string>*) G__getstructoffset();
   const less<string>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* binary_function<string,string,bool> */
// automatic default constructor
static int G__set_91_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<string,string,bool> *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<string,string,bool>[n];
     } else {
       p = new((void*) gvp) binary_function<string,string,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new binary_function<string,string,bool>;
     } else {
       p = new((void*) gvp) binary_function<string,string,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_91_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   binary_function<string,string,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new binary_function<string,string,bool>(*(binary_function<string,string,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef binary_function<string,string,bool> G__Tbinary_functionlEstringcOstringcOboolgR;
static int G__set_91_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (binary_function<string,string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((binary_function<string,string,bool>*) (soff+(sizeof(binary_function<string,string,bool>)*i)))->~G__Tbinary_functionlEstringcOstringcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (binary_function<string,string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((binary_function<string,string,bool>*) (soff))->~G__Tbinary_functionlEstringcOstringcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_91_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   binary_function<string,string,bool>* dest = (binary_function<string,string,bool>*) G__getstructoffset();
   const binary_function<string,string,bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* allocator<string> */
static int G__set_92_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<string>[n];
     } else {
       p = new((void*) gvp) allocator<string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new allocator<string>;
     } else {
       p = new((void*) gvp) allocator<string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_92_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new allocator<string>(*(allocator<string>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) allocator<string>(*(allocator<string>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_92_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<string>*) G__getstructoffset())->address(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_92_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const allocator<string>*) G__getstructoffset())->address(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_92_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((allocator<string>*) G__getstructoffset())->allocate((allocator<string>::size_type) G__int(libp->para[0]), (const void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((allocator<string>*) G__getstructoffset())->allocate((allocator<string>::size_type) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_92_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->deallocate((allocator<string>::pointer) G__int(libp->para[0]), (allocator<string>::size_type) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_92_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const allocator<string>*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_92_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->construct((allocator<string>::pointer) G__int(libp->para[0]), *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_92_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((allocator<string>*) G__getstructoffset())->destroy((allocator<string>::pointer) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef allocator<string> G__TallocatorlEstringgR;
static int G__set_92_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (allocator<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((allocator<string>*) (soff+(sizeof(allocator<string>)*i)))->~G__TallocatorlEstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (allocator<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((allocator<string>*) (soff))->~G__TallocatorlEstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__set_92_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   allocator<string>* dest = (allocator<string>*) G__getstructoffset();
   const allocator<string>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<string,less<string>,allocator<string> > */
static int G__set_93_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<string,less<string>,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<string,less<string>,allocator<string> >[n];
     } else {
       p = new((void*) gvp) set<string,less<string>,allocator<string> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<string,less<string>,allocator<string> >;
     } else {
       p = new((void*) gvp) set<string,less<string>,allocator<string> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<string,less<string>,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<string,less<string>,allocator<string> >(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<string,less<string>,allocator<string> >(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >& obj = ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->operator=(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::iterator* pobj;
         set<string,less<string>,allocator<string> >::iterator xobj = ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->begin();
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::iterator* pobj;
         set<string,less<string>,allocator<string> >::iterator xobj = ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->end();
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::reverse_iterator* pobj;
         set<string,less<string>,allocator<string> >::reverse_iterator xobj = ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->rbegin();
         pobj = new set<string,less<string>,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::reverse_iterator* pobj;
         set<string,less<string>,allocator<string> >::reverse_iterator xobj = ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->rend();
         pobj = new set<string,less<string>,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const set<string,less<string>,allocator<string> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<string,less<string>,allocator<string> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<string,less<string>,allocator<string> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<set<string,less<string>,allocator<string> >::iterator,bool>* pobj;
         pair<set<string,less<string>,allocator<string> >::iterator,bool> xobj = ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->insert(*(string*) libp->para[0].ref);
         pobj = new pair<set<string,less<string>,allocator<string> >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::iterator* pobj;
         set<string,less<string>,allocator<string> >::iterator xobj = ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->insert(*((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])), *(string*) libp->para[1].ref);
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->erase(*((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->erase(*((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])), *((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->swap(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<string,less<string>,allocator<string> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::iterator* pobj;
         const set<string,less<string>,allocator<string> >::iterator xobj = ((const set<string,less<string>,allocator<string> >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const set<string,less<string>,allocator<string> >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::iterator* pobj;
         const set<string,less<string>,allocator<string> >::iterator xobj = ((const set<string,less<string>,allocator<string> >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_93_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::iterator* pobj;
         const set<string,less<string>,allocator<string> >::iterator xobj = ((const set<string,less<string>,allocator<string> >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<string,less<string>,allocator<string> > G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR;
static int G__set_93_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<string,less<string>,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<string,less<string>,allocator<string> >*) (soff+(sizeof(set<string,less<string>,allocator<string> >)*i)))->~G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<string,less<string>,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<string,less<string>,allocator<string> >*) (soff))->~G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<string,less<string>,allocator<string> >::iterator */
static int G__set_94_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<string,less<string>,allocator<string> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<string,less<string>,allocator<string> >::iterator[n];
     } else {
       p = new((void*) gvp) set<string,less<string>,allocator<string> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<string,less<string>,allocator<string> >::iterator;
     } else {
       p = new((void*) gvp) set<string,less<string>,allocator<string> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<string,less<string>,allocator<string> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<string,less<string>,allocator<string> >::iterator(*(set<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<string,less<string>,allocator<string> >::iterator(*(set<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::iterator& obj = ((set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator=(*(set<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::value_type* pobj;
         const set<string,less<string>,allocator<string> >::value_type xobj = ((const set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator*();
         pobj = new set<string,less<string>,allocator<string> >::value_type(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::iterator& obj = ((set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::iterator* pobj;
         set<string,less<string>,allocator<string> >::iterator xobj = ((set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::iterator& obj = ((set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::iterator* pobj;
         set<string,less<string>,allocator<string> >::iterator xobj = ((set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator==(*(set<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_94_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<string,less<string>,allocator<string> >::iterator*) G__getstructoffset())->operator!=(*(set<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<string,less<string>,allocator<string> >::iterator G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator;
static int G__set_94_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<string,less<string>,allocator<string> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<string,less<string>,allocator<string> >::iterator*) (soff+(sizeof(set<string,less<string>,allocator<string> >::iterator)*i)))->~G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<string,less<string>,allocator<string> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<string,less<string>,allocator<string> >::iterator*) (soff))->~G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<string,less<string>,allocator<string> >::reverse_iterator */
static int G__set_95_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<string,less<string>,allocator<string> >::reverse_iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<string,less<string>,allocator<string> >::reverse_iterator(*(set<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<string,less<string>,allocator<string> >::reverse_iterator(*(set<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_95_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::reverse_iterator& obj = ((set<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator=(*(set<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_95_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::value_type* pobj;
         const set<string,less<string>,allocator<string> >::value_type xobj = ((const set<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator*();
         pobj = new set<string,less<string>,allocator<string> >::value_type(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_95_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const set<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_95_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::reverse_iterator& obj = ((set<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_95_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::reverse_iterator* pobj;
         set<string,less<string>,allocator<string> >::reverse_iterator xobj = ((set<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<string,less<string>,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_95_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<string,less<string>,allocator<string> >::reverse_iterator& obj = ((set<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_95_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::reverse_iterator* pobj;
         set<string,less<string>,allocator<string> >::reverse_iterator xobj = ((set<string,less<string>,allocator<string> >::reverse_iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<string,less<string>,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<string,less<string>,allocator<string> >::reverse_iterator G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator;
static int G__set_95_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<string,less<string>,allocator<string> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<string,less<string>,allocator<string> >::reverse_iterator*) (soff+(sizeof(set<string,less<string>,allocator<string> >::reverse_iterator)*i)))->~G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<string,less<string>,allocator<string> >::reverse_iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<string,less<string>,allocator<string> >::reverse_iterator*) (soff))->~G__TsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<set<string,less<string>,allocator<string> >::iterator,bool> */
static int G__set_96_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<string,less<string>,allocator<string> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<string,less<string>,allocator<string> >::iterator,bool>[n];
     } else {
       p = new((void*) gvp) pair<set<string,less<string>,allocator<string> >::iterator,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<set<string,less<string>,allocator<string> >::iterator,bool>;
     } else {
       p = new((void*) gvp) pair<set<string,less<string>,allocator<string> >::iterator,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set_96_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<set<string,less<string>,allocator<string> >::iterator,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<set<string,less<string>,allocator<string> >::iterator,bool>(*(set<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<set<string,less<string>,allocator<string> >::iterator,bool>(*(set<string,less<string>,allocator<string> >::iterator*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__set_96_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<set<string,less<string>,allocator<string> >::iterator,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<set<string,less<string>,allocator<string> >::iterator,bool>(*(pair<set<string,less<string>,allocator<string> >::iterator,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<set<string,less<string>,allocator<string> >::iterator,bool> G__TpairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR;
static int G__set_96_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<set<string,less<string>,allocator<string> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<set<string,less<string>,allocator<string> >::iterator,bool>*) (soff+(sizeof(pair<set<string,less<string>,allocator<string> >::iterator,bool>)*i)))->~G__TpairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<set<string,less<string>,allocator<string> >::iterator,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<set<string,less<string>,allocator<string> >::iterator,bool>*) (soff))->~G__TpairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__set__0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref, *(set<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[0].ref, *(set<int,less<int>,allocator<int> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref, *(set<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref, *(set<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref, *(set<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref, *(set<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref, *(set<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(set<int,less<int>,allocator<int> >*) libp->para[0].ref, *(set<int,less<int>,allocator<int> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::iterator* pobj;
         set<int,less<int>,allocator<int> >::iterator xobj = find(*((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])), *((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[1]))
, *(int*) G__Intref(&libp->para[2]));
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<int,less<int>,allocator<int> >::iterator* pobj;
         set<int,less<int>,allocator<int> >::iterator xobj = search(*((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[0])), *((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[1]))
, *((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[2])), *((set<int,less<int>,allocator<int> >::iterator*) G__int(libp->para[3])));
         pobj = new set<int,less<int>,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref, *(set<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[0].ref, *(set<long,less<long>,allocator<long> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref, *(set<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref, *(set<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref, *(set<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref, *(set<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref, *(set<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(set<long,less<long>,allocator<long> >*) libp->para[0].ref, *(set<long,less<long>,allocator<long> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::iterator* pobj;
         set<long,less<long>,allocator<long> >::iterator xobj = find(*((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])), *((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[1]))
, *(long*) G__Longref(&libp->para[2]));
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<long,less<long>,allocator<long> >::iterator* pobj;
         set<long,less<long>,allocator<long> >::iterator xobj = search(*((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[0])), *((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[1]))
, *((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[2])), *((set<long,less<long>,allocator<long> >::iterator*) G__int(libp->para[3])));
         pobj = new set<long,less<long>,allocator<long> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref, *(set<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[0].ref, *(set<float,less<float>,allocator<float> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref, *(set<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref, *(set<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref, *(set<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref, *(set<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref, *(set<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(set<float,less<float>,allocator<float> >*) libp->para[0].ref, *(set<float,less<float>,allocator<float> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::iterator* pobj;
         set<float,less<float>,allocator<float> >::iterator xobj = find(*((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])), *((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[1]))
, *(float*) G__Floatref(&libp->para[2]));
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<float,less<float>,allocator<float> >::iterator* pobj;
         set<float,less<float>,allocator<float> >::iterator xobj = search(*((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[0])), *((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[1]))
, *((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[2])), *((set<float,less<float>,allocator<float> >::iterator*) G__int(libp->para[3])));
         pobj = new set<float,less<float>,allocator<float> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref, *(set<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[0].ref, *(set<double,less<double>,allocator<double> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref, *(set<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref, *(set<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref, *(set<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref, *(set<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref, *(set<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(set<double,less<double>,allocator<double> >*) libp->para[0].ref, *(set<double,less<double>,allocator<double> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::iterator* pobj;
         set<double,less<double>,allocator<double> >::iterator xobj = find(*((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])), *((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[1]))
, *(double*) G__Doubleref(&libp->para[2]));
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<double,less<double>,allocator<double> >::iterator* pobj;
         set<double,less<double>,allocator<double> >::iterator xobj = search(*((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[0])), *((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[1]))
, *((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[2])), *((set<double,less<double>,allocator<double> >::iterator*) G__int(libp->para[3])));
         pobj = new set<double,less<double>,allocator<double> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref, *(set<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[0].ref, *(set<void*,less<void*>,allocator<void*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(set<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(set<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(set<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(set<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(set<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(set<void*,less<void*>,allocator<void*> >*) libp->para[0].ref, *(set<void*,less<void*>,allocator<void*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::iterator xobj = find(*((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])), *((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(void**) libp->para[2].ref : *(void**) (&G__Mlong(libp->para[2])));
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<void*,less<void*>,allocator<void*> >::iterator* pobj;
         set<void*,less<void*>,allocator<void*> >::iterator xobj = search(*((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[0])), *((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[1]))
, *((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[2])), *((set<void*,less<void*>,allocator<void*> >::iterator*) G__int(libp->para[3])));
         pobj = new set<void*,less<void*>,allocator<void*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref, *(set<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[0].ref, *(set<char*,less<char*>,allocator<char*> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(set<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(set<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(set<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_167(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(set<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(set<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(set<char*,less<char*>,allocator<char*> >*) libp->para[0].ref, *(set<char*,less<char*>,allocator<char*> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::iterator xobj = find(*((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])), *((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[1]))
, libp->para[2].ref ? *(char**) libp->para[2].ref : *(char**) (&G__Mlong(libp->para[2])));
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<char*,less<char*>,allocator<char*> >::iterator* pobj;
         set<char*,less<char*>,allocator<char*> >::iterator xobj = search(*((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[0])), *((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[1]))
, *((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[2])), *((set<char*,less<char*>,allocator<char*> >::iterator*) G__int(libp->para[3])));
         pobj = new set<char*,less<char*>,allocator<char*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref, *(set<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[0].ref, *(set<string,less<string>,allocator<string> >::reverse_iterator*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref, *(set<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref, *(set<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref, *(set<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref, *(set<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_178(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref, *(set<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_179(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(set<string,less<string>,allocator<string> >*) libp->para[0].ref, *(set<string,less<string>,allocator<string> >*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_180(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::iterator* pobj;
         set<string,less<string>,allocator<string> >::iterator xobj = find(*((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])), *((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[1]))
, *(string*) libp->para[2].ref);
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__set__0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<string,less<string>,allocator<string> >::iterator* pobj;
         set<string,less<string>,allocator<string> >::iterator xobj = search(*((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[0])), *((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[1]))
, *((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[2])), *((set<string,less<string>,allocator<string> >::iterator*) G__int(libp->para[3])));
         pobj = new set<string,less<string>,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* less<int> */

/* binary_function<int,int,bool> */

/* allocator<int> */

/* set<int,less<int>,allocator<int> > */

/* set<int,less<int>,allocator<int> >::iterator */

/* set<int,less<int>,allocator<int> >::reverse_iterator */

/* pair<set<int,less<int>,allocator<int> >::iterator,bool> */

/* less<long> */

/* binary_function<long,long,bool> */

/* allocator<long> */

/* set<long,less<long>,allocator<long> > */

/* set<long,less<long>,allocator<long> >::iterator */

/* set<long,less<long>,allocator<long> >::reverse_iterator */

/* pair<set<long,less<long>,allocator<long> >::iterator,bool> */

/* less<float> */

/* binary_function<float,float,bool> */

/* allocator<float> */

/* set<float,less<float>,allocator<float> > */

/* set<float,less<float>,allocator<float> >::iterator */

/* set<float,less<float>,allocator<float> >::reverse_iterator */

/* pair<set<float,less<float>,allocator<float> >::iterator,bool> */

/* less<double> */

/* binary_function<double,double,bool> */

/* allocator<double> */

/* set<double,less<double>,allocator<double> > */

/* set<double,less<double>,allocator<double> >::iterator */

/* set<double,less<double>,allocator<double> >::reverse_iterator */

/* pair<set<double,less<double>,allocator<double> >::iterator,bool> */

/* less<void*> */

/* binary_function<void*,void*,bool> */

/* allocator<void*> */

/* set<void*,less<void*>,allocator<void*> > */

/* set<void*,less<void*>,allocator<void*> >::iterator */

/* set<void*,less<void*>,allocator<void*> >::reverse_iterator */

/* pair<set<void*,less<void*>,allocator<void*> >::iterator,bool> */

/* less<char*> */

/* binary_function<char*,char*,bool> */

/* allocator<char*> */

/* set<char*,less<char*>,allocator<char*> > */

/* set<char*,less<char*>,allocator<char*> >::iterator */

/* set<char*,less<char*>,allocator<char*> >::reverse_iterator */

/* pair<set<char*,less<char*>,allocator<char*> >::iterator,bool> */

/* less<string> */

/* binary_function<string,string,bool> */

/* allocator<string> */

/* set<string,less<string>,allocator<string> > */

/* set<string,less<string>,allocator<string> >::iterator */

/* set<string,less<string>,allocator<string> >::reverse_iterator */

/* pair<set<string,less<string>,allocator<string> >::iterator,bool> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc {
 public:
  G__Sizep2memfunc(): p(&G__Sizep2memfunc::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc::*p)();
};

size_t G__get_sizep2memfunc()
{
  G__Sizep2memfunc a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEintgR))) {
     less<int> *G__Lderived;
     G__Lderived=(less<int>*)0x1000;
     {
       binary_function<int,int,bool> *G__Lpbase=(binary_function<int,int,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEintgR),G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslElonggR))) {
     less<long> *G__Lderived;
     G__Lderived=(less<long>*)0x1000;
     {
       binary_function<long,long,bool> *G__Lpbase=(binary_function<long,long,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslElonggR),G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEfloatgR))) {
     less<float> *G__Lderived;
     G__Lderived=(less<float>*)0x1000;
     {
       binary_function<float,float,bool> *G__Lpbase=(binary_function<float,float,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEfloatgR),G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEdoublegR))) {
     less<double> *G__Lderived;
     G__Lderived=(less<double>*)0x1000;
     {
       binary_function<double,double,bool> *G__Lpbase=(binary_function<double,double,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR),G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR))) {
     less<void*> *G__Lderived;
     G__Lderived=(less<void*>*)0x1000;
     {
       binary_function<void*,void*,bool> *G__Lpbase=(binary_function<void*,void*,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR),G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEcharmUgR))) {
     less<char*> *G__Lderived;
     G__Lderived=(less<char*>*)0x1000;
     {
       binary_function<char*,char*,bool> *G__Lpbase=(binary_function<char*,char*,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR),G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LN_lesslEstringgR))) {
     less<string> *G__Lderived;
     G__Lderived=(less<string>*)0x1000;
     {
       binary_function<string,string,bool> *G__Lpbase=(binary_function<string,string,bool>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR),G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable() {

   /* Setting up typedef entry */
   G__search_typename2("first_argument_type",105,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",105,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<int>",117,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",105,-1,0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEintgR),0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEintgR),0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEintgR),0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<int,less<int> >",117,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",108,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",108,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",76,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",76,-1,256,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",108,-1,1,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",108,-1,257,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<long>",117,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslElonggR),0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlElonggR),0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",76,-1,0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",76,-1,256,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",108,-1,1,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",108,-1,257,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<long,less<long> >",117,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",102,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",102,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",102,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<float>",117,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",102,-1,0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",102,-1,0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEfloatgR),0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEfloatgR),0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEfloatgR),0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,256,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,1,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,257,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<float,less<float> >",117,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",100,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",100,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",68,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",68,-1,256,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",100,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",100,-1,257,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",100,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<double>",117,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",100,-1,0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",100,-1,0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEdoublegR),0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEdoublegR),0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",68,-1,0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",68,-1,256,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",100,-1,1,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",100,-1,257,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<double,less<double> >",117,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",89,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",89,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",89,-1,2,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",89,-1,258,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",89,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",89,-1,1025,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",89,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<void*>",117,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",89,-1,0,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",89,-1,0,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEvoidmUgR),0,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEvoidmUgR),0,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR),0,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",89,-1,2,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",89,-1,1026,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",89,-1,1,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",89,-1,1025,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<void*,less<void*> >",117,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",67,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",67,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",67,-1,2,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",67,-1,258,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",67,-1,1,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",67,-1,1025,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",67,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<char*>",117,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",67,-1,0,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",67,-1,0,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEcharmUgR),0,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR),0,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",67,-1,2,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",67,-1,1026,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",67,-1,1,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",67,-1,1025,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<char*,less<char*> >",117,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("first_argument_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("second_argument_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("result_type",103,-1,0,G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_string),256,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_string),1,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_string),257,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<string>",117,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G__LN_lesslEstringgR),0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__LN_allocatorlEstringgR),0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__LN_string),0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__LN_string),256,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__LN_string),1,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__LN_string),257,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<string,less<string> >",117,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* less<int> */
static void G__setup_memvarlesslEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEintgR));
   { less<int> *p; p=(less<int>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<int,int,bool> */
static void G__setup_memvarbinary_functionlEintcOintcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   { binary_function<int,int,bool> *p; p=(binary_function<int,int,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<int> */
static void G__setup_memvarallocatorlEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   { allocator<int> *p; p=(allocator<int>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<int,less<int>,allocator<int> > */
static void G__setup_memvarsetlEintcOlesslEintgRcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   { set<int,less<int>,allocator<int> > *p; p=(set<int,less<int>,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<int,less<int>,allocator<int> >::iterator */
static void G__setup_memvarsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator));
   { set<int,less<int>,allocator<int> >::iterator *p; p=(set<int,less<int>,allocator<int> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<int,less<int>,allocator<int> >::reverse_iterator */
static void G__setup_memvarsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator));
   { set<int,less<int>,allocator<int> >::reverse_iterator *p; p=(set<int,less<int>,allocator<int> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<set<int,less<int>,allocator<int> >::iterator,bool> */
static void G__setup_memvarpairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR));
   { pair<set<int,less<int>,allocator<int> >::iterator,bool> *p; p=(pair<set<int,less<int>,allocator<int> >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<long> */
static void G__setup_memvarlesslElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslElonggR));
   { less<long> *p; p=(less<long>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<long,long,bool> */
static void G__setup_memvarbinary_functionlElongcOlongcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   { binary_function<long,long,bool> *p; p=(binary_function<long,long,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<long> */
static void G__setup_memvarallocatorlElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   { allocator<long> *p; p=(allocator<long>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<long,less<long>,allocator<long> > */
static void G__setup_memvarsetlElongcOlesslElonggRcOallocatorlElonggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   { set<long,less<long>,allocator<long> > *p; p=(set<long,less<long>,allocator<long> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<long,less<long>,allocator<long> >::iterator */
static void G__setup_memvarsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator));
   { set<long,less<long>,allocator<long> >::iterator *p; p=(set<long,less<long>,allocator<long> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<long,less<long>,allocator<long> >::reverse_iterator */
static void G__setup_memvarsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator));
   { set<long,less<long>,allocator<long> >::reverse_iterator *p; p=(set<long,less<long>,allocator<long> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<set<long,less<long>,allocator<long> >::iterator,bool> */
static void G__setup_memvarpairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR));
   { pair<set<long,less<long>,allocator<long> >::iterator,bool> *p; p=(pair<set<long,less<long>,allocator<long> >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<float> */
static void G__setup_memvarlesslEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEfloatgR));
   { less<float> *p; p=(less<float>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<float,float,bool> */
static void G__setup_memvarbinary_functionlEfloatcOfloatcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   { binary_function<float,float,bool> *p; p=(binary_function<float,float,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<float> */
static void G__setup_memvarallocatorlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   { allocator<float> *p; p=(allocator<float>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<float,less<float>,allocator<float> > */
static void G__setup_memvarsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   { set<float,less<float>,allocator<float> > *p; p=(set<float,less<float>,allocator<float> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<float,less<float>,allocator<float> >::iterator */
static void G__setup_memvarsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator));
   { set<float,less<float>,allocator<float> >::iterator *p; p=(set<float,less<float>,allocator<float> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<float,less<float>,allocator<float> >::reverse_iterator */
static void G__setup_memvarsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   { set<float,less<float>,allocator<float> >::reverse_iterator *p; p=(set<float,less<float>,allocator<float> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<set<float,less<float>,allocator<float> >::iterator,bool> */
static void G__setup_memvarpairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR));
   { pair<set<float,less<float>,allocator<float> >::iterator,bool> *p; p=(pair<set<float,less<float>,allocator<float> >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<double> */
static void G__setup_memvarlesslEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   { less<double> *p; p=(less<double>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<double,double,bool> */
static void G__setup_memvarbinary_functionlEdoublecOdoublecOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   { binary_function<double,double,bool> *p; p=(binary_function<double,double,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<double> */
static void G__setup_memvarallocatorlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   { allocator<double> *p; p=(allocator<double>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<double,less<double>,allocator<double> > */
static void G__setup_memvarsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   { set<double,less<double>,allocator<double> > *p; p=(set<double,less<double>,allocator<double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<double,less<double>,allocator<double> >::iterator */
static void G__setup_memvarsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator));
   { set<double,less<double>,allocator<double> >::iterator *p; p=(set<double,less<double>,allocator<double> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<double,less<double>,allocator<double> >::reverse_iterator */
static void G__setup_memvarsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   { set<double,less<double>,allocator<double> >::reverse_iterator *p; p=(set<double,less<double>,allocator<double> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<set<double,less<double>,allocator<double> >::iterator,bool> */
static void G__setup_memvarpairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR));
   { pair<set<double,less<double>,allocator<double> >::iterator,bool> *p; p=(pair<set<double,less<double>,allocator<double> >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<void*> */
static void G__setup_memvarlesslEvoidmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR));
   { less<void*> *p; p=(less<void*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<void*,void*,bool> */
static void G__setup_memvarbinary_functionlEvoidmUcOvoidmUcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   { binary_function<void*,void*,bool> *p; p=(binary_function<void*,void*,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<void*> */
static void G__setup_memvarallocatorlEvoidmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   { allocator<void*> *p; p=(allocator<void*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<void*,less<void*>,allocator<void*> > */
static void G__setup_memvarsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   { set<void*,less<void*>,allocator<void*> > *p; p=(set<void*,less<void*>,allocator<void*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<void*,less<void*>,allocator<void*> >::iterator */
static void G__setup_memvarsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator));
   { set<void*,less<void*>,allocator<void*> >::iterator *p; p=(set<void*,less<void*>,allocator<void*> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<void*,less<void*>,allocator<void*> >::reverse_iterator */
static void G__setup_memvarsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   { set<void*,less<void*>,allocator<void*> >::reverse_iterator *p; p=(set<void*,less<void*>,allocator<void*> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<set<void*,less<void*>,allocator<void*> >::iterator,bool> */
static void G__setup_memvarpairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR));
   { pair<set<void*,less<void*>,allocator<void*> >::iterator,bool> *p; p=(pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<char*> */
static void G__setup_memvarlesslEcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   { less<char*> *p; p=(less<char*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<char*,char*,bool> */
static void G__setup_memvarbinary_functionlEcharmUcOcharmUcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   { binary_function<char*,char*,bool> *p; p=(binary_function<char*,char*,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<char*> */
static void G__setup_memvarallocatorlEcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   { allocator<char*> *p; p=(allocator<char*>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<char*,less<char*>,allocator<char*> > */
static void G__setup_memvarsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   { set<char*,less<char*>,allocator<char*> > *p; p=(set<char*,less<char*>,allocator<char*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<char*,less<char*>,allocator<char*> >::iterator */
static void G__setup_memvarsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator));
   { set<char*,less<char*>,allocator<char*> >::iterator *p; p=(set<char*,less<char*>,allocator<char*> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<char*,less<char*>,allocator<char*> >::reverse_iterator */
static void G__setup_memvarsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   { set<char*,less<char*>,allocator<char*> >::reverse_iterator *p; p=(set<char*,less<char*>,allocator<char*> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<set<char*,less<char*>,allocator<char*> >::iterator,bool> */
static void G__setup_memvarpairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR));
   { pair<set<char*,less<char*>,allocator<char*> >::iterator,bool> *p; p=(pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* less<string> */
static void G__setup_memvarlesslEstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR));
   { less<string> *p; p=(less<string>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* binary_function<string,string,bool> */
static void G__setup_memvarbinary_functionlEstringcOstringcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   { binary_function<string,string,bool> *p; p=(binary_function<string,string,bool>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* allocator<string> */
static void G__setup_memvarallocatorlEstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   { allocator<string> *p; p=(allocator<string>*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<string,less<string>,allocator<string> > */
static void G__setup_memvarsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   { set<string,less<string>,allocator<string> > *p; p=(set<string,less<string>,allocator<string> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<string,less<string>,allocator<string> >::iterator */
static void G__setup_memvarsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator));
   { set<string,less<string>,allocator<string> >::iterator *p; p=(set<string,less<string>,allocator<string> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<string,less<string>,allocator<string> >::reverse_iterator */
static void G__setup_memvarsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   { set<string,less<string>,allocator<string> >::reverse_iterator *p; p=(set<string,less<string>,allocator<string> >::reverse_iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<set<string,less<string>,allocator<string> >::iterator,bool> */
static void G__setup_memvarpairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR));
   { pair<set<string,less<string>,allocator<string> >::iterator,bool> *p; p=(pair<set<string,less<string>,allocator<string> >::iterator,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunclesslEintgR(void) {
   /* less<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEintgR));
   G__memfunc_setup("operator()",957,G__set_48_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 11 - x i - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<int>", 892, G__set_48_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<int>", 892, G__set_48_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 0, 1, 1, 1, 0, "u 'less<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<int>", 1018, G__set_48_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_48_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEintgR), -1, 1, 1, 1, 1, 0, "u 'less<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEintcOintcOboolgR(void) {
   /* binary_function<int,int,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<int,int,bool>", 2910, G__set_49_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<int,int,bool>", 2910, G__set_49_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<int,int,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<int,int,bool>", 3036, G__set_49_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_49_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<int,int,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEintgR(void) {
   /* allocator<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR));
   G__memfunc_setup("allocator<int>",1414,G__set_50_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<int>",1414,G__set_50_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 0, 1, 1, 1, 0, "u 'allocator<int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_50_0_3, 73, -1, G__defined_typename("allocator<int>::pointer"), 0, 1, 1, 1, 8, "i - 'allocator<int>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_50_0_4, 73, -1, G__defined_typename("allocator<int>::const_pointer"), 0, 1, 1, 1, 8, "i - 'allocator<int>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__set_50_0_5, 73, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<int>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__set_50_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'allocator<int>::pointer' 0 - __p h - 'allocator<int>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_50_0_7, 104, -1, G__defined_typename("allocator<int>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__set_50_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'allocator<int>::pointer' 0 - __p i - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__set_50_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'allocator<int>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<int>", 1540, G__set_50_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_50_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEintgR), -1, 1, 1, 1, 1, 0, "u 'allocator<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEintcOlesslEintgRcOallocatorlEintgRsPgR(void) {
   /* set<int,less<int>,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR));
   G__memfunc_setup("set<int,less<int>,allocator<int> >",3211,G__set_51_0_1, 105, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set<int,less<int>,allocator<int> >",3211,G__set_51_0_2, 105, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_51_0_3, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__set_51_0_4, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__set_51_0_5, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__set_51_0_6, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__set_51_0_7, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__set_51_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__set_51_0_9, 104, -1, G__defined_typename("set<int,less<int>,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_51_0_10, 104, -1, G__defined_typename("set<int,less<int>,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_51_0_11, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_51_0_12, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >::iterator' - 0 - position i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_51_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_51_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >::iterator' - 0 - first u 'set<int,less<int>,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__set_51_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__set_51_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__set_51_0_17, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__set_51_0_18, 104, -1, G__defined_typename("set<int,less<int>,allocator<int> >::size_type"), 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__set_51_0_19, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__set_51_0_20, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~set<int,less<int>,allocator<int> >", 3337, G__set_51_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator(void) {
   /* set<int,less<int>,allocator<int> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__set_52_0_1, 105, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__set_52_0_2, 105, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_52_0_3, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_52_0_4, 105, -1, G__defined_typename("set<int,less<int>,allocator<int> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_52_0_5, 73, -1, G__defined_typename("set<int,less<int>,allocator<int> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_52_0_6, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_52_0_7, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_52_0_8, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_52_0_9, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__set_52_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__set_52_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__set_52_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator(void) {
   /* set<int,less<int>,allocator<int> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__set_53_0_1, 105, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_53_0_2, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'set<int,less<int>,allocator<int> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_53_0_3, 105, -1, G__defined_typename("set<int,less<int>,allocator<int> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_53_0_4, 73, -1, G__defined_typename("set<int,less<int>,allocator<int> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_53_0_5, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_53_0_6, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_53_0_7, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_53_0_8, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__set_53_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<set<int,less<int>,allocator<int> >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<set<int,less<int>,allocator<int> >::iterator,bool>",5223,G__set_54_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<set<int,less<int>,allocator<int> >::iterator,bool>",5223,G__set_54_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<set<int,less<int>,allocator<int> >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<set<int,less<int>,allocator<int> >::iterator,bool>", 5223, G__set_54_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<set<int,less<int>,allocator<int> >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<set<int,less<int>,allocator<int> >::iterator,bool>", 5349, G__set_54_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslElonggR(void) {
   /* less<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslElonggR));
   G__memfunc_setup("operator()",957,G__set_55_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"l - - 11 - x l - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<long>", 993, G__set_55_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<long>", 993, G__set_55_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 0, 1, 1, 1, 0, "u 'less<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<long>", 1119, G__set_55_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_55_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslElonggR), -1, 1, 1, 1, 1, 0, "u 'less<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlElongcOlongcOboolgR(void) {
   /* binary_function<long,long,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<long,long,bool>", 3112, G__set_56_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<long,long,bool>", 3112, G__set_56_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<long,long,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<long,long,bool>", 3238, G__set_56_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_56_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<long,long,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlElonggR(void) {
   /* allocator<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR));
   G__memfunc_setup("allocator<long>",1515,G__set_57_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<long>",1515,G__set_57_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 0, 1, 1, 1, 0, "u 'allocator<long>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_57_0_3, 76, -1, G__defined_typename("allocator<long>::pointer"), 0, 1, 1, 1, 8, "l - 'allocator<long>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_57_0_4, 76, -1, G__defined_typename("allocator<long>::const_pointer"), 0, 1, 1, 1, 8, "l - 'allocator<long>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__set_57_0_5, 76, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<long>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__set_57_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - 'allocator<long>::pointer' 0 - __p h - 'allocator<long>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_57_0_7, 104, -1, G__defined_typename("allocator<long>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__set_57_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - 'allocator<long>::pointer' 0 - __p l - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__set_57_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "L - 'allocator<long>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<long>", 1641, G__set_57_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_57_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlElonggR), -1, 1, 1, 1, 1, 0, "u 'allocator<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlElongcOlesslElonggRcOallocatorlElonggRsPgR(void) {
   /* set<long,less<long>,allocator<long> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR));
   G__memfunc_setup("set<long,less<long>,allocator<long> >",3514,G__set_58_0_1, 105, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set<long,less<long>,allocator<long> >",3514,G__set_58_0_2, 105, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR), -1, 0, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_58_0_3, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR), -1, 1, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__set_58_0_4, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__set_58_0_5, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__set_58_0_6, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__set_58_0_7, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__set_58_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__set_58_0_9, 104, -1, G__defined_typename("set<long,less<long>,allocator<long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_58_0_10, 104, -1, G__defined_typename("set<long,less<long>,allocator<long> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_58_0_11, 117, G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_58_0_12, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >::iterator' - 0 - position l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_58_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_58_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >::iterator' - 0 - first u 'set<long,less<long>,allocator<long> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__set_58_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__set_58_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__set_58_0_17, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__set_58_0_18, 104, -1, G__defined_typename("set<long,less<long>,allocator<long> >::size_type"), 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__set_58_0_19, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__set_58_0_20, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~set<long,less<long>,allocator<long> >", 3640, G__set_58_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator(void) {
   /* set<long,less<long>,allocator<long> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__set_59_0_1, 105, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__set_59_0_2, 105, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_59_0_3, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_59_0_4, 108, -1, G__defined_typename("set<long,less<long>,allocator<long> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_59_0_5, 76, -1, G__defined_typename("set<long,less<long>,allocator<long> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_59_0_6, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_59_0_7, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_59_0_8, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_59_0_9, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__set_59_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__set_59_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__set_59_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator(void) {
   /* set<long,less<long>,allocator<long> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__set_60_0_1, 105, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_60_0_2, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'set<long,less<long>,allocator<long> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_60_0_3, 108, -1, G__defined_typename("set<long,less<long>,allocator<long> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_60_0_4, 76, -1, G__defined_typename("set<long,less<long>,allocator<long> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_60_0_5, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_60_0_6, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_60_0_7, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_60_0_8, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__set_60_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<set<long,less<long>,allocator<long> >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<set<long,less<long>,allocator<long> >::iterator,bool>",5526,G__set_61_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<set<long,less<long>,allocator<long> >::iterator,bool>",5526,G__set_61_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<set<long,less<long>,allocator<long> >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<set<long,less<long>,allocator<long> >::iterator,bool>", 5526, G__set_61_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<set<long,less<long>,allocator<long> >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<set<long,less<long>,allocator<long> >::iterator,bool>", 5652, G__set_61_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEfloatgR(void) {
   /* less<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEfloatgR));
   G__memfunc_setup("operator()",957,G__set_62_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"f - - 11 - x f - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<float>", 1095, G__set_62_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<float>", 1095, G__set_62_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEfloatgR), -1, 0, 1, 1, 1, 0, "u 'less<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<float>", 1221, G__set_62_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_62_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'less<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEfloatcOfloatcOboolgR(void) {
   /* binary_function<float,float,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<float,float,bool>", 3316, G__set_63_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<float,float,bool>", 3316, G__set_63_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<float,float,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<float,float,bool>", 3442, G__set_63_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_63_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<float,float,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEfloatgR(void) {
   /* allocator<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR));
   G__memfunc_setup("allocator<float>",1617,G__set_64_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<float>",1617,G__set_64_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'allocator<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_64_0_3, 70, -1, G__defined_typename("allocator<float>::pointer"), 0, 1, 1, 1, 8, "f - 'allocator<float>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_64_0_4, 70, -1, G__defined_typename("allocator<float>::const_pointer"), 0, 1, 1, 1, 8, "f - 'allocator<float>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__set_64_0_5, 70, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<float>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__set_64_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'allocator<float>::pointer' 0 - __p h - 'allocator<float>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_64_0_7, 104, -1, G__defined_typename("allocator<float>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__set_64_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'allocator<float>::pointer' 0 - __p f - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__set_64_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'allocator<float>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<float>", 1743, G__set_64_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_64_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'allocator<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR(void) {
   /* set<float,less<float>,allocator<float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR));
   G__memfunc_setup("set<float,less<float>,allocator<float> >",3820,G__set_65_0_1, 105, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set<float,less<float>,allocator<float> >",3820,G__set_65_0_2, 105, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR), -1, 0, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_65_0_3, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__set_65_0_4, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__set_65_0_5, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__set_65_0_6, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__set_65_0_7, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__set_65_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__set_65_0_9, 104, -1, G__defined_typename("set<float,less<float>,allocator<float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_65_0_10, 104, -1, G__defined_typename("set<float,less<float>,allocator<float> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_65_0_11, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_65_0_12, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >::iterator' - 0 - position f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_65_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_65_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >::iterator' - 0 - first u 'set<float,less<float>,allocator<float> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__set_65_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__set_65_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__set_65_0_17, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__set_65_0_18, 104, -1, G__defined_typename("set<float,less<float>,allocator<float> >::size_type"), 0, 1, 1, 1, 8, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__set_65_0_19, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__set_65_0_20, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "f - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~set<float,less<float>,allocator<float> >", 3946, G__set_65_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator(void) {
   /* set<float,less<float>,allocator<float> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__set_66_0_1, 105, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__set_66_0_2, 105, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_66_0_3, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_66_0_4, 102, -1, G__defined_typename("set<float,less<float>,allocator<float> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_66_0_5, 70, -1, G__defined_typename("set<float,less<float>,allocator<float> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_66_0_6, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_66_0_7, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_66_0_8, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_66_0_9, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__set_66_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__set_66_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__set_66_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator(void) {
   /* set<float,less<float>,allocator<float> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__set_67_0_1, 105, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_67_0_2, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'set<float,less<float>,allocator<float> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_67_0_3, 102, -1, G__defined_typename("set<float,less<float>,allocator<float> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_67_0_4, 70, -1, G__defined_typename("set<float,less<float>,allocator<float> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_67_0_5, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_67_0_6, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_67_0_7, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_67_0_8, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__set_67_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<set<float,less<float>,allocator<float> >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<set<float,less<float>,allocator<float> >::iterator,bool>",5832,G__set_68_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<set<float,less<float>,allocator<float> >::iterator,bool>",5832,G__set_68_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<set<float,less<float>,allocator<float> >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<set<float,less<float>,allocator<float> >::iterator,bool>", 5832, G__set_68_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<set<float,less<float>,allocator<float> >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<set<float,less<float>,allocator<float> >::iterator,bool>", 5958, G__set_68_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEdoublegR(void) {
   /* less<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR));
   G__memfunc_setup("operator()",957,G__set_69_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"d - - 11 - x d - - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<double>", 1196, G__set_69_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<double>", 1196, G__set_69_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'less<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<double>", 1322, G__set_69_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_69_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'less<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEdoublecOdoublecOboolgR(void) {
   /* binary_function<double,double,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<double,double,bool>", 3518, G__set_70_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<double,double,bool>", 3518, G__set_70_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<double,double,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<double,double,bool>", 3644, G__set_70_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_70_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<double,double,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEdoublegR(void) {
   /* allocator<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR));
   G__memfunc_setup("allocator<double>",1718,G__set_71_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<double>",1718,G__set_71_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'allocator<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_71_0_3, 68, -1, G__defined_typename("allocator<double>::pointer"), 0, 1, 1, 1, 8, "d - 'allocator<double>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_71_0_4, 68, -1, G__defined_typename("allocator<double>::const_pointer"), 0, 1, 1, 1, 8, "d - 'allocator<double>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__set_71_0_5, 68, -1, -1, 0, 2, 1, 1, 0, 
"h - 'allocator<double>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__set_71_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'allocator<double>::pointer' 0 - __p h - 'allocator<double>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_71_0_7, 104, -1, G__defined_typename("allocator<double>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__set_71_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'allocator<double>::pointer' 0 - __p d - - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__set_71_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'allocator<double>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<double>", 1844, G__set_71_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_71_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'allocator<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR(void) {
   /* set<double,less<double>,allocator<double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR));
   G__memfunc_setup("set<double,less<double>,allocator<double> >",4123,G__set_72_0_1, 105, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set<double,less<double>,allocator<double> >",4123,G__set_72_0_2, 105, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_72_0_3, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__set_72_0_4, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__set_72_0_5, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__set_72_0_6, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__set_72_0_7, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__set_72_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__set_72_0_9, 104, -1, G__defined_typename("set<double,less<double>,allocator<double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_72_0_10, 104, -1, G__defined_typename("set<double,less<double>,allocator<double> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_72_0_11, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_72_0_12, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >::iterator' - 0 - position d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_72_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_72_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >::iterator' - 0 - first u 'set<double,less<double>,allocator<double> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__set_72_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__set_72_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__set_72_0_17, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__set_72_0_18, 104, -1, G__defined_typename("set<double,less<double>,allocator<double> >::size_type"), 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__set_72_0_19, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__set_72_0_20, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "d - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~set<double,less<double>,allocator<double> >", 4249, G__set_72_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator(void) {
   /* set<double,less<double>,allocator<double> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__set_73_0_1, 105, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__set_73_0_2, 105, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_73_0_3, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_73_0_4, 100, -1, G__defined_typename("set<double,less<double>,allocator<double> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_73_0_5, 68, -1, G__defined_typename("set<double,less<double>,allocator<double> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_73_0_6, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_73_0_7, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_73_0_8, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_73_0_9, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__set_73_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__set_73_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__set_73_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator(void) {
   /* set<double,less<double>,allocator<double> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__set_74_0_1, 105, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_74_0_2, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'set<double,less<double>,allocator<double> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_74_0_3, 100, -1, G__defined_typename("set<double,less<double>,allocator<double> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_74_0_4, 68, -1, G__defined_typename("set<double,less<double>,allocator<double> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_74_0_5, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_74_0_6, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_74_0_7, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_74_0_8, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__set_74_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<set<double,less<double>,allocator<double> >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<set<double,less<double>,allocator<double> >::iterator,bool>",6135,G__set_75_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<set<double,less<double>,allocator<double> >::iterator,bool>",6135,G__set_75_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<set<double,less<double>,allocator<double> >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<set<double,less<double>,allocator<double> >::iterator,bool>", 6135, G__set_75_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<set<double,less<double>,allocator<double> >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<set<double,less<double>,allocator<double> >::iterator,bool>", 6261, G__set_75_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEvoidmUgR(void) {
   /* less<void*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR));
   G__memfunc_setup("operator()",957,G__set_76_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"Y - - 41 - x Y - - 41 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<void*>", 1037, G__set_76_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEvoidmUgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<void*>", 1037, G__set_76_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEvoidmUgR), -1, 0, 1, 1, 1, 0, "u 'less<void*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<void*>", 1163, G__set_76_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_76_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEvoidmUgR), -1, 1, 1, 1, 1, 0, "u 'less<void*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEvoidmUcOvoidmUcOboolgR(void) {
   /* binary_function<void*,void*,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<void*,void*,bool>", 3200, G__set_77_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<void*,void*,bool>", 3200, G__set_77_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<void*,void*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<void*,void*,bool>", 3326, G__set_77_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_77_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<void*,void*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEvoidmUgR(void) {
   /* allocator<void*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR));
   G__memfunc_setup("allocator<void*>",1559,G__set_78_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<void*>",1559,G__set_78_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 0, 1, 1, 1, 0, "u 'allocator<void*>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_78_0_3, 89, -1, G__defined_typename("allocator<void*>::pointer"), 2, 1, 1, 1, 8, "Y - 'allocator<void*>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_78_0_4, 89, -1, G__defined_typename("allocator<void*>::const_pointer"), 2, 1, 1, 1, 8, "Y - 'allocator<void*>::const_reference' 40 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__set_78_0_5, 89, -1, -1, 2, 2, 1, 1, 0, 
"h - 'allocator<void*>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__set_78_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"Y - 'allocator<void*>::pointer' 2 - __p h - 'allocator<void*>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_78_0_7, 104, -1, G__defined_typename("allocator<void*>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__set_78_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"Y - 'allocator<void*>::pointer' 2 - __p Y - - 41 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__set_78_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "Y - 'allocator<void*>::pointer' 2 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<void*>", 1685, G__set_78_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_78_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR), -1, 1, 1, 1, 1, 0, "u 'allocator<void*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR(void) {
   /* set<void*,less<void*>,allocator<void*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR));
   G__memfunc_setup("set<void*,less<void*>,allocator<void*> >",3646,G__set_79_0_1, 105, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set<void*,less<void*>,allocator<void*> >",3646,G__set_79_0_2, 105, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_79_0_3, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__set_79_0_4, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__set_79_0_5, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__set_79_0_6, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__set_79_0_7, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__set_79_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__set_79_0_9, 104, -1, G__defined_typename("set<void*,less<void*>,allocator<void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_79_0_10, 104, -1, G__defined_typename("set<void*,less<void*>,allocator<void*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_79_0_11, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_79_0_12, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - position Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_79_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_79_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - first u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__set_79_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__set_79_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__set_79_0_17, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__set_79_0_18, 104, -1, G__defined_typename("set<void*,less<void*>,allocator<void*> >::size_type"), 0, 1, 1, 1, 8, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__set_79_0_19, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__set_79_0_20, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "Y - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~set<void*,less<void*>,allocator<void*> >", 3772, G__set_79_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator(void) {
   /* set<void*,less<void*>,allocator<void*> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__set_80_0_1, 105, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__set_80_0_2, 105, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_80_0_3, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_80_0_4, 89, -1, G__defined_typename("set<void*,less<void*>,allocator<void*> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_80_0_5, 89, -1, G__defined_typename("set<void*,less<void*>,allocator<void*> >::value_type"), 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_80_0_6, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_80_0_7, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_80_0_8, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_80_0_9, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__set_80_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__set_80_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__set_80_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator(void) {
   /* set<void*,less<void*>,allocator<void*> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__set_81_0_1, 105, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_81_0_2, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'set<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_81_0_3, 89, -1, G__defined_typename("set<void*,less<void*>,allocator<void*> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_81_0_4, 89, -1, G__defined_typename("set<void*,less<void*>,allocator<void*> >::value_type"), 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_81_0_5, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_81_0_6, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_81_0_7, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_81_0_8, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__set_81_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<set<void*,less<void*>,allocator<void*> >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>",5658,G__set_82_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>",5658,G__set_82_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>", 5658, G__set_82_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>", 5784, G__set_82_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEcharmUgR(void) {
   /* less<char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR));
   G__memfunc_setup("operator()",957,G__set_83_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"C - - 41 - x C - - 41 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<char*>", 1017, G__set_83_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<char*>", 1017, G__set_83_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 0, 1, 1, 1, 0, "u 'less<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<char*>", 1143, G__set_83_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_83_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEcharmUgR), -1, 1, 1, 1, 1, 0, "u 'less<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEcharmUcOcharmUcOboolgR(void) {
   /* binary_function<char*,char*,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<char*,char*,bool>", 3160, G__set_84_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<char*,char*,bool>", 3160, G__set_84_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<char*,char*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<char*,char*,bool>", 3286, G__set_84_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_84_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<char*,char*,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEcharmUgR(void) {
   /* allocator<char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR));
   G__memfunc_setup("allocator<char*>",1539,G__set_85_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<char*>",1539,G__set_85_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 0, 1, 1, 1, 0, "u 'allocator<char*>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_85_0_3, 67, -1, G__defined_typename("allocator<char*>::pointer"), 2, 1, 1, 1, 8, "C - 'allocator<char*>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_85_0_4, 67, -1, G__defined_typename("allocator<char*>::const_pointer"), 2, 1, 1, 1, 8, "C - 'allocator<char*>::const_reference' 40 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__set_85_0_5, 67, -1, -1, 2, 2, 1, 1, 0, 
"h - 'allocator<char*>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__set_85_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'allocator<char*>::pointer' 2 - __p h - 'allocator<char*>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_85_0_7, 104, -1, G__defined_typename("allocator<char*>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__set_85_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'allocator<char*>::pointer' 2 - __p C - - 41 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__set_85_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'allocator<char*>::pointer' 2 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<char*>", 1665, G__set_85_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_85_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR), -1, 1, 1, 1, 1, 0, "u 'allocator<char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR(void) {
   /* set<char*,less<char*>,allocator<char*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR));
   G__memfunc_setup("set<char*,less<char*>,allocator<char*> >",3586,G__set_86_0_1, 105, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set<char*,less<char*>,allocator<char*> >",3586,G__set_86_0_2, 105, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_86_0_3, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__set_86_0_4, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__set_86_0_5, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__set_86_0_6, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__set_86_0_7, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__set_86_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__set_86_0_9, 104, -1, G__defined_typename("set<char*,less<char*>,allocator<char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_86_0_10, 104, -1, G__defined_typename("set<char*,less<char*>,allocator<char*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_86_0_11, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_86_0_12, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - position C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_86_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_86_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - first u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__set_86_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__set_86_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__set_86_0_17, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__set_86_0_18, 104, -1, G__defined_typename("set<char*,less<char*>,allocator<char*> >::size_type"), 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__set_86_0_19, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__set_86_0_20, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "C - - 41 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~set<char*,less<char*>,allocator<char*> >", 3712, G__set_86_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator(void) {
   /* set<char*,less<char*>,allocator<char*> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__set_87_0_1, 105, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__set_87_0_2, 105, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_87_0_3, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_87_0_4, 67, -1, G__defined_typename("set<char*,less<char*>,allocator<char*> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_87_0_5, 67, -1, G__defined_typename("set<char*,less<char*>,allocator<char*> >::value_type"), 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_87_0_6, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_87_0_7, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_87_0_8, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_87_0_9, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__set_87_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__set_87_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__set_87_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator(void) {
   /* set<char*,less<char*>,allocator<char*> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__set_88_0_1, 105, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_88_0_2, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'set<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_88_0_3, 67, -1, G__defined_typename("set<char*,less<char*>,allocator<char*> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_88_0_4, 67, -1, G__defined_typename("set<char*,less<char*>,allocator<char*> >::value_type"), 2, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_88_0_5, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_88_0_6, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_88_0_7, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_88_0_8, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__set_88_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<set<char*,less<char*>,allocator<char*> >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>",5598,G__set_89_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>",5598,G__set_89_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>", 5598, G__set_89_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>", 5724, G__set_89_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclesslEstringgR(void) {
   /* less<string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR));
   G__memfunc_setup("operator()",957,G__set_90_0_1, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' - 11 - x u 'string' - 11 - y", (char*)NULL, (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("less<string>", 1224, G__set_90_0_2, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("less<string>", 1224, G__set_90_0_3, (int) ('i'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 0, 1, 1, 1, 0, "u 'less<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~less<string>", 1350, G__set_90_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_90_0_5, (int) ('u'), G__get_linked_tagnum(&G__LN_lesslEstringgR), -1, 1, 1, 1, 1, 0, "u 'less<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbinary_functionlEstringcOstringcOboolgR(void) {
   /* binary_function<string,string,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR));
   // automatic default constructor
   G__memfunc_setup("binary_function<string,string,bool>", 3574, G__set_91_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("binary_function<string,string,bool>", 3574, G__set_91_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 0, 1, 1, 1, 0, "u 'binary_function<string,string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~binary_function<string,string,bool>", 3700, G__set_91_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_91_0_4, (int) ('u'), G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR), -1, 1, 1, 1, 1, 0, "u 'binary_function<string,string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncallocatorlEstringgR(void) {
   /* allocator<string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR));
   G__memfunc_setup("allocator<string>",1746,G__set_92_0_1, 105, G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocator<string>",1746,G__set_92_0_2, 105, G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 0, 1, 1, 1, 0, "u 'allocator<string>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_92_0_3, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("allocator<string>::pointer"), 0, 1, 1, 1, 8, "u 'string' 'allocator<string>::reference' 0 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("address",742,G__set_92_0_4, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("allocator<string>::const_pointer"), 0, 1, 1, 1, 8, "u 'string' 'allocator<string>::const_reference' 10 - __x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__set_92_0_5, 85, G__get_linked_tagnum(&G__LN_string), -1, 0, 2, 1, 1, 0, 
"h - 'allocator<string>::size_type' 0 - __n Y - - 10 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__set_92_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'string' 'allocator<string>::pointer' 0 - __p h - 'allocator<string>::size_type' 0 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_92_0_7, 104, -1, G__defined_typename("allocator<string>::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("construct",997,G__set_92_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'string' 'allocator<string>::pointer' 0 - __p u 'string' - 11 - __val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("destroy",778,G__set_92_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'string' 'allocator<string>::pointer' 0 - __p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~allocator<string>", 1872, G__set_92_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__set_92_0_11, (int) ('u'), G__get_linked_tagnum(&G__LN_allocatorlEstringgR), -1, 1, 1, 1, 1, 0, "u 'allocator<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR(void) {
   /* set<string,less<string>,allocator<string> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR));
   G__memfunc_setup("set<string,less<string>,allocator<string> >",4207,G__set_93_0_1, 105, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set<string,less<string>,allocator<string> >",4207,G__set_93_0_2, 105, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR), -1, 0, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_93_0_3, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR), -1, 1, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__set_93_0_4, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__set_93_0_5, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__set_93_0_6, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__set_93_0_7, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__set_93_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__set_93_0_9, 104, -1, G__defined_typename("set<string,less<string>,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__set_93_0_10, 104, -1, G__defined_typename("set<string,less<string>,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_93_0_11, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__set_93_0_12, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >::iterator' - 0 - position u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_93_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__set_93_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >::iterator' - 0 - first u 'set<string,less<string>,allocator<string> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__set_93_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__set_93_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__set_93_0_17, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__set_93_0_18, 104, -1, G__defined_typename("set<string,less<string>,allocator<string> >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__set_93_0_19, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__set_93_0_20, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~set<string,less<string>,allocator<string> >", 4333, G__set_93_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator(void) {
   /* set<string,less<string>,allocator<string> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__set_94_0_1, 105, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__set_94_0_2, 105, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_94_0_3, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_94_0_4, 117, G__get_linked_tagnum(&G__LN_string), G__defined_typename("set<string,less<string>,allocator<string> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_94_0_5, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("set<string,less<string>,allocator<string> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_94_0_6, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_94_0_7, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_94_0_8, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_94_0_9, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__set_94_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__set_94_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__set_94_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator(void) {
   /* set<string,less<string>,allocator<string> >::reverse_iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator));
   G__memfunc_setup("reverse_iterator",1733,G__set_95_0_1, 105, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__set_95_0_2, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 1, 1, 1, 0, "u 'set<string,less<string>,allocator<string> >::reverse_iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__set_95_0_3, 117, G__get_linked_tagnum(&G__LN_string), G__defined_typename("set<string,less<string>,allocator<string> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__set_95_0_4, 85, G__get_linked_tagnum(&G__LN_string), G__defined_typename("set<string,less<string>,allocator<string> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_95_0_5, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__set_95_0_6, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_95_0_7, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__set_95_0_8, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~reverse_iterator", 1859, G__set_95_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR(void) {
   /* pair<set<string,less<string>,allocator<string> >::iterator,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR));
   G__memfunc_setup("pair<set<string,less<string>,allocator<string> >::iterator,bool>",6219,G__set_96_0_1, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<set<string,less<string>,allocator<string> >::iterator,bool>",6219,G__set_96_0_2, 105, G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >::iterator' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<set<string,less<string>,allocator<string> >::iterator,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<set<string,less<string>,allocator<string> >::iterator,bool>", 6219, G__set_96_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<set<string,less<string>,allocator<string> >::iterator,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<set<string,less<string>,allocator<string> >::iterator,bool>", 6345, G__set_96_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC__=3",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"__GNUC_MINOR__=4",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__SET_DLL=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"INCLUDE_CINTDICTVERSION=0",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"G__CINTDICTVERSION=20090608",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global() {
  G__cpp_setup_global0();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
   G__memfunc_setup("operator==", 998, G__set__0_112, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<int,less<int>,allocator<int> >::reverse_iterator' - 11 - x u 'set<int,less<int>,allocator<int> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_113, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<int,less<int>,allocator<int> >::reverse_iterator' - 11 - x u 'set<int,less<int>,allocator<int> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_114, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >' - 11 - x u 'set<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__set__0_115, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >' - 11 - x u 'set<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_116, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >' - 11 - x u 'set<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__set__0_117, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >' - 11 - x u 'set<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__set__0_118, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >' - 11 - x u 'set<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__set__0_119, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >' - 11 - x u 'set<int,less<int>,allocator<int> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__set__0_120, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >::iterator' - 0 - first u 'set<int,less<int>,allocator<int> >::iterator' - 0 - last "
"i - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__set__0_121, 117, G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'set<int,less<int>,allocator<int> >::iterator' - 0 - first1 u 'set<int,less<int>,allocator<int> >::iterator' - 0 - last1 "
"u 'set<int,less<int>,allocator<int> >::iterator' - 0 - first2 u 'set<int,less<int>,allocator<int> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_122, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<long,less<long>,allocator<long> >::reverse_iterator' - 11 - x u 'set<long,less<long>,allocator<long> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_123, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<long,less<long>,allocator<long> >::reverse_iterator' - 11 - x u 'set<long,less<long>,allocator<long> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_124, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >' - 11 - x u 'set<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__set__0_125, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >' - 11 - x u 'set<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_126, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >' - 11 - x u 'set<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__set__0_127, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >' - 11 - x u 'set<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__set__0_128, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >' - 11 - x u 'set<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__set__0_129, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >' - 11 - x u 'set<long,less<long>,allocator<long> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__set__0_130, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >::iterator' - 0 - first u 'set<long,less<long>,allocator<long> >::iterator' - 0 - last "
"l - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__set__0_131, 117, G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'set<long,less<long>,allocator<long> >::iterator' - 0 - first1 u 'set<long,less<long>,allocator<long> >::iterator' - 0 - last1 "
"u 'set<long,less<long>,allocator<long> >::iterator' - 0 - first2 u 'set<long,less<long>,allocator<long> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_132, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<float,less<float>,allocator<float> >::reverse_iterator' - 11 - x u 'set<float,less<float>,allocator<float> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_133, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<float,less<float>,allocator<float> >::reverse_iterator' - 11 - x u 'set<float,less<float>,allocator<float> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_134, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >' - 11 - x u 'set<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__set__0_135, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >' - 11 - x u 'set<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_136, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >' - 11 - x u 'set<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__set__0_137, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >' - 11 - x u 'set<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__set__0_138, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >' - 11 - x u 'set<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__set__0_139, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >' - 11 - x u 'set<float,less<float>,allocator<float> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__set__0_140, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >::iterator' - 0 - first u 'set<float,less<float>,allocator<float> >::iterator' - 0 - last "
"f - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__set__0_141, 117, G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'set<float,less<float>,allocator<float> >::iterator' - 0 - first1 u 'set<float,less<float>,allocator<float> >::iterator' - 0 - last1 "
"u 'set<float,less<float>,allocator<float> >::iterator' - 0 - first2 u 'set<float,less<float>,allocator<float> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_142, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<double,less<double>,allocator<double> >::reverse_iterator' - 11 - x u 'set<double,less<double>,allocator<double> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_143, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<double,less<double>,allocator<double> >::reverse_iterator' - 11 - x u 'set<double,less<double>,allocator<double> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_144, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >' - 11 - x u 'set<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__set__0_145, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >' - 11 - x u 'set<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_146, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >' - 11 - x u 'set<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__set__0_147, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >' - 11 - x u 'set<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__set__0_148, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >' - 11 - x u 'set<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__set__0_149, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >' - 11 - x u 'set<double,less<double>,allocator<double> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__set__0_150, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >::iterator' - 0 - first u 'set<double,less<double>,allocator<double> >::iterator' - 0 - last "
"d - - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__set__0_151, 117, G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'set<double,less<double>,allocator<double> >::iterator' - 0 - first1 u 'set<double,less<double>,allocator<double> >::iterator' - 0 - last1 "
"u 'set<double,less<double>,allocator<double> >::iterator' - 0 - first2 u 'set<double,less<double>,allocator<double> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_152, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - x u 'set<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_153, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - x u 'set<void*,less<void*>,allocator<void*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_154, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >' - 11 - x u 'set<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__set__0_155, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >' - 11 - x u 'set<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_156, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >' - 11 - x u 'set<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__set__0_157, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >' - 11 - x u 'set<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__set__0_158, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >' - 11 - x u 'set<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__set__0_159, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >' - 11 - x u 'set<void*,less<void*>,allocator<void*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__set__0_160, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - first u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - last "
"Y - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__set__0_161, 117, G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - first1 u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - last1 "
"u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - first2 u 'set<void*,less<void*>,allocator<void*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_162, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - x u 'set<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_163, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - x u 'set<char*,less<char*>,allocator<char*> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_164, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >' - 11 - x u 'set<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__set__0_165, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >' - 11 - x u 'set<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_166, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >' - 11 - x u 'set<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__set__0_167, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >' - 11 - x u 'set<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__set__0_168, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >' - 11 - x u 'set<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__set__0_169, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >' - 11 - x u 'set<char*,less<char*>,allocator<char*> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__set__0_170, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - first u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - last "
"C - - 41 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__set__0_171, 117, G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - first1 u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - last1 "
"u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - first2 u 'set<char*,less<char*>,allocator<char*> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_172, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<string,less<string>,allocator<string> >::reverse_iterator' - 11 - x u 'set<string,less<string>,allocator<string> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_173, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'set<string,less<string>,allocator<string> >::reverse_iterator' - 11 - x u 'set<string,less<string>,allocator<string> >::reverse_iterator' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator==", 998, G__set__0_174, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >' - 11 - x u 'set<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__set__0_175, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >' - 11 - x u 'set<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__set__0_176, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >' - 11 - x u 'set<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__set__0_177, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >' - 11 - x u 'set<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__set__0_178, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >' - 11 - x u 'set<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__set__0_179, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >' - 11 - x u 'set<string,less<string>,allocator<string> >' - 11 - y", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("find", 417, G__set__0_180, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 3, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >::iterator' - 0 - first u 'set<string,less<string>,allocator<string> >::iterator' - 0 - last "
"u 'string' - 11 - value", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("search", 630, G__set__0_181, 117, G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 4, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >::iterator' - 0 - first1 u 'set<string,less<string>,allocator<string> >::iterator' - 0 - last1 "
"u 'set<string,less<string>,allocator<string> >::iterator' - 0 - first2 u 'set<string,less<string>,allocator<string> >::iterator' - 0 - last2", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LN_string = { "string" , 99 , -1 };
G__linked_taginfo G__LN_lesslEintgR = { "less<int>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEintcOintcOboolgR = { "binary_function<int,int,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEintgR = { "allocator<int>" , 99 , -1 };
G__linked_taginfo G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR = { "set<int,less<int>,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator = { "set<int,less<int>,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator = { "set<int,less<int>,allocator<int> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR = { "pair<set<int,less<int>,allocator<int> >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslElonggR = { "less<long>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlElongcOlongcOboolgR = { "binary_function<long,long,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlElonggR = { "allocator<long>" , 99 , -1 };
G__linked_taginfo G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR = { "set<long,less<long>,allocator<long> >" , 99 , -1 };
G__linked_taginfo G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator = { "set<long,less<long>,allocator<long> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator = { "set<long,less<long>,allocator<long> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR = { "pair<set<long,less<long>,allocator<long> >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslEfloatgR = { "less<float>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEfloatcOfloatcOboolgR = { "binary_function<float,float,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEfloatgR = { "allocator<float>" , 99 , -1 };
G__linked_taginfo G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR = { "set<float,less<float>,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator = { "set<float,less<float>,allocator<float> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator = { "set<float,less<float>,allocator<float> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR = { "pair<set<float,less<float>,allocator<float> >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslEdoublegR = { "less<double>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEdoublecOdoublecOboolgR = { "binary_function<double,double,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEdoublegR = { "allocator<double>" , 99 , -1 };
G__linked_taginfo G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR = { "set<double,less<double>,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator = { "set<double,less<double>,allocator<double> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator = { "set<double,less<double>,allocator<double> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR = { "pair<set<double,less<double>,allocator<double> >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslEvoidmUgR = { "less<void*>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR = { "binary_function<void*,void*,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEvoidmUgR = { "allocator<void*>" , 99 , -1 };
G__linked_taginfo G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR = { "set<void*,less<void*>,allocator<void*> >" , 99 , -1 };
G__linked_taginfo G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator = { "set<void*,less<void*>,allocator<void*> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator = { "set<void*,less<void*>,allocator<void*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR = { "pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslEcharmUgR = { "less<char*>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEcharmUcOcharmUcOboolgR = { "binary_function<char*,char*,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEcharmUgR = { "allocator<char*>" , 99 , -1 };
G__linked_taginfo G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR = { "set<char*,less<char*>,allocator<char*> >" , 99 , -1 };
G__linked_taginfo G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator = { "set<char*,less<char*>,allocator<char*> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator = { "set<char*,less<char*>,allocator<char*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR = { "pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__LN_lesslEstringgR = { "less<string>" , 115 , -1 };
G__linked_taginfo G__LN_binary_functionlEstringcOstringcOboolgR = { "binary_function<string,string,bool>" , 115 , -1 };
G__linked_taginfo G__LN_allocatorlEstringgR = { "allocator<string>" , 99 , -1 };
G__linked_taginfo G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR = { "set<string,less<string>,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator = { "set<string,less<string>,allocator<string> >::iterator" , 99 , -1 };
G__linked_taginfo G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator = { "set<string,less<string>,allocator<string> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR = { "pair<set<string,less<string>,allocator<string> >::iterator,bool>" , 115 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable() {
  G__LN_string.tagnum = -1 ;
  G__LN_lesslEintgR.tagnum = -1 ;
  G__LN_binary_functionlEintcOintcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEintgR.tagnum = -1 ;
  G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslElonggR.tagnum = -1 ;
  G__LN_binary_functionlElongcOlongcOboolgR.tagnum = -1 ;
  G__LN_allocatorlElonggR.tagnum = -1 ;
  G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR.tagnum = -1 ;
  G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslEfloatgR.tagnum = -1 ;
  G__LN_binary_functionlEfloatcOfloatcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEfloatgR.tagnum = -1 ;
  G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslEdoublegR.tagnum = -1 ;
  G__LN_binary_functionlEdoublecOdoublecOboolgR.tagnum = -1 ;
  G__LN_allocatorlEdoublegR.tagnum = -1 ;
  G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslEvoidmUgR.tagnum = -1 ;
  G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEvoidmUgR.tagnum = -1 ;
  G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR.tagnum = -1 ;
  G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslEcharmUgR.tagnum = -1 ;
  G__LN_binary_functionlEcharmUcOcharmUcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEcharmUgR.tagnum = -1 ;
  G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR.tagnum = -1 ;
  G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__LN_lesslEstringgR.tagnum = -1 ;
  G__LN_binary_functionlEstringcOstringcOboolgR.tagnum = -1 ;
  G__LN_allocatorlEstringgR.tagnum = -1 ;
  G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator.tagnum = -1 ;
  G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__LN_string);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEintgR),sizeof(less<int>),-1,0,(char*)NULL,G__setup_memvarlesslEintgR,G__setup_memfunclesslEintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEintcOintcOboolgR),sizeof(binary_function<int,int,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEintcOintcOboolgR,G__setup_memfuncbinary_functionlEintcOintcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEintgR),sizeof(allocator<int>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEintgR,G__setup_memfuncallocatorlEintgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR),sizeof(set<int,less<int>,allocator<int> >),-1,3840,(char*)NULL,G__setup_memvarsetlEintcOlesslEintgRcOallocatorlEintgRsPgR,G__setup_memfuncsetlEintcOlesslEintgRcOallocatorlEintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator),sizeof(set<int,less<int>,allocator<int> >::iterator),-1,2816,(char*)NULL,G__setup_memvarsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator,G__setup_memfuncsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator),sizeof(set<int,less<int>,allocator<int> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator,G__setup_memfuncsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR),sizeof(pair<set<int,less<int>,allocator<int> >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEsetlEintcOlesslEintgRcOallocatorlEintgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslElonggR),sizeof(less<long>),-1,0,(char*)NULL,G__setup_memvarlesslElonggR,G__setup_memfunclesslElonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlElongcOlongcOboolgR),sizeof(binary_function<long,long,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlElongcOlongcOboolgR,G__setup_memfuncbinary_functionlElongcOlongcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlElonggR),sizeof(allocator<long>),-1,1792,(char*)NULL,G__setup_memvarallocatorlElonggR,G__setup_memfuncallocatorlElonggR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgR),sizeof(set<long,less<long>,allocator<long> >),-1,3840,(char*)NULL,G__setup_memvarsetlElongcOlesslElonggRcOallocatorlElonggRsPgR,G__setup_memfuncsetlElongcOlesslElonggRcOallocatorlElonggRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator),sizeof(set<long,less<long>,allocator<long> >::iterator),-1,2816,(char*)NULL,G__setup_memvarsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator,G__setup_memfuncsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator),sizeof(set<long,less<long>,allocator<long> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator,G__setup_memfuncsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR),sizeof(pair<set<long,less<long>,allocator<long> >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEsetlElongcOlesslElonggRcOallocatorlElonggRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEfloatgR),sizeof(less<float>),-1,0,(char*)NULL,G__setup_memvarlesslEfloatgR,G__setup_memfunclesslEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEfloatcOfloatcOboolgR),sizeof(binary_function<float,float,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEfloatcOfloatcOboolgR,G__setup_memfuncbinary_functionlEfloatcOfloatcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEfloatgR),sizeof(allocator<float>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEfloatgR,G__setup_memfuncallocatorlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR),sizeof(set<float,less<float>,allocator<float> >),-1,3840,(char*)NULL,G__setup_memvarsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR,G__setup_memfuncsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator),sizeof(set<float,less<float>,allocator<float> >::iterator),-1,2816,(char*)NULL,G__setup_memvarsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator,G__setup_memfuncsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator),sizeof(set<float,less<float>,allocator<float> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator,G__setup_memfuncsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR),sizeof(pair<set<float,less<float>,allocator<float> >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEsetlEfloatcOlesslEfloatgRcOallocatorlEfloatgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEdoublegR),sizeof(less<double>),-1,0,(char*)NULL,G__setup_memvarlesslEdoublegR,G__setup_memfunclesslEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEdoublecOdoublecOboolgR),sizeof(binary_function<double,double,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEdoublecOdoublecOboolgR,G__setup_memfuncbinary_functionlEdoublecOdoublecOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEdoublegR),sizeof(allocator<double>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEdoublegR,G__setup_memfuncallocatorlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR),sizeof(set<double,less<double>,allocator<double> >),-1,3840,(char*)NULL,G__setup_memvarsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR,G__setup_memfuncsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator),sizeof(set<double,less<double>,allocator<double> >::iterator),-1,2816,(char*)NULL,G__setup_memvarsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator,G__setup_memfuncsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator),sizeof(set<double,less<double>,allocator<double> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator,G__setup_memfuncsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR),sizeof(pair<set<double,less<double>,allocator<double> >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEvoidmUgR),sizeof(less<void*>),-1,0,(char*)NULL,G__setup_memvarlesslEvoidmUgR,G__setup_memfunclesslEvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEvoidmUcOvoidmUcOboolgR),sizeof(binary_function<void*,void*,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEvoidmUcOvoidmUcOboolgR,G__setup_memfuncbinary_functionlEvoidmUcOvoidmUcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEvoidmUgR),sizeof(allocator<void*>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEvoidmUgR,G__setup_memfuncallocatorlEvoidmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR),sizeof(set<void*,less<void*>,allocator<void*> >),-1,3840,(char*)NULL,G__setup_memvarsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR,G__setup_memfuncsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator),sizeof(set<void*,less<void*>,allocator<void*> >::iterator),-1,2816,(char*)NULL,G__setup_memvarsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator,G__setup_memfuncsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator),sizeof(set<void*,less<void*>,allocator<void*> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator,G__setup_memfuncsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR),sizeof(pair<set<void*,less<void*>,allocator<void*> >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEsetlEvoidmUcOlesslEvoidmUgRcOallocatorlEvoidmUgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEcharmUgR),sizeof(less<char*>),-1,0,(char*)NULL,G__setup_memvarlesslEcharmUgR,G__setup_memfunclesslEcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEcharmUcOcharmUcOboolgR),sizeof(binary_function<char*,char*,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEcharmUcOcharmUcOboolgR,G__setup_memfuncbinary_functionlEcharmUcOcharmUcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEcharmUgR),sizeof(allocator<char*>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEcharmUgR,G__setup_memfuncallocatorlEcharmUgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR),sizeof(set<char*,less<char*>,allocator<char*> >),-1,3840,(char*)NULL,G__setup_memvarsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR,G__setup_memfuncsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator),sizeof(set<char*,less<char*>,allocator<char*> >::iterator),-1,2816,(char*)NULL,G__setup_memvarsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator,G__setup_memfuncsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator),sizeof(set<char*,less<char*>,allocator<char*> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator,G__setup_memfuncsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR),sizeof(pair<set<char*,less<char*>,allocator<char*> >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEsetlEcharmUcOlesslEcharmUgRcOallocatorlEcharmUgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_lesslEstringgR),sizeof(less<string>),-1,0,(char*)NULL,G__setup_memvarlesslEstringgR,G__setup_memfunclesslEstringgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_binary_functionlEstringcOstringcOboolgR),sizeof(binary_function<string,string,bool>),-1,0,(char*)NULL,G__setup_memvarbinary_functionlEstringcOstringcOboolgR,G__setup_memfuncbinary_functionlEstringcOstringcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_allocatorlEstringgR),sizeof(allocator<string>),-1,1792,(char*)NULL,G__setup_memvarallocatorlEstringgR,G__setup_memfuncallocatorlEstringgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),sizeof(set<string,less<string>,allocator<string> >),-1,3840,(char*)NULL,G__setup_memvarsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR,G__setup_memfuncsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator),sizeof(set<string,less<string>,allocator<string> >::iterator),-1,2816,(char*)NULL,G__setup_memvarsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator,G__setup_memfuncsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator),sizeof(set<string,less<string>,allocator<string> >::reverse_iterator),-1,2560,(char*)NULL,G__setup_memvarsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator,G__setup_memfuncsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum(&G__LN_pairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR),sizeof(pair<set<string,less<string>,allocator<string> >::iterator,bool>),-1,35072,(char*)NULL,G__setup_memvarpairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR,G__setup_memfuncpairlEsetlEstringcOlesslEstringgRcOallocatorlEstringgRsPgRcLcLiteratorcOboolgR);
}
extern "C" void G__cpp_setup(void) {
  G__check_setup_version(30051515,"G__cpp_setup()");
  G__set_cpp_environment();
  G__cpp_setup_tagtable();

  G__cpp_setup_inheritance();

  G__cpp_setup_typetable();

  G__cpp_setup_memvar();

  G__cpp_setup_memfunc();
  G__cpp_setup_global();
  G__cpp_setup_func();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc();
  return;
}
class G__cpp_setup_init {
  public:
    G__cpp_setup_init() { G__add_setup_func("G__Default",(G__incsetup)(&G__cpp_setup)); }
   ~G__cpp_setup_init() { G__remove_setup_func("G__Default"); }
};
G__cpp_setup_init G__cpp_setup_initializer;

