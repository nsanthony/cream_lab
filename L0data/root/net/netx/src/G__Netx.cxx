//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:51:44 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Netx.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TXNetFile_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TXNetFile(void *p = 0);
   static void *newArray_TXNetFile(Long_t size, void *p);
   static void delete_TXNetFile(void *p);
   static void deleteArray_TXNetFile(void *p);
   static void destruct_TXNetFile(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TXNetFile*)
   {
      ::TXNetFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TXNetFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TXNetFile", ::TXNetFile::Class_Version(), "include/TXNetFile.h", 64,
                  typeid(::TXNetFile), DefineBehavior(ptr, ptr),
                  &::TXNetFile::Dictionary, isa_proxy, 0,
                  sizeof(::TXNetFile) );
      instance.SetNew(&new_TXNetFile);
      instance.SetNewArray(&newArray_TXNetFile);
      instance.SetDelete(&delete_TXNetFile);
      instance.SetDeleteArray(&deleteArray_TXNetFile);
      instance.SetDestructor(&destruct_TXNetFile);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TXNetFile*)
   {
      return GenerateInitInstanceLocal((::TXNetFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TXNetFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TXNetSystem_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TXNetSystem(void *p = 0);
   static void *newArray_TXNetSystem(Long_t size, void *p);
   static void delete_TXNetSystem(void *p);
   static void deleteArray_TXNetSystem(void *p);
   static void destruct_TXNetSystem(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TXNetSystem*)
   {
      ::TXNetSystem *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TXNetSystem >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TXNetSystem", ::TXNetSystem::Class_Version(), "include/TXNetSystem.h", 65,
                  typeid(::TXNetSystem), DefineBehavior(ptr, ptr),
                  &::TXNetSystem::Dictionary, isa_proxy, 0,
                  sizeof(::TXNetSystem) );
      instance.SetNew(&new_TXNetSystem);
      instance.SetNewArray(&newArray_TXNetSystem);
      instance.SetDelete(&delete_TXNetSystem);
      instance.SetDeleteArray(&deleteArray_TXNetSystem);
      instance.SetDestructor(&destruct_TXNetSystem);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TXNetSystem*)
   {
      return GenerateInitInstanceLocal((::TXNetSystem*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TXNetSystem*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TXNetFileStager_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TXNetFileStager(void *p = 0);
   static void *newArray_TXNetFileStager(Long_t size, void *p);
   static void delete_TXNetFileStager(void *p);
   static void deleteArray_TXNetFileStager(void *p);
   static void destruct_TXNetFileStager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TXNetFileStager*)
   {
      ::TXNetFileStager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TXNetFileStager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TXNetFileStager", ::TXNetFileStager::Class_Version(), "include/TXNetFileStager.h", 30,
                  typeid(::TXNetFileStager), DefineBehavior(ptr, ptr),
                  &::TXNetFileStager::Dictionary, isa_proxy, 0,
                  sizeof(::TXNetFileStager) );
      instance.SetNew(&new_TXNetFileStager);
      instance.SetNewArray(&newArray_TXNetFileStager);
      instance.SetDelete(&delete_TXNetFileStager);
      instance.SetDeleteArray(&deleteArray_TXNetFileStager);
      instance.SetDestructor(&destruct_TXNetFileStager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TXNetFileStager*)
   {
      return GenerateInitInstanceLocal((::TXNetFileStager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TXNetFileStager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TXNetFile::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXNetFile::Class_Name()
{
   return "TXNetFile";
}

//______________________________________________________________________________
const char *TXNetFile::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXNetFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXNetFile::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXNetFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXNetFile::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXNetFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXNetFile::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXNetFile*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXNetSystem::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXNetSystem::Class_Name()
{
   return "TXNetSystem";
}

//______________________________________________________________________________
const char *TXNetSystem::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXNetSystem*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXNetSystem::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXNetSystem*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXNetSystem::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXNetSystem*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXNetSystem::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXNetSystem*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXNetFileStager::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXNetFileStager::Class_Name()
{
   return "TXNetFileStager";
}

//______________________________________________________________________________
const char *TXNetFileStager::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXNetFileStager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXNetFileStager::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXNetFileStager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXNetFileStager::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXNetFileStager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXNetFileStager::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXNetFileStager*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TXNetFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXNetFile.

   TNetFile::Streamer(R__b);
}

//______________________________________________________________________________
void TXNetFile::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXNetFile.
      TClass *R__cl = ::TXNetFile::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fClient", &fClient);
      R__insp.Inspect(R__cl, R__parent, "fIsRootd", &fIsRootd);
      R__insp.Inspect(R__cl, R__parent, "*fInitMtx", &fInitMtx);
      TNetFile::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TXNetFile(void *p) {
      return  p ? new(p) ::TXNetFile : new ::TXNetFile;
   }
   static void *newArray_TXNetFile(Long_t nElements, void *p) {
      return p ? new(p) ::TXNetFile[nElements] : new ::TXNetFile[nElements];
   }
   // Wrapper around operator delete
   static void delete_TXNetFile(void *p) {
      delete ((::TXNetFile*)p);
   }
   static void deleteArray_TXNetFile(void *p) {
      delete [] ((::TXNetFile*)p);
   }
   static void destruct_TXNetFile(void *p) {
      typedef ::TXNetFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXNetFile

//______________________________________________________________________________
void TXNetFileStager::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXNetFileStager.

   TFileStager::Streamer(R__b);
}

//______________________________________________________________________________
void TXNetFileStager::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXNetFileStager.
      TClass *R__cl = ::TXNetFileStager::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fPrefix", &fPrefix);
      fPrefix.ShowMembers(R__insp, strcat(R__parent,"fPrefix.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fSystem", &fSystem);
      TFileStager::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TXNetFileStager(void *p) {
      return  p ? new(p) ::TXNetFileStager : new ::TXNetFileStager;
   }
   static void *newArray_TXNetFileStager(Long_t nElements, void *p) {
      return p ? new(p) ::TXNetFileStager[nElements] : new ::TXNetFileStager[nElements];
   }
   // Wrapper around operator delete
   static void delete_TXNetFileStager(void *p) {
      delete ((::TXNetFileStager*)p);
   }
   static void deleteArray_TXNetFileStager(void *p) {
      delete [] ((::TXNetFileStager*)p);
   }
   static void destruct_TXNetFileStager(void *p) {
      typedef ::TXNetFileStager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXNetFileStager

//______________________________________________________________________________
void TXNetSystem::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXNetSystem.

   TNetSystem::Streamer(R__b);
}

//______________________________________________________________________________
void TXNetSystem::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXNetSystem.
      TClass *R__cl = ::TXNetSystem::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fIsRootd", &fIsRootd);
      R__insp.Inspect(R__cl, R__parent, "fIsXRootd", &fIsXRootd);
      R__insp.Inspect(R__cl, R__parent, "fDir", &fDir);
      fDir.ShowMembers(R__insp, strcat(R__parent,"fDir.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fDirp", &fDirp);
      R__insp.Inspect(R__cl, R__parent, "fDirList", (void*)&fDirList);
      ::ROOT::GenericShowMembers("vecString", (void*)&fDirList, R__insp, strcat(R__parent,"fDirList."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDirListValid", &fDirListValid);
      R__insp.Inspect(R__cl, R__parent, "fDirEntry", &fDirEntry);
      fDirEntry.ShowMembers(R__insp, strcat(R__parent,"fDirEntry.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fUrl", &fUrl);
      fUrl.ShowMembers(R__insp, strcat(R__parent,"fUrl.")); R__parent[R__ncp] = 0;
      TNetSystem::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TXNetSystem(void *p) {
      return  p ? new(p) ::TXNetSystem : new ::TXNetSystem;
   }
   static void *newArray_TXNetSystem(Long_t nElements, void *p) {
      return p ? new(p) ::TXNetSystem[nElements] : new ::TXNetSystem[nElements];
   }
   // Wrapper around operator delete
   static void delete_TXNetSystem(void *p) {
      delete ((::TXNetSystem*)p);
   }
   static void deleteArray_TXNetSystem(void *p) {
      delete [] ((::TXNetSystem*)p);
   }
   static void destruct_TXNetSystem(void *p) {
      typedef ::TXNetSystem current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXNetSystem

/********************************************************
* net/netx/src/G__Netx.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Netx();

extern "C" void G__set_cpp_environmentG__Netx() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TXNetFile.h");
  G__add_compiledheader("TXNetFileStager.h");
  G__add_compiledheader("TXNetSystem.h");
  G__cpp_reset_tagtableG__Netx();
}
#include <new>
extern "C" int G__cpp_dllrevG__Netx() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TXNetFile */
static int G__G__Netx_197_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXNetFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile[n];
     } else {
       p = new((void*) gvp) TXNetFile[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile;
     } else {
       p = new((void*) gvp) TXNetFile;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__NetxLN_TXNetFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXNetFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TXNetFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TXNetFile((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFile((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TXNetFile((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__NetxLN_TXNetFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXNetFile*) G__getstructoffset())->ResetCache();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const TXNetFile*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const TXNetFile*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TXNetFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TXNetFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TXNetFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXNetFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXNetFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_197_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXNetFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXNetFile G__TTXNetFile;
static int G__G__Netx_197_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TXNetFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TXNetFile*) (soff+(sizeof(TXNetFile)*i)))->~G__TTXNetFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TXNetFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TXNetFile*) (soff))->~G__TTXNetFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXNetSystem */
static int G__G__Netx_198_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXNetSystem* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetSystem((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TXNetSystem((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TXNetSystem[n];
       } else {
         p = new((void*) gvp) TXNetSystem[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TXNetSystem;
       } else {
         p = new((void*) gvp) TXNetSystem;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXNetSystem* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetSystem((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TXNetSystem((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetSystem((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TXNetSystem((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TXNetSystem*) G__getstructoffset())->Locate((const char*) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TXNetSystem*) G__getstructoffset())->GetPathsInfo((const char*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TXNetSystem*) G__getstructoffset())->IsOnline((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TXNetSystem*) G__getstructoffset())->Prepare((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TXNetSystem*) G__getstructoffset())->Prepare((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TXNetSystem*) G__getstructoffset())->Prepare((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((TXNetSystem*) G__getstructoffset())->Prepare((TCollection*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]), (TString*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((TXNetSystem*) G__getstructoffset())->Prepare((TCollection*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TXNetSystem*) G__getstructoffset())->Prepare((TCollection*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((TXNetSystem*) G__getstructoffset())->Prepare((TCollection*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TXNetSystem::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetSystem::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TXNetSystem::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TXNetSystem::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXNetSystem*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetSystem::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXNetSystem::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetSystem::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_198_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXNetSystem::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXNetSystem G__TTXNetSystem;
static int G__G__Netx_198_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TXNetSystem*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TXNetSystem*) (soff+(sizeof(TXNetSystem)*i)))->~G__TTXNetSystem();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TXNetSystem*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TXNetSystem*) (soff))->~G__TTXNetSystem();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXNetFileStager */
static int G__G__Netx_200_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXNetFileStager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TXNetFileStager((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TXNetFileStager((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TXNetFileStager[n];
       } else {
         p = new((void*) gvp) TXNetFileStager[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TXNetFileStager;
       } else {
         p = new((void*) gvp) TXNetFileStager;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TXNetFileStager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetFileStager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TXNetFileStager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TXNetFileStager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXNetFileStager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetFileStager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXNetFileStager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXNetFileStager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_200_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXNetFileStager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_200_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TXNetFileStager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TXNetFileStager(*(TXNetFileStager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXNetFileStager G__TTXNetFileStager;
static int G__G__Netx_200_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TXNetFileStager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TXNetFileStager*) (soff+(sizeof(TXNetFileStager)*i)))->~G__TTXNetFileStager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TXNetFileStager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TXNetFileStager*) (soff))->~G__TTXNetFileStager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_200_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXNetFileStager* dest = (TXNetFileStager*) G__getstructoffset();
   *dest = *(TXNetFileStager*) libp->para[0].ref;
   const TXNetFileStager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TXNetFile */

/* TXNetSystem */

/* TXNetFileStager */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Netx {
 public:
  G__Sizep2memfuncG__Netx(): p(&G__Sizep2memfuncG__Netx::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Netx::*p)();
};

size_t G__get_sizep2memfuncG__Netx()
{
  G__Sizep2memfuncG__Netx a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Netx() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile))) {
     TXNetFile *G__Lderived;
     G__Lderived=(TXNetFile*)0x1000;
     {
       TNetFile *G__Lpbase=(TNetFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TNetFile),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TFile *G__Lpbase=(TFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TFile),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TDirectoryFile *G__Lpbase=(TDirectoryFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TDirectoryFile),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TDirectory *G__Lpbase=(TDirectory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TDirectory),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem))) {
     TXNetSystem *G__Lderived;
     G__Lderived=(TXNetSystem*)0x1000;
     {
       TNetSystem *G__Lpbase=(TNetSystem*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem),G__get_linked_tagnum(&G__G__NetxLN_TNetSystem),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSystem *G__Lpbase=(TSystem*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem),G__get_linked_tagnum(&G__G__NetxLN_TSystem),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem),G__get_linked_tagnum(&G__G__NetxLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem),G__get_linked_tagnum(&G__G__NetxLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager))) {
     TXNetFileStager *G__Lderived;
     G__Lderived=(TXNetFileStager*)0x1000;
     {
       TFileStager *G__Lpbase=(TFileStager*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager),G__get_linked_tagnum(&G__G__NetxLN_TFileStager),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager),G__get_linked_tagnum(&G__G__NetxLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager),G__get_linked_tagnum(&G__G__NetxLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Netx() {

   /* Setting up typedef entry */
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__NetxLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__NetxLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__NetxLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__NetxLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TXNetFile */
static void G__setup_memvarTXNetFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile));
   { TXNetFile *p; p=(TXNetFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_XrdClient),-1,-1,4,"fClient=",0,"Handle to the client object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsRootd=",0,"Nature of remote file server");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgInitDone=",0,"Avoid initializing more than once");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgRootdBC=",0,"Control rootd backward compatibility");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_XrdSysRecMutex),-1,-1,4,"fInitMtx=",0,"Protects fInitDone, serializes the");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXNetSystem */
static void G__setup_memvarTXNetSystem(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem));
   { TXNetSystem *p; p=(TXNetSystem*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsRootd=",0,"Nature of remote file server");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsXRootd=",0,"Nature of remote file server");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,4,"fDir=",0,"Current directory");
   G__memvar_setup((void*)0,89,0,0,-1,-1,-1,4,"fDirp=",0,"Directory pointer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_XrdClientVectorlEXrdOucStringgR),G__defined_typename("vecString"),-1,4,"fDirList=",0,"Buffer for directory content");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDirListValid=",0,"fDirList content valid ?");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,4,"fDirEntry=",0,"Last dir entry ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,4,"fUrl=",0,"Initial url");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgInitDone=",0,"Avoid initializing more than once");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgRootdBC=",0,"Control rootd backward compatibility");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_THashList),-1,-2,4,"fgAddrFQDN=",0,"Cross-table address<->FQDN");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_THashList),-1,-2,4,"fgAdminHash=",0,"List of existing XrdClientAdmin");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXNetFileStager */
static void G__setup_memvarTXNetFileStager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager));
   { TXNetFileStager *p; p=(TXNetFileStager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,4,"fPrefix=",0,"prefix to prepend to requests");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem),-1,-1,4,"fSystem=",0,"instance of the admin interface");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Netx() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTXNetFile(void) {
   /* TXNetFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile));
   G__memfunc_setup("TXNetFile",851,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__NetxLN_TXNetFile), -1, 0, 1, 1, 4, 0, "u 'TXNetFile' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__NetxLN_TXNetFile), -1, 1, 1, 1, 4, 0, "u 'TXNetFile' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("CreateXClient",1291,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"C - - 10 - url C - 'Option_t' 10 - option "
"i - 'Int_t' 0 - netopt g - 'Bool_t' 0 - parallelopen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseOptions",1255,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 7, 1, 4, 0, 
"C - - 10 - opts i - 'Int_t' 1 - cachesz "
"i - 'Int_t' 1 - readaheadsz i - 'Int_t' 1 - rmpolicy "
"i - 'Int_t' 1 - mxredir i - 'Int_t' 1 - rastrategy "
"i - 'Int_t' 1 - readtrimblksz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SynchronizeCacheSize",2059,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - 'Bool_t' 0 - create", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Open",402,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"C - 'Option_t' 10 - option g - 'Bool_t' 0 - parallelopen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SysStat",731,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 4, 0, 
"i - 'Int_t' 0 - fd L - 'Long_t' 0 - id "
"N - 'Long64_t' 0 - size L - 'Long_t' 0 - flags "
"L - 'Long_t' 0 - modtime", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SysOpen",721,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"C - - 10 - pathname i - 'Int_t' 0 - flags "
"h - 'UInt_t' 0 - mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SysClose",821,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - fd", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FormUrl",711,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 3, 4, 0, 
"u 'TUrl' - 0 - uut u 'TString' - 1 - uu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRootdProtocol",1658,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 4, 0, "U 'TSocket' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnv",597,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXNetFile",851,G__G__Netx_197_0_14, 105, G__get_linked_tagnum(&G__G__NetxLN_TXNetFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXNetFile",851,G__G__Netx_197_0_15, 105, G__get_linked_tagnum(&G__G__NetxLN_TXNetFile), -1, 0, 7, 1, 1, 0, 
"C - - 10 - url C - 'Option_t' 10 '\"\"' option "
"C - - 10 '\"\"' fTitle i - 'Int_t' 0 '1' compress "
"i - 'Int_t' 0 '0' netopt g - 'Bool_t' 0 'kFALSE' parallelopen "
"C - - 10 '0' logicalurl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetCache",983,G__G__Netx_197_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Flush",514,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBytesToPrefetch",1819,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBufferAsync",1492,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"n - 'Long64_t' 0 - offs i - 'Int_t' 0 - len", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAsyncOpenStatus",1844,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__NetxLN_TFilecLcLEAsyncOpenStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOpen",590,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__G__Netx_197_0_23, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBuffer",982,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 0 - buf i - 'Int_t' 0 - len", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBuffers",1097,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 0 - buf N - 'Long64_t' 0 - pos "
"I - 'Int_t' 0 - len i - 'Int_t' 0 - nbuf", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReOpen",585,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteBuffer",1125,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - buffer i - 'Int_t' 0 - BufferLength", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Netx_197_0_28, 85, G__get_linked_tagnum(&G__G__NetxLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TXNetFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_197_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_197_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TXNetFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_197_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TXNetFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__NetxLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_197_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_197_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_197_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXNetFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_197_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_197_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXNetFile::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TXNetFile", 977, G__G__Netx_197_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXNetSystem(void) {
   /* TXNetSystem */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem));
   G__memfunc_setup("Connect",714,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__NetxLN_XrdClientAdmin), -1, 0, 1, 1, 4, 0, "C - - 10 - url", "Connect to server", (void*) NULL, 0);
   G__memfunc_setup("GetDirPtr",885,(G__InterfaceMethod) NULL, 89, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitXrdClient",1313,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClientAdmin",1384,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__NetxLN_XrdClientAdmin), -1, 0, 1, 3, 4, 0, "C - - 10 - url", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__NetxLN_TString), -1, 0, 1, 3, 4, 0, "C - - 10 - url", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXNetSystem",1112,G__G__Netx_198_0_6, 105, G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' owner", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXNetSystem",1112,G__G__Netx_198_0_7, 105, G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem), -1, 0, 2, 1, 1, 0, 
"C - - 10 - url g - 'Bool_t' 0 'kTRUE' owner", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AccessPathName",1376,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - path i 'EAccessMode' - 0 - mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConsistentWith",1478,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - path Y - - 0 - dirptr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FreeDirectory",1335,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "Y - - 0 - dirp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDirEntry",1105,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "Y - - 0 - dirp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPathInfo",1081,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 10 - path u 'FileStat_t' - 1 - buf", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPathLocal",1076,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Locate",600,G__G__Netx_198_0_14, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 10 - path u 'TString' - 1 - endurl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeDirectory",1331,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OpenDirectory",1351,(G__InterfaceMethod) NULL,89, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Unlink",625,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPathsInfo",1196,G__G__Netx_198_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - paths B - 'UChar_t' 0 - info", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOnline",801,G__G__Netx_198_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Prepare",719,G__G__Netx_198_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 - path b - 'UChar_t' 0 '8' opt "
"b - 'UChar_t' 0 '0' prio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Prepare",719,G__G__Netx_198_0_21, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'TCollection' - 0 - paths b - 'UChar_t' 0 '8' opt "
"b - 'UChar_t' 0 '0' prio U 'TString' - 0 '0' buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Netx_198_0_22, 85, G__get_linked_tagnum(&G__G__NetxLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TXNetSystem::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_198_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetSystem::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_198_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TXNetSystem::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_198_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TXNetSystem::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__NetxLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_198_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_198_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetSystem::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_198_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXNetSystem::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_198_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetSystem::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_198_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXNetSystem::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TXNetSystem", 1238, G__G__Netx_198_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXNetFileStager(void) {
   /* TXNetFileStager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager));
   G__memfunc_setup("GetPrefix",910,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 3, 4, 0, 
"C - - 10 - url u 'TString' - 1 - pfx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXNetFileStager",1465,G__G__Netx_200_0_2, 105, G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager), -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' stager", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsStaged",788,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Locate",600,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 10 - path u 'TString' - 1 - endpath", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Matches",709,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Stage",500,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - path C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Stage",500,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TCollection' - 0 - pathlist C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsValid",684,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Netx_200_0_10, 85, G__get_linked_tagnum(&G__G__NetxLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TXNetFileStager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_200_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetFileStager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_200_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TXNetFileStager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_200_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TXNetFileStager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__NetxLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_200_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_200_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetFileStager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_200_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXNetFileStager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_200_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXNetFileStager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_200_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXNetFileStager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TXNetFileStager", 1465, G__G__Netx_200_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager), -1, 0, 1, 1, 1, 0, "u 'TXNetFileStager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TXNetFileStager", 1591, G__G__Netx_200_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Netx_200_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager), -1, 1, 1, 1, 1, 0, "u 'TXNetFileStager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Netx() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Netx() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Netx() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__NetxLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__NetxLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TDirectoryFile = { "TDirectoryFile" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_THashList = { "THashList" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TUrl = { "TUrl" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TFilecLcLEAsyncOpenStatus = { "TFile::EAsyncOpenStatus" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_TSystem = { "TSystem" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TSocket = { "TSocket" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_EAccessMode = { "EAccessMode" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_FileStat_t = { "FileStat_t" , 115 , -1 };
G__linked_taginfo G__G__NetxLN_TNetFile = { "TNetFile" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TNetSystem = { "TNetSystem" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_XrdClient = { "XrdClient" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_XrdSysRecMutex = { "XrdSysRecMutex" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXNetFile = { "TXNetFile" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXNetSystem = { "TXNetSystem" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TFileStager = { "TFileStager" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXNetFileStager = { "TXNetFileStager" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_XrdClientAdmin = { "XrdClientAdmin" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_XrdClientVectorlEXrdOucStringgR = { "XrdClientVector<XrdOucString>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Netx() {
  G__G__NetxLN_TClass.tagnum = -1 ;
  G__G__NetxLN_TBuffer.tagnum = -1 ;
  G__G__NetxLN_TDirectory.tagnum = -1 ;
  G__G__NetxLN_TMemberInspector.tagnum = -1 ;
  G__G__NetxLN_TObject.tagnum = -1 ;
  G__G__NetxLN_TNamed.tagnum = -1 ;
  G__G__NetxLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_TString.tagnum = -1 ;
  G__G__NetxLN_TCollection.tagnum = -1 ;
  G__G__NetxLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__NetxLN_TFile.tagnum = -1 ;
  G__G__NetxLN_TDirectoryFile.tagnum = -1 ;
  G__G__NetxLN_THashList.tagnum = -1 ;
  G__G__NetxLN_TUrl.tagnum = -1 ;
  G__G__NetxLN_TFilecLcLEAsyncOpenStatus.tagnum = -1 ;
  G__G__NetxLN_TSystem.tagnum = -1 ;
  G__G__NetxLN_TSocket.tagnum = -1 ;
  G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_EAccessMode.tagnum = -1 ;
  G__G__NetxLN_FileStat_t.tagnum = -1 ;
  G__G__NetxLN_TNetFile.tagnum = -1 ;
  G__G__NetxLN_TNetSystem.tagnum = -1 ;
  G__G__NetxLN_XrdClient.tagnum = -1 ;
  G__G__NetxLN_XrdSysRecMutex.tagnum = -1 ;
  G__G__NetxLN_TXNetFile.tagnum = -1 ;
  G__G__NetxLN_TXNetSystem.tagnum = -1 ;
  G__G__NetxLN_TFileStager.tagnum = -1 ;
  G__G__NetxLN_TXNetFileStager.tagnum = -1 ;
  G__G__NetxLN_XrdClientAdmin.tagnum = -1 ;
  G__G__NetxLN_XrdClientVectorlEXrdOucStringgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Netx() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TString);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TCollection);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TFile);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TDirectoryFile);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_THashList);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TUrl);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TFilecLcLEAsyncOpenStatus);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TSystem);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TSocket);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_EAccessMode);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_FileStat_t);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TNetFile);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TNetSystem);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_XrdClient);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_XrdSysRecMutex);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),sizeof(TXNetFile),-1,65280,"TFile implementation to deal with new xrootd server.",G__setup_memvarTXNetFile,G__setup_memfuncTXNetFile);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetSystem),sizeof(TXNetSystem),-1,62720,"System management class for xrootd servers",G__setup_memvarTXNetSystem,G__setup_memfuncTXNetSystem);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_TFileStager);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFileStager),sizeof(TXNetFileStager),-1,62720,"Interface to a 'XRD' staging",G__setup_memvarTXNetFileStager,G__setup_memfuncTXNetFileStager);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_XrdClientAdmin);
   G__get_linked_tagnum_fwd(&G__G__NetxLN_XrdClientVectorlEXrdOucStringgR);
}
extern "C" void G__cpp_setupG__Netx(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Netx()");
  G__set_cpp_environmentG__Netx();
  G__cpp_setup_tagtableG__Netx();

  G__cpp_setup_inheritanceG__Netx();

  G__cpp_setup_typetableG__Netx();

  G__cpp_setup_memvarG__Netx();

  G__cpp_setup_memfuncG__Netx();
  G__cpp_setup_globalG__Netx();
  G__cpp_setup_funcG__Netx();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Netx();
  return;
}
class G__cpp_setup_initG__Netx {
  public:
    G__cpp_setup_initG__Netx() { G__add_setup_func("G__Netx",(G__incsetup)(&G__cpp_setupG__Netx)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Netx() { G__remove_setup_func("G__Netx"); }
};
G__cpp_setup_initG__Netx G__cpp_setup_initializerG__Netx;

