//
// File generated by core/utils/src/rootcint_tmp at Mon Apr 13 13:53:24 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__TMVA3.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      namespace TMVA {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TMVA::Config Config;
      #else
      class Config  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::TMVA::Config::VariablePlotting VariablePlotting;
         #else
         class VariablePlotting  {
            public:
            //friend XX;
            float fTimesRMS; //
            int fNbins1D; //
            int fNbins2D; //
            int fMaxNumOfAllowedVariablesForScatterPlots; //
            int fNbinsXOfROCCurve; //
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::TMVA::Config::IONames IONames;
         #else
         class IONames  {
            public:
            //friend XX;
            ::TString fWeightFileDir; //
            ::TString fWeightFileExtension; //
            ::TString fOptionsReferenceFileDir; //
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~Config() throw() {};
      };
      #endif
      } 
      namespace TMVA {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TMVA::BDTEventWrapper BDTEventWrapper;
      #else
      class BDTEventWrapper  {
         public:
         //friend XX;
         :: TMVA::Event* fEvent; //pointer to the event
         double fBkgWeight; //cumulative background weight for splitting
         double fSigWeight; //same for the signal weights
      };
      #endif
      } 
      namespace TMVA {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TMVA::CCTreeWrapper CCTreeWrapper;
      #else
      class CCTreeWrapper  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::TMVA::CCTreeWrapper::CCTreeNode CCTreeNode;
         #else
         class CCTreeNode  :  virtual public ::TMVA::Node {
            public:
            //friend XX;
            // To force the creation of a virtual table, throw just in case.
            virtual ~CCTreeNode() throw() {};
            int fNLeafDaughters; //! number of terminal descendants
            double fNodeResubstitutionEstimate; //! R(t) = misclassification rate for node t
            double fResubstitutionEstimate; //! R(T_t) = sum[t' in ~T_t]{ R(t) }
            double fAlphaC; //! critical point, g(t) = alpha_c(t)
            double fMinAlphaC; //! G(t), minimum critical point of t and its descendants
            ::TMVA::DecisionTreeNode* fDTNode; //! pointer to wrapped node in the decision tree
         };
         #endif

         typedef ::std::vector< ::TMVA::Event*, ::allocator< ::TMVA::Event*> > EventList;
         ::TMVA::SeparationBase* fQualityIndex; //! pointer to the used quality index calculator
         ::TMVA::DecisionTree* fDTParent; //! pointer to underlying DecisionTree
         CCTreeNode* fRoot; //! the root node of the (wrapped) decision Tree
      };
      #endif
      } 
      namespace TMVA {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TMVA::CCPruner CCPruner;
      #else
      class CCPruner  {
         public:
         //friend XX;
         typedef ::std::vector< ::TMVA::Event*, ::allocator< ::TMVA::Event*> > EventList;
         float fAlpha; //! regularization parameter in CC pruning
         :: TMVA::CCPruner::EventList* fValidationSample; //! the event sample to select the optimally-pruned tree
         :: TMVA::DataSet* fValidationDataSet; //! the event sample to select the optimally-pruned tree
         ::TMVA::SeparationBase* fQualityIndex; //! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }
         bool fOwnQIndex; //! flag indicates if fQualityIndex is owned by this
         ::TMVA::DecisionTree* fTree; //! (pruned) decision tree
         vector< ::TMVA::DecisionTreeNode* > fPruneSequence; //! map of weakest links (i.e., branches to prune) -> pruning index
         vector< Float_t > fPruneStrengthList; //! map of alpha -> pruning index
         vector< Float_t > fQualityIndexList; //! map of R(T) -> pruning index
         int fOptimalK; //! index of the optimal tree in the pruned tree sequence
         bool fDebug; //! debug flag
      };
      #endif
      } 
      namespace TMVA {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TMVA::CostComplexityPruneTool CostComplexityPruneTool;
      #else
      class CostComplexityPruneTool  :  public ::TMVA::IPruneTool {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~CostComplexityPruneTool() throw() {};
         ::TMVA::SeparationBase* fQualityIndexTool; //! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }
         vector< ::TMVA::DecisionTreeNode*, allocator< ::TMVA::DecisionTreeNode* >  > fPruneSequence; //! map of weakest links (i.e., branches to prune) -> pruning index
         vector< Double_t > fPruneStrengthList; //! map of alpha -> pruning index
         vector< Double_t > fQualityIndexList; //! map of R(T) -> pruning index
         int fOptimalK; //! the optimal index of the prune sequence
         ::TMVA::MsgLogger* fLogger; //! output stream to save logging information
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace TMVA {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void TMVA_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("TMVA", 0 /*version*/, "include/TMVA/SVEvent.h", 39,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &TMVA_Dictionary, 0);
         return &instance;
      }
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void TMVA_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void TMVAcLcLConfig_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::Config*)
   {
      ::TMVA::Config *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::Config >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::Config", ::TMVA::Config::Class_Version(), "include/TMVA/Config.h", 51,
                  typeid(::TMVA::Config), DefineBehavior(ptr, ptr),
                  &::TMVA::Config::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::Config) );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::Config*)
   {
      return GenerateInitInstanceLocal((::TMVA::Config*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::Config*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLConfigcLcLVariablePlotting_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TMVAcLcLConfigcLcLVariablePlotting_Dictionary();
   static void *new_TMVAcLcLConfigcLcLVariablePlotting(void *p = 0);
   static void *newArray_TMVAcLcLConfigcLcLVariablePlotting(Long_t size, void *p);
   static void delete_TMVAcLcLConfigcLcLVariablePlotting(void *p);
   static void deleteArray_TMVAcLcLConfigcLcLVariablePlotting(void *p);
   static void destruct_TMVAcLcLConfigcLcLVariablePlotting(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::Config::VariablePlotting*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TMVA::Config::VariablePlotting) == sizeof(::ROOT::Shadow::TMVA::Config::VariablePlotting));
      ::TMVA::Config::VariablePlotting *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TMVA::Config::VariablePlotting),0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::Config::VariablePlotting", "include/TMVA/Config.h", 79,
                  typeid(::TMVA::Config::VariablePlotting), DefineBehavior(ptr, ptr),
                  (void*)&TMVAcLcLConfigcLcLVariablePlotting_ShowMembers, &TMVAcLcLConfigcLcLVariablePlotting_Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::Config::VariablePlotting) );
      instance.SetNew(&new_TMVAcLcLConfigcLcLVariablePlotting);
      instance.SetNewArray(&newArray_TMVAcLcLConfigcLcLVariablePlotting);
      instance.SetDelete(&delete_TMVAcLcLConfigcLcLVariablePlotting);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLConfigcLcLVariablePlotting);
      instance.SetDestructor(&destruct_TMVAcLcLConfigcLcLVariablePlotting);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::Config::VariablePlotting*)
   {
      return GenerateInitInstanceLocal((::TMVA::Config::VariablePlotting*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::Config::VariablePlotting*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TMVAcLcLConfigcLcLVariablePlotting_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Config::VariablePlotting*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLConfigcLcLIONames_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TMVAcLcLConfigcLcLIONames_Dictionary();
   static void *new_TMVAcLcLConfigcLcLIONames(void *p = 0);
   static void *newArray_TMVAcLcLConfigcLcLIONames(Long_t size, void *p);
   static void delete_TMVAcLcLConfigcLcLIONames(void *p);
   static void deleteArray_TMVAcLcLConfigcLcLIONames(void *p);
   static void destruct_TMVAcLcLConfigcLcLIONames(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::Config::IONames*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TMVA::Config::IONames) == sizeof(::ROOT::Shadow::TMVA::Config::IONames));
      ::TMVA::Config::IONames *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TMVA::Config::IONames),0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::Config::IONames", "include/TMVA/Config.h", 91,
                  typeid(::TMVA::Config::IONames), DefineBehavior(ptr, ptr),
                  (void*)&TMVAcLcLConfigcLcLIONames_ShowMembers, &TMVAcLcLConfigcLcLIONames_Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::Config::IONames) );
      instance.SetNew(&new_TMVAcLcLConfigcLcLIONames);
      instance.SetNewArray(&newArray_TMVAcLcLConfigcLcLIONames);
      instance.SetDelete(&delete_TMVAcLcLConfigcLcLIONames);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLConfigcLcLIONames);
      instance.SetDestructor(&destruct_TMVAcLcLConfigcLcLIONames);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::Config::IONames*)
   {
      return GenerateInitInstanceLocal((::TMVA::Config::IONames*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::Config::IONames*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TMVAcLcLConfigcLcLIONames_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Config::IONames*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLKDEKernel_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMVAcLcLKDEKernel(void *p = 0);
   static void *newArray_TMVAcLcLKDEKernel(Long_t size, void *p);
   static void delete_TMVAcLcLKDEKernel(void *p);
   static void deleteArray_TMVAcLcLKDEKernel(void *p);
   static void destruct_TMVAcLcLKDEKernel(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::KDEKernel*)
   {
      ::TMVA::KDEKernel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::KDEKernel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::KDEKernel", ::TMVA::KDEKernel::Class_Version(), "include/TMVA/KDEKernel.h", 48,
                  typeid(::TMVA::KDEKernel), DefineBehavior(ptr, ptr),
                  &::TMVA::KDEKernel::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::KDEKernel) );
      instance.SetNew(&new_TMVAcLcLKDEKernel);
      instance.SetNewArray(&newArray_TMVAcLcLKDEKernel);
      instance.SetDelete(&delete_TMVAcLcLKDEKernel);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLKDEKernel);
      instance.SetDestructor(&destruct_TMVAcLcLKDEKernel);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::KDEKernel*)
   {
      return GenerateInitInstanceLocal((::TMVA::KDEKernel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::KDEKernel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLInterval_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLInterval(void *p);
   static void deleteArray_TMVAcLcLInterval(void *p);
   static void destruct_TMVAcLcLInterval(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::Interval*)
   {
      ::TMVA::Interval *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::Interval >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::Interval", ::TMVA::Interval::Class_Version(), "include/TMVA/Interval.h", 46,
                  typeid(::TMVA::Interval), DefineBehavior(ptr, ptr),
                  &::TMVA::Interval::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::Interval) );
      instance.SetDelete(&delete_TMVAcLcLInterval);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLInterval);
      instance.SetDestructor(&destruct_TMVAcLcLInterval);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::Interval*)
   {
      return GenerateInitInstanceLocal((::TMVA::Interval*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::Interval*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLIFitterTarget_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLIFitterTarget(void *p);
   static void deleteArray_TMVAcLcLIFitterTarget(void *p);
   static void destruct_TMVAcLcLIFitterTarget(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::IFitterTarget*)
   {
      ::TMVA::IFitterTarget *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::IFitterTarget >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::IFitterTarget", ::TMVA::IFitterTarget::Class_Version(), "include/TMVA/IFitterTarget.h", 46,
                  typeid(::TMVA::IFitterTarget), DefineBehavior(ptr, ptr),
                  &::TMVA::IFitterTarget::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::IFitterTarget) );
      instance.SetDelete(&delete_TMVAcLcLIFitterTarget);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLIFitterTarget);
      instance.SetDestructor(&destruct_TMVAcLcLIFitterTarget);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::IFitterTarget*)
   {
      return GenerateInitInstanceLocal((::TMVA::IFitterTarget*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::IFitterTarget*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLFitterBase_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLFitterBase(void *p);
   static void deleteArray_TMVAcLcLFitterBase(void *p);
   static void destruct_TMVAcLcLFitterBase(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::FitterBase*)
   {
      ::TMVA::FitterBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::FitterBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::FitterBase", ::TMVA::FitterBase::Class_Version(), "include/TMVA/FitterBase.h", 57,
                  typeid(::TMVA::FitterBase), DefineBehavior(ptr, ptr),
                  &::TMVA::FitterBase::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::FitterBase) );
      instance.SetDelete(&delete_TMVAcLcLFitterBase);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLFitterBase);
      instance.SetDestructor(&destruct_TMVAcLcLFitterBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::FitterBase*)
   {
      return GenerateInitInstanceLocal((::TMVA::FitterBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::FitterBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLMCFitter_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLMCFitter(void *p);
   static void deleteArray_TMVAcLcLMCFitter(void *p);
   static void destruct_TMVAcLcLMCFitter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::MCFitter*)
   {
      ::TMVA::MCFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::MCFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::MCFitter", ::TMVA::MCFitter::Class_Version(), "include/TMVA/MCFitter.h", 45,
                  typeid(::TMVA::MCFitter), DefineBehavior(ptr, ptr),
                  &::TMVA::MCFitter::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::MCFitter) );
      instance.SetDelete(&delete_TMVAcLcLMCFitter);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLMCFitter);
      instance.SetDestructor(&destruct_TMVAcLcLMCFitter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::MCFitter*)
   {
      return GenerateInitInstanceLocal((::TMVA::MCFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::MCFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLGeneticFitter_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLGeneticFitter(void *p);
   static void deleteArray_TMVAcLcLGeneticFitter(void *p);
   static void destruct_TMVAcLcLGeneticFitter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::GeneticFitter*)
   {
      ::TMVA::GeneticFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::GeneticFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::GeneticFitter", ::TMVA::GeneticFitter::Class_Version(), "include/TMVA/GeneticFitter.h", 45,
                  typeid(::TMVA::GeneticFitter), DefineBehavior(ptr, ptr),
                  &::TMVA::GeneticFitter::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::GeneticFitter) );
      instance.SetDelete(&delete_TMVAcLcLGeneticFitter);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLGeneticFitter);
      instance.SetDestructor(&destruct_TMVAcLcLGeneticFitter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::GeneticFitter*)
   {
      return GenerateInitInstanceLocal((::TMVA::GeneticFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::GeneticFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLSimulatedAnnealingFitter_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLSimulatedAnnealingFitter(void *p);
   static void deleteArray_TMVAcLcLSimulatedAnnealingFitter(void *p);
   static void destruct_TMVAcLcLSimulatedAnnealingFitter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::SimulatedAnnealingFitter*)
   {
      ::TMVA::SimulatedAnnealingFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::SimulatedAnnealingFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::SimulatedAnnealingFitter", ::TMVA::SimulatedAnnealingFitter::Class_Version(), "include/TMVA/SimulatedAnnealingFitter.h", 49,
                  typeid(::TMVA::SimulatedAnnealingFitter), DefineBehavior(ptr, ptr),
                  &::TMVA::SimulatedAnnealingFitter::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::SimulatedAnnealingFitter) );
      instance.SetDelete(&delete_TMVAcLcLSimulatedAnnealingFitter);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLSimulatedAnnealingFitter);
      instance.SetDestructor(&destruct_TMVAcLcLSimulatedAnnealingFitter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::SimulatedAnnealingFitter*)
   {
      return GenerateInitInstanceLocal((::TMVA::SimulatedAnnealingFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::SimulatedAnnealingFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLMinuitWrapper_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLMinuitWrapper(void *p);
   static void deleteArray_TMVAcLcLMinuitWrapper(void *p);
   static void destruct_TMVAcLcLMinuitWrapper(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::MinuitWrapper*)
   {
      ::TMVA::MinuitWrapper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::MinuitWrapper >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::MinuitWrapper", ::TMVA::MinuitWrapper::Class_Version(), "include/TMVA/MinuitWrapper.h", 49,
                  typeid(::TMVA::MinuitWrapper), DefineBehavior(ptr, ptr),
                  &::TMVA::MinuitWrapper::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::MinuitWrapper) );
      instance.SetDelete(&delete_TMVAcLcLMinuitWrapper);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLMinuitWrapper);
      instance.SetDestructor(&destruct_TMVAcLcLMinuitWrapper);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::MinuitWrapper*)
   {
      return GenerateInitInstanceLocal((::TMVA::MinuitWrapper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::MinuitWrapper*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLMinuitFitter_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLMinuitFitter(void *p);
   static void deleteArray_TMVAcLcLMinuitFitter(void *p);
   static void destruct_TMVAcLcLMinuitFitter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::MinuitFitter*)
   {
      ::TMVA::MinuitFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::MinuitFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::MinuitFitter", ::TMVA::MinuitFitter::Class_Version(), "include/TMVA/MinuitFitter.h", 51,
                  typeid(::TMVA::MinuitFitter), DefineBehavior(ptr, ptr),
                  &::TMVA::MinuitFitter::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::MinuitFitter) );
      instance.SetDelete(&delete_TMVAcLcLMinuitFitter);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLMinuitFitter);
      instance.SetDestructor(&destruct_TMVAcLcLMinuitFitter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::MinuitFitter*)
   {
      return GenerateInitInstanceLocal((::TMVA::MinuitFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::MinuitFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLIMetric_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLIMetric(void *p);
   static void deleteArray_TMVAcLcLIMetric(void *p);
   static void destruct_TMVAcLcLIMetric(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::IMetric*)
   {
      ::TMVA::IMetric *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::IMetric >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::IMetric", ::TMVA::IMetric::Class_Version(), "include/TMVA/IMetric.h", 46,
                  typeid(::TMVA::IMetric), DefineBehavior(ptr, ptr),
                  &::TMVA::IMetric::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::IMetric) );
      instance.SetDelete(&delete_TMVAcLcLIMetric);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLIMetric);
      instance.SetDestructor(&destruct_TMVAcLcLIMetric);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::IMetric*)
   {
      return GenerateInitInstanceLocal((::TMVA::IMetric*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::IMetric*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLMetricEuler_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMVAcLcLMetricEuler(void *p = 0);
   static void *newArray_TMVAcLcLMetricEuler(Long_t size, void *p);
   static void delete_TMVAcLcLMetricEuler(void *p);
   static void deleteArray_TMVAcLcLMetricEuler(void *p);
   static void destruct_TMVAcLcLMetricEuler(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::MetricEuler*)
   {
      ::TMVA::MetricEuler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::MetricEuler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::MetricEuler", ::TMVA::MetricEuler::Class_Version(), "include/TMVA/MetricEuler.h", 50,
                  typeid(::TMVA::MetricEuler), DefineBehavior(ptr, ptr),
                  &::TMVA::MetricEuler::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::MetricEuler) );
      instance.SetNew(&new_TMVAcLcLMetricEuler);
      instance.SetNewArray(&newArray_TMVAcLcLMetricEuler);
      instance.SetDelete(&delete_TMVAcLcLMetricEuler);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLMetricEuler);
      instance.SetDestructor(&destruct_TMVAcLcLMetricEuler);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::MetricEuler*)
   {
      return GenerateInitInstanceLocal((::TMVA::MetricEuler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::MetricEuler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLMetricManhattan_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMVAcLcLMetricManhattan(void *p = 0);
   static void *newArray_TMVAcLcLMetricManhattan(Long_t size, void *p);
   static void delete_TMVAcLcLMetricManhattan(void *p);
   static void deleteArray_TMVAcLcLMetricManhattan(void *p);
   static void destruct_TMVAcLcLMetricManhattan(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::MetricManhattan*)
   {
      ::TMVA::MetricManhattan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::MetricManhattan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::MetricManhattan", ::TMVA::MetricManhattan::Class_Version(), "include/TMVA/MetricManhattan.h", 49,
                  typeid(::TMVA::MetricManhattan), DefineBehavior(ptr, ptr),
                  &::TMVA::MetricManhattan::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::MetricManhattan) );
      instance.SetNew(&new_TMVAcLcLMetricManhattan);
      instance.SetNewArray(&newArray_TMVAcLcLMetricManhattan);
      instance.SetDelete(&delete_TMVAcLcLMetricManhattan);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLMetricManhattan);
      instance.SetDestructor(&destruct_TMVAcLcLMetricManhattan);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::MetricManhattan*)
   {
      return GenerateInitInstanceLocal((::TMVA::MetricManhattan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::MetricManhattan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLSeedDistance_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TMVAcLcLSeedDistance(void *p);
   static void deleteArray_TMVAcLcLSeedDistance(void *p);
   static void destruct_TMVAcLcLSeedDistance(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::SeedDistance*)
   {
      ::TMVA::SeedDistance *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::SeedDistance >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::SeedDistance", ::TMVA::SeedDistance::Class_Version(), "include/TMVA/SeedDistance.h", 49,
                  typeid(::TMVA::SeedDistance), DefineBehavior(ptr, ptr),
                  &::TMVA::SeedDistance::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::SeedDistance) );
      instance.SetDelete(&delete_TMVAcLcLSeedDistance);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLSeedDistance);
      instance.SetDestructor(&destruct_TMVAcLcLSeedDistance);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::SeedDistance*)
   {
      return GenerateInitInstanceLocal((::TMVA::SeedDistance*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::SeedDistance*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLPDEFoamVect_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMVAcLcLPDEFoamVect(void *p = 0);
   static void *newArray_TMVAcLcLPDEFoamVect(Long_t size, void *p);
   static void delete_TMVAcLcLPDEFoamVect(void *p);
   static void deleteArray_TMVAcLcLPDEFoamVect(void *p);
   static void destruct_TMVAcLcLPDEFoamVect(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::PDEFoamVect*)
   {
      ::TMVA::PDEFoamVect *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::PDEFoamVect >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::PDEFoamVect", ::TMVA::PDEFoamVect::Class_Version(), "include/TMVA/PDEFoamVect.h", 40,
                  typeid(::TMVA::PDEFoamVect), DefineBehavior(ptr, ptr),
                  &::TMVA::PDEFoamVect::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::PDEFoamVect) );
      instance.SetNew(&new_TMVAcLcLPDEFoamVect);
      instance.SetNewArray(&newArray_TMVAcLcLPDEFoamVect);
      instance.SetDelete(&delete_TMVAcLcLPDEFoamVect);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLPDEFoamVect);
      instance.SetDestructor(&destruct_TMVAcLcLPDEFoamVect);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::PDEFoamVect*)
   {
      return GenerateInitInstanceLocal((::TMVA::PDEFoamVect*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::PDEFoamVect*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLPDEFoamCell_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMVAcLcLPDEFoamCell(void *p = 0);
   static void *newArray_TMVAcLcLPDEFoamCell(Long_t size, void *p);
   static void delete_TMVAcLcLPDEFoamCell(void *p);
   static void deleteArray_TMVAcLcLPDEFoamCell(void *p);
   static void destruct_TMVAcLcLPDEFoamCell(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::PDEFoamCell*)
   {
      ::TMVA::PDEFoamCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::PDEFoamCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::PDEFoamCell", ::TMVA::PDEFoamCell::Class_Version(), "include/TMVA/PDEFoamCell.h", 45,
                  typeid(::TMVA::PDEFoamCell), DefineBehavior(ptr, ptr),
                  &::TMVA::PDEFoamCell::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::PDEFoamCell) );
      instance.SetNew(&new_TMVAcLcLPDEFoamCell);
      instance.SetNewArray(&newArray_TMVAcLcLPDEFoamCell);
      instance.SetDelete(&delete_TMVAcLcLPDEFoamCell);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLPDEFoamCell);
      instance.SetDestructor(&destruct_TMVAcLcLPDEFoamCell);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::PDEFoamCell*)
   {
      return GenerateInitInstanceLocal((::TMVA::PDEFoamCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::PDEFoamCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLPDEFoamDistr_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMVAcLcLPDEFoamDistr(void *p = 0);
   static void *newArray_TMVAcLcLPDEFoamDistr(Long_t size, void *p);
   static void delete_TMVAcLcLPDEFoamDistr(void *p);
   static void deleteArray_TMVAcLcLPDEFoamDistr(void *p);
   static void destruct_TMVAcLcLPDEFoamDistr(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::PDEFoamDistr*)
   {
      ::TMVA::PDEFoamDistr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::PDEFoamDistr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::PDEFoamDistr", ::TMVA::PDEFoamDistr::Class_Version(), "include/TMVA/PDEFoamDistr.h", 66,
                  typeid(::TMVA::PDEFoamDistr), DefineBehavior(ptr, ptr),
                  &::TMVA::PDEFoamDistr::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::PDEFoamDistr) );
      instance.SetNew(&new_TMVAcLcLPDEFoamDistr);
      instance.SetNewArray(&newArray_TMVAcLcLPDEFoamDistr);
      instance.SetDelete(&delete_TMVAcLcLPDEFoamDistr);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLPDEFoamDistr);
      instance.SetDestructor(&destruct_TMVAcLcLPDEFoamDistr);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::PDEFoamDistr*)
   {
      return GenerateInitInstanceLocal((::TMVA::PDEFoamDistr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::PDEFoamDistr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLPDEFoam_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMVAcLcLPDEFoam(void *p = 0);
   static void *newArray_TMVAcLcLPDEFoam(Long_t size, void *p);
   static void delete_TMVAcLcLPDEFoam(void *p);
   static void deleteArray_TMVAcLcLPDEFoam(void *p);
   static void destruct_TMVAcLcLPDEFoam(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::PDEFoam*)
   {
      ::TMVA::PDEFoam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::PDEFoam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::PDEFoam", ::TMVA::PDEFoam::Class_Version(), "include/TMVA/PDEFoam.h", 97,
                  typeid(::TMVA::PDEFoam), DefineBehavior(ptr, ptr),
                  &::TMVA::PDEFoam::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::PDEFoam) );
      instance.SetNew(&new_TMVAcLcLPDEFoam);
      instance.SetNewArray(&newArray_TMVAcLcLPDEFoam);
      instance.SetDelete(&delete_TMVAcLcLPDEFoam);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLPDEFoam);
      instance.SetDestructor(&destruct_TMVAcLcLPDEFoam);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::PDEFoam*)
   {
      return GenerateInitInstanceLocal((::TMVA::PDEFoam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::PDEFoam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLBDTEventWrapper_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TMVAcLcLBDTEventWrapper_Dictionary();
   static void delete_TMVAcLcLBDTEventWrapper(void *p);
   static void deleteArray_TMVAcLcLBDTEventWrapper(void *p);
   static void destruct_TMVAcLcLBDTEventWrapper(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::BDTEventWrapper*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TMVA::BDTEventWrapper) == sizeof(::ROOT::Shadow::TMVA::BDTEventWrapper));
      ::TMVA::BDTEventWrapper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TMVA::BDTEventWrapper),0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::BDTEventWrapper", "include/TMVA/BDTEventWrapper.h", 31,
                  typeid(::TMVA::BDTEventWrapper), DefineBehavior(ptr, ptr),
                  (void*)&TMVAcLcLBDTEventWrapper_ShowMembers, &TMVAcLcLBDTEventWrapper_Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::BDTEventWrapper) );
      instance.SetDelete(&delete_TMVAcLcLBDTEventWrapper);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLBDTEventWrapper);
      instance.SetDestructor(&destruct_TMVAcLcLBDTEventWrapper);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::BDTEventWrapper*)
   {
      return GenerateInitInstanceLocal((::TMVA::BDTEventWrapper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::BDTEventWrapper*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TMVAcLcLBDTEventWrapper_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TMVA::BDTEventWrapper*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLCCTreeWrapper_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TMVAcLcLCCTreeWrapper_Dictionary();
   static void delete_TMVAcLcLCCTreeWrapper(void *p);
   static void deleteArray_TMVAcLcLCCTreeWrapper(void *p);
   static void destruct_TMVAcLcLCCTreeWrapper(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::CCTreeWrapper*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TMVA::CCTreeWrapper) == sizeof(::ROOT::Shadow::TMVA::CCTreeWrapper));
      ::TMVA::CCTreeWrapper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TMVA::CCTreeWrapper),0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::CCTreeWrapper", "include/TMVA/CCTreeWrapper.h", 46,
                  typeid(::TMVA::CCTreeWrapper), DefineBehavior(ptr, ptr),
                  (void*)&TMVAcLcLCCTreeWrapper_ShowMembers, &TMVAcLcLCCTreeWrapper_Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::CCTreeWrapper) );
      instance.SetDelete(&delete_TMVAcLcLCCTreeWrapper);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLCCTreeWrapper);
      instance.SetDestructor(&destruct_TMVAcLcLCCTreeWrapper);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::CCTreeWrapper*)
   {
      return GenerateInitInstanceLocal((::TMVA::CCTreeWrapper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::CCTreeWrapper*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TMVAcLcLCCTreeWrapper_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TMVA::CCTreeWrapper*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLCCPruner_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TMVAcLcLCCPruner_Dictionary();
   static void delete_TMVAcLcLCCPruner(void *p);
   static void deleteArray_TMVAcLcLCCPruner(void *p);
   static void destruct_TMVAcLcLCCPruner(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::CCPruner*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TMVA::CCPruner) == sizeof(::ROOT::Shadow::TMVA::CCPruner));
      ::TMVA::CCPruner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TMVA::CCPruner),0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::CCPruner", "include/TMVA/CCPruner.h", 64,
                  typeid(::TMVA::CCPruner), DefineBehavior(ptr, ptr),
                  (void*)&TMVAcLcLCCPruner_ShowMembers, &TMVAcLcLCCPruner_Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::CCPruner) );
      instance.SetDelete(&delete_TMVAcLcLCCPruner);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLCCPruner);
      instance.SetDestructor(&destruct_TMVAcLcLCCPruner);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::CCPruner*)
   {
      return GenerateInitInstanceLocal((::TMVA::CCPruner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::CCPruner*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TMVAcLcLCCPruner_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TMVA::CCPruner*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLCostComplexityPruneTool_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TMVAcLcLCostComplexityPruneTool_Dictionary();
   static void *new_TMVAcLcLCostComplexityPruneTool(void *p = 0);
   static void *newArray_TMVAcLcLCostComplexityPruneTool(Long_t size, void *p);
   static void delete_TMVAcLcLCostComplexityPruneTool(void *p);
   static void deleteArray_TMVAcLcLCostComplexityPruneTool(void *p);
   static void destruct_TMVAcLcLCostComplexityPruneTool(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::CostComplexityPruneTool*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TMVA::CostComplexityPruneTool) == sizeof(::ROOT::Shadow::TMVA::CostComplexityPruneTool));
      ::TMVA::CostComplexityPruneTool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TMVA::CostComplexityPruneTool),0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::CostComplexityPruneTool", "include/TMVA/CostComplexityPruneTool.h", 71,
                  typeid(::TMVA::CostComplexityPruneTool), DefineBehavior(ptr, ptr),
                  (void*)&TMVAcLcLCostComplexityPruneTool_ShowMembers, &TMVAcLcLCostComplexityPruneTool_Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::CostComplexityPruneTool) );
      instance.SetNew(&new_TMVAcLcLCostComplexityPruneTool);
      instance.SetNewArray(&newArray_TMVAcLcLCostComplexityPruneTool);
      instance.SetDelete(&delete_TMVAcLcLCostComplexityPruneTool);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLCostComplexityPruneTool);
      instance.SetDestructor(&destruct_TMVAcLcLCostComplexityPruneTool);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::CostComplexityPruneTool*)
   {
      return GenerateInitInstanceLocal((::TMVA::CostComplexityPruneTool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::CostComplexityPruneTool*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TMVAcLcLCostComplexityPruneTool_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TMVA::CostComplexityPruneTool*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TMVAcLcLSVEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMVAcLcLSVEvent(void *p = 0);
   static void *newArray_TMVAcLcLSVEvent(Long_t size, void *p);
   static void delete_TMVAcLcLSVEvent(void *p);
   static void deleteArray_TMVAcLcLSVEvent(void *p);
   static void destruct_TMVAcLcLSVEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMVA::SVEvent*)
   {
      ::TMVA::SVEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMVA::SVEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMVA::SVEvent", ::TMVA::SVEvent::Class_Version(), "include/TMVA/SVEvent.h", 42,
                  typeid(::TMVA::SVEvent), DefineBehavior(ptr, ptr),
                  &::TMVA::SVEvent::Dictionary, isa_proxy, 4,
                  sizeof(::TMVA::SVEvent) );
      instance.SetNew(&new_TMVAcLcLSVEvent);
      instance.SetNewArray(&newArray_TMVAcLcLSVEvent);
      instance.SetDelete(&delete_TMVAcLcLSVEvent);
      instance.SetDeleteArray(&deleteArray_TMVAcLcLSVEvent);
      instance.SetDestructor(&destruct_TMVAcLcLSVEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMVA::SVEvent*)
   {
      return GenerateInitInstanceLocal((::TMVA::SVEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMVA::SVEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace TMVA {
//______________________________________________________________________________
TClass *Config::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Config::Class_Name()
{
   return "TMVA::Config";
}

//______________________________________________________________________________
const char *Config::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Config*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Config::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Config*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Config::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Config*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Config::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Config*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *KDEKernel::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KDEKernel::Class_Name()
{
   return "TMVA::KDEKernel";
}

//______________________________________________________________________________
const char *KDEKernel::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::KDEKernel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KDEKernel::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::KDEKernel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KDEKernel::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::KDEKernel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KDEKernel::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::KDEKernel*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *Interval::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Interval::Class_Name()
{
   return "TMVA::Interval";
}

//______________________________________________________________________________
const char *Interval::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Interval*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Interval::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Interval*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Interval::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Interval*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Interval::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Interval*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *IFitterTarget::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *IFitterTarget::Class_Name()
{
   return "TMVA::IFitterTarget";
}

//______________________________________________________________________________
const char *IFitterTarget::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::IFitterTarget*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int IFitterTarget::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::IFitterTarget*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void IFitterTarget::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::IFitterTarget*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *IFitterTarget::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::IFitterTarget*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *FitterBase::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FitterBase::Class_Name()
{
   return "TMVA::FitterBase";
}

//______________________________________________________________________________
const char *FitterBase::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::FitterBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FitterBase::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::FitterBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FitterBase::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::FitterBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FitterBase::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::FitterBase*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *MCFitter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCFitter::Class_Name()
{
   return "TMVA::MCFitter";
}

//______________________________________________________________________________
const char *MCFitter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MCFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCFitter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MCFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCFitter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MCFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCFitter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MCFitter*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *GeneticFitter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GeneticFitter::Class_Name()
{
   return "TMVA::GeneticFitter";
}

//______________________________________________________________________________
const char *GeneticFitter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::GeneticFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GeneticFitter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::GeneticFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GeneticFitter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::GeneticFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GeneticFitter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::GeneticFitter*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *SimulatedAnnealingFitter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SimulatedAnnealingFitter::Class_Name()
{
   return "TMVA::SimulatedAnnealingFitter";
}

//______________________________________________________________________________
const char *SimulatedAnnealingFitter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SimulatedAnnealingFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SimulatedAnnealingFitter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SimulatedAnnealingFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SimulatedAnnealingFitter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SimulatedAnnealingFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SimulatedAnnealingFitter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SimulatedAnnealingFitter*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *MinuitWrapper::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MinuitWrapper::Class_Name()
{
   return "TMVA::MinuitWrapper";
}

//______________________________________________________________________________
const char *MinuitWrapper::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MinuitWrapper*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MinuitWrapper::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MinuitWrapper*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MinuitWrapper::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MinuitWrapper*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MinuitWrapper::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MinuitWrapper*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *MinuitFitter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MinuitFitter::Class_Name()
{
   return "TMVA::MinuitFitter";
}

//______________________________________________________________________________
const char *MinuitFitter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MinuitFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MinuitFitter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MinuitFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MinuitFitter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MinuitFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MinuitFitter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MinuitFitter*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *IMetric::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *IMetric::Class_Name()
{
   return "TMVA::IMetric";
}

//______________________________________________________________________________
const char *IMetric::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::IMetric*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int IMetric::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::IMetric*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void IMetric::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::IMetric*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *IMetric::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::IMetric*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *MetricEuler::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MetricEuler::Class_Name()
{
   return "TMVA::MetricEuler";
}

//______________________________________________________________________________
const char *MetricEuler::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MetricEuler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MetricEuler::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MetricEuler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MetricEuler::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MetricEuler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MetricEuler::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MetricEuler*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *MetricManhattan::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MetricManhattan::Class_Name()
{
   return "TMVA::MetricManhattan";
}

//______________________________________________________________________________
const char *MetricManhattan::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MetricManhattan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MetricManhattan::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MetricManhattan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MetricManhattan::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MetricManhattan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MetricManhattan::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::MetricManhattan*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *SeedDistance::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SeedDistance::Class_Name()
{
   return "TMVA::SeedDistance";
}

//______________________________________________________________________________
const char *SeedDistance::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SeedDistance*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SeedDistance::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SeedDistance*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SeedDistance::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SeedDistance*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SeedDistance::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SeedDistance*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *PDEFoamVect::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PDEFoamVect::Class_Name()
{
   return "TMVA::PDEFoamVect";
}

//______________________________________________________________________________
const char *PDEFoamVect::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamVect*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PDEFoamVect::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamVect*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PDEFoamVect::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamVect*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PDEFoamVect::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamVect*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *PDEFoamCell::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PDEFoamCell::Class_Name()
{
   return "TMVA::PDEFoamCell";
}

//______________________________________________________________________________
const char *PDEFoamCell::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PDEFoamCell::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PDEFoamCell::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PDEFoamCell::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamCell*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *PDEFoamDistr::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PDEFoamDistr::Class_Name()
{
   return "TMVA::PDEFoamDistr";
}

//______________________________________________________________________________
const char *PDEFoamDistr::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamDistr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PDEFoamDistr::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamDistr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PDEFoamDistr::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamDistr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PDEFoamDistr::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoamDistr*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *PDEFoam::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PDEFoam::Class_Name()
{
   return "TMVA::PDEFoam";
}

//______________________________________________________________________________
const char *PDEFoam::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PDEFoam::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PDEFoam::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PDEFoam::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::PDEFoam*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
TClass *SVEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SVEvent::Class_Name()
{
   return "TMVA::SVEvent";
}

//______________________________________________________________________________
const char *SVEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SVEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SVEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SVEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SVEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SVEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SVEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::SVEvent*)0x0)->GetClass();
   return fgIsA;
}

} // namespace TMVA
      namespace TMVA {
//______________________________________________________________________________
void Config::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::Config.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::Config::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::Config::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void Config::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::Config.
      TClass *R__cl = ::TMVA::Config::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fVariablePlotting", (void*)&fVariablePlotting);
      ::ROOT::GenericShowMembers("TMVA::Config::VariablePlotting", (void*)&fVariablePlotting, R__insp, strcat(R__parent,"fVariablePlotting."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fIONames", (void*)&fIONames);
      ::ROOT::GenericShowMembers("TMVA::Config::IONames", (void*)&fIONames, R__insp, strcat(R__parent,"fIONames."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fUseColoredConsole", &fUseColoredConsole);
      R__insp.Inspect(R__cl, R__parent, "fSilent", &fSilent);
      R__insp.Inspect(R__cl, R__parent, "fWriteOptionsReference", &fWriteOptionsReference);
      R__insp.Inspect(R__cl, R__parent, "fDrawProgressBar", &fDrawProgressBar);
      R__insp.Inspect(R__cl, R__parent, "*fLogger", &fLogger);
}

} // namespace TMVA
namespace ROOT {
} // end of namespace ROOT for class ::TMVA::Config

//______________________________________________________________________________
namespace ROOT {
   void TMVAcLcLConfigcLcLVariablePlotting_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class TMVA::Config::VariablePlotting.
      typedef ::ROOT::Shadow::TMVA::Config::VariablePlotting ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Config::VariablePlotting*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fTimesRMS", &sobj->fTimesRMS);
      R__insp.Inspect(R__cl, R__parent, "fNbins1D", &sobj->fNbins1D);
      R__insp.Inspect(R__cl, R__parent, "fNbins2D", &sobj->fNbins2D);
      R__insp.Inspect(R__cl, R__parent, "fMaxNumOfAllowedVariablesForScatterPlots", &sobj->fMaxNumOfAllowedVariablesForScatterPlots);
      R__insp.Inspect(R__cl, R__parent, "fNbinsXOfROCCurve", &sobj->fNbinsXOfROCCurve);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLConfigcLcLVariablePlotting(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::Config::VariablePlotting : new ::TMVA::Config::VariablePlotting;
   }
   static void *newArray_TMVAcLcLConfigcLcLVariablePlotting(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::Config::VariablePlotting[nElements] : new ::TMVA::Config::VariablePlotting[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLConfigcLcLVariablePlotting(void *p) {
      delete ((::TMVA::Config::VariablePlotting*)p);
   }
   static void deleteArray_TMVAcLcLConfigcLcLVariablePlotting(void *p) {
      delete [] ((::TMVA::Config::VariablePlotting*)p);
   }
   static void destruct_TMVAcLcLConfigcLcLVariablePlotting(void *p) {
      typedef ::TMVA::Config::VariablePlotting current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::Config::VariablePlotting

//______________________________________________________________________________
namespace ROOT {
   void TMVAcLcLConfigcLcLIONames_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class TMVA::Config::IONames.
      typedef ::ROOT::Shadow::TMVA::Config::IONames ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::Config::IONames*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fWeightFileDir", &sobj->fWeightFileDir);
      sobj->fWeightFileDir.ShowMembers(R__insp, strcat(R__parent,"fWeightFileDir.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fWeightFileExtension", &sobj->fWeightFileExtension);
      sobj->fWeightFileExtension.ShowMembers(R__insp, strcat(R__parent,"fWeightFileExtension.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fOptionsReferenceFileDir", &sobj->fOptionsReferenceFileDir);
      sobj->fOptionsReferenceFileDir.ShowMembers(R__insp, strcat(R__parent,"fOptionsReferenceFileDir.")); R__parent[R__ncp] = 0;
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLConfigcLcLIONames(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::Config::IONames : new ::TMVA::Config::IONames;
   }
   static void *newArray_TMVAcLcLConfigcLcLIONames(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::Config::IONames[nElements] : new ::TMVA::Config::IONames[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLConfigcLcLIONames(void *p) {
      delete ((::TMVA::Config::IONames*)p);
   }
   static void deleteArray_TMVAcLcLConfigcLcLIONames(void *p) {
      delete [] ((::TMVA::Config::IONames*)p);
   }
   static void destruct_TMVAcLcLConfigcLcLIONames(void *p) {
      typedef ::TMVA::Config::IONames current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::Config::IONames

      namespace TMVA {
//______________________________________________________________________________
void KDEKernel::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::KDEKernel.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::KDEKernel::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::KDEKernel::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void KDEKernel::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::KDEKernel.
      TClass *R__cl = ::TMVA::KDEKernel::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fSigma", &fSigma);
      R__insp.Inspect(R__cl, R__parent, "fIter", &fIter);
      R__insp.Inspect(R__cl, R__parent, "fLowerEdge", &fLowerEdge);
      R__insp.Inspect(R__cl, R__parent, "fUpperEdge", &fUpperEdge);
      R__insp.Inspect(R__cl, R__parent, "fFineFactor", &fFineFactor);
      R__insp.Inspect(R__cl, R__parent, "*fKernel_integ", &fKernel_integ);
      R__insp.Inspect(R__cl, R__parent, "fKDEborder", &fKDEborder);
      R__insp.Inspect(R__cl, R__parent, "*fHist", &fHist);
      R__insp.Inspect(R__cl, R__parent, "*fFirstIterHist", &fFirstIterHist);
      R__insp.Inspect(R__cl, R__parent, "*fSigmaHist", &fSigmaHist);
      R__insp.Inspect(R__cl, R__parent, "fHiddenIteration", &fHiddenIteration);
      R__insp.Inspect(R__cl, R__parent, "*fLogger", &fLogger);
}

} // namespace TMVA
namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLKDEKernel(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::KDEKernel : new ::TMVA::KDEKernel;
   }
   static void *newArray_TMVAcLcLKDEKernel(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::KDEKernel[nElements] : new ::TMVA::KDEKernel[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLKDEKernel(void *p) {
      delete ((::TMVA::KDEKernel*)p);
   }
   static void deleteArray_TMVAcLcLKDEKernel(void *p) {
      delete [] ((::TMVA::KDEKernel*)p);
   }
   static void destruct_TMVAcLcLKDEKernel(void *p) {
      typedef ::TMVA::KDEKernel current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::KDEKernel

      namespace TMVA {
//______________________________________________________________________________
void Interval::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::Interval.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::Interval::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::Interval::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void Interval::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::Interval.
      TClass *R__cl = ::TMVA::Interval::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMin", &fMin);
      R__insp.Inspect(R__cl, R__parent, "fMax", &fMax);
      R__insp.Inspect(R__cl, R__parent, "fNbins", &fNbins);
      R__insp.Inspect(R__cl, R__parent, "*fLogger", &fLogger);
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLInterval(void *p) {
      delete ((::TMVA::Interval*)p);
   }
   static void deleteArray_TMVAcLcLInterval(void *p) {
      delete [] ((::TMVA::Interval*)p);
   }
   static void destruct_TMVAcLcLInterval(void *p) {
      typedef ::TMVA::Interval current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::Interval

      namespace TMVA {
//______________________________________________________________________________
void FitterBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::FitterBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::FitterBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::FitterBase::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void FitterBase::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::FitterBase.
      TClass *R__cl = ::TMVA::FitterBase::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fRanges", (void*)&fRanges);
      ::ROOT::GenericShowMembers("const vector<TMVA::Interval*>", (void*)&fRanges, R__insp, strcat(R__parent,"fRanges."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fNpars", &fNpars);
      R__insp.Inspect(R__cl, R__parent, "*fLogger", &fLogger);
      R__insp.Inspect(R__cl, R__parent, "fClassName", &fClassName);
      fClassName.ShowMembers(R__insp, strcat(R__parent,"fClassName.")); R__parent[R__ncp] = 0;
      //This works around a msvc bug and should be harmless on other platforms
      typedef TMVA::Configurable baseClass1;
      baseClass1::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLFitterBase(void *p) {
      delete ((::TMVA::FitterBase*)p);
   }
   static void deleteArray_TMVAcLcLFitterBase(void *p) {
      delete [] ((::TMVA::FitterBase*)p);
   }
   static void destruct_TMVAcLcLFitterBase(void *p) {
      typedef ::TMVA::FitterBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::FitterBase

      namespace TMVA {
//______________________________________________________________________________
void MCFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::MCFitter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::MCFitter::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::MCFitter::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void MCFitter::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::MCFitter.
      TClass *R__cl = ::TMVA::MCFitter::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fSamples", &fSamples);
      R__insp.Inspect(R__cl, R__parent, "fSigma", &fSigma);
      R__insp.Inspect(R__cl, R__parent, "fSeed", &fSeed);
      //This works around a msvc bug and should be harmless on other platforms
      typedef TMVA::FitterBase baseClass1;
      baseClass1::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLMCFitter(void *p) {
      delete ((::TMVA::MCFitter*)p);
   }
   static void deleteArray_TMVAcLcLMCFitter(void *p) {
      delete [] ((::TMVA::MCFitter*)p);
   }
   static void destruct_TMVAcLcLMCFitter(void *p) {
      typedef ::TMVA::MCFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::MCFitter

      namespace TMVA {
//______________________________________________________________________________
void GeneticFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::GeneticFitter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::GeneticFitter::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::GeneticFitter::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void GeneticFitter::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::GeneticFitter.
      TClass *R__cl = ::TMVA::GeneticFitter::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fCycles", &fCycles);
      R__insp.Inspect(R__cl, R__parent, "fNsteps", &fNsteps);
      R__insp.Inspect(R__cl, R__parent, "fPopSize", &fPopSize);
      R__insp.Inspect(R__cl, R__parent, "fSC_steps", &fSC_steps);
      R__insp.Inspect(R__cl, R__parent, "fSC_rate", &fSC_rate);
      R__insp.Inspect(R__cl, R__parent, "fSC_factor", &fSC_factor);
      R__insp.Inspect(R__cl, R__parent, "fConvCrit", &fConvCrit);
      R__insp.Inspect(R__cl, R__parent, "fSaveBestFromGeneration", &fSaveBestFromGeneration);
      R__insp.Inspect(R__cl, R__parent, "fSaveBestFromCycle", &fSaveBestFromCycle);
      R__insp.Inspect(R__cl, R__parent, "fTrim", &fTrim);
      R__insp.Inspect(R__cl, R__parent, "fSeed", &fSeed);
      //This works around a msvc bug and should be harmless on other platforms
      typedef TMVA::FitterBase baseClass1;
      baseClass1::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLGeneticFitter(void *p) {
      delete ((::TMVA::GeneticFitter*)p);
   }
   static void deleteArray_TMVAcLcLGeneticFitter(void *p) {
      delete [] ((::TMVA::GeneticFitter*)p);
   }
   static void destruct_TMVAcLcLGeneticFitter(void *p) {
      typedef ::TMVA::GeneticFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::GeneticFitter

      namespace TMVA {
//______________________________________________________________________________
void SimulatedAnnealingFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::SimulatedAnnealingFitter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::SimulatedAnnealingFitter::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::SimulatedAnnealingFitter::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void SimulatedAnnealingFitter::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::SimulatedAnnealingFitter.
      TClass *R__cl = ::TMVA::SimulatedAnnealingFitter::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMaxCalls", &fMaxCalls);
      R__insp.Inspect(R__cl, R__parent, "fInitialTemperature", &fInitialTemperature);
      R__insp.Inspect(R__cl, R__parent, "fMinTemperature", &fMinTemperature);
      R__insp.Inspect(R__cl, R__parent, "fEps", &fEps);
      R__insp.Inspect(R__cl, R__parent, "fKernelTemperatureS", &fKernelTemperatureS);
      fKernelTemperatureS.ShowMembers(R__insp, strcat(R__parent,"fKernelTemperatureS.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTemperatureScale", &fTemperatureScale);
      R__insp.Inspect(R__cl, R__parent, "fAdaptiveSpeed", &fAdaptiveSpeed);
      R__insp.Inspect(R__cl, R__parent, "fTemperatureAdaptiveStep", &fTemperatureAdaptiveStep);
      R__insp.Inspect(R__cl, R__parent, "fUseDefaultScale", &fUseDefaultScale);
      R__insp.Inspect(R__cl, R__parent, "fUseDefaultTemperature", &fUseDefaultTemperature);
      //This works around a msvc bug and should be harmless on other platforms
      typedef TMVA::FitterBase baseClass1;
      baseClass1::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLSimulatedAnnealingFitter(void *p) {
      delete ((::TMVA::SimulatedAnnealingFitter*)p);
   }
   static void deleteArray_TMVAcLcLSimulatedAnnealingFitter(void *p) {
      delete [] ((::TMVA::SimulatedAnnealingFitter*)p);
   }
   static void destruct_TMVAcLcLSimulatedAnnealingFitter(void *p) {
      typedef ::TMVA::SimulatedAnnealingFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::SimulatedAnnealingFitter

      namespace TMVA {
//______________________________________________________________________________
void MinuitFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::MinuitFitter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::MinuitFitter::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::MinuitFitter::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void MinuitFitter::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::MinuitFitter.
      TClass *R__cl = ::TMVA::MinuitFitter::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fMinWrap", &fMinWrap);
      R__insp.Inspect(R__cl, R__parent, "fErrorLevel", &fErrorLevel);
      R__insp.Inspect(R__cl, R__parent, "fPrintLevel", &fPrintLevel);
      R__insp.Inspect(R__cl, R__parent, "fFitStrategy", &fFitStrategy);
      R__insp.Inspect(R__cl, R__parent, "fPrintWarnings", &fPrintWarnings);
      R__insp.Inspect(R__cl, R__parent, "fUseImprove", &fUseImprove);
      R__insp.Inspect(R__cl, R__parent, "fUseMinos", &fUseMinos);
      R__insp.Inspect(R__cl, R__parent, "fBatch", &fBatch);
      R__insp.Inspect(R__cl, R__parent, "fMaxCalls", &fMaxCalls);
      R__insp.Inspect(R__cl, R__parent, "fTolerance", &fTolerance);
      //This works around a msvc bug and should be harmless on other platforms
      typedef TMVA::FitterBase baseClass1;
      baseClass1::ShowMembers(R__insp, R__parent);
      //This works around a msvc bug and should be harmless on other platforms
      typedef TMVA::IFitterTarget baseClass2;
      baseClass2::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLMinuitFitter(void *p) {
      delete ((::TMVA::MinuitFitter*)p);
   }
   static void deleteArray_TMVAcLcLMinuitFitter(void *p) {
      delete [] ((::TMVA::MinuitFitter*)p);
   }
   static void destruct_TMVAcLcLMinuitFitter(void *p) {
      typedef ::TMVA::MinuitFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::MinuitFitter

      namespace TMVA {
//______________________________________________________________________________
void MinuitWrapper::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::MinuitWrapper.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::MinuitWrapper::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::MinuitWrapper::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void MinuitWrapper::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::MinuitWrapper.
      TClass *R__cl = ::TMVA::MinuitWrapper::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fParameters", (void*)&fParameters);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fParameters, R__insp, strcat(R__parent,"fParameters."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fNumPar", &fNumPar);
      TMinuit::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLMinuitWrapper(void *p) {
      delete ((::TMVA::MinuitWrapper*)p);
   }
   static void deleteArray_TMVAcLcLMinuitWrapper(void *p) {
      delete [] ((::TMVA::MinuitWrapper*)p);
   }
   static void destruct_TMVAcLcLMinuitWrapper(void *p) {
      typedef ::TMVA::MinuitWrapper current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::MinuitWrapper

      namespace TMVA {
//______________________________________________________________________________
void IFitterTarget::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::IFitterTarget.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::IFitterTarget::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::IFitterTarget::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void IFitterTarget::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::IFitterTarget.
      TClass *R__cl = ::TMVA::IFitterTarget::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLIFitterTarget(void *p) {
      delete ((::TMVA::IFitterTarget*)p);
   }
   static void deleteArray_TMVAcLcLIFitterTarget(void *p) {
      delete [] ((::TMVA::IFitterTarget*)p);
   }
   static void destruct_TMVAcLcLIFitterTarget(void *p) {
      typedef ::TMVA::IFitterTarget current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::IFitterTarget

      namespace TMVA {
//______________________________________________________________________________
void IMetric::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::IMetric.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::IMetric::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::IMetric::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void IMetric::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::IMetric.
      TClass *R__cl = ::TMVA::IMetric::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fParameters", &fParameters);
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLIMetric(void *p) {
      delete ((::TMVA::IMetric*)p);
   }
   static void deleteArray_TMVAcLcLIMetric(void *p) {
      delete [] ((::TMVA::IMetric*)p);
   }
   static void destruct_TMVAcLcLIMetric(void *p) {
      typedef ::TMVA::IMetric current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::IMetric

      namespace TMVA {
//______________________________________________________________________________
void MetricEuler::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::MetricEuler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::MetricEuler::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::MetricEuler::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void MetricEuler::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::MetricEuler.
      TClass *R__cl = ::TMVA::MetricEuler::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef TMVA::IMetric baseClass1;
      baseClass1::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLMetricEuler(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::MetricEuler : new ::TMVA::MetricEuler;
   }
   static void *newArray_TMVAcLcLMetricEuler(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::MetricEuler[nElements] : new ::TMVA::MetricEuler[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLMetricEuler(void *p) {
      delete ((::TMVA::MetricEuler*)p);
   }
   static void deleteArray_TMVAcLcLMetricEuler(void *p) {
      delete [] ((::TMVA::MetricEuler*)p);
   }
   static void destruct_TMVAcLcLMetricEuler(void *p) {
      typedef ::TMVA::MetricEuler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::MetricEuler

      namespace TMVA {
//______________________________________________________________________________
void MetricManhattan::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::MetricManhattan.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::MetricManhattan::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::MetricManhattan::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void MetricManhattan::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::MetricManhattan.
      TClass *R__cl = ::TMVA::MetricManhattan::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef TMVA::IMetric baseClass1;
      baseClass1::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLMetricManhattan(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::MetricManhattan : new ::TMVA::MetricManhattan;
   }
   static void *newArray_TMVAcLcLMetricManhattan(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::MetricManhattan[nElements] : new ::TMVA::MetricManhattan[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLMetricManhattan(void *p) {
      delete ((::TMVA::MetricManhattan*)p);
   }
   static void deleteArray_TMVAcLcLMetricManhattan(void *p) {
      delete [] ((::TMVA::MetricManhattan*)p);
   }
   static void destruct_TMVAcLcLMetricManhattan(void *p) {
      typedef ::TMVA::MetricManhattan current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::MetricManhattan

      namespace TMVA {
//______________________________________________________________________________
void SeedDistance::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::SeedDistance.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::SeedDistance::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::SeedDistance::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void SeedDistance::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::SeedDistance.
      TClass *R__cl = ::TMVA::SeedDistance::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDistances", (void*)&fDistances);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fDistances, R__insp, strcat(R__parent,"fDistances."),false);
      R__parent[R__ncp] = 0;
}

} // namespace TMVA
namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLSeedDistance(void *p) {
      delete ((::TMVA::SeedDistance*)p);
   }
   static void deleteArray_TMVAcLcLSeedDistance(void *p) {
      delete [] ((::TMVA::SeedDistance*)p);
   }
   static void destruct_TMVAcLcLSeedDistance(void *p) {
      typedef ::TMVA::SeedDistance current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::SeedDistance

      namespace TMVA {
//______________________________________________________________________________
void PDEFoam::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::PDEFoam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::PDEFoam::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::PDEFoam::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void PDEFoam::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::PDEFoam.
      TClass *R__cl = ::TMVA::PDEFoam::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fName", &fName);
      fName.ShowMembers(R__insp, strcat(R__parent,"fName.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "fNCells", &fNCells);
      R__insp.Inspect(R__cl, R__parent, "fNBin", &fNBin);
      R__insp.Inspect(R__cl, R__parent, "fNSampl", &fNSampl);
      R__insp.Inspect(R__cl, R__parent, "fEvPerBin", &fEvPerBin);
      R__insp.Inspect(R__cl, R__parent, "*fMaskDiv", &fMaskDiv);
      R__insp.Inspect(R__cl, R__parent, "*fInhiDiv", &fInhiDiv);
      R__insp.Inspect(R__cl, R__parent, "fNoAct", &fNoAct);
      R__insp.Inspect(R__cl, R__parent, "fLastCe", &fLastCe);
      R__insp.Inspect(R__cl, R__parent, "*fCells", &fCells);
      R__insp.Inspect(R__cl, R__parent, "*fHistEdg", &fHistEdg);
      R__insp.Inspect(R__cl, R__parent, "*fRvec", &fRvec);
      R__insp.Inspect(R__cl, R__parent, "*fPseRan", &fPseRan);
      R__insp.Inspect(R__cl, R__parent, "*fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__parent, "fFoamType", &fFoamType);
      R__insp.Inspect(R__cl, R__parent, "*fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__parent, "*fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__parent, "fNElements", &fNElements);
      R__insp.Inspect(R__cl, R__parent, "fCutNmin", &fCutNmin);
      R__insp.Inspect(R__cl, R__parent, "fNmin", &fNmin);
      R__insp.Inspect(R__cl, R__parent, "fCutRMSmin", &fCutRMSmin);
      R__insp.Inspect(R__cl, R__parent, "fRMSmin", &fRMSmin);
      R__insp.Inspect(R__cl, R__parent, "fVolFrac", &fVolFrac);
      R__insp.Inspect(R__cl, R__parent, "*fDistr", &fDistr);
      R__insp.Inspect(R__cl, R__parent, "*fTimer", &fTimer);
      R__insp.Inspect(R__cl, R__parent, "*fVariableNames", &fVariableNames);
      R__insp.Inspect(R__cl, R__parent, "fSignalClass", &fSignalClass);
      R__insp.Inspect(R__cl, R__parent, "fBackgroundClass", &fBackgroundClass);
      R__insp.Inspect(R__cl, R__parent, "*fLogger", &fLogger);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLPDEFoam(void *p) {
      return  p ? new(p) ::TMVA::PDEFoam : new ::TMVA::PDEFoam;
   }
   static void *newArray_TMVAcLcLPDEFoam(Long_t nElements, void *p) {
      return p ? new(p) ::TMVA::PDEFoam[nElements] : new ::TMVA::PDEFoam[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLPDEFoam(void *p) {
      delete ((::TMVA::PDEFoam*)p);
   }
   static void deleteArray_TMVAcLcLPDEFoam(void *p) {
      delete [] ((::TMVA::PDEFoam*)p);
   }
   static void destruct_TMVAcLcLPDEFoam(void *p) {
      typedef ::TMVA::PDEFoam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::PDEFoam

      namespace TMVA {
//______________________________________________________________________________
void PDEFoamDistr::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::PDEFoamDistr.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::PDEFoamDistr::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::PDEFoamDistr::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void PDEFoamDistr::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::PDEFoamDistr.
      TClass *R__cl = ::TMVA::PDEFoamDistr::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "*fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__parent, "*fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__parent, "fVolFrac", &fVolFrac);
      R__insp.Inspect(R__cl, R__parent, "*fBst", &fBst);
      R__insp.Inspect(R__cl, R__parent, "fDensityCalc", &fDensityCalc);
      R__insp.Inspect(R__cl, R__parent, "fSignalClass", &fSignalClass);
      R__insp.Inspect(R__cl, R__parent, "fBackgroundClass", &fBackgroundClass);
      R__insp.Inspect(R__cl, R__parent, "*fLogger", &fLogger);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLPDEFoamDistr(void *p) {
      return  p ? new(p) ::TMVA::PDEFoamDistr : new ::TMVA::PDEFoamDistr;
   }
   static void *newArray_TMVAcLcLPDEFoamDistr(Long_t nElements, void *p) {
      return p ? new(p) ::TMVA::PDEFoamDistr[nElements] : new ::TMVA::PDEFoamDistr[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLPDEFoamDistr(void *p) {
      delete ((::TMVA::PDEFoamDistr*)p);
   }
   static void deleteArray_TMVAcLcLPDEFoamDistr(void *p) {
      delete [] ((::TMVA::PDEFoamDistr*)p);
   }
   static void destruct_TMVAcLcLPDEFoamDistr(void *p) {
      typedef ::TMVA::PDEFoamDistr current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::PDEFoamDistr

      namespace TMVA {
//______________________________________________________________________________
void PDEFoamVect::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::PDEFoamVect.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::PDEFoamVect::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::PDEFoamVect::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void PDEFoamVect::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::PDEFoamVect.
      TClass *R__cl = ::TMVA::PDEFoamVect::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "*fCoords", &fCoords);
      R__insp.Inspect(R__cl, R__parent, "*fLogger", &fLogger);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLPDEFoamVect(void *p) {
      return  p ? new(p) ::TMVA::PDEFoamVect : new ::TMVA::PDEFoamVect;
   }
   static void *newArray_TMVAcLcLPDEFoamVect(Long_t nElements, void *p) {
      return p ? new(p) ::TMVA::PDEFoamVect[nElements] : new ::TMVA::PDEFoamVect[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLPDEFoamVect(void *p) {
      delete ((::TMVA::PDEFoamVect*)p);
   }
   static void deleteArray_TMVAcLcLPDEFoamVect(void *p) {
      delete [] ((::TMVA::PDEFoamVect*)p);
   }
   static void destruct_TMVAcLcLPDEFoamVect(void *p) {
      typedef ::TMVA::PDEFoamVect current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::PDEFoamVect

      namespace TMVA {
//______________________________________________________________________________
void PDEFoamCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::PDEFoamCell.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::PDEFoamCell::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::PDEFoamCell::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void PDEFoamCell::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::PDEFoamCell.
      TClass *R__cl = ::TMVA::PDEFoamCell::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "fSerial", &fSerial);
      R__insp.Inspect(R__cl, R__parent, "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__parent, "fParent", &fParent);
      fParent.ShowMembers(R__insp, strcat(R__parent,"fParent.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDaught0", &fDaught0);
      fDaught0.ShowMembers(R__insp, strcat(R__parent,"fDaught0.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDaught1", &fDaught1);
      fDaught1.ShowMembers(R__insp, strcat(R__parent,"fDaught1.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fXdiv", &fXdiv);
      R__insp.Inspect(R__cl, R__parent, "fBest", &fBest);
      R__insp.Inspect(R__cl, R__parent, "fVolume", &fVolume);
      R__insp.Inspect(R__cl, R__parent, "fIntegral", &fIntegral);
      R__insp.Inspect(R__cl, R__parent, "fDrive", &fDrive);
      R__insp.Inspect(R__cl, R__parent, "*fElement", &fElement);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace TMVA
namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLPDEFoamCell(void *p) {
      return  p ? new(p) ::TMVA::PDEFoamCell : new ::TMVA::PDEFoamCell;
   }
   static void *newArray_TMVAcLcLPDEFoamCell(Long_t nElements, void *p) {
      return p ? new(p) ::TMVA::PDEFoamCell[nElements] : new ::TMVA::PDEFoamCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLPDEFoamCell(void *p) {
      delete ((::TMVA::PDEFoamCell*)p);
   }
   static void deleteArray_TMVAcLcLPDEFoamCell(void *p) {
      delete [] ((::TMVA::PDEFoamCell*)p);
   }
   static void destruct_TMVAcLcLPDEFoamCell(void *p) {
      typedef ::TMVA::PDEFoamCell current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::PDEFoamCell

//______________________________________________________________________________
namespace ROOT {
   void TMVAcLcLBDTEventWrapper_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class TMVA::BDTEventWrapper.
      typedef ::ROOT::Shadow::TMVA::BDTEventWrapper ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::BDTEventWrapper*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fEvent", &sobj->fEvent);
      R__insp.Inspect(R__cl, R__parent, "fBkgWeight", &sobj->fBkgWeight);
      R__insp.Inspect(R__cl, R__parent, "fSigWeight", &sobj->fSigWeight);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLBDTEventWrapper(void *p) {
      delete ((::TMVA::BDTEventWrapper*)p);
   }
   static void deleteArray_TMVAcLcLBDTEventWrapper(void *p) {
      delete [] ((::TMVA::BDTEventWrapper*)p);
   }
   static void destruct_TMVAcLcLBDTEventWrapper(void *p) {
      typedef ::TMVA::BDTEventWrapper current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::BDTEventWrapper

//______________________________________________________________________________
namespace ROOT {
   void TMVAcLcLCCTreeWrapper_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class TMVA::CCTreeWrapper.
      typedef ::ROOT::Shadow::TMVA::CCTreeWrapper ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::CCTreeWrapper*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fQualityIndex", &sobj->fQualityIndex);
      R__insp.Inspect(R__cl, R__parent, "*fDTParent", &sobj->fDTParent);
      R__insp.Inspect(R__cl, R__parent, "*fRoot", &sobj->fRoot);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLCCTreeWrapper(void *p) {
      delete ((::TMVA::CCTreeWrapper*)p);
   }
   static void deleteArray_TMVAcLcLCCTreeWrapper(void *p) {
      delete [] ((::TMVA::CCTreeWrapper*)p);
   }
   static void destruct_TMVAcLcLCCTreeWrapper(void *p) {
      typedef ::TMVA::CCTreeWrapper current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::CCTreeWrapper

//______________________________________________________________________________
namespace ROOT {
   void TMVAcLcLCCPruner_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class TMVA::CCPruner.
      typedef ::ROOT::Shadow::TMVA::CCPruner ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::CCPruner*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fAlpha", &sobj->fAlpha);
      R__insp.Inspect(R__cl, R__parent, "*fValidationSample", &sobj->fValidationSample);
      R__insp.Inspect(R__cl, R__parent, "*fValidationDataSet", &sobj->fValidationDataSet);
      R__insp.Inspect(R__cl, R__parent, "*fQualityIndex", &sobj->fQualityIndex);
      R__insp.Inspect(R__cl, R__parent, "fOwnQIndex", &sobj->fOwnQIndex);
      R__insp.Inspect(R__cl, R__parent, "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__parent, "fPruneSequence", (void*)&sobj->fPruneSequence);
      ::ROOT::GenericShowMembers("vector<TMVA::DecisionTreeNode*>", (void*)&sobj->fPruneSequence, R__insp, strcat(R__parent,"fPruneSequence."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPruneStrengthList", (void*)&sobj->fPruneStrengthList);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&sobj->fPruneStrengthList, R__insp, strcat(R__parent,"fPruneStrengthList."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fQualityIndexList", (void*)&sobj->fQualityIndexList);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&sobj->fQualityIndexList, R__insp, strcat(R__parent,"fQualityIndexList."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fOptimalK", &sobj->fOptimalK);
      R__insp.Inspect(R__cl, R__parent, "fDebug", &sobj->fDebug);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TMVAcLcLCCPruner(void *p) {
      delete ((::TMVA::CCPruner*)p);
   }
   static void deleteArray_TMVAcLcLCCPruner(void *p) {
      delete [] ((::TMVA::CCPruner*)p);
   }
   static void destruct_TMVAcLcLCCPruner(void *p) {
      typedef ::TMVA::CCPruner current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::CCPruner

//______________________________________________________________________________
namespace ROOT {
   void TMVAcLcLCostComplexityPruneTool_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class TMVA::CostComplexityPruneTool.
      typedef ::ROOT::Shadow::TMVA::CostComplexityPruneTool ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TMVA::CostComplexityPruneTool*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fQualityIndexTool", &sobj->fQualityIndexTool);
      R__insp.Inspect(R__cl, R__parent, "fPruneSequence", (void*)&sobj->fPruneSequence);
      ::ROOT::GenericShowMembers("vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >", (void*)&sobj->fPruneSequence, R__insp, strcat(R__parent,"fPruneSequence."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPruneStrengthList", (void*)&sobj->fPruneStrengthList);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&sobj->fPruneStrengthList, R__insp, strcat(R__parent,"fPruneStrengthList."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fQualityIndexList", (void*)&sobj->fQualityIndexList);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&sobj->fQualityIndexList, R__insp, strcat(R__parent,"fQualityIndexList."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fOptimalK", &sobj->fOptimalK);
      R__insp.Inspect(R__cl, R__parent, "*fLogger", &sobj->fLogger);
      ::ROOT::GenericShowMembers("TMVA::IPruneTool", ( ::TMVA::IPruneTool * )( (::TMVA::CostComplexityPruneTool*) obj ), R__insp, R__parent, false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLCostComplexityPruneTool(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::CostComplexityPruneTool : new ::TMVA::CostComplexityPruneTool;
   }
   static void *newArray_TMVAcLcLCostComplexityPruneTool(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::CostComplexityPruneTool[nElements] : new ::TMVA::CostComplexityPruneTool[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLCostComplexityPruneTool(void *p) {
      delete ((::TMVA::CostComplexityPruneTool*)p);
   }
   static void deleteArray_TMVAcLcLCostComplexityPruneTool(void *p) {
      delete [] ((::TMVA::CostComplexityPruneTool*)p);
   }
   static void destruct_TMVAcLcLCostComplexityPruneTool(void *p) {
      typedef ::TMVA::CostComplexityPruneTool current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::CostComplexityPruneTool

      namespace TMVA {
//______________________________________________________________________________
void SVEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMVA::SVEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TMVA::SVEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(TMVA::SVEvent::Class(),this);
   }
}

} // namespace TMVA
//______________________________________________________________________________
      namespace TMVA {
void SVEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMVA::SVEvent.
      TClass *R__cl = ::TMVA::SVEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDataVector", (void*)&fDataVector);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&fDataVector, R__insp, strcat(R__parent,"fDataVector."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCweight", &fCweight);
      R__insp.Inspect(R__cl, R__parent, "fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__parent, "fAlpha_p", &fAlpha_p);
      R__insp.Inspect(R__cl, R__parent, "fErrorCache", &fErrorCache);
      R__insp.Inspect(R__cl, R__parent, "fNVar", &fNVar);
      R__insp.Inspect(R__cl, R__parent, "fTypeFlag", &fTypeFlag);
      R__insp.Inspect(R__cl, R__parent, "fIdx", &fIdx);
      R__insp.Inspect(R__cl, R__parent, "fNs", &fNs);
      R__insp.Inspect(R__cl, R__parent, "fIsShrinked", &fIsShrinked);
      R__insp.Inspect(R__cl, R__parent, "*fLine", &fLine);
      R__insp.Inspect(R__cl, R__parent, "fTarget", &fTarget);
}

} // namespace TMVA
namespace ROOT {
   // Wrappers around operator new
   static void *new_TMVAcLcLSVEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::SVEvent : new ::TMVA::SVEvent;
   }
   static void *newArray_TMVAcLcLSVEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TMVA::SVEvent[nElements] : new ::TMVA::SVEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMVAcLcLSVEvent(void *p) {
      delete ((::TMVA::SVEvent*)p);
   }
   static void deleteArray_TMVAcLcLSVEvent(void *p) {
      delete [] ((::TMVA::SVEvent*)p);
   }
   static void destruct_TMVAcLcLSVEvent(void *p) {
      typedef ::TMVA::SVEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMVA::SVEvent

/********************************************************
* tmva/src/G__TMVA3.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__TMVA3();

extern "C" void G__set_cpp_environmentG__TMVA3() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("include/TMVA/Config.h");
  G__add_compiledheader("include/TMVA/KDEKernel.h");
  G__add_compiledheader("include/TMVA/Interval.h");
  G__add_compiledheader("include/TMVA/FitterBase.h");
  G__add_compiledheader("include/TMVA/MCFitter.h");
  G__add_compiledheader("include/TMVA/GeneticFitter.h");
  G__add_compiledheader("include/TMVA/SimulatedAnnealingFitter.h");
  G__add_compiledheader("include/TMVA/MinuitFitter.h");
  G__add_compiledheader("include/TMVA/MinuitWrapper.h");
  G__add_compiledheader("include/TMVA/IFitterTarget.h");
  G__add_compiledheader("include/TMVA/IMetric.h");
  G__add_compiledheader("include/TMVA/MetricEuler.h");
  G__add_compiledheader("include/TMVA/MetricManhattan.h");
  G__add_compiledheader("include/TMVA/SeedDistance.h");
  G__add_compiledheader("include/TMVA/PDEFoam.h");
  G__add_compiledheader("include/TMVA/PDEFoamDistr.h");
  G__add_compiledheader("include/TMVA/PDEFoamVect.h");
  G__add_compiledheader("include/TMVA/PDEFoamCell.h");
  G__add_compiledheader("include/TMVA/BDTEventWrapper.h");
  G__add_compiledheader("include/TMVA/CCTreeWrapper.h");
  G__add_compiledheader("include/TMVA/CCPruner.h");
  G__add_compiledheader("include/TMVA/CostComplexityPruneTool.h");
  G__add_compiledheader("include/TMVA/SVEvent.h");
  G__cpp_reset_tagtableG__TMVA3();
}
#include <new>
extern "C" int G__cpp_dllrevG__TMVA3() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TMVA */
static int G__G__TMVA3_106_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::Config& obj = TMVA::gConfig();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_106_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = TMVA::operator<<(*(ostream*) libp->para[0].ref, *(TMVA::Node*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_106_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = TMVA::operator<<(*(ostream*) libp->para[0].ref, (const TMVA::Node*) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_106_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = TMVA::operator<<(*(ostream*) libp->para[0].ref, *(TMVA::BinaryTree*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_106_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = TMVA::operator>>(*(istream*) libp->para[0].ref, *(TMVA::BinaryTree*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_106_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = TMVA::operator<<(*(ostream*) libp->para[0].ref, *(TMVA::Event*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_106_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = TMVA::operator<<(*(ostream*) libp->para[0].ref, *(TMVA::PDEFoam*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_106_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = TMVA::operator>>(*(istream*) libp->para[0].ref, *(TMVA::PDEFoam*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::Config */
static int G__G__TMVA3_108_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::Config& obj = TMVA::Config::Instance();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::Config::DestroyInstance();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::Config*) G__getstructoffset())->UseColor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Config*) G__getstructoffset())->SetUseColor((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::Config*) G__getstructoffset())->IsSilent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Config*) G__getstructoffset())->SetSilent((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::Config*) G__getstructoffset())->WriteOptionsReference());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Config*) G__getstructoffset())->SetWriteOptionsReference((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::Config*) G__getstructoffset())->DrawProgressBar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Config*) G__getstructoffset())->SetDrawProgressBar((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::Config::VariablePlotting& obj = ((TMVA::Config*) G__getstructoffset())->GetVariablePlotting();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::Config::IONames& obj = ((TMVA::Config*) G__getstructoffset())->GetIONames();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::Config::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::Config::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::Config::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::Config::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::Config*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Config*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Config*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Config*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::Config::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::Config::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::Config::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_108_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::Config::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_108_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::Config* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::Config(*(TMVA::Config*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_108_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::Config* dest = (TMVA::Config*) G__getstructoffset();
   *dest = *(TMVA::Config*) libp->para[0].ref;
   const TMVA::Config& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::Config::VariablePlotting */
// automatic default constructor
static int G__G__TMVA3_109_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::Config::VariablePlotting *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::Config::VariablePlotting[n];
     } else {
       p = new((void*) gvp) TMVA::Config::VariablePlotting[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::Config::VariablePlotting;
     } else {
       p = new((void*) gvp) TMVA::Config::VariablePlotting;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_109_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::Config::VariablePlotting* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::Config::VariablePlotting(*(TMVA::Config::VariablePlotting*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::Config::VariablePlotting G__TTMVAcLcLConfigcLcLVariablePlotting;
static int G__G__TMVA3_109_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::Config::VariablePlotting*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::Config::VariablePlotting*) (soff+(sizeof(TMVA::Config::VariablePlotting)*i)))->~G__TTMVAcLcLConfigcLcLVariablePlotting();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::Config::VariablePlotting*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::Config::VariablePlotting*) (soff))->~G__TTMVAcLcLConfigcLcLVariablePlotting();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_109_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::Config::VariablePlotting* dest = (TMVA::Config::VariablePlotting*) G__getstructoffset();
   *dest = *(TMVA::Config::VariablePlotting*) libp->para[0].ref;
   const TMVA::Config::VariablePlotting& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::Config::IONames */
// automatic default constructor
static int G__G__TMVA3_110_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::Config::IONames *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::Config::IONames[n];
     } else {
       p = new((void*) gvp) TMVA::Config::IONames[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::Config::IONames;
     } else {
       p = new((void*) gvp) TMVA::Config::IONames;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_110_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::Config::IONames* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::Config::IONames(*(TMVA::Config::IONames*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::Config::IONames G__TTMVAcLcLConfigcLcLIONames;
static int G__G__TMVA3_110_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::Config::IONames*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::Config::IONames*) (soff+(sizeof(TMVA::Config::IONames)*i)))->~G__TTMVAcLcLConfigcLcLIONames();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::Config::IONames*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::Config::IONames*) (soff))->~G__TTMVAcLcLConfigcLcLIONames();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_110_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::Config::IONames* dest = (TMVA::Config::IONames*) G__getstructoffset();
   *dest = *(TMVA::Config::IONames*) libp->para[0].ref;
   const TMVA::Config::IONames& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::KDEKernel */
static int G__G__TMVA3_114_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::KDEKernel* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::KDEKernel(
(TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TMVA::KDEKernel::EKernelBorder) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) TMVA::KDEKernel(
(TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TMVA::KDEKernel::EKernelBorder) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::KDEKernel(
(TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TMVA::KDEKernel::EKernelBorder) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TMVA::KDEKernel(
(TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TMVA::KDEKernel::EKernelBorder) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::KDEKernel(
(TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) TMVA::KDEKernel(
(TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::KDEKernel(
(TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) TMVA::KDEKernel(
(TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::KDEKernel((TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TMVA::KDEKernel((TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]), (const TH1*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::KDEKernel((TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TMVA::KDEKernel((TMVA::KDEKernel::EKernelIter) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TMVA::KDEKernel[n];
       } else {
         p = new((void*) gvp) TMVA::KDEKernel[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TMVA::KDEKernel;
       } else {
         p = new((void*) gvp) TMVA::KDEKernel;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TMVA::KDEKernel*) G__getstructoffset())->GetBinKernelIntegral((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMVA::KDEKernel*) G__getstructoffset())->SetKernelType((TMVA::KDEKernel::EKernelType) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMVA::KDEKernel*) G__getstructoffset())->SetKernelType();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TMVA::KDEKernel*) G__getstructoffset())->GetName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::KDEKernel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::KDEKernel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::KDEKernel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::KDEKernel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::KDEKernel*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::KDEKernel*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::KDEKernel*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::KDEKernel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::KDEKernel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::KDEKernel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::KDEKernel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_114_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::KDEKernel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_114_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::KDEKernel* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::KDEKernel(*(TMVA::KDEKernel*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernel));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::KDEKernel G__TTMVAcLcLKDEKernel;
static int G__G__TMVA3_114_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::KDEKernel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::KDEKernel*) (soff+(sizeof(TMVA::KDEKernel)*i)))->~G__TTMVAcLcLKDEKernel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::KDEKernel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::KDEKernel*) (soff))->~G__TTMVAcLcLKDEKernel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_114_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::KDEKernel* dest = (TMVA::KDEKernel*) G__getstructoffset();
   *dest = *(TMVA::KDEKernel*) libp->para[0].ref;
   const TMVA::KDEKernel& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::Interval */
static int G__G__TMVA3_119_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::Interval* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::Interval(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TMVA::Interval(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::Interval((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TMVA::Interval((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLInterval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::Interval* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::Interval(*(TMVA::Interval*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TMVA::Interval(*(TMVA::Interval*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLInterval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::Interval*) G__getstructoffset())->GetMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::Interval*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::Interval*) G__getstructoffset())->GetWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::Interval*) G__getstructoffset())->GetNbins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::Interval*) G__getstructoffset())->GetMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::Interval*) G__getstructoffset())->GetRndm(*(TRandom3*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::Interval*) G__getstructoffset())->GetElement((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Interval*) G__getstructoffset())->SetMax((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Interval*) G__getstructoffset())->SetMin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::Interval::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::Interval::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::Interval::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::Interval::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::Interval*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Interval*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Interval*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::Interval*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::Interval::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::Interval::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::Interval::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_119_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::Interval::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::Interval G__TTMVAcLcLInterval;
static int G__G__TMVA3_119_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::Interval*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::Interval*) (soff+(sizeof(TMVA::Interval)*i)))->~G__TTMVAcLcLInterval();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::Interval*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::Interval*) (soff))->~G__TTMVAcLcLInterval();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_119_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::Interval* dest = (TMVA::Interval*) G__getstructoffset();
   *dest = *(TMVA::Interval*) libp->para[0].ref;
   const TMVA::Interval& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::IFitterTarget */
static int G__G__TMVA3_182_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::IFitterTarget*) G__getstructoffset())->EstimatorFunction(*(vector<Double_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::IFitterTarget*) G__getstructoffset())->ProgressNotifier(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::IFitterTarget::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::IFitterTarget::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::IFitterTarget::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::IFitterTarget::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::IFitterTarget*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::IFitterTarget*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::IFitterTarget*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::IFitterTarget*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::IFitterTarget::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::IFitterTarget::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::IFitterTarget::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_182_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::IFitterTarget::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::IFitterTarget G__TTMVAcLcLIFitterTarget;
static int G__G__TMVA3_182_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::IFitterTarget*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::IFitterTarget*) (soff+(sizeof(TMVA::IFitterTarget)*i)))->~G__TTMVAcLcLIFitterTarget();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::IFitterTarget*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::IFitterTarget*) (soff))->~G__TTMVAcLcLIFitterTarget();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_182_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::IFitterTarget* dest = (TMVA::IFitterTarget*) G__getstructoffset();
   *dest = *(TMVA::IFitterTarget*) libp->para[0].ref;
   const TMVA::IFitterTarget& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::FitterBase */
static int G__G__TMVA3_183_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::FitterBase*) G__getstructoffset())->Run());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::FitterBase*) G__getstructoffset())->Run(*(vector<Double_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::FitterBase*) G__getstructoffset())->EstimatorFunction(*(vector<Double_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::IFitterTarget& obj = ((const TMVA::FitterBase*) G__getstructoffset())->GetFitterTarget();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::FitterBase*) G__getstructoffset())->GetNpars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::FitterBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::FitterBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::FitterBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::FitterBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::FitterBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::FitterBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::FitterBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::FitterBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_183_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::FitterBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::FitterBase G__TTMVAcLcLFitterBase;
static int G__G__TMVA3_183_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::FitterBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::FitterBase*) (soff+(sizeof(TMVA::FitterBase)*i)))->~G__TTMVAcLcLFitterBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::FitterBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::FitterBase*) (soff))->~G__TTMVAcLcLFitterBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::MCFitter */
static int G__G__TMVA3_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::MCFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::MCFitter(
*(TMVA::IFitterTarget*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(vector<TMVA::Interval*>*) libp->para[2].ref, *(TString*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) TMVA::MCFitter(
*(TMVA::IFitterTarget*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(vector<TMVA::Interval*>*) libp->para[2].ref, *(TString*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::MCFitter*) G__getstructoffset())->SetParameters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::MCFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MCFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::MCFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::MCFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::MCFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MCFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MCFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MCFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MCFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::MCFitter G__TTMVAcLcLMCFitter;
static int G__G__TMVA3_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::MCFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::MCFitter*) (soff+(sizeof(TMVA::MCFitter)*i)))->~G__TTMVAcLcLMCFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::MCFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::MCFitter*) (soff))->~G__TTMVAcLcLMCFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::GeneticFitter */
static int G__G__TMVA3_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::GeneticFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::GeneticFitter(
*(TMVA::IFitterTarget*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(vector<TMVA::Interval*>*) libp->para[2].ref, *(TString*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) TMVA::GeneticFitter(
*(TMVA::IFitterTarget*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(vector<TMVA::Interval*>*) libp->para[2].ref, *(TString*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::GeneticFitter*) G__getstructoffset())->SetParameters(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::GeneticFitter*) G__getstructoffset())->NewFitness((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::GeneticFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::GeneticFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::GeneticFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::GeneticFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::GeneticFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::GeneticFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::GeneticFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::GeneticFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::GeneticFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::GeneticFitter G__TTMVAcLcLGeneticFitter;
static int G__G__TMVA3_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::GeneticFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::GeneticFitter*) (soff+(sizeof(TMVA::GeneticFitter)*i)))->~G__TTMVAcLcLGeneticFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::GeneticFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::GeneticFitter*) (soff))->~G__TTMVAcLcLGeneticFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::SimulatedAnnealingFitter */
static int G__G__TMVA3_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::SimulatedAnnealingFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::SimulatedAnnealingFitter(
*(TMVA::IFitterTarget*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(vector<TMVA::Interval*>*) libp->para[2].ref, *(TString*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) TMVA::SimulatedAnnealingFitter(
*(TMVA::IFitterTarget*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(vector<TMVA::Interval*>*) libp->para[2].ref, *(TString*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SimulatedAnnealingFitter*) G__getstructoffset())->SetParameters(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *((TString*) G__int(libp->para[4])), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::SimulatedAnnealingFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SimulatedAnnealingFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::SimulatedAnnealingFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::SimulatedAnnealingFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SimulatedAnnealingFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SimulatedAnnealingFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::SimulatedAnnealingFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SimulatedAnnealingFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::SimulatedAnnealingFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::SimulatedAnnealingFitter G__TTMVAcLcLSimulatedAnnealingFitter;
static int G__G__TMVA3_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::SimulatedAnnealingFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::SimulatedAnnealingFitter*) (soff+(sizeof(TMVA::SimulatedAnnealingFitter)*i)))->~G__TTMVAcLcLSimulatedAnnealingFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::SimulatedAnnealingFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::SimulatedAnnealingFitter*) (soff))->~G__TTMVAcLcLSimulatedAnnealingFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::MinuitWrapper */
static int G__G__TMVA3_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::MinuitWrapper* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::MinuitWrapper(*(TMVA::IFitterTarget*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TMVA::MinuitWrapper(*(TMVA::IFitterTarget*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::MinuitWrapper*) G__getstructoffset())->SetFitterTarget(*(TMVA::IFitterTarget*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TMVA::MinuitWrapper*) G__getstructoffset())->ExecuteCommand((const char*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TMVA::MinuitWrapper*) G__getstructoffset())->GetStats(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TMVA::MinuitWrapper*) G__getstructoffset())->GetErrors((Int_t) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TMVA::MinuitWrapper*) G__getstructoffset())->SetParameter((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::MinuitWrapper::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MinuitWrapper::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::MinuitWrapper::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::MinuitWrapper::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::MinuitWrapper*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MinuitWrapper::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MinuitWrapper::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MinuitWrapper::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_196_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MinuitWrapper::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::MinuitWrapper G__TTMVAcLcLMinuitWrapper;
static int G__G__TMVA3_196_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::MinuitWrapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::MinuitWrapper*) (soff+(sizeof(TMVA::MinuitWrapper)*i)))->~G__TTMVAcLcLMinuitWrapper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::MinuitWrapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::MinuitWrapper*) (soff))->~G__TTMVAcLcLMinuitWrapper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::MinuitFitter */
static int G__G__TMVA3_197_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::MinuitFitter*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::MinuitFitter*) G__getstructoffset())->EstimatorFunction(*(vector<Double_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::MinuitFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MinuitFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::MinuitFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::MinuitFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::MinuitFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MinuitFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MinuitFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MinuitFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MinuitFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::MinuitFitter G__TTMVAcLcLMinuitFitter;
static int G__G__TMVA3_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::MinuitFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::MinuitFitter*) (soff+(sizeof(TMVA::MinuitFitter)*i)))->~G__TTMVAcLcLMinuitFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::MinuitFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::MinuitFitter*) (soff))->~G__TTMVAcLcLMinuitFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::IMetric */
static int G__G__TMVA3_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::IMetric*) G__getstructoffset())->Distance(*(vector<Double_t>*) libp->para[0].ref, *(vector<Double_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::IMetric*) G__getstructoffset())->SetParameters((vector<Double_t>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TMVA::IMetric*) G__getstructoffset())->GetParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::IMetric::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::IMetric::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::IMetric::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::IMetric::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::IMetric*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::IMetric*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::IMetric*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::IMetric*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::IMetric::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::IMetric::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::IMetric::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::IMetric::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::IMetric G__TTMVAcLcLIMetric;
static int G__G__TMVA3_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::IMetric*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::IMetric*) (soff+(sizeof(TMVA::IMetric)*i)))->~G__TTMVAcLcLIMetric();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::IMetric*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::IMetric*) (soff))->~G__TTMVAcLcLIMetric();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::IMetric* dest = (TMVA::IMetric*) G__getstructoffset();
   *dest = *(TMVA::IMetric*) libp->para[0].ref;
   const TMVA::IMetric& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::MetricEuler */
static int G__G__TMVA3_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::MetricEuler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::MetricEuler[n];
     } else {
       p = new((void*) gvp) TMVA::MetricEuler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::MetricEuler;
     } else {
       p = new((void*) gvp) TMVA::MetricEuler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::MetricEuler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MetricEuler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::MetricEuler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::MetricEuler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::MetricEuler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MetricEuler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MetricEuler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MetricEuler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_207_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MetricEuler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_207_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::MetricEuler* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::MetricEuler(*(TMVA::MetricEuler*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::MetricEuler G__TTMVAcLcLMetricEuler;
static int G__G__TMVA3_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::MetricEuler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::MetricEuler*) (soff+(sizeof(TMVA::MetricEuler)*i)))->~G__TTMVAcLcLMetricEuler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::MetricEuler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::MetricEuler*) (soff))->~G__TTMVAcLcLMetricEuler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::MetricEuler* dest = (TMVA::MetricEuler*) G__getstructoffset();
   *dest = *(TMVA::MetricEuler*) libp->para[0].ref;
   const TMVA::MetricEuler& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::MetricManhattan */
static int G__G__TMVA3_208_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::MetricManhattan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::MetricManhattan[n];
     } else {
       p = new((void*) gvp) TMVA::MetricManhattan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::MetricManhattan;
     } else {
       p = new((void*) gvp) TMVA::MetricManhattan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::MetricManhattan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MetricManhattan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::MetricManhattan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::MetricManhattan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::MetricManhattan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MetricManhattan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MetricManhattan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::MetricManhattan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_208_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::MetricManhattan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_208_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::MetricManhattan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::MetricManhattan(*(TMVA::MetricManhattan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::MetricManhattan G__TTMVAcLcLMetricManhattan;
static int G__G__TMVA3_208_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::MetricManhattan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::MetricManhattan*) (soff+(sizeof(TMVA::MetricManhattan)*i)))->~G__TTMVAcLcLMetricManhattan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::MetricManhattan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::MetricManhattan*) (soff))->~G__TTMVAcLcLMetricManhattan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_208_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::MetricManhattan* dest = (TMVA::MetricManhattan*) G__getstructoffset();
   *dest = *(TMVA::MetricManhattan*) libp->para[0].ref;
   const TMVA::MetricManhattan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::SeedDistance */
static int G__G__TMVA3_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::SeedDistance* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::SeedDistance(*(TMVA::IMetric*) libp->para[0].ref, *(vector<std::vector<Double_t> >*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) TMVA::SeedDistance(*(TMVA::IMetric*) libp->para[0].ref, *(vector<std::vector<Double_t> >*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeedDistance));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>& obj = ((TMVA::SeedDistance*) G__getstructoffset())->GetDistances(*(vector<Double_t>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::SeedDistance::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SeedDistance::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::SeedDistance::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::SeedDistance::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::SeedDistance*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SeedDistance*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SeedDistance*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SeedDistance*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SeedDistance::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::SeedDistance::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SeedDistance::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_209_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::SeedDistance::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::SeedDistance* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::SeedDistance(*(TMVA::SeedDistance*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeedDistance));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::SeedDistance G__TTMVAcLcLSeedDistance;
static int G__G__TMVA3_209_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::SeedDistance*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::SeedDistance*) (soff+(sizeof(TMVA::SeedDistance)*i)))->~G__TTMVAcLcLSeedDistance();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::SeedDistance*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::SeedDistance*) (soff))->~G__TTMVAcLcLSeedDistance();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::PDEFoamVect */
static int G__G__TMVA3_371_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamVect* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::PDEFoamVect[n];
     } else {
       p = new((void*) gvp) TMVA::PDEFoamVect[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::PDEFoamVect;
     } else {
       p = new((void*) gvp) TMVA::PDEFoamVect;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamVect* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::PDEFoamVect((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TMVA::PDEFoamVect((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamVect* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::PDEFoamVect(*(TMVA::PDEFoamVect*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TMVA::PDEFoamVect(*(TMVA::PDEFoamVect*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::PDEFoamVect& obj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator=(*(TMVA::PDEFoamVect*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::PDEFoamVect& obj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator=((Double_t*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::PDEFoamVect& obj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator=((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::PDEFoamVect& obj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator+=(*(TMVA::PDEFoamVect*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::PDEFoamVect& obj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator-=(*(TMVA::PDEFoamVect*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMVA::PDEFoamVect& obj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator*=(*(Double_t*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TMVA::PDEFoamVect* pobj;
         TMVA::PDEFoamVect xobj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator+(*(TMVA::PDEFoamVect*) libp->para[0].ref);
         pobj = new TMVA::PDEFoamVect(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TMVA::PDEFoamVect* pobj;
         TMVA::PDEFoamVect xobj = ((TMVA::PDEFoamVect*) G__getstructoffset())->operator-(*(TMVA::PDEFoamVect*) libp->para[0].ref);
         pobj = new TMVA::PDEFoamVect(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::PDEFoamVect*) G__getstructoffset())->GetDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::PDEFoamVect*) G__getstructoffset())->GetCoord((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::PDEFoamVect::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamVect::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::PDEFoamVect::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::PDEFoamVect::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamVect*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamVect::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::PDEFoamVect::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamVect::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_371_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::PDEFoamVect::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::PDEFoamVect G__TTMVAcLcLPDEFoamVect;
static int G__G__TMVA3_371_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::PDEFoamVect*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::PDEFoamVect*) (soff+(sizeof(TMVA::PDEFoamVect)*i)))->~G__TTMVAcLcLPDEFoamVect();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::PDEFoamVect*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::PDEFoamVect*) (soff))->~G__TTMVAcLcLPDEFoamVect();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::PDEFoamCell */
static int G__G__TMVA3_372_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::PDEFoamCell[n];
     } else {
       p = new((void*) gvp) TMVA::PDEFoamCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::PDEFoamCell;
     } else {
       p = new((void*) gvp) TMVA::PDEFoamCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::PDEFoamCell((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TMVA::PDEFoamCell((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::PDEFoamCell(*(TMVA::PDEFoamCell*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TMVA::PDEFoamCell(*(TMVA::PDEFoamCell*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->Fill((Int_t) G__int(libp->para[0]), (TMVA::PDEFoamCell*) G__int(libp->para[1])
, (TMVA::PDEFoamCell*) G__int(libp->para[2]), (TMVA::PDEFoamCell*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetXdiv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetBest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetBest((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetXdiv((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetHcub(*(TMVA::PDEFoamVect*) libp->para[0].ref, *(TMVA::PDEFoamVect*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetHSize(*(TMVA::PDEFoamVect*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->CalcVolume();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetIntg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetDriv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetIntg((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetDriv((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetStat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetStat((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetPare());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetDau0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetDau1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetDau0((TMVA::PDEFoamCell*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetDau1((TMVA::PDEFoamCell*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetPare((TMVA::PDEFoamCell*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetSerial((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetSerial());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->SetElement((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::PDEFoamCell*) G__getstructoffset())->GetElement());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::PDEFoamCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::PDEFoamCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::PDEFoamCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::PDEFoamCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_372_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::PDEFoamCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::PDEFoamCell G__TTMVAcLcLPDEFoamCell;
static int G__G__TMVA3_372_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::PDEFoamCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::PDEFoamCell*) (soff+(sizeof(TMVA::PDEFoamCell)*i)))->~G__TTMVAcLcLPDEFoamCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::PDEFoamCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::PDEFoamCell*) (soff))->~G__TTMVAcLcLPDEFoamCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_372_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamCell* dest = (TMVA::PDEFoamCell*) G__getstructoffset();
   *dest = *(TMVA::PDEFoamCell*) libp->para[0].ref;
   const TMVA::PDEFoamCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::PDEFoamDistr */
static int G__G__TMVA3_375_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamDistr* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::PDEFoamDistr[n];
     } else {
       p = new((void*) gvp) TMVA::PDEFoamDistr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::PDEFoamDistr;
     } else {
       p = new((void*) gvp) TMVA::PDEFoamDistr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamDistr* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::PDEFoamDistr(*(TMVA::PDEFoamDistr*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TMVA::PDEFoamDistr(*(TMVA::PDEFoamDistr*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->SetVolumeFraction((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TMVA::PDEFoamDistr*) G__getstructoffset())->GetVolumeFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->SetDim((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->SetXmin((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->SetXmax((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TMVA::PDEFoamDistr*) G__getstructoffset())->VarTransform((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TMVA::PDEFoamDistr*) G__getstructoffset())->VarTransformInvers((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->Initialize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->Initialize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->FillBinarySearchTree((const TMVA::Event*) G__int(libp->para[0]), (TMVA::EFoamType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->FillBinarySearchTree((const TMVA::Event*) G__int(libp->para[0]), (TMVA::EFoamType) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoamDistr*) G__getstructoffset())->Density((Double_t*) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->SetDensityCalc((TMVA::TDensityCalc) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TMVA::PDEFoamDistr*) G__getstructoffset())->FillDiscriminator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TMVA::PDEFoamDistr*) G__getstructoffset())->FillTarget0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TMVA::PDEFoamDistr*) G__getstructoffset())->FillEventDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->SetSignalClass((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->SetBackgroundClass((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::PDEFoamDistr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamDistr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::PDEFoamDistr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::PDEFoamDistr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoamDistr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamDistr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::PDEFoamDistr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoamDistr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_375_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::PDEFoamDistr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::PDEFoamDistr G__TTMVAcLcLPDEFoamDistr;
static int G__G__TMVA3_375_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::PDEFoamDistr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::PDEFoamDistr*) (soff+(sizeof(TMVA::PDEFoamDistr)*i)))->~G__TTMVAcLcLPDEFoamDistr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::PDEFoamDistr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::PDEFoamDistr*) (soff))->~G__TTMVAcLcLPDEFoamDistr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_375_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoamDistr* dest = (TMVA::PDEFoamDistr*) G__getstructoffset();
   *dest = *(TMVA::PDEFoamDistr*) libp->para[0].ref;
   const TMVA::PDEFoamDistr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::PDEFoam */
static int G__G__TMVA3_376_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::PDEFoam[n];
     } else {
       p = new((void*) gvp) TMVA::PDEFoam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::PDEFoam;
     } else {
       p = new((void*) gvp) TMVA::PDEFoam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::PDEFoam(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TMVA::PDEFoam(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::PDEFoam(*(TMVA::PDEFoam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TMVA::PDEFoam(*(TMVA::PDEFoam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TMVA::PDEFoam*) G__getstructoffset())->FillBinarySearchTree((const TMVA::Event*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TMVA::PDEFoam*) G__getstructoffset())->FillBinarySearchTree((const TMVA::Event*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMVA::PDEFoam*) G__getstructoffset())->Create((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMVA::PDEFoam*) G__getstructoffset())->Create();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TMVA::PDEFoam*) G__getstructoffset())->FillFoamCells((const TMVA::Event*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TMVA::PDEFoam*) G__getstructoffset())->FillFoamCells((const TMVA::Event*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->CalcCellDiscr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->CalcCellTarget();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMVA::PDEFoam*) G__getstructoffset())->ResetCellElements((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMVA::PDEFoam*) G__getstructoffset())->ResetCellElements();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetkDim((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetnCells((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetnSampl((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetnBin((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetEvPerBin((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetInhiDiv((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetNElements((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetPDEFoamVolumeFraction((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetVolumeFraction((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetFoamType((TMVA::EFoamType) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetSignalClass((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetBackgroundClass((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::PDEFoam*) G__getstructoffset())->GetTotDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TMVA::PDEFoam*) G__getstructoffset())->GetFoamName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TMVA::PDEFoam*) G__getstructoffset())->GetNElements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::PDEFoam*) G__getstructoffset())->GetPDEFoamVolumeFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::PDEFoam*) G__getstructoffset())->GetFoamType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TMVA::PDEFoam*) G__getstructoffset())->GetNActiveCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TMVA::PDEFoam*) G__getstructoffset())->GetNInActiveCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TMVA::PDEFoam*) G__getstructoffset())->GetNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::PDEFoam*) G__getstructoffset())->GetRootCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->CutNmin((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TMVA::PDEFoam*) G__getstructoffset())->CutNmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->CutRMSmin((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TMVA::PDEFoam*) G__getstructoffset())->CutRMSmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetNmin((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((TMVA::PDEFoam*) G__getstructoffset())->GetNmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetRMSmin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetRMSmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetXmin((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->SetXmax((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetXmin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetXmax((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->AddVariableName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->AddVariableName((TObjString*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TMVA::PDEFoam*) G__getstructoffset())->GetVariableName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TMVA::PDEFoam*) G__getstructoffset())->VarTransform((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((TMVA::PDEFoam*) G__getstructoffset())->VarTransform(*((vector<Float_t>*) G__int(libp->para[0])));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TMVA::PDEFoam*) G__getstructoffset())->VarTransformInvers((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((TMVA::PDEFoam*) G__getstructoffset())->VarTransformInvers(*((vector<Float_t>*) G__int(libp->para[0])));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->CheckAll((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->PrintCells();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMVA::PDEFoam*) G__getstructoffset())->CheckCells((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMVA::PDEFoam*) G__getstructoffset())->CheckCells();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->RemoveEmptyCell((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->PrintCellElements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->ReadStream(*(istream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMVA::PDEFoam*) G__getstructoffset())->PrintStream(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->ReadXML((void*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->AddXMLTo((void*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) ((TMVA::PDEFoam*) G__getstructoffset())->Project2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((TMVA::PDEFoam*) G__getstructoffset())->Project2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((TMVA::PDEFoam*) G__getstructoffset())->Project2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((TMVA::PDEFoam*) G__getstructoffset())->Project2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetProjectionCellValue((TMVA::PDEFoamCell*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (TMVA::ECellValue) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TMVA::PDEFoam*) G__getstructoffset())->Draw1Dim((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((TMVA::PDEFoam*) G__getstructoffset())->RootPlot2dim(*(TString*) libp->para[0].ref, *((string*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TMVA::PDEFoam*) G__getstructoffset())->RootPlot2dim(*(TString*) libp->para[0].ref, *((string*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TMVA::PDEFoam*) G__getstructoffset())->RootPlot2dim(*(TString*) libp->para[0].ref, *((string*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TMVA::PDEFoam*) G__getstructoffset())->RootPlot2dim(*(TString*) libp->para[0].ref, *((string*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetCellValue(*((vector<Float_t>*) G__int(libp->para[0])), (TMVA::ECellValue) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetCellDiscr(*((vector<Float_t>*) G__int(libp->para[0])), (TMVA::EKernel) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetCellDiscr(*((vector<Float_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetCellDensity(*((vector<Float_t>*) G__int(libp->para[0])), (TMVA::EKernel) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetCellDensity(*((vector<Float_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetAverageNeighborsValue(*((vector<Float_t>*) G__int(libp->para[0])), (TMVA::ECellValue) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetCellRegValue0(*((vector<Float_t>*) G__int(libp->para[0])), (TMVA::EKernel) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((TMVA::PDEFoam*) G__getstructoffset())->GetCellRegValue0(*((vector<Float_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((TMVA::PDEFoam*) G__getstructoffset())->GetProjectedRegValue(*((vector<Float_t>*) G__int(libp->para[0])), (TMVA::EKernel) G__int(libp->para[1])
, (TMVA::ETargetSelection) G__int(libp->para[2]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((TMVA::PDEFoam*) G__getstructoffset())->GetProjectedRegValue(*((vector<Float_t>*) G__int(libp->para[0])), (TMVA::EKernel) G__int(libp->para[1]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((TMVA::PDEFoam*) G__getstructoffset())->GetProjectedRegValue(*((vector<Float_t>*) G__int(libp->para[0])));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::PDEFoam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::PDEFoam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::PDEFoam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::PDEFoam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::PDEFoam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::PDEFoam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_376_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::PDEFoam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::PDEFoam G__TTMVAcLcLPDEFoam;
static int G__G__TMVA3_376_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::PDEFoam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::PDEFoam*) (soff+(sizeof(TMVA::PDEFoam)*i)))->~G__TTMVAcLcLPDEFoam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::PDEFoam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::PDEFoam*) (soff))->~G__TTMVAcLcLPDEFoam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_376_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::PDEFoam* dest = (TMVA::PDEFoam*) G__getstructoffset();
   *dest = *(TMVA::PDEFoam*) libp->para[0].ref;
   const TMVA::PDEFoam& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::BDTEventWrapper */
static int G__G__TMVA3_385_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::BDTEventWrapper* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::BDTEventWrapper((const TMVA::Event*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TMVA::BDTEventWrapper((const TMVA::Event*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLBDTEventWrapper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_385_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::BDTEventWrapper*) G__getstructoffset())->operator<(*(TMVA::BDTEventWrapper*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_385_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::BDTEventWrapper*) G__getstructoffset())->SetCumulativeWeight((Bool_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_385_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::BDTEventWrapper*) G__getstructoffset())->GetCumulativeWeight((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_385_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::BDTEventWrapper::SetVarIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_385_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMVA::BDTEventWrapper*) G__getstructoffset())->GetVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_385_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::BDTEventWrapper*) G__getstructoffset())->operator*());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_385_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::BDTEventWrapper* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::BDTEventWrapper(*(TMVA::BDTEventWrapper*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLBDTEventWrapper));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::BDTEventWrapper G__TTMVAcLcLBDTEventWrapper;
static int G__G__TMVA3_385_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::BDTEventWrapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::BDTEventWrapper*) (soff+(sizeof(TMVA::BDTEventWrapper)*i)))->~G__TTMVAcLcLBDTEventWrapper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::BDTEventWrapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::BDTEventWrapper*) (soff))->~G__TTMVAcLcLBDTEventWrapper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::CCTreeWrapper */
static int G__G__TMVA3_479_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::CCTreeWrapper* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::CCTreeWrapper((TMVA::DecisionTree*) G__int(libp->para[0]), (TMVA::SeparationBase*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TMVA::CCTreeWrapper((TMVA::DecisionTree*) G__int(libp->para[0]), (TMVA::SeparationBase*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_479_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((TMVA::CCTreeWrapper*) G__getstructoffset())->CheckEvent(*(TMVA::Event*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((TMVA::CCTreeWrapper*) G__getstructoffset())->CheckEvent(*(TMVA::Event*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_479_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::CCTreeWrapper*) G__getstructoffset())->TestTreeQuality((const TMVA::CCTreeWrapper::EventList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_479_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TMVA::CCTreeWrapper*) G__getstructoffset())->TestTreeQuality((const TMVA::DataSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_479_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::CCTreeWrapper*) G__getstructoffset())->PruneNode((TMVA::CCTreeWrapper::CCTreeNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_479_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::CCTreeWrapper*) G__getstructoffset())->InitTree((TMVA::CCTreeWrapper::CCTreeNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_479_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TMVA::CCTreeWrapper*) G__getstructoffset())->GetRoot());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_479_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::CCTreeWrapper* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::CCTreeWrapper(*(TMVA::CCTreeWrapper*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::CCTreeWrapper G__TTMVAcLcLCCTreeWrapper;
static int G__G__TMVA3_479_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::CCTreeWrapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::CCTreeWrapper*) (soff+(sizeof(TMVA::CCTreeWrapper)*i)))->~G__TTMVAcLcLCCTreeWrapper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::CCTreeWrapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::CCTreeWrapper*) (soff))->~G__TTMVAcLcLCCTreeWrapper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_479_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::CCTreeWrapper* dest = (TMVA::CCTreeWrapper*) G__getstructoffset();
   *dest = *(TMVA::CCTreeWrapper*) libp->para[0].ref;
   const TMVA::CCTreeWrapper& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::CCPruner */
static int G__G__TMVA3_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::CCPruner* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::CCPruner(
(TMVA::DecisionTree*) G__int(libp->para[0]), (const TMVA::CCPruner::EventList*) G__int(libp->para[1])
, (TMVA::SeparationBase*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TMVA::CCPruner(
(TMVA::DecisionTree*) G__int(libp->para[0]), (const TMVA::CCPruner::EventList*) G__int(libp->para[1])
, (TMVA::SeparationBase*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::CCPruner((TMVA::DecisionTree*) G__int(libp->para[0]), (const TMVA::CCPruner::EventList*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TMVA::CCPruner((TMVA::DecisionTree*) G__int(libp->para[0]), (const TMVA::CCPruner::EventList*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::CCPruner* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::CCPruner(
(TMVA::DecisionTree*) G__int(libp->para[0]), (const TMVA::DataSet*) G__int(libp->para[1])
, (TMVA::SeparationBase*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TMVA::CCPruner(
(TMVA::DecisionTree*) G__int(libp->para[0]), (const TMVA::DataSet*) G__int(libp->para[1])
, (TMVA::SeparationBase*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::CCPruner((TMVA::DecisionTree*) G__int(libp->para[0]), (const TMVA::DataSet*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TMVA::CCPruner((TMVA::DecisionTree*) G__int(libp->para[0]), (const TMVA::DataSet*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_481_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMVA::CCPruner*) G__getstructoffset())->SetPruneStrength((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMVA::CCPruner*) G__getstructoffset())->SetPruneStrength();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::CCPruner*) G__getstructoffset())->Optimize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TMVA::DecisionTreeNode*>* pobj;
         const vector<TMVA::DecisionTreeNode*> xobj = ((const TMVA::CCPruner*) G__getstructoffset())->GetOptimalPruneSequence();
         pobj = new vector<TMVA::DecisionTreeNode*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_481_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMVA::CCPruner*) G__getstructoffset())->GetOptimalQualityIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_481_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMVA::CCPruner*) G__getstructoffset())->GetOptimalPruneStrength());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_481_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::CCPruner* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::CCPruner(*(TMVA::CCPruner*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::CCPruner G__TTMVAcLcLCCPruner;
static int G__G__TMVA3_481_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::CCPruner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::CCPruner*) (soff+(sizeof(TMVA::CCPruner)*i)))->~G__TTMVAcLcLCCPruner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::CCPruner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::CCPruner*) (soff))->~G__TTMVAcLcLCCPruner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::CostComplexityPruneTool */
static int G__G__TMVA3_489_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::CostComplexityPruneTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::CostComplexityPruneTool((TMVA::SeparationBase*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TMVA::CostComplexityPruneTool((TMVA::SeparationBase*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TMVA::CostComplexityPruneTool[n];
       } else {
         p = new((void*) gvp) TMVA::CostComplexityPruneTool[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TMVA::CostComplexityPruneTool;
       } else {
         p = new((void*) gvp) TMVA::CostComplexityPruneTool;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_489_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::CostComplexityPruneTool* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::CostComplexityPruneTool(*(TMVA::CostComplexityPruneTool*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::CostComplexityPruneTool G__TTMVAcLcLCostComplexityPruneTool;
static int G__G__TMVA3_489_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::CostComplexityPruneTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::CostComplexityPruneTool*) (soff+(sizeof(TMVA::CostComplexityPruneTool)*i)))->~G__TTMVAcLcLCostComplexityPruneTool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::CostComplexityPruneTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::CostComplexityPruneTool*) (soff))->~G__TTMVAcLcLCostComplexityPruneTool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__TMVA3_489_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::CostComplexityPruneTool* dest = (TMVA::CostComplexityPruneTool*) G__getstructoffset();
   *dest = *(TMVA::CostComplexityPruneTool*) libp->para[0].ref;
   const TMVA::CostComplexityPruneTool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMVA::SVEvent */
static int G__G__TMVA3_490_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::SVEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::SVEvent[n];
     } else {
       p = new((void*) gvp) TMVA::SVEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TMVA::SVEvent;
     } else {
       p = new((void*) gvp) TMVA::SVEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::SVEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::SVEvent((const TMVA::Event*) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) TMVA::SVEvent((const TMVA::Event*) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::SVEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::SVEvent(
(const vector<Float_t>*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) TMVA::SVEvent(
(const vector<Float_t>*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMVA::SVEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TMVA::SVEvent(
(const vector<Float_t>*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (const Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) TMVA::SVEvent(
(const vector<Float_t>*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (const Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->SetAlpha((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->SetAlpha_p((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->SetErrorCache((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->SetIsShrinked((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->SetLine((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->SetIdx((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->SetNs((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->UpdateErrorCache((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TMVA::SVEvent*) G__getstructoffset())->GetDataVector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMVA::SVEvent*) G__getstructoffset())->GetAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMVA::SVEvent*) G__getstructoffset())->GetAlpha_p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMVA::SVEvent*) G__getstructoffset())->GetDeltaAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMVA::SVEvent*) G__getstructoffset())->GetErrorCache());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::SVEvent*) G__getstructoffset())->GetTypeFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::SVEvent*) G__getstructoffset())->GetNVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMVA::SVEvent*) G__getstructoffset())->GetIdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const TMVA::SVEvent*) G__getstructoffset())->GetLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TMVA::SVEvent*) G__getstructoffset())->GetNs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMVA::SVEvent*) G__getstructoffset())->GetCweight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TMVA::SVEvent*) G__getstructoffset())->GetTarget());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::SVEvent*) G__getstructoffset())->IsInI0a());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::SVEvent*) G__getstructoffset())->IsInI0b());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::SVEvent*) G__getstructoffset())->IsInI0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::SVEvent*) G__getstructoffset())->IsInI1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::SVEvent*) G__getstructoffset())->IsInI2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMVA::SVEvent*) G__getstructoffset())->IsInI3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TMVA::SVEvent*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->PrintData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMVA::SVEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SVEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMVA::SVEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMVA::SVEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMVA::SVEvent*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMVA::SVEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SVEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::SVEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMVA::SVEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__TMVA3_490_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMVA::SVEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__TMVA3_490_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMVA::SVEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMVA::SVEvent(*(TMVA::SVEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMVA::SVEvent G__TTMVAcLcLSVEvent;
static int G__G__TMVA3_490_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TMVA::SVEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMVA::SVEvent*) (soff+(sizeof(TMVA::SVEvent)*i)))->~G__TTMVAcLcLSVEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TMVA::SVEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TMVA::SVEvent*) (soff))->~G__TTMVAcLcLSVEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TMVA */

/* TMVA::Config */

/* TMVA::Config::VariablePlotting */

/* TMVA::Config::IONames */

/* TMVA::KDEKernel */

/* TMVA::Interval */

/* TMVA::IFitterTarget */

/* TMVA::FitterBase */

/* TMVA::MCFitter */

/* TMVA::GeneticFitter */

/* TMVA::SimulatedAnnealingFitter */

/* TMVA::MinuitWrapper */

/* TMVA::MinuitFitter */

/* TMVA::IMetric */

/* TMVA::MetricEuler */

/* TMVA::MetricManhattan */

/* TMVA::SeedDistance */

/* TMVA::PDEFoamVect */

/* TMVA::PDEFoamCell */

/* TMVA::PDEFoamDistr */

/* TMVA::PDEFoam */

/* TMVA::BDTEventWrapper */

/* TMVA::CCTreeWrapper */

/* TMVA::CCPruner */

/* TMVA::CostComplexityPruneTool */

/* TMVA::SVEvent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__TMVA3 {
 public:
  G__Sizep2memfuncG__TMVA3(): p(&G__Sizep2memfuncG__TMVA3::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__TMVA3::*p)();
};

size_t G__get_sizep2memfuncG__TMVA3()
{
  G__Sizep2memfuncG__TMVA3 a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__TMVA3() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase))) {
     TMVA::FitterBase *G__Lderived;
     G__Lderived=(TMVA::FitterBase*)0x1000;
     {
       TMVA::Configurable *G__Lpbase=(TMVA::Configurable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigurable),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter))) {
     TMVA::MCFitter *G__Lderived;
     G__Lderived=(TMVA::MCFitter*)0x1000;
     {
       TMVA::FitterBase *G__Lpbase=(TMVA::FitterBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMVA::Configurable *G__Lpbase=(TMVA::Configurable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigurable),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter))) {
     TMVA::GeneticFitter *G__Lderived;
     G__Lderived=(TMVA::GeneticFitter*)0x1000;
     {
       TMVA::FitterBase *G__Lpbase=(TMVA::FitterBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMVA::Configurable *G__Lpbase=(TMVA::Configurable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigurable),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter))) {
     TMVA::SimulatedAnnealingFitter *G__Lderived;
     G__Lderived=(TMVA::SimulatedAnnealingFitter*)0x1000;
     {
       TMVA::FitterBase *G__Lpbase=(TMVA::FitterBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMVA::Configurable *G__Lpbase=(TMVA::Configurable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigurable),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper))) {
     TMVA::MinuitWrapper *G__Lderived;
     G__Lderived=(TMVA::MinuitWrapper*)0x1000;
     {
       TMinuit *G__Lpbase=(TMinuit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper),G__get_linked_tagnum(&G__G__TMVA3LN_TMinuit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper),G__get_linked_tagnum(&G__G__TMVA3LN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitFitter))) {
     TMVA::MinuitFitter *G__Lderived;
     G__Lderived=(TMVA::MinuitFitter*)0x1000;
     {
       TMVA::FitterBase *G__Lpbase=(TMVA::FitterBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMVA::Configurable *G__Lpbase=(TMVA::Configurable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigurable),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TMVA::IFitterTarget *G__Lpbase=(TMVA::IFitterTarget*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitFitter),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIFitterTarget),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMinuit))) {
     TMinuit *G__Lderived;
     G__Lderived=(TMinuit*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMinuit),G__get_linked_tagnum(&G__G__TMVA3LN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMinuit),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler))) {
     TMVA::MetricEuler *G__Lderived;
     G__Lderived=(TMVA::MetricEuler*)0x1000;
     {
       TMVA::IMetric *G__Lpbase=(TMVA::IMetric*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIMetric),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan))) {
     TMVA::MetricManhattan *G__Lderived;
     G__Lderived=(TMVA::MetricManhattan*)0x1000;
     {
       TMVA::IMetric *G__Lpbase=(TMVA::IMetric*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIMetric),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect))) {
     TMVA::PDEFoamVect *G__Lderived;
     G__Lderived=(TMVA::PDEFoamVect*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell))) {
     TMVA::PDEFoamCell *G__Lderived;
     G__Lderived=(TMVA::PDEFoamCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr))) {
     TMVA::PDEFoamDistr *G__Lderived;
     G__Lderived=(TMVA::PDEFoamDistr*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam))) {
     TMVA::PDEFoam *G__Lderived;
     G__Lderived=(TMVA::PDEFoam*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam),G__get_linked_tagnum(&G__G__TMVA3LN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool))) {
     TMVA::CostComplexityPruneTool *G__Lderived;
     G__Lderived=(TMVA::CostComplexityPruneTool*)0x1000;
     {
       TMVA::IPruneTool *G__Lpbase=(TMVA::IPruneTool*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool),G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIPruneTool),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__TMVA3() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__TMVA3LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__TMVA3LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__TMVA3LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMVAVersion_t",104,-1,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVA));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TMVA::Types::EMVA>",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplETStringcOTMVAcLcLTypescLcLEMVAcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLTypescLcLEMVAgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TMVA::Types::EMVA,less<TString> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplETStringcOTMVAcLcLTypescLcLEMVAcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLTypescLcLEMVAgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<EMsgType,std::string>",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplETMVAcLcLEMsgTypecOstringcOlesslETMVAcLcLEMsgTypegRcOallocatorlEpairlEconstsPTMVAcLcLEMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TMVA::EMsgType,string>",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplETMVAcLcLEMsgTypecOstringcOlesslETMVAcLcLEMsgTypegRcOallocatorlEpairlEconstsPTMVAcLcLEMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TMVA::EMsgType,string,less<TMVA::EMsgType> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplETMVAcLcLEMsgTypecOstringcOlesslETMVAcLcLEMsgTypegRcOallocatorlEpairlEconstsPTMVAcLcLEMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Option<Bool_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLOptionlEboolgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVA));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<bool>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEboolcOallocatorlEboolgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEboolcOallocatorlEboolgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEboolcOallocatorlEboolgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEboolcOallocatorlEboolgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEboolcOallocatorlEboolgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Option<Bool_t*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLOptionlEboolmUgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVA));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Option<Float_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLOptionlEfloatgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVA));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<float>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMVA::Interval*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<double>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<Double_t> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const TMVA::BinarySearchTreeNode*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMVA::Event*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Double_t,const TMVA::Event*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_pairlEdoublecOconstsPTMVAcLcLEventmUgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<Double_t,const TMVA::Event*> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,const TMVA::Event*> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatmUcOallocatorlEfloatmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatmUcOallocatorlEfloatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatmUcOallocatorlEfloatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatmUcOallocatorlEfloatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatmUcOallocatorlEfloatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<float*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatmUcOallocatorlEfloatmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMVA::PDEFoamCell*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PDEFoamCell*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<Event*>*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<TMVA::Event*,allocator<TMVA::Event*> >*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Results*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TMVA::Results*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TMVA::Results*,less<TString> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_maplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::map<TString,Results*> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<map<TString,TMVA::Results*,less<TString>,allocator<pair<const TString,TMVA::Results*> > > >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Char_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEcharcOallocatorlEchargRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<char>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEcharcOallocatorlEchargRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Float_t,Long64_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_pairlEfloatcOlongsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<Float_t,Long64_t>*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<float,long long>*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::pair<Float_t,Long64_t>*> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<pair<float,long long>*,allocator<pair<float,long long>*> > >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Long64_t>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<long long>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<Long64_t> >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<long long,allocator<long long> > >",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Event*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("EventList",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Event*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("EventList",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMVA::DecisionTreeNode*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Event*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIPruneTool));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DecisionTreeNode*>",117,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR),0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TMVA */
static void G__setup_memvarTMVA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVA));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEMsgType),-1,-2,1,"kDEBUG=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEMsgType),-1,-2,1,"kVERBOSE=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEMsgType),-1,-2,1,"kINFO=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEMsgType),-1,-2,1,"kWARNING=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEMsgType),-1,-2,1,"kERROR=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEMsgType),-1,-2,1,"kFATAL=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEMsgType),-1,-2,1,"kSILENT=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEFoamType),-1,-2,1,"kSeparate=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEFoamType),-1,-2,1,"kDiscr=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEFoamType),-1,-2,1,"kMonoTarget=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEFoamType),-1,-2,1,"kMultiTarget=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLTDensityCalc),-1,-2,1,"kEVENT_DENSITY=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLTDensityCalc),-1,-2,1,"kDISCRIMINATOR=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLTDensityCalc),-1,-2,1,"kTARGET=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEKernel),-1,-2,1,"kNone=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEKernel),-1,-2,1,"kGaus=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEKernel),-1,-2,1,"kLinN=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLETargetSelection),-1,-2,1,"kMean=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLETargetSelection),-1,-2,1,"kMpv=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellType),-1,-2,1,"kAll=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellType),-1,-2,1,"kActive=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellType),-1,-2,1,"kInActive=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kNev=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kDiscriminator=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kDiscriminatorError=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kTarget0=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kTarget0Error=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kMeanValue=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kRms=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kRmsOvMean=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLECellValue),-1,-2,1,"kDensity=8",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::Config */
static void G__setup_memvarTMVAcLcLConfig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig));
   { TMVA::Config *p; p=(TMVA::Config*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fVariablePlotting)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting),-1,-1,1,"fVariablePlotting=",0,"Customisable plotting properties");
   G__memvar_setup((void*)((long)(&p->fIONames)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames),-1,-1,1,"fIONames=",0,"Customisable weight file properties");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig),-1,-2,4,"fgConfigPtr=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseColoredConsole=",0,"coloured standard output");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSilent=",0,"no output at all");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fWriteOptionsReference=",0,"if set true: Configurable objects write file with option reference");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDrawProgressBar=",0,"draw progress bar to indicate training evolution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger),-1,-1,4,"fLogger=",0,"message logger");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::Config::VariablePlotting */
static void G__setup_memvarTMVAcLcLConfigcLcLVariablePlotting(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting));
   { TMVA::Config::VariablePlotting *p; p=(TMVA::Config::VariablePlotting*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fTimesRMS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fTimesRMS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fNbins1D)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fNbins1D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fNbins2D)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fNbins2D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMaxNumOfAllowedVariablesForScatterPlots)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fMaxNumOfAllowedVariablesForScatterPlots=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fNbinsXOfROCCurve)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fNbinsXOfROCCurve=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::Config::IONames */
static void G__setup_memvarTMVAcLcLConfigcLcLIONames(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames));
   { TMVA::Config::IONames *p; p=(TMVA::Config::IONames*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fWeightFileDir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TString),-1,-1,1,"fWeightFileDir=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fWeightFileExtension)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TString),-1,-1,1,"fWeightFileExtension=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fOptionsReferenceFileDir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TString),-1,-1,1,"fOptionsReferenceFileDir=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::KDEKernel */
static void G__setup_memvarTMVAcLcLKDEKernel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernel));
   { TMVA::KDEKernel *p; p=(TMVA::KDEKernel*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelType),-1,-2,1,"kNone=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelType),-1,-2,1,"kGauss=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelIter),-1,-2,1,"kNonadaptiveKDE=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelIter),-1,-2,1,"kAdaptiveKDE=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelBorder),-1,-2,1,"kNoTreatment=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelBorder),-1,-2,1,"kKernelRenorm=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelBorder),-1,-2,1,"kSampleMirror=3",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigma=",0,"Width of the Kernel function");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelIter),-1,-1,4,"fIter=",0,"iteration number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLowerEdge=",0,"the lower edge of the PDF");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUpperEdge=",0,"the upper edge of the PDF");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFineFactor=",0,"fine tuning factor for Adaptive KDE: factor to multiply the \"width\" of the Kernel function");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TF1),-1,-1,4,"fKernel_integ=",0,"the integral of the Kernel function");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelBorder),-1,-1,4,"fKDEborder=",0,"The method to take care about \"border\" effects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TH1F),-1,-1,4,"fHist=",0,"copy of input histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TH1F),-1,-1,4,"fFirstIterHist=",0,"histogram to be filled in the hidden iteration");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TH1F),-1,-1,4,"fSigmaHist=",0,"contains the Sigmas Widths for adaptive KDE ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHiddenIteration=",0,"Defines if whats currently running is the ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger),-1,-1,4,"fLogger=",0,"message logger");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::Interval */
static void G__setup_memvarTMVAcLcLInterval(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLInterval));
   { TMVA::Interval *p; p=(TMVA::Interval*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMax=",0,"the constraints of the Interval");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNbins=",0,"when >0 : number of bins (discrete interval); when =0 continuous interval");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger),-1,-1,4,"fLogger=",0,"message logger");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::IFitterTarget */
static void G__setup_memvarTMVAcLcLIFitterTarget(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIFitterTarget));
   { TMVA::IFitterTarget *p; p=(TMVA::IFitterTarget*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::FitterBase */
static void G__setup_memvarTMVAcLcLFitterBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase));
   { TMVA::FitterBase *p; p=(TMVA::FitterBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIFitterTarget),-1,-1,2,"fFitterTarget=",0,"pointer to target of fitting procedure");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgR),G__defined_typename("vector<TMVA::Interval*>"),-1,2,"fRanges=",0,"allowed intervals");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNpars=",0,"number of parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger),-1,-1,2,"fLogger=",0,"message logger");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TString),-1,-1,2,"fClassName=",0,"remove TMVA:: from TObject name");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::MCFitter */
static void G__setup_memvarTMVAcLcLMCFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter));
   { TMVA::MCFitter *p; p=(TMVA::MCFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSamples=",0,"number of MC samples");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigma=",0,"new samples are generated randomly with a gaussian probability with fSigma around the current best value");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fSeed=",0,"Seed for the random generator (0 takes random seeds)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::GeneticFitter */
static void G__setup_memvarTMVAcLcLGeneticFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter));
   { TMVA::GeneticFitter *p; p=(TMVA::GeneticFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCycles=",0,"number of (nearly) independent calculation cycles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNsteps=",0,"convergence criteria: if no improvements > fConvCrit was achieved within the last fNsteps: cycle has \"converged\"");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPopSize=",0,"number of individuals to start with");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSC_steps=",0,"regulates how strong the mutations for the coordinates are: if within fSC_steps there were more than...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSC_rate=",0,"... fSC_rate improvements, than multiply the sigma of the gaussion which defines how the random numbers are generated ...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSC_factor=",0,"... with fSC_factor; if there were less improvements: divide by that factor; if there were exactly fSC_rate improvements, dont change anything");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fConvCrit=",0,"improvements bigger than fConvCrit are counted as \"improvement\"");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSaveBestFromGeneration=",0,"store the best individuals from one generation (these are included as \"hints\" in the last cycle of GA calculation)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSaveBestFromCycle=",0,"store the best individuals from one cycle (these are included as \"hints\" in the last cycle of GA calculation)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTrim=",0,"take care, that the number of individuals is less fPopSize (trimming is done after the fitness of the individuals is assessed)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fSeed=",0,"Seed for the random generator (0 takes random seeds)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::SimulatedAnnealingFitter */
static void G__setup_memvarTMVAcLcLSimulatedAnnealingFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter));
   { TMVA::SimulatedAnnealingFitter *p; p=(TMVA::SimulatedAnnealingFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaxCalls=",0,"max number of FCN calls");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fInitialTemperature=",0,"initial temperature (depends on FCN)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinTemperature=",0,"minimum temperature before SA quit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEps=",0,"relative required FCN accuracy at minimum");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TString),-1,-1,4,"fKernelTemperatureS=",0,"string just to set fKernelTemperature");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTemperatureScale=",0,"how fast temperature change");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAdaptiveSpeed=",0,"how fast temperature change in adaptive (in adaptive two variables describe");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTemperatureAdaptiveStep=",0,"used to calculate InitialTemperature if fUseDefaultTemperature");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseDefaultScale=",0,"if TRUE, SA calculates its own TemperatureScale");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseDefaultTemperature=",0,"if TRUE, SA calculates its own InitialTemperature (MinTemperautre)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::MinuitWrapper */
static void G__setup_memvarTMVAcLcLMinuitWrapper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper));
   { TMVA::MinuitWrapper *p; p=(TMVA::MinuitWrapper*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIFitterTarget),-1,-1,4,"fFitterTarget=",0,"fitter Target");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fParameters=",0,"vector holding the current parameters ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumPar=",0,"number of parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::MinuitFitter */
static void G__setup_memvarTMVAcLcLMinuitFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitFitter));
   { TMVA::MinuitFitter *p; p=(TMVA::MinuitFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper),-1,-1,2,"fMinWrap=",0,"holds a wrapper around TMinuit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fErrorLevel=",0,"minuit error level");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPrintLevel=",0,"minuit printout level");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFitStrategy=",0,"minuit strategy level");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPrintWarnings=",0,"minuit warnings level");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseImprove=",0,"flag for 'IMPROVE' use");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseMinos=",0,"flag for 'MINOS' use");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBatch=",0,"batch mode");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaxCalls=",0,"(approximate) maximum number of function calls");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTolerance=",0,"tolerance to the function value at the minimum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::IMetric */
static void G__setup_memvarTMVAcLcLIMetric(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIMetric));
   { TMVA::IMetric *p; p=(TMVA::IMetric*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,2,"fParameters=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::MetricEuler */
static void G__setup_memvarTMVAcLcLMetricEuler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler));
   { TMVA::MetricEuler *p; p=(TMVA::MetricEuler*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::MetricManhattan */
static void G__setup_memvarTMVAcLcLMetricManhattan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan));
   { TMVA::MetricManhattan *p; p=(TMVA::MetricManhattan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::SeedDistance */
static void G__setup_memvarTMVAcLcLSeedDistance(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeedDistance));
   { TMVA::SeedDistance *p; p=(TMVA::SeedDistance*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<Double_t> >"),-1,2,"fSeeds=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,2,"fDistances=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIMetric),-1,-1,2,"fMetric=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::PDEFoamVect */
static void G__setup_memvarTMVAcLcLPDEFoamVect(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect));
   { TMVA::PDEFoamVect *p; p=(TMVA::PDEFoamVect*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDim=",0,"Dimension");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCoords=",0,"[fDim] Coordinates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger),-1,-1,2,"fLogger=",0,"! message logger");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::PDEFoamCell */
static void G__setup_memvarTMVAcLcLPDEFoamCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell));
   { TMVA::PDEFoamCell *p; p=(TMVA::PDEFoamCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fDim=",0,"Dimension of the vector space");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSerial=",0,"Serial number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStatus=",0,"Status (active, inactive)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TRef),-1,-1,4,"fParent=",0,"Pointer to parent cell");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TRef),-1,-1,4,"fDaught0=",0,"Pointer to daughter 1");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TRef),-1,-1,4,"fDaught1=",0,"Pointer to daughter 2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXdiv=",0,"Factor for division");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBest=",0,"Best Edge for division");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVolume=",0,"Cartesian Volume of cell");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIntegral=",0,"Integral over cell (estimate from exploration)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDrive=",0,"Driver  integral, only for cell build-up");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TObject),-1,-1,4,"fElement=",0,"may set by the user to save some data in this cell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::PDEFoamDistr */
static void G__setup_memvarTMVAcLcLPDEFoamDistr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr));
   { TMVA::PDEFoamDistr *p; p=(TMVA::PDEFoamDistr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDim=",0,"number of dimensions");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXmin=",0,"[fDim] minimal value of phase space in all dimension");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXmax=",0,"[fDim] maximal value of phase space in all dimension");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVolFrac=",0,"volume fraction (with respect to total phase space");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLBinarySearchTree),-1,-1,4,"fBst=",0,"Binary tree to find events within a volume");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLTDensityCalc),-1,-1,4,"fDensityCalc=",0,"method of density calculation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSignalClass=",0,"TODO: intermediate solution to keep IsSignal() of Event working. TODO: remove IsSignal() from Event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBackgroundClass=",0,"TODO: intermediate solution to keep IsSignal() of Event working. TODO: remove IsSignal() from Event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger),-1,-1,2,"fLogger=",0,"! message logger");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::PDEFoam */
static void G__setup_memvarTMVAcLcLPDEFoam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam));
   { TMVA::PDEFoam *p; p=(TMVA::PDEFoam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TString),-1,-1,2,"fName=",0,"Name of a given instance of the FOAM class");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDim=",0,"Dimension of the integration/simulation space");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNCells=",0,"Maximum number of cells");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNBin=",0,"No. of bins in the edge histogram for cell MC exploration");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSampl=",0,"No. of MC events, when dividing (exploring) cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEvPerBin=",0,"Maximum number of effective (wt=1) events per bin");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaskDiv=",0,"! [fDim] Dynamic Mask for cell division");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fInhiDiv=",0,"! [fDim] Flags for inhibiting cell division");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNoAct=",0,"Number of active cells");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLastCe=",0,"Index of the last cell");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell),-1,-1,2,"fCells=",0,"[fNCells] Array of ALL cells");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TObjArray),-1,-1,2,"fHistEdg=",0,"Histograms of wt, one for each cell edge");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRvec=",0,"[fDim] random number vector from r.n. generator fDim+1 maximum elements");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TRandom3),-1,-1,2,"fPseRan=",0,"Pointer to user-defined generator of pseudorandom numbers");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAlpha=",0,"[fDim] Internal parameters of the hyperrectangle");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEFoamType),-1,-1,2,"fFoamType=",0,"type of foam");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXmin=",0,"[fDim] minimum for variable transform");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXmax=",0,"[fDim] maximum for variable transform");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNElements=",0,"number of variables in every cell");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fCutNmin=",0,"true: activate cut on minimal number of events in cell");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNmin=",0,"minimal number of events in cell to split cell");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fCutRMSmin=",0,"true: peek cell with max. RMS for next split");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRMSmin=",0,"activate cut: minimal RMS in cell to split cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVolFrac=",0,"volume fraction (with respect to total phase space");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr),-1,-1,2,"fDistr=",0,"! distribution of training events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLTimer),-1,-1,2,"fTimer=",0,"timer for graphical output");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TObjArray),-1,-1,2,"fVariableNames=",0,"collection of all variable names");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSignalClass=",0,"TODO: intermediate solution to keep IsSignal() of Event working. TODO: remove IsSignal() from Event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBackgroundClass=",0,"TODO: intermediate solution to keep IsSignal() of Event working. TODO: remove IsSignal() from Event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger),-1,-1,2,"fLogger=",0,"! message logger");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMVA::BDTEventWrapper */
static void G__setup_memvarTMVAcLcLBDTEventWrapper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLBDTEventWrapper));
   { TMVA::BDTEventWrapper *p; p=(TMVA::BDTEventWrapper*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fVarIndex=",0,"index of the variable to sort on");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEvent),-1,-1,4,"fEvent=",0,"pointer to the event");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBkgWeight=",0,"cumulative background weight for splitting");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigWeight=",0,"same for the signal weights");
   }
   G__tag_memvar_reset();
}


   /* TMVA::CCTreeWrapper */
static void G__setup_memvarTMVAcLcLCCTreeWrapper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper));
   { TMVA::CCTreeWrapper *p; p=(TMVA::CCTreeWrapper*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeparationBase),-1,-1,4,"fQualityIndex=",0,"! pointer to the used quality index calculator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLDecisionTree),-1,-1,4,"fDTParent=",0,"! pointer to underlying DecisionTree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrappercLcLCCTreeNode),-1,-1,4,"fRoot=",0,"! the root node of the (wrapped) decision Tree");
   }
   G__tag_memvar_reset();
}


   /* TMVA::CCPruner */
static void G__setup_memvarTMVAcLcLCCPruner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner));
   { TMVA::CCPruner *p; p=(TMVA::CCPruner*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAlpha=",0,"! regularization parameter in CC pruning");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR),G__defined_typename("EventList"),-1,4,"fValidationSample=",0,"! the event sample to select the optimally-pruned tree");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLDataSet),-1,-1,4,"fValidationDataSet=",0,"! the event sample to select the optimally-pruned tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeparationBase),-1,-1,4,"fQualityIndex=",0,"! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fOwnQIndex=",0,"! flag indicates if fQualityIndex is owned by this");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLDecisionTree),-1,-1,4,"fTree=",0,"! (pruned) decision tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR),G__defined_typename("vector<TMVA::DecisionTreeNode*>"),-1,4,"fPruneSequence=",0,"! map of weakest links (i.e., branches to prune) -> pruning index");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,4,"fPruneStrengthList=",0,"! map of alpha -> pruning index");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,4,"fQualityIndexList=",0,"! map of R(T) -> pruning index");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOptimalK=",0,"! index of the optimal tree in the pruned tree sequence");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDebug=",0,"! debug flag");
   }
   G__tag_memvar_reset();
}


   /* TMVA::CostComplexityPruneTool */
static void G__setup_memvarTMVAcLcLCostComplexityPruneTool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool));
   { TMVA::CostComplexityPruneTool *p; p=(TMVA::CostComplexityPruneTool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeparationBase),-1,-1,4,"fQualityIndexTool=",0,"! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR),-1,-1,4,"fPruneSequence=",0,"! map of weakest links (i.e., branches to prune) -> pruning index");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fPruneStrengthList=",0,"! map of alpha -> pruning index");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fQualityIndexList=",0,"! map of R(T) -> pruning index");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOptimalK=",0,"! the optimal index of the prune sequence");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger),-1,-1,4,"fLogger=",0,"! output stream to save logging information");
   }
   G__tag_memvar_reset();
}


   /* TMVA::SVEvent */
static void G__setup_memvarTMVAcLcLSVEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent));
   { TMVA::SVEvent *p; p=(TMVA::SVEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,4,"fDataVector=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-1,4,"fCweight=",0,"svm cost weight");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAlpha=",0,"lagrange multiplier");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAlpha_p=",0,"lagrange multiplier");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fErrorCache=",0,"optimization parameter");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNVar=",0,"number of variables");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"fTypeFlag=",0,"is sig or bkg - svm requieres 1 for sig and -1 for bkg");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdx=",0,"index flag");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNs=",0,"documentation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIsShrinked=",0,"shrinking flag, see documentation");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLine=",0,"pointer to column of kerenl matrix ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-1,4,"fTarget=",0,"regression target");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__TMVA3LN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__TMVA3() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTMVA(void) {
   /* TMVA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVA));
   G__memfunc_setup("gConfig",701,G__G__TMVA3_106_0_1, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (TMVA::Config& (*)())(&TMVA::gConfig) ), 0);
   G__memfunc_setup("operator<<",996,G__G__TMVA3_106_0_2, 117, G__get_linked_tagnum(&G__G__TMVA3LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'TMVA::Node' - 11 - node", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const TMVA::Node&))(&TMVA::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__G__TMVA3_106_0_3, 117, G__get_linked_tagnum(&G__G__TMVA3LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os U 'TMVA::Node' - 10 - node", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const TMVA::Node*))(&TMVA::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__G__TMVA3_106_0_4, 117, G__get_linked_tagnum(&G__G__TMVA3LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'TMVA::BinaryTree' - 11 - tree", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const TMVA::BinaryTree&))(&TMVA::operator<<) ), 0);
   G__memfunc_setup("operator>>",1000,G__G__TMVA3_106_0_5, 117, G__get_linked_tagnum(&G__G__TMVA3LN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 2, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - istr u 'TMVA::BinaryTree' - 1 - tree", (char*)NULL, (void*) G__func2void( (istream& (*)(istream&, TMVA::BinaryTree&))(&TMVA::operator>>) ), 0);
   G__memfunc_setup("operator<<",996,G__G__TMVA3_106_0_6, 117, G__get_linked_tagnum(&G__G__TMVA3LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'TMVA::Event' - 11 - event", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const TMVA::Event&))(&TMVA::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__G__TMVA3_106_0_7, 117, G__get_linked_tagnum(&G__G__TMVA3LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'TMVA::PDEFoam' - 11 - pdefoam", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const TMVA::PDEFoam&))(&TMVA::operator<<) ), 0);
   G__memfunc_setup("operator>>",1000,G__G__TMVA3_106_0_8, 117, G__get_linked_tagnum(&G__G__TMVA3LN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 2, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - istr u 'TMVA::PDEFoam' - 1 - pdefoam", (char*)NULL, (void*) G__func2void( (istream& (*)(istream&, TMVA::PDEFoam&))(&TMVA::operator>>) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLConfig(void) {
   /* TMVA::Config */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig));
   G__memfunc_setup("Instance",821,G__G__TMVA3_108_0_1, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TMVA::Config& (*)())(&TMVA::Config::Instance) ), 0);
   G__memfunc_setup("DestroyInstance",1567,G__G__TMVA3_108_0_2, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::Config::DestroyInstance) ), 0);
   G__memfunc_setup("UseColor",812,G__G__TMVA3_108_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseColor",1112,G__G__TMVA3_108_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - uc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSilent",811,G__G__TMVA3_108_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSilent",923,G__G__TMVA3_108_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteOptionsReference",2182,G__G__TMVA3_108_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWriteOptionsReference",2482,G__G__TMVA3_108_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawProgressBar",1528,G__G__TMVA3_108_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDrawProgressBar",1828,G__G__TMVA3_108_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVariablePlotting",1943,G__G__TMVA3_108_0_11, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIONames",940,G__G__TMVA3_108_0_12, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Config",598,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger), -1, 1, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_108_0_15, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::Config::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_108_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::Config::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_108_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::Config::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_108_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::Config::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__TMVA3_108_0_19, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__TMVA3_108_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__TMVA3_108_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_108_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_108_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::Config::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_108_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::Config::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_108_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::Config::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_108_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::Config::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Config", 598, G__G__TMVA3_108_0_27, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig), -1, 0, 1, 1, 1, 0, "u 'TMVA::Config' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_108_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig), -1, 1, 1, 1, 1, 0, "u 'TMVA::Config' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLConfigcLcLVariablePlotting(void) {
   /* TMVA::Config::VariablePlotting */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting));
   // automatic default constructor
   G__memfunc_setup("VariablePlotting", 1655, G__G__TMVA3_109_0_1, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("VariablePlotting", 1655, G__G__TMVA3_109_0_2, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting), -1, 0, 1, 1, 1, 0, "u 'TMVA::Config::VariablePlotting' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~VariablePlotting", 1781, G__G__TMVA3_109_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_109_0_4, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting), -1, 1, 1, 1, 1, 0, "u 'TMVA::Config::VariablePlotting' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLConfigcLcLIONames(void) {
   /* TMVA::Config::IONames */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames));
   // automatic default constructor
   G__memfunc_setup("IONames", 652, G__G__TMVA3_110_0_1, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("IONames", 652, G__G__TMVA3_110_0_2, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames), -1, 0, 1, 1, 1, 0, "u 'TMVA::Config::IONames' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~IONames", 778, G__G__TMVA3_110_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_110_0_4, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames), -1, 1, 1, 1, 1, 0, "u 'TMVA::Config::IONames' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLKDEKernel(void) {
   /* TMVA::KDEKernel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernel));
   G__memfunc_setup("KDEKernel",821,G__G__TMVA3_114_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernel), -1, 0, 6, 1, 1, 0, 
"i 'TMVA::KDEKernel::EKernelIter' - 0 'kNonadaptiveKDE' kiter U 'TH1' - 10 '0' hist "
"f - 'Float_t' 0 '0.' lower_edge f - 'Float_t' 0 '1.' upper_edge "
"i 'TMVA::KDEKernel::EKernelBorder' - 0 'kNoTreatment' kborder f - 'Float_t' 0 '1.' FineFactor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinKernelIntegral",2000,G__G__TMVA3_114_0_2, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - lowr f - 'Float_t' 0 - highr "
"f - 'Float_t' 0 - mean i - 'Int_t' 0 - binnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetKernelType",1327,G__G__TMVA3_114_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TMVA::KDEKernel::EKernelType' - 0 'kGauss' ktype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__G__TMVA3_114_0_4, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger), -1, 1, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_114_0_6, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::KDEKernel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_114_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::KDEKernel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_114_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::KDEKernel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_114_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::KDEKernel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__TMVA3_114_0_10, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__TMVA3_114_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__TMVA3_114_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_114_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_114_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::KDEKernel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_114_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::KDEKernel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_114_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::KDEKernel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_114_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::KDEKernel::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KDEKernel", 821, G__G__TMVA3_114_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernel), -1, 0, 1, 1, 1, 0, "u 'TMVA::KDEKernel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KDEKernel", 947, G__G__TMVA3_114_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_114_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernel), -1, 1, 1, 1, 1, 0, "u 'TMVA::KDEKernel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLInterval(void) {
   /* TMVA::Interval */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLInterval));
   G__memfunc_setup("Interval",837,G__G__TMVA3_119_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLInterval), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max "
"i - 'Int_t' 0 '0' nbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Interval",837,G__G__TMVA3_119_0_2, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLInterval), -1, 0, 1, 1, 1, 0, "u 'TMVA::Interval' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMin",580,G__G__TMVA3_119_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__G__TMVA3_119_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWidth",800,G__G__TMVA3_119_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbins",794,G__G__TMVA3_119_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMean",673,G__G__TMVA3_119_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRndm",689,G__G__TMVA3_119_0_8, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'TRandom3' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElement",1002,G__G__TMVA3_119_0_9, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMax",594,G__G__TMVA3_119_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMin",592,G__G__TMVA3_119_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger), -1, 1, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_119_0_13, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::Interval::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_119_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::Interval::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_119_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::Interval::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_119_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::Interval::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__TMVA3_119_0_17, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__TMVA3_119_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__TMVA3_119_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_119_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_119_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::Interval::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_119_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::Interval::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_119_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::Interval::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_119_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::Interval::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Interval", 963, G__G__TMVA3_119_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_119_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLInterval), -1, 1, 1, 1, 1, 0, "u 'TMVA::Interval' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLIFitterTarget(void) {
   /* TMVA::IFitterTarget */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIFitterTarget));
   G__memfunc_setup("EstimatorFunction",1790,G__G__TMVA3_182_0_2, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - parameters", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ProgressNotifier",1685,G__G__TMVA3_182_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__TMVA3_182_0_4, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::IFitterTarget::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_182_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::IFitterTarget::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_182_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::IFitterTarget::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_182_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::IFitterTarget::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__TMVA3_182_0_8, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__TMVA3_182_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__TMVA3_182_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_182_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_182_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::IFitterTarget::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_182_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::IFitterTarget::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_182_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::IFitterTarget::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_182_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::IFitterTarget::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~IFitterTarget", 1436, G__G__TMVA3_182_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_182_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIFitterTarget), -1, 1, 1, 1, 1, 0, "u 'TMVA::IFitterTarget' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLFitterBase(void) {
   /* TMVA::FitterBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase));
   G__memfunc_setup("Run",309,G__G__TMVA3_183_0_2, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Run",309,G__G__TMVA3_183_0_3, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pars", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EstimatorFunction",1790,G__G__TMVA3_183_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - parameters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFitterTarget",1525,G__G__TMVA3_183_0_5, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIFitterTarget), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNpars",804,G__G__TMVA3_183_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeclareOptions",1436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger), -1, 1, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_183_0_10, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::FitterBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_183_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::FitterBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_183_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::FitterBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_183_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::FitterBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_183_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_183_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::FitterBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_183_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::FitterBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_183_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::FitterBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_183_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::FitterBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FitterBase", 1127, G__G__TMVA3_183_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLMCFitter(void) {
   /* TMVA::MCFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter));
   G__memfunc_setup("MCFitter",766,G__G__TMVA3_192_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter), -1, 0, 4, 1, 1, 0, 
"u 'TMVA::IFitterTarget' - 1 - target u 'TString' - 11 - name "
"u 'vector<TMVA::Interval*,allocator<TMVA::Interval*> >' 'vector<TMVA::Interval*>' 11 - ranges u 'TString' - 11 - theOption", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__G__TMVA3_192_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cycles", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pars", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeclareOptions",1436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__TMVA3_192_0_5, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::MCFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_192_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MCFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_192_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::MCFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_192_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::MCFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_192_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_192_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MCFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_192_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MCFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_192_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MCFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_192_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MCFitter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCFitter", 892, G__G__TMVA3_192_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLGeneticFitter(void) {
   /* TMVA::GeneticFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter));
   G__memfunc_setup("GeneticFitter",1325,G__G__TMVA3_193_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter), -1, 0, 4, 1, 1, 0, 
"u 'TMVA::IFitterTarget' - 1 - target u 'TString' - 11 - name "
"u 'vector<TMVA::Interval*,allocator<TMVA::Interval*> >' 'vector<TMVA::Interval*>' 11 - ranges u 'TString' - 11 - theOption", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__G__TMVA3_193_0_2, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - cycles i - 'Int_t' 0 - nsteps "
"i - 'Int_t' 0 - popSize i - 'Int_t' 0 - SC_steps "
"i - 'Int_t' 0 - SC_rate d - 'Double_t' 0 - SC_factor "
"d - 'Double_t' 0 - convCrit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pars", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NewFitness",1030,G__G__TMVA3_193_0_4, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - oldF d - 'Double_t' 0 - newF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareOptions",1436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__TMVA3_193_0_6, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::GeneticFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_193_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::GeneticFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_193_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::GeneticFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_193_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::GeneticFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_193_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_193_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::GeneticFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_193_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::GeneticFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_193_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::GeneticFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_193_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::GeneticFitter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GeneticFitter", 1451, G__G__TMVA3_193_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLSimulatedAnnealingFitter(void) {
   /* TMVA::SimulatedAnnealingFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter));
   G__memfunc_setup("SimulatedAnnealingFitter",2467,G__G__TMVA3_194_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter), -1, 0, 4, 1, 1, 0, 
"u 'TMVA::IFitterTarget' - 1 - target u 'TString' - 11 - name "
"u 'vector<TMVA::Interval*,allocator<TMVA::Interval*> >' 'vector<TMVA::Interval*>' 11 - ranges u 'TString' - 11 - theOption", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__G__TMVA3_194_0_2, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - fMaxCalls d - 'Double_t' 0 - fInitialTemperature "
"d - 'Double_t' 0 - fMinTemperature d - 'Double_t' 0 - fEps "
"u 'TString' - 0 - fKernelTemperatureS d - 'Double_t' 0 - fTemperatureScale "
"d - 'Double_t' 0 - fTemperatureAdaptiveStep g - 'Bool_t' 0 - fUseDefaultScale "
"g - 'Bool_t' 0 - fUseDefaultTemperature", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pars", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeclareOptions",1436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__TMVA3_194_0_5, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::SimulatedAnnealingFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_194_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SimulatedAnnealingFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_194_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::SimulatedAnnealingFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_194_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::SimulatedAnnealingFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_194_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_194_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SimulatedAnnealingFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_194_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::SimulatedAnnealingFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_194_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SimulatedAnnealingFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_194_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::SimulatedAnnealingFitter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SimulatedAnnealingFitter", 2593, G__G__TMVA3_194_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLMinuitWrapper(void) {
   /* TMVA::MinuitWrapper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper));
   G__memfunc_setup("MinuitWrapper",1367,G__G__TMVA3_196_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper), -1, 0, 2, 1, 1, 0, 
"u 'TMVA::IFitterTarget' - 1 - target i - 'Int_t' 0 - maxpar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 1 - - D - 'Double_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFitterTarget",1537,G__G__TMVA3_196_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMVA::IFitterTarget' - 1 - target", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecuteCommand",1426,G__G__TMVA3_196_0_4, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - command D - 'Double_t' 0 - args "
"i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStats",815,G__G__TMVA3_196_0_6, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - amin d - 'Double_t' 1 - edm "
"d - 'Double_t' 1 - errdef i - 'Int_t' 1 - nvpar "
"i - 'Int_t' 1 - nparx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrors",925,G__G__TMVA3_196_0_7, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - ipar d - 'Double_t' 1 - eplus "
"d - 'Double_t' 1 - eminus d - 'Double_t' 1 - eparab "
"d - 'Double_t' 1 - globcc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameter",1229,G__G__TMVA3_196_0_8, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - ipar C - - 10 - parname "
"d - 'Double_t' 0 - value d - 'Double_t' 0 - verr "
"d - 'Double_t' 0 - vlow d - 'Double_t' 0 - vhigh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__TMVA3_196_0_10, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::MinuitWrapper::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_196_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MinuitWrapper::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_196_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::MinuitWrapper::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_196_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::MinuitWrapper::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_196_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_196_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MinuitWrapper::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_196_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MinuitWrapper::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_196_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MinuitWrapper::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_196_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MinuitWrapper::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MinuitWrapper", 1493, G__G__TMVA3_196_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLMinuitFitter(void) {
   /* TMVA::MinuitFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitFitter));
   G__memfunc_setup("Init",404,G__G__TMVA3_197_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Run",309,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pars", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EstimatorFunction",1790,G__G__TMVA3_197_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareOptions",1436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__TMVA3_197_0_6, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::MinuitFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_197_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MinuitFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_197_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::MinuitFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_197_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::MinuitFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_197_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_197_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MinuitFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_197_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MinuitFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_197_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MinuitFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_197_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MinuitFitter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MinuitFitter", 1378, G__G__TMVA3_197_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLIMetric(void) {
   /* TMVA::IMetric */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIMetric));
   G__memfunc_setup("Distance",811,G__G__TMVA3_206_0_2, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pointA u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pointB", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetParameters",1344,G__G__TMVA3_206_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'vector<double,allocator<double> >' 'vector<Double_t>' 0 - parameters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameters",1332,G__G__TMVA3_206_0_4, 85, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_206_0_5, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::IMetric::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_206_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::IMetric::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_206_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::IMetric::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_206_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::IMetric::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__TMVA3_206_0_9, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__TMVA3_206_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__TMVA3_206_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_206_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_206_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::IMetric::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_206_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::IMetric::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_206_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::IMetric::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_206_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::IMetric::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~IMetric", 811, G__G__TMVA3_206_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_206_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIMetric), -1, 1, 1, 1, 1, 0, "u 'TMVA::IMetric' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLMetricEuler(void) {
   /* TMVA::MetricEuler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler));
   G__memfunc_setup("MetricEuler",1121,G__G__TMVA3_207_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Distance",811,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pointA u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pointB", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__TMVA3_207_0_3, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::MetricEuler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_207_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MetricEuler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_207_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::MetricEuler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_207_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::MetricEuler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_207_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_207_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MetricEuler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_207_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MetricEuler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_207_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MetricEuler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_207_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MetricEuler::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MetricEuler", 1121, G__G__TMVA3_207_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler), -1, 0, 1, 1, 1, 0, "u 'TMVA::MetricEuler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MetricEuler", 1247, G__G__TMVA3_207_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_207_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler), -1, 1, 1, 1, 1, 0, "u 'TMVA::MetricEuler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLMetricManhattan(void) {
   /* TMVA::MetricManhattan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan));
   G__memfunc_setup("MetricManhattan",1536,G__G__TMVA3_208_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Distance",811,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pointA u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - pointB", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__TMVA3_208_0_3, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::MetricManhattan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_208_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MetricManhattan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_208_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::MetricManhattan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_208_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::MetricManhattan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_208_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_208_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MetricManhattan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_208_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MetricManhattan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_208_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::MetricManhattan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_208_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::MetricManhattan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MetricManhattan", 1536, G__G__TMVA3_208_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan), -1, 0, 1, 1, 1, 0, "u 'TMVA::MetricManhattan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MetricManhattan", 1662, G__G__TMVA3_208_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_208_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan), -1, 1, 1, 1, 1, 0, "u 'TMVA::MetricManhattan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLSeedDistance(void) {
   /* TMVA::SeedDistance */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeedDistance));
   G__memfunc_setup("SeedDistance",1196,G__G__TMVA3_209_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeedDistance), -1, 0, 2, 1, 1, 0, 
"u 'TMVA::IMetric' - 1 - metric u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' 'vector<std::vector<Double_t> >' 1 - seeds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistances",1214,G__G__TMVA3_209_0_2, 117, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 1, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_209_0_3, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::SeedDistance::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_209_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SeedDistance::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_209_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::SeedDistance::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_209_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::SeedDistance::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__TMVA3_209_0_7, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__TMVA3_209_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__TMVA3_209_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_209_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_209_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SeedDistance::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_209_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::SeedDistance::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_209_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SeedDistance::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_209_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::SeedDistance::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SeedDistance", 1196, G__G__TMVA3_209_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeedDistance), -1, 0, 1, 1, 1, 0, "u 'TMVA::SeedDistance' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SeedDistance", 1322, G__G__TMVA3_209_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLPDEFoamVect(void) {
   /* TMVA::PDEFoamVect */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect));
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger), -1, 1, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PDEFoamVect",1006,G__G__TMVA3_371_0_2, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 0, 0, 1, 1, 0, "", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("PDEFoamVect",1006,G__G__TMVA3_371_0_3, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "USER Constructor", (void*) NULL, 0);
   G__memfunc_setup("PDEFoamVect",1006,G__G__TMVA3_371_0_4, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 0, 1, 1, 1, 0, "u 'TMVA::PDEFoamVect' - 11 - -", "Copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__TMVA3_371_0_5, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 1, 1, 1, 1, 0, "u 'TMVA::PDEFoamVect' - 11 - -", "= operator; Substitution", (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__G__TMVA3_371_0_6, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "[] provides POINTER to coordinate", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__TMVA3_371_0_7, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 1, 1, 1, 1, 0, "D - 'Double_t' 0 - -", "LOAD IN entire double vector", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__TMVA3_371_0_8, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - -", "LOAD IN double number", (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__G__TMVA3_371_0_9, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 1, 1, 1, 1, 0, "u 'TMVA::PDEFoamVect' - 11 - -", "+=; add vector u+=v  (FAST)", (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__G__TMVA3_371_0_10, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 1, 1, 1, 1, 0, "u 'TMVA::PDEFoamVect' - 11 - -", "+=; add vector u+=v  (FAST)", (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__G__TMVA3_371_0_11, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 11 - -", "*=; mult. by scalar v*=x (FAST)", (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__G__TMVA3_371_0_12, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 0, 1, 1, 1, 0, "u 'TMVA::PDEFoamVect' - 11 - -", "+;  u=v+s, NEVER USE IT, SLOW!!!", (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__G__TMVA3_371_0_13, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect), -1, 0, 1, 1, 1, 0, "u 'TMVA::PDEFoamVect' - 11 - -", "-;  u=v-s, NEVER USE IT, SLOW!!!", (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - option", "Prints vector", (void*) NULL, 1);
   G__memfunc_setup("GetDim",570,G__G__TMVA3_371_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Returns dimension", (void*) NULL, 0);
   G__memfunc_setup("GetCoord",791,G__G__TMVA3_371_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", "Returns coordinate", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_371_0_17, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::PDEFoamVect::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_371_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamVect::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_371_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::PDEFoamVect::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_371_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::PDEFoamVect::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_371_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_371_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamVect::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_371_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::PDEFoamVect::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_371_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamVect::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_371_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::PDEFoamVect::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~PDEFoamVect", 1132, G__G__TMVA3_371_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLPDEFoamCell(void) {
   /* TMVA::PDEFoamCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell));
   G__memfunc_setup("PDEFoamCell",988,G__G__TMVA3_372_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 0, 0, 1, 1, 0, "", "Default Constructor for ROOT streamers", (void*) NULL, 0);
   G__memfunc_setup("PDEFoamCell",988,G__G__TMVA3_372_0_2, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "User Constructor", (void*) NULL, 0);
   G__memfunc_setup("PDEFoamCell",988,G__G__TMVA3_372_0_3, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 0, 1, 1, 1, 0, "u 'TMVA::PDEFoamCell' - 11 - -", "Copy constructor", (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__TMVA3_372_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - U 'TMVA::PDEFoamCell' - 0 - - "
"U 'TMVA::PDEFoamCell' - 0 - - U 'TMVA::PDEFoamCell' - 0 - -", "Assigns values of attributes", (void*) NULL, 0);
   G__memfunc_setup("GetXdiv",699,G__G__TMVA3_372_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Pointer to Xdiv", (void*) NULL, 0);
   G__memfunc_setup("GetBest",686,G__G__TMVA3_372_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Pointer to Best", (void*) NULL, 0);
   G__memfunc_setup("SetBest",698,G__G__TMVA3_372_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Best", "Set Best edge candidate", (void*) NULL, 0);
   G__memfunc_setup("SetXdiv",711,G__G__TMVA3_372_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Xdiv", "Set x-division for best edge cand.", (void*) NULL, 0);
   G__memfunc_setup("GetHcub",674,G__G__TMVA3_372_0_9, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TMVA::PDEFoamVect' - 1 - - u 'TMVA::PDEFoamVect' - 1 - -", "Get position and size vectors (h-cubical subspace)", (void*) NULL, 0);
   G__memfunc_setup("GetHSize",771,G__G__TMVA3_372_0_10, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TMVA::PDEFoamVect' - 1 - -", "Get size only of cell vector  (h-cubical subspace)", (void*) NULL, 0);
   G__memfunc_setup("CalcVolume",1003,G__G__TMVA3_372_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", "Calculates volume of cell", (void*) NULL, 0);
   G__memfunc_setup("GetVolume",920,G__G__TMVA3_372_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Volume of cell", (void*) NULL, 0);
   G__memfunc_setup("GetIntg",690,G__G__TMVA3_372_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Get Integral", (void*) NULL, 0);
   G__memfunc_setup("GetDriv",693,G__G__TMVA3_372_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Get Drive", (void*) NULL, 0);
   G__memfunc_setup("SetIntg",702,G__G__TMVA3_372_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Intg", "Set true integral", (void*) NULL, 0);
   G__memfunc_setup("SetDriv",705,G__G__TMVA3_372_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Driv", "Set driver integral", (void*) NULL, 0);
   G__memfunc_setup("GetStat",700,G__G__TMVA3_372_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Get Status", (void*) NULL, 0);
   G__memfunc_setup("SetStat",712,G__G__TMVA3_372_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Stat", "Set Status", (void*) NULL, 0);
   G__memfunc_setup("GetPare",680,G__G__TMVA3_372_0_19, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 0, 0, 1, 1, 8, "", "Get Pointer to parent cell", (void*) NULL, 0);
   G__memfunc_setup("GetDau0",618,G__G__TMVA3_372_0_20, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 0, 0, 1, 1, 8, "", "Get Pointer to 1-st daughter vertex", (void*) NULL, 0);
   G__memfunc_setup("GetDau1",619,G__G__TMVA3_372_0_21, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 0, 0, 1, 1, 8, "", "Get Pointer to 2-nd daughter vertex", (void*) NULL, 0);
   G__memfunc_setup("SetDau0",630,G__G__TMVA3_372_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMVA::PDEFoamCell' - 0 - Daug", "Set pointer to 1-st daughter", (void*) NULL, 0);
   G__memfunc_setup("SetDau1",631,G__G__TMVA3_372_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMVA::PDEFoamCell' - 0 - Daug", "Set pointer to 2-nd daughter", (void*) NULL, 0);
   G__memfunc_setup("SetPare",692,G__G__TMVA3_372_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMVA::PDEFoamCell' - 0 - Pare", "Set pointer to parent", (void*) NULL, 0);
   G__memfunc_setup("SetSerial",908,G__G__TMVA3_372_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Serial", "Set serial number", (void*) NULL, 0);
   G__memfunc_setup("GetSerial",896,G__G__TMVA3_372_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Get serial number", (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - option", "Prints cell content", (void*) NULL, 1);
   G__memfunc_setup("SetElement",1014,G__G__TMVA3_372_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - fobj", "Set user variable", (void*) NULL, 0);
   G__memfunc_setup("GetElement",1002,G__G__TMVA3_372_0_29, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TObject), -1, 0, 0, 1, 1, 8, "", "Get pointer to user varibale", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_372_0_30, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::PDEFoamCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_372_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_372_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::PDEFoamCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_372_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::PDEFoamCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_372_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_372_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_372_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::PDEFoamCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_372_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_372_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::PDEFoamCell::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~PDEFoamCell", 1114, G__G__TMVA3_372_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_372_0_43, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 1, 1, 1, 1, 0, "u 'TMVA::PDEFoamCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLPDEFoamDistr(void) {
   /* TMVA::PDEFoamDistr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr));
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger), -1, 1, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PDEFoamDistr",1122,G__G__TMVA3_375_0_2, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PDEFoamDistr",1122,G__G__TMVA3_375_0_3, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr), -1, 0, 1, 1, 1, 0, "u 'TMVA::PDEFoamDistr' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolumeFraction",1754,G__G__TMVA3_375_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - vfr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumeFraction",1742,G__G__TMVA3_375_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDim",582,G__G__TMVA3_375_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXmin",712,G__G__TMVA3_375_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - idim f - 'Float_t' 0 - wmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXmax",714,G__G__TMVA3_375_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - idim f - 'Float_t' 0 - wmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VarTransform",1253,G__G__TMVA3_375_0_9, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - idim f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VarTransformInvers",1884,G__G__TMVA3_375_0_10, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - idim f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__G__TMVA3_375_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '2' ndim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillBinarySearchTree",2002,G__G__TMVA3_375_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TMVA::Event' - 10 - ev i 'TMVA::EFoamType' - 0 - ft "
"g - 'Bool_t' 0 'kFALSE' NoNegWeights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Density",736,G__G__TMVA3_375_0_13, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - Xarg d - 'Double_t' 1 - event_density", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDensityCalc",1407,G__G__TMVA3_375_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TMVA::TDensityCalc' - 0 - dc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillDiscriminator",1759,G__G__TMVA3_375_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTarget0",1054,G__G__TMVA3_375_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillEventDensity",1641,G__G__TMVA3_375_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalClass",1408,G__G__TMVA3_375_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cls", "TODO: intermediate solution to keep IsSignal() of Event working. TODO: remove IsSignal() from Event", (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundClass",1826,G__G__TMVA3_375_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cls", "TODO: intermediate solution to keep IsSignal() of Event working. TODO: remove IsSignal() from Event", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_375_0_20, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::PDEFoamDistr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_375_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamDistr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_375_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::PDEFoamDistr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_375_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::PDEFoamDistr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_375_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_375_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamDistr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_375_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::PDEFoamDistr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_375_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoamDistr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_375_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::PDEFoamDistr::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~PDEFoamDistr", 1248, G__G__TMVA3_375_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_375_0_33, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr), -1, 1, 1, 1, 1, 0, "u 'TMVA::PDEFoamDistr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLPDEFoam(void) {
   /* TMVA::PDEFoam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam));
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger), -1, 1, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sqr",310,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "d - 'Double_t' 0 - x", "Square function", (void*) NULL, 0);
   G__memfunc_setup("OutputGrow",1072,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "g - 'Bool_t' 0 'false' finished", "nice TMVA console output", (void*) NULL, 0);
   G__memfunc_setup("WeightGaus",1016,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 2, 0, 
"U 'TMVA::PDEFoamCell' - 0 - - u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - - "
"h - 'UInt_t' 0 '0' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WeightLinNeighbors",1836,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 2, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - txvec i 'TMVA::ECellValue' - 0 - cv "
"i - 'Int_t' 0 '-1' dim1 i - 'Int_t' 0 '-1' dim2 "
"g - 'Bool_t' 0 'kFALSE' TreatEmptyCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCells",903,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "g - 'Bool_t' 0 - CreateCellElements", "Initialisation of all foam cells", (void*) NULL, 0);
   G__memfunc_setup("CellFill",775,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - - U 'TMVA::PDEFoamCell' - 0 - -", "Allocates new empty cell and return its index", (void*) NULL, 0);
   G__memfunc_setup("Explore",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TMVA::PDEFoamCell' - 0 - Cell", "Exploration of the new cell, determine <wt>, wtMax etc.", (void*) NULL, 0);
   G__memfunc_setup("Varedu",615,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"D - 'Double_t' 0 - - i - 'Int_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", "Determines the best edge, variace reduction", (void*) NULL, 0);
   G__memfunc_setup("MakeAlpha",868,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "Provides random point inside hyperrectangle", (void*) NULL, 0);
   G__memfunc_setup("Grow",415,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "build up foam", (void*) NULL, 0);
   G__memfunc_setup("PeekMax",683,(G__InterfaceMethod) NULL, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 2, 0, "", "peek cell with max. driver integral", (void*) NULL, 0);
   G__memfunc_setup("Divide",597,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'TMVA::PDEFoamCell' - 0 - -", "Divide iCell into two daughters; iCell retained, taged as inactive", (void*) NULL, 0);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"D - 'Double_t' 0 - xRand d - 'Double_t' 1 - event_density", "evaluate distribution on point 'xRand'", (void*) NULL, 0);
   G__memfunc_setup("GetCellElements",1501,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 1, 1, 2, 0, "u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - -", "return cell elements of cell with given coordinates", (void*) NULL, 0);
   G__memfunc_setup("GetCellElement",1386,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"U 'TMVA::PDEFoamCell' - 0 - cell h - 'UInt_t' 0 - i", "get Element 'i' in cell 'cell'", (void*) NULL, 0);
   G__memfunc_setup("SetCellElement",1398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'TMVA::PDEFoamCell' - 0 - cell h - 'UInt_t' 0 - i "
"d - 'Double_t' 0 - value", "set Element 'i' in cell 'cell' to value 'value'", (void*) NULL, 0);
   G__memfunc_setup("GetCellValue",1181,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"U 'TMVA::PDEFoamCell' - 0 - - i 'TMVA::ECellValue' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CellValueIsUndefined",1995,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'TMVA::PDEFoamCell' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCell",769,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 0, 1, 1, 2, 0, "u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - -", "!", (void*) NULL, 0);
   G__memfunc_setup("FindCells",884,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgR), G__defined_typename("vector<TMVA::PDEFoamCell*>"), 0, 1, 1, 2, 0, "u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - -", "!", (void*) NULL, 0);
   G__memfunc_setup("FindCellsRecursive",1836,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - - U 'TMVA::PDEFoamCell' - 0 - - "
"u 'vector<TMVA::PDEFoamCell*,allocator<TMVA::PDEFoamCell*> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellTargets",1402,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 2, 1, 2, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - tvals i 'TMVA::ETargetSelection' - 0 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBuildUpCellEvents",1994,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "U 'TMVA::PDEFoamCell' - 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PDEFoam",604,G__G__TMVA3_376_0_25, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam), -1, 0, 0, 1, 1, 0, "", "Default constructor (used only by ROOT streamer)", (void*) NULL, 0);
   G__memfunc_setup("PDEFoam",604,G__G__TMVA3_376_0_26, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - -", "Principal user-defined constructor", (void*) NULL, 0);
   G__memfunc_setup("PDEFoam",604,G__G__TMVA3_376_0_27, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam), -1, 0, 1, 1, 1, 0, "u 'TMVA::PDEFoam' - 11 - -", "Copy Constructor  NOT USED", (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__TMVA3_376_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", "initialize PDEFoamDistr", (void*) NULL, 0);
   G__memfunc_setup("FillBinarySearchTree",2002,G__G__TMVA3_376_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TMVA::Event' - 10 - ev g - 'Bool_t' 0 'kFALSE' NoNegWeights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,G__G__TMVA3_376_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'false' CreateCellElements", "build-up foam", (void*) NULL, 0);
   G__memfunc_setup("FillFoamCells",1277,G__G__TMVA3_376_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TMVA::Event' - 10 - ev g - 'Bool_t' 0 'kFALSE' NoNegWeights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCellDiscr",1256,G__G__TMVA3_376_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCellTarget",1370,G__G__TMVA3_376_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCellElements",1728,G__G__TMVA3_376_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'false' allcells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetkDim",689,G__G__TMVA3_376_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - kDim", "Sets dimension of cubical space", (void*) NULL, 0);
   G__memfunc_setup("SetnCells",909,G__G__TMVA3_376_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - nCells", "Sets maximum number of cells", (void*) NULL, 0);
   G__memfunc_setup("SetnSampl",919,G__G__TMVA3_376_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - nSampl", "Sets no of MC events in cell exploration", (void*) NULL, 0);
   G__memfunc_setup("SetnBin",691,G__G__TMVA3_376_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nBin", "Sets no of bins in histogs in cell exploration", (void*) NULL, 0);
   G__memfunc_setup("SetEvPerBin",1063,G__G__TMVA3_376_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - EvPerBin", "Sets max. no. of effective events per bin", (void*) NULL, 0);
   G__memfunc_setup("SetInhiDiv",983,G__G__TMVA3_376_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", "Set inhibition of cell division along certain edge", (void*) NULL, 0);
   G__memfunc_setup("SetNElements",1207,G__G__TMVA3_376_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - numb", "init every cell element (TVectorD*)", (void*) NULL, 0);
   G__memfunc_setup("SetPDEFoamVolumeFraction",2358,G__G__TMVA3_376_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vfr", "set VolFrac to PDEFoam", (void*) NULL, 0);
   G__memfunc_setup("SetVolumeFraction",1754,G__G__TMVA3_376_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", "set VolFrac to PDEFoamDistr", (void*) NULL, 0);
   G__memfunc_setup("SetFoamType",1105,G__G__TMVA3_376_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i 'TMVA::EFoamType' - 0 - ft", "set foam type", (void*) NULL, 0);
   G__memfunc_setup("SetSignalClass",1408,G__G__TMVA3_376_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cls", "TODO: intermediate solution to keep IsSignal() of Event working. TODO: remove IsSignal() from Event", (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundClass",1826,G__G__TMVA3_376_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cls", "TODO: intermediate solution to keep IsSignal() of Event working. TODO: remove IsSignal() from Event", (void*) NULL, 0);
   G__memfunc_setup("GetTotDim",881,G__G__TMVA3_376_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Get total dimension", (void*) NULL, 0);
   G__memfunc_setup("GetFoamName",1060,G__G__TMVA3_376_0_48, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TString), -1, 0, 0, 1, 1, 8, "", "Get name of foam", (void*) NULL, 0);
   G__memfunc_setup("GetNElements",1195,G__G__TMVA3_376_0_49, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "returns number of elements, saved on every cell", (void*) NULL, 0);
   G__memfunc_setup("GetPDEFoamVolumeFraction",2346,G__G__TMVA3_376_0_50, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "get VolFrac from PDEFoam", (void*) NULL, 0);
   G__memfunc_setup("GetFoamType",1093,G__G__TMVA3_376_0_51, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEFoamType), -1, 0, 0, 1, 1, 8, "", "get foam type", (void*) NULL, 0);
   G__memfunc_setup("GetNActiveCells",1469,G__G__TMVA3_376_0_52, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "returns number of active cells", (void*) NULL, 0);
   G__memfunc_setup("GetNInActiveCells",1652,G__G__TMVA3_376_0_53, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "returns number of not active cells", (void*) NULL, 0);
   G__memfunc_setup("GetNCells",865,G__G__TMVA3_376_0_54, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "returns number of cells", (void*) NULL, 0);
   G__memfunc_setup("GetRootCell",1092,G__G__TMVA3_376_0_55, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell), -1, 0, 0, 1, 1, 8, "", "get pointer to root cell", (void*) NULL, 0);
   G__memfunc_setup("CutNmin",702,G__G__TMVA3_376_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CutNmin",702,G__G__TMVA3_376_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CutRMSmin",866,G__G__TMVA3_376_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CutRMSmin",866,G__G__TMVA3_376_0_59, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNmin",702,G__G__TMVA3_376_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNmin",690,G__G__TMVA3_376_0_61, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRMSmin",866,G__G__TMVA3_376_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRMSmin",854,G__G__TMVA3_376_0_63, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXmin",712,G__G__TMVA3_376_0_64, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - idim d - 'Double_t' 0 - wmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXmax",714,G__G__TMVA3_376_0_65, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - idim d - 'Double_t' 0 - wmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmin",700,G__G__TMVA3_376_0_66, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__G__TMVA3_376_0_67, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVariableName",1456,G__G__TMVA3_376_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVariableName",1456,G__G__TMVA3_376_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjString' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVariableName",1479,G__G__TMVA3_376_0_70, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TObjString), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VarTransform",1253,G__G__TMVA3_376_0_71, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - idim f - 'Float_t' 0 - x", "transform [xmin, xmax] --> [0, 1]", (void*) NULL, 0);
   G__memfunc_setup("VarTransform",1253,G__G__TMVA3_376_0_72, 117, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 1, 1, 1, 0, "u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - invec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VarTransformInvers",1884,G__G__TMVA3_376_0_73, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - idim f - 'Float_t' 0 - x", "transform [0, 1] --> [xmin, xmax]", (void*) NULL, 0);
   G__memfunc_setup("VarTransformInvers",1884,G__G__TMVA3_376_0_74, 117, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 1, 1, 1, 0, "u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - invec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckAll",759,G__G__TMVA3_376_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "Checks correctness of the entire data structure in the FOAM object", (void*) NULL, 0);
   G__memfunc_setup("PrintCells",1024,G__G__TMVA3_376_0_76, 121, -1, -1, 0, 0, 1, 1, 0, "", "Prints content of all cells", (void*) NULL, 0);
   G__memfunc_setup("CheckCells",977,G__G__TMVA3_376_0_77, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'false' remove_empty_cells", "check all cells with respect to critical values", (void*) NULL, 0);
   G__memfunc_setup("RemoveEmptyCell",1533,G__G__TMVA3_376_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iCell", "removes iCell if its volume is zero", (void*) NULL, 0);
   G__memfunc_setup("PrintCellElements",1738,G__G__TMVA3_376_0_79, 121, -1, -1, 0, 0, 1, 1, 0, "", "print all cells with its elements", (void*) NULL, 0);
   G__memfunc_setup("ReadStream",1000,G__G__TMVA3_376_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - -", "read  foam from stream", (void*) NULL, 0);
   G__memfunc_setup("PrintStream",1145,G__G__TMVA3_376_0_81, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", "write foam from stream", (void*) NULL, 0);
   G__memfunc_setup("ReadXML",621,G__G__TMVA3_376_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "Y - - 0 - parent", "read  foam variables from xml", (void*) NULL, 0);
   G__memfunc_setup("AddXMLTo",701,G__G__TMVA3_376_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "Y - - 0 - parent", "write foam variables to xml", (void*) NULL, 0);
   G__memfunc_setup("Project2",777,G__G__TMVA3_376_0_84, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TH2D), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - idim1 i - 'Int_t' 0 - idim2 "
"C - - 10 '\"nev\"' opt C - - 10 '\"kNone\"' ker "
"h - 'UInt_t' 0 '0' maxbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProjectionCellValue",2234,G__G__TMVA3_376_0_85, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"U 'TMVA::PDEFoamCell' - 0 - cell i - 'Int_t' 0 - idim1 "
"i - 'Int_t' 0 - idim2 i 'TMVA::ECellValue' - 0 - cv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw1Dim",729,G__G__TMVA3_376_0_86, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TH1D), -1, 0, 2, 1, 1, 0, 
"C - - 10 - opt i - 'Int_t' 0 - nbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootPlot2dim",1199,G__G__TMVA3_376_0_87, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'TString' - 11 - filename u 'string' - 0 - what "
"g - 'Bool_t' 0 'kTRUE' CreateCanvas g - 'Bool_t' 0 'kTRUE' colors "
"g - 'Bool_t' 0 'kFALSE' log_colors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellValue",1181,G__G__TMVA3_376_0_88, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - - i 'TMVA::ECellValue' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellDiscr",1173,G__G__TMVA3_376_0_89, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - xvec i 'TMVA::EKernel' - 0 'kNone' kernel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellDensity",1408,G__G__TMVA3_376_0_90, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - xvec i 'TMVA::EKernel' - 0 'kNone' kernel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageNeighborsValue",2425,G__G__TMVA3_376_0_91, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - txvec i 'TMVA::ECellValue' - 0 - cv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellRegValue0",1515,G__G__TMVA3_376_0_92, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - - i 'TMVA::EKernel' - 0 'kNone' kernel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProjectedRegValue",2011,G__G__TMVA3_376_0_93, 117, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 3, 1, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 0 - vals i 'TMVA::EKernel' - 0 'kNone' kernel "
"i 'TMVA::ETargetSelection' - 0 'kMean' ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_376_0_94, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::PDEFoam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_376_0_95, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_376_0_96, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::PDEFoam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_376_0_97, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::PDEFoam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_376_0_101, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_376_0_102, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_376_0_103, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::PDEFoam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_376_0_104, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::PDEFoam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_376_0_105, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::PDEFoam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~PDEFoam", 730, G__G__TMVA3_376_0_106, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_376_0_107, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam), -1, 1, 1, 1, 1, 0, "u 'TMVA::PDEFoam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLBDTEventWrapper(void) {
   /* TMVA::BDTEventWrapper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLBDTEventWrapper));
   G__memfunc_setup("BDTEventWrapper",1469,G__G__TMVA3_385_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLBDTEventWrapper), -1, 0, 1, 1, 1, 0, "U 'TMVA::Event' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__G__TMVA3_385_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TMVA::BDTEventWrapper' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCumulativeWeight",1971,G__G__TMVA3_385_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 - type d - 'Double_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCumulativeWeight",1959,G__G__TMVA3_385_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVarIndex",1101,G__G__TMVA3_385_0_5, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iVar", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&TMVA::BDTEventWrapper::SetVarIndex) ), 0);
   G__memfunc_setup("GetVal",579,G__G__TMVA3_385_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__G__TMVA3_385_0_7, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLEvent), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("BDTEventWrapper", 1469, G__G__TMVA3_385_0_8, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLBDTEventWrapper), -1, 0, 1, 1, 1, 0, "u 'TMVA::BDTEventWrapper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BDTEventWrapper", 1595, G__G__TMVA3_385_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLCCTreeWrapper(void) {
   /* TMVA::CCTreeWrapper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper));
   G__memfunc_setup("CCTreeWrapper",1271,G__G__TMVA3_479_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper), -1, 0, 2, 1, 1, 0, 
"U 'TMVA::DecisionTree' - 0 - T U 'TMVA::SeparationBase' - 0 - qualityIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckEvent",992,G__G__TMVA3_479_0_2, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'TMVA::Event' - 11 - e g - 'Bool_t' 0 'false' useYesNoLeaf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestTreeQuality",1561,G__G__TMVA3_479_0_3, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'vector<TMVA::Event*,allocator<TMVA::Event*> >' 'TMVA::CCTreeWrapper::EventList' 10 - validationSample", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestTreeQuality",1561,G__G__TMVA3_479_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'TMVA::DataSet' - 10 - validationSample", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PruneNode",912,G__G__TMVA3_479_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMVA::CCTreeWrapper::CCTreeNode' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTree",804,G__G__TMVA3_479_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMVA::CCTreeWrapper::CCTreeNode' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRoot",708,G__G__TMVA3_479_0_7, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrappercLcLCCTreeNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CCTreeWrapper", 1271, G__G__TMVA3_479_0_8, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper), -1, 0, 1, 1, 1, 0, "u 'TMVA::CCTreeWrapper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CCTreeWrapper", 1397, G__G__TMVA3_479_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_479_0_10, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper), -1, 1, 1, 1, 1, 0, "u 'TMVA::CCTreeWrapper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLCCPruner(void) {
   /* TMVA::CCPruner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner));
   G__memfunc_setup("CCPruner",770,G__G__TMVA3_481_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner), -1, 0, 3, 1, 1, 0, 
"U 'TMVA::DecisionTree' - 0 - t_max U 'vector<TMVA::Event*,allocator<TMVA::Event*> >' 'TMVA::CCPruner::EventList' 10 - validationSample "
"U 'TMVA::SeparationBase' - 0 'NULL' qualityIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CCPruner",770,G__G__TMVA3_481_0_2, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner), -1, 0, 3, 1, 1, 0, 
"U 'TMVA::DecisionTree' - 0 - t_max U 'TMVA::DataSet' - 10 - validationSample "
"U 'TMVA::SeparationBase' - 0 'NULL' qualityIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPruneStrength",1669,G__G__TMVA3_481_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '-1.0' alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Optimize",849,G__G__TMVA3_481_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOptimalPruneSequence",2361,G__G__TMVA3_481_0_5, 117, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR), G__defined_typename("vector<TMVA::DecisionTreeNode*>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOptimalQualityIndex",2263,G__G__TMVA3_481_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOptimalPruneStrength",2383,G__G__TMVA3_481_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CCPruner", 770, G__G__TMVA3_481_0_8, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner), -1, 0, 1, 1, 1, 0, "u 'TMVA::CCPruner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CCPruner", 896, G__G__TMVA3_481_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLCostComplexityPruneTool(void) {
   /* TMVA::CostComplexityPruneTool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool));
   G__memfunc_setup("CostComplexityPruneTool",2415,G__G__TMVA3_489_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool), -1, 0, 1, 1, 1, 0, "U 'TMVA::SeparationBase' - 0 'NULL' qualityIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculatePruningInfo",2045,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPruningInfo), -1, 0, 3, 1, 1, 0, 
"U 'TMVA::DecisionTree' - 0 - dt U 'vector<TMVA::Event*,allocator<TMVA::Event*> >' 'TMVA::IPruneTool::EventSample' 10 'NULL' testEvents "
"g - 'Bool_t' 0 'kFALSE' isAutomatic", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitTreePruningMetaData",2312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TMVA::DecisionTreeNode' - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Optimize",849,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'TMVA::DecisionTree' - 0 - dt d - 'Double_t' 0 - weights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Log",290,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMsgLogger), -1, 1, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CostComplexityPruneTool", 2415, G__G__TMVA3_489_0_6, (int) ('i'), 
G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool), -1, 0, 1, 1, 1, 0, "u 'TMVA::CostComplexityPruneTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CostComplexityPruneTool", 2541, G__G__TMVA3_489_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__TMVA3_489_0_8, (int) ('u'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool), -1, 1, 1, 1, 1, 0, "u 'TMVA::CostComplexityPruneTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMVAcLcLSVEvent(void) {
   /* TMVA::SVEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent));
   G__memfunc_setup("SVEvent",683,G__G__TMVA3_490_0_1, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SVEvent",683,G__G__TMVA3_490_0_2, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent), -1, 0, 2, 1, 1, 0, 
"U 'TMVA::Event' - 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SVEvent",683,G__G__TMVA3_490_0_3, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent), -1, 0, 4, 1, 1, 0, 
"U 'vector<float,allocator<float> >' 'vector<Float_t>' 10 - - f - 'Float_t' 0 - alpha "
"i - 'Int_t' 10 - typeFlag h - 'UInt_t' 10 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SVEvent",683,G__G__TMVA3_490_0_4, 105, G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent), -1, 0, 4, 1, 1, 0, 
"U 'vector<float,allocator<float> >' 'vector<Float_t>' 10 - svector f - 'Float_t' 0 - alpha "
"f - 'Float_t' 0 - alpha_p i - 'Int_t' 10 - typeFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAlpha",786,G__G__TMVA3_490_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAlpha_p",993,G__G__TMVA3_490_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrorCache",1290,G__G__TMVA3_490_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - err_cache", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIsShrinked",1312,G__G__TMVA3_490_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - isshrinked", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLine",692,G__G__TMVA3_490_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIdx",593,G__G__TMVA3_490_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNs",493,G__G__TMVA3_490_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateErrorCache",1601,G__G__TMVA3_490_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - upercache", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataVector",1293,G__G__TMVA3_490_0_13, 85, G__get_linked_tagnum(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlpha",774,G__G__TMVA3_490_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlpha_p",981,G__G__TMVA3_490_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeltaAlpha",1264,G__G__TMVA3_490_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorCache",1278,G__G__TMVA3_490_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTypeFlag",1084,G__G__TMVA3_490_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNVar",663,G__G__TMVA3_490_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdx",581,G__G__TMVA3_490_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLine",680,G__G__TMVA3_490_0_21, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNs",481,G__G__TMVA3_490_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCweight",1003,G__G__TMVA3_490_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTarget",903,G__G__TMVA3_490_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInI0a",589,G__G__TMVA3_490_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInI0b",590,G__G__TMVA3_490_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInI0",492,G__G__TMVA3_490_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInI1",493,G__G__TMVA3_490_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInI2",494,G__G__TMVA3_490_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInI3",495,G__G__TMVA3_490_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__TMVA3_490_0_31, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintData",903,G__G__TMVA3_490_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__TMVA3_490_0_33, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TMVA::SVEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__TMVA3_490_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SVEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__TMVA3_490_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TMVA::SVEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__TMVA3_490_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TMVA::SVEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__TMVA3_490_0_37, 85, G__get_linked_tagnum(&G__G__TMVA3LN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__TMVA3_490_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__TMVA3_490_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__TMVA3_490_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__TMVA3_490_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SVEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__TMVA3_490_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::SVEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__TMVA3_490_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TMVA::SVEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__TMVA3_490_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TMVA::SVEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SVEvent", 683, G__G__TMVA3_490_0_45, (int) ('i'), G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent), -1, 0, 1, 1, 1, 0, "u 'TMVA::SVEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SVEvent", 809, G__G__TMVA3_490_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__TMVA3() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__TMVA3() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__TMVA3() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__TMVA3LN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_basic_istreamlEcharcOchar_traitslEchargRsPgR = { "basic_istream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVA = { "TMVA" , 110 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLMsgLogger = { "TMVA::MsgLogger" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLConfig = { "TMVA::Config" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting = { "TMVA::Config::VariablePlotting" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames = { "TMVA::Config::IONames" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLKDEKernel = { "TMVA::KDEKernel" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelType = { "TMVA::KDEKernel::EKernelType" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelIter = { "TMVA::KDEKernel::EKernelIter" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelBorder = { "TMVA::KDEKernel::EKernelBorder" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_TRandom3 = { "TRandom3" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLInterval = { "TMVA::Interval" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLEMsgType = { "TMVA::EMsgType" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_maplETStringcOTMVAcLcLTypescLcLEMVAcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLTypescLcLEMVAgRsPgRsPgR = { "map<TString,TMVA::Types::EMVA,less<TString>,allocator<pair<const TString,TMVA::Types::EMVA> > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_maplETMVAcLcLEMsgTypecOstringcOlesslETMVAcLcLEMsgTypegRcOallocatorlEpairlEconstsPTMVAcLcLEMsgTypecOstringgRsPgRsPgR = { "map<TMVA::EMsgType,string,less<TMVA::EMsgType>,allocator<pair<const TMVA::EMsgType,string> > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLConfigurable = { "TMVA::Configurable" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLOptionlEboolgR = { "TMVA::Option<bool>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEboolcOallocatorlEboolgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<bool,allocator<bool> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLOptionlEboolmUgR = { "TMVA::Option<bool*>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLOptionlEfloatgR = { "TMVA::Option<float>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<float,allocator<float> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLIFitterTarget = { "TMVA::IFitterTarget" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLFitterBase = { "TMVA::FitterBase" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgR = { "vector<TMVA::Interval*,allocator<TMVA::Interval*> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMVA::Interval*,allocator<TMVA::Interval*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<double,allocator<double> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLMCFitter = { "TMVA::MCFitter" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLGeneticFitter = { "TMVA::GeneticFitter" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter = { "TMVA::SimulatedAnnealingFitter" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLMinuitWrapper = { "TMVA::MinuitWrapper" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLMinuitFitter = { "TMVA::MinuitFitter" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMinuit = { "TMinuit" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLIMetric = { "TMVA::IMetric" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLMetricEuler = { "TMVA::MetricEuler" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLMetricManhattan = { "TMVA::MetricManhattan" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLSeedDistance = { "TMVA::SeedDistance" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TObjString = { "TObjString" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLTimer = { "TMVA::Timer" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLNode = { "TMVA::Node" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLEvent = { "TMVA::Event" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLBinaryTree = { "TMVA::BinaryTree" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLDataSet = { "TMVA::DataSet" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLBinarySearchTree = { "TMVA::BinarySearchTree" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgR = { "vector<const TMVA::BinarySearchTreeNode*,allocator<const TMVA::BinarySearchTreeNode*> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const TMVA::BinarySearchTreeNode*,allocator<const TMVA::BinarySearchTreeNode*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR = { "vector<TMVA::Event*,allocator<TMVA::Event*> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMVA::Event*,allocator<TMVA::Event*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_pairlEdoublecOconstsPTMVAcLcLEventmUgR = { "pair<double,const TMVA::Event*>" , 115 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgR = { "vector<pair<double,const TMVA::Event*>,allocator<pair<double,const TMVA::Event*> > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,const TMVA::Event*>,allocator<pair<double,const TMVA::Event*> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEfloatmUcOallocatorlEfloatmUgRsPgR = { "vector<float*,allocator<float*> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatmUcOallocatorlEfloatmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<float*,allocator<float*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLPDEFoamVect = { "TMVA::PDEFoamVect" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLPDEFoamCell = { "TMVA::PDEFoamCell" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLEFoamType = { "TMVA::EFoamType" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLTDensityCalc = { "TMVA::TDensityCalc" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLPDEFoamDistr = { "TMVA::PDEFoamDistr" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLPDEFoam = { "TMVA::PDEFoam" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLEKernel = { "TMVA::EKernel" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLETargetSelection = { "TMVA::ETargetSelection" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLECellType = { "TMVA::ECellType" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLECellValue = { "TMVA::ECellValue" , 101 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgR = { "vector<TMVA::PDEFoamCell*,allocator<TMVA::PDEFoamCell*> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMVA::PDEFoamCell*,allocator<TMVA::PDEFoamCell*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLBDTEventWrapper = { "TMVA::BDTEventWrapper" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLSeparationBase = { "TMVA::SeparationBase" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLDecisionTreeNode = { "TMVA::DecisionTreeNode" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLDecisionTree = { "TMVA::DecisionTree" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgR = { "vector<vector<TMVA::Event*,allocator<TMVA::Event*> >*,allocator<vector<TMVA::Event*,allocator<TMVA::Event*> >*> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<TMVA::Event*,allocator<TMVA::Event*> >*,allocator<vector<TMVA::Event*,allocator<TMVA::Event*> >*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_maplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgR = { "map<TString,TMVA::Results*,less<TString>,allocator<pair<const TString,TMVA::Results*> > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgR = { "vector<map<TString,TMVA::Results*,less<TString>,allocator<pair<const TString,TMVA::Results*> > >,allocator<map<TString,TMVA::Results*,less<TString>,allocator<pair<const TString,TMVA::Results*> > > > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<map<TString,TMVA::Results*,less<TString>,allocator<pair<const TString,TMVA::Results*> > >,allocator<map<TString,TMVA::Results*,less<TString>,allocator<pair<const TString,TMVA::Results*> > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEcharcOallocatorlEchargRsPgR = { "vector<char,allocator<char> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR = { "reverse_iterator<vector<char,allocator<char> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_pairlEfloatcOlongsPlonggR = { "pair<float,long long>" , 115 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgR = { "vector<pair<float,long long>*,allocator<pair<float,long long>*> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<float,long long>*,allocator<pair<float,long long>*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgR = { "vector<vector<pair<float,long long>*,allocator<pair<float,long long>*> >,allocator<vector<pair<float,long long>*,allocator<pair<float,long long>*> > > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<pair<float,long long>*,allocator<pair<float,long long>*> >,allocator<vector<pair<float,long long>*,allocator<pair<float,long long>*> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR = { "vector<long long,allocator<long long> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcLcLiteratorgR = { "reverse_iterator<vector<long long,allocator<long long> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgR = { "vector<vector<long long,allocator<long long> >,allocator<vector<long long,allocator<long long> > > >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<long long,allocator<long long> >,allocator<vector<long long,allocator<long long> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLCCTreeWrapper = { "TMVA::CCTreeWrapper" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLCCTreeWrappercLcLCCTreeNode = { "TMVA::CCTreeWrapper::CCTreeNode" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLCCPruner = { "TMVA::CCPruner" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR = { "vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLPruningInfo = { "TMVA::PruningInfo" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLIPruneTool = { "TMVA::IPruneTool" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool = { "TMVA::CostComplexityPruneTool" , 99 , -1 };
G__linked_taginfo G__G__TMVA3LN_TMVAcLcLSVEvent = { "TMVA::SVEvent" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__TMVA3() {
  G__G__TMVA3LN_TClass.tagnum = -1 ;
  G__G__TMVA3LN_TBuffer.tagnum = -1 ;
  G__G__TMVA3LN_TMemberInspector.tagnum = -1 ;
  G__G__TMVA3LN_TObject.tagnum = -1 ;
  G__G__TMVA3LN_TNamed.tagnum = -1 ;
  G__G__TMVA3LN_basic_istreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_string.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TObjArray.tagnum = -1 ;
  G__G__TMVA3LN_TString.tagnum = -1 ;
  G__G__TMVA3LN_TMVA.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLMsgLogger.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLConfig.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames.tagnum = -1 ;
  G__G__TMVA3LN_TH1.tagnum = -1 ;
  G__G__TMVA3LN_TH1F.tagnum = -1 ;
  G__G__TMVA3LN_TF1.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLKDEKernel.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelType.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelIter.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelBorder.tagnum = -1 ;
  G__G__TMVA3LN_TRandom3.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLInterval.tagnum = -1 ;
  G__G__TMVA3LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLEMsgType.tagnum = -1 ;
  G__G__TMVA3LN_maplETStringcOTMVAcLcLTypescLcLEMVAcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLTypescLcLEMVAgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_maplETMVAcLcLEMsgTypecOstringcOlesslETMVAcLcLEMsgTypegRcOallocatorlEpairlEconstsPTMVAcLcLEMsgTypecOstringgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLConfigurable.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLOptionlEboolgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEboolcOallocatorlEboolgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLOptionlEboolmUgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLOptionlEfloatgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLIFitterTarget.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLFitterBase.tagnum = -1 ;
  G__G__TMVA3LN_vectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLMCFitter.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLGeneticFitter.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLMinuitWrapper.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLMinuitFitter.tagnum = -1 ;
  G__G__TMVA3LN_TMinuit.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLIMetric.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLMetricEuler.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLMetricManhattan.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLSeedDistance.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__TMVA3LN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TH1D.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TH2D.tagnum = -1 ;
  G__G__TMVA3LN_TObjString.tagnum = -1 ;
  G__G__TMVA3LN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLTimer.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLNode.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLEvent.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLBinaryTree.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLDataSet.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLBinarySearchTree.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_pairlEdoublecOconstsPTMVAcLcLEventmUgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEfloatmUcOallocatorlEfloatmUgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatmUcOallocatorlEfloatmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TRef.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLPDEFoamVect.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLPDEFoamCell.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLEFoamType.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLTDensityCalc.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLPDEFoamDistr.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLPDEFoam.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLEKernel.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLETargetSelection.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLECellType.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLECellValue.tagnum = -1 ;
  G__G__TMVA3LN_vectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLBDTEventWrapper.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLSeparationBase.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLDecisionTreeNode.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLDecisionTree.tagnum = -1 ;
  G__G__TMVA3LN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_maplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEcharcOallocatorlEchargRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_pairlEfloatcOlongsPlonggR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_vectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLCCTreeWrapper.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLCCTreeWrappercLcLCCTreeNode.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLCCPruner.tagnum = -1 ;
  G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR.tagnum = -1 ;
  G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLPruningInfo.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLIPruneTool.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool.tagnum = -1 ;
  G__G__TMVA3LN_TMVAcLcLSVEvent.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__TMVA3() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TClass);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TObject);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_basic_istreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_string);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TString);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVA),0,-1,0,(char*)NULL,G__setup_memvarTMVA,G__setup_memfuncTMVA);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLMsgLogger);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfig),sizeof(TMVA::Config),-1,263424,"Singleton class for global configuration settings",G__setup_memvarTMVAcLcLConfig,G__setup_memfuncTMVAcLcLConfig);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLVariablePlotting),sizeof(TMVA::Config::VariablePlotting),-1,262144,(char*)NULL,G__setup_memvarTMVAcLcLConfigcLcLVariablePlotting,G__setup_memfuncTMVAcLcLConfigcLcLVariablePlotting);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLConfigcLcLIONames),sizeof(TMVA::Config::IONames),-1,262144,(char*)NULL,G__setup_memvarTMVAcLcLConfigcLcLIONames,G__setup_memfuncTMVAcLcLConfigcLcLIONames);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TH1);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TH1F);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TF1);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLKDEKernel),sizeof(TMVA::KDEKernel),-1,263424,"Kernel density estimator for PDF smoothing",G__setup_memvarTMVAcLcLKDEKernel,G__setup_memfuncTMVAcLcLKDEKernel);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelType);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelIter);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLKDEKernelcLcLEKernelBorder);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TRandom3);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLInterval),sizeof(TMVA::Interval),-1,296448,"Interval definition, continous and discrete",G__setup_memvarTMVAcLcLInterval,G__setup_memfuncTMVAcLcLInterval);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLEMsgType);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_maplETStringcOTMVAcLcLTypescLcLEMVAcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLTypescLcLEMVAgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_maplETMVAcLcLEMsgTypecOstringcOlesslETMVAcLcLEMsgTypegRcOallocatorlEpairlEconstsPTMVAcLcLEMsgTypecOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLConfigurable);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLOptionlEboolgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEboolcOallocatorlEboolgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLOptionlEboolmUgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLOptionlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIFitterTarget),sizeof(TMVA::IFitterTarget),-1,263425,"base class for a fitter \"target\"",G__setup_memvarTMVAcLcLIFitterTarget,G__setup_memfuncTMVAcLcLIFitterTarget);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLFitterBase),sizeof(TMVA::FitterBase),-1,324610,"Baseclass for fitters",G__setup_memvarTMVAcLcLFitterBase,G__setup_memfuncTMVAcLcLFitterBase);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLIntervalmUcOallocatorlETMVAcLcLIntervalmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMCFitter),sizeof(TMVA::MCFitter),-1,324608,"Fitter using Monte Carlo sampling of parameters ",G__setup_memvarTMVAcLcLMCFitter,G__setup_memfuncTMVAcLcLMCFitter);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLGeneticFitter),sizeof(TMVA::GeneticFitter),-1,324608,"Fitter using a Genetic Algorithm",G__setup_memvarTMVAcLcLGeneticFitter,G__setup_memfuncTMVAcLcLGeneticFitter);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSimulatedAnnealingFitter),sizeof(TMVA::SimulatedAnnealingFitter),-1,324608,"Fitter using a Simulated Annealing Algorithm",G__setup_memvarTMVAcLcLSimulatedAnnealingFitter,G__setup_memfuncTMVAcLcLSimulatedAnnealingFitter);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitWrapper),sizeof(TMVA::MinuitWrapper),-1,324608,"Wrapper around TMinuit",G__setup_memvarTMVAcLcLMinuitWrapper,G__setup_memfuncTMVAcLcLMinuitWrapper);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMinuitFitter),sizeof(TMVA::MinuitFitter),-1,324609,"Fitter using a Genetic Algorithm",G__setup_memvarTMVAcLcLMinuitFitter,G__setup_memfuncTMVAcLcLMinuitFitter);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMinuit);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLIMetric),sizeof(TMVA::IMetric),-1,263425,"calculates the \"distance\" between two points",G__setup_memvarTMVAcLcLIMetric,G__setup_memfuncTMVAcLcLIMetric);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricEuler),sizeof(TMVA::MetricEuler),-1,263424,"calculates the \"distance\" between two points",G__setup_memvarTMVAcLcLMetricEuler,G__setup_memfuncTMVAcLcLMetricEuler);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLMetricManhattan),sizeof(TMVA::MetricManhattan),-1,263424,"calculates the \"distance\" between two points",G__setup_memvarTMVAcLcLMetricManhattan,G__setup_memfuncTMVAcLcLMetricManhattan);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSeedDistance),sizeof(TMVA::SeedDistance),-1,295936,(char*)NULL,G__setup_memvarTMVAcLcLSeedDistance,G__setup_memfuncTMVAcLcLSeedDistance);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TH1D);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TH2D);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TObjString);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLTimer);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLNode);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLEvent);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLBinaryTree);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLDataSet);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLBinarySearchTree);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEconstsPTMVAcLcLBinarySearchTreeNodemUcOallocatorlEconstsPTMVAcLcLBinarySearchTreeNodemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_pairlEdoublecOconstsPTMVAcLcLEventmUgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRcOallocatorlEpairlEdoublecOconstsPTMVAcLcLEventmUgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEfloatmUcOallocatorlEfloatmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEfloatmUcOallocatorlEfloatmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TRef);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamVect),sizeof(TMVA::PDEFoamVect),-1,327424,"n-dimensional vector with dynamical allocation",G__setup_memvarTMVAcLcLPDEFoamVect,G__setup_memfuncTMVAcLcLPDEFoamVect);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamCell),sizeof(TMVA::PDEFoamCell),-1,325376,"Single cell of FOAM",G__setup_memvarTMVAcLcLPDEFoamCell,G__setup_memfuncTMVAcLcLPDEFoamCell);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLEFoamType);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLTDensityCalc);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoamDistr),sizeof(TMVA::PDEFoamDistr),-1,292608,"Class for Event density",G__setup_memvarTMVAcLcLPDEFoamDistr,G__setup_memfuncTMVAcLcLPDEFoamDistr);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLPDEFoam),sizeof(TMVA::PDEFoam),-1,325376,(char*)NULL,G__setup_memvarTMVAcLcLPDEFoam,G__setup_memfuncTMVAcLcLPDEFoam);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLEKernel);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLETargetSelection);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLECellType);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLECellValue);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLPDEFoamCellmUcOallocatorlETMVAcLcLPDEFoamCellmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLBDTEventWrapper),sizeof(TMVA::BDTEventWrapper),-1,295936,(char*)NULL,G__setup_memvarTMVAcLcLBDTEventWrapper,G__setup_memfuncTMVAcLcLBDTEventWrapper);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLSeparationBase);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLDecisionTreeNode);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLDecisionTree);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUcOallocatorlEvectorlETMVAcLcLEventmUcOallocatorlETMVAcLcLEventmUgRsPgRmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_maplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRcOallocatorlEmaplETStringcOTMVAcLcLResultsmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMVAcLcLResultsmUgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEcharcOallocatorlEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_pairlEfloatcOlongsPlonggR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRcOallocatorlEvectorlEpairlEfloatcOlongsPlonggRmUcOallocatorlEpairlEfloatcOlongsPlonggRmUgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRcOallocatorlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCTreeWrapper),sizeof(TMVA::CCTreeWrapper),-1,295936,(char*)NULL,G__setup_memvarTMVAcLcLCCTreeWrapper,G__setup_memfuncTMVAcLcLCCTreeWrapper);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLCCTreeWrappercLcLCCTreeNode);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCCPruner),sizeof(TMVA::CCPruner),-1,295936,(char*)NULL,G__setup_memvarTMVAcLcLCCPruner,G__setup_memfuncTMVAcLcLCCPruner);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_vectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_reverse_iteratorlEvectorlETMVAcLcLDecisionTreeNodemUcOallocatorlETMVAcLcLDecisionTreeNodemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLPruningInfo);
   G__get_linked_tagnum_fwd(&G__G__TMVA3LN_TMVAcLcLIPruneTool);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLCostComplexityPruneTool),sizeof(TMVA::CostComplexityPruneTool),-1,263424,(char*)NULL,G__setup_memvarTMVAcLcLCostComplexityPruneTool,G__setup_memfuncTMVAcLcLCostComplexityPruneTool);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__TMVA3LN_TMVAcLcLSVEvent),sizeof(TMVA::SVEvent),-1,296192,"Event for SVM",G__setup_memvarTMVAcLcLSVEvent,G__setup_memfuncTMVAcLcLSVEvent);
}
extern "C" void G__cpp_setupG__TMVA3(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__TMVA3()");
  G__set_cpp_environmentG__TMVA3();
  G__cpp_setup_tagtableG__TMVA3();

  G__cpp_setup_inheritanceG__TMVA3();

  G__cpp_setup_typetableG__TMVA3();

  G__cpp_setup_memvarG__TMVA3();

  G__cpp_setup_memfuncG__TMVA3();
  G__cpp_setup_globalG__TMVA3();
  G__cpp_setup_funcG__TMVA3();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__TMVA3();
  return;
}
class G__cpp_setup_initG__TMVA3 {
  public:
    G__cpp_setup_initG__TMVA3() { G__add_setup_func("G__TMVA3",(G__incsetup)(&G__cpp_setupG__TMVA3)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__TMVA3() { G__remove_setup_func("G__TMVA3"); }
};
G__cpp_setup_initG__TMVA3 G__cpp_setup_initializerG__TMVA3;

